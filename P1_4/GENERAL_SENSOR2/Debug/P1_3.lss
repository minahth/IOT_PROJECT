
P1_3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000283e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000170  00800060  0000283e  000028d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000076  008001d0  008001d0  00002a42  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002a42  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000538  00000000  00000000  00002a72  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000061d8  00000000  00000000  00002faa  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000169f  00000000  00000000  00009182  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000195b  00000000  00000000  0000a821  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000014ec  00000000  00000000  0000c17c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00002a23  00000000  00000000  0000d668  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000045e2  00000000  00000000  0001008b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000438  00000000  00000000  0001466d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 e8 02 	jmp	0x5d0	; 0x5d0 <__vector_1>
       8:	0c 94 34 03 	jmp	0x668	; 0x668 <__vector_2>
       c:	0c 94 ae 00 	jmp	0x15c	; 0x15c <__vector_3>
      10:	0c 94 d4 00 	jmp	0x1a8	; 0x1a8 <__vector_4>
      14:	0c 94 0e 03 	jmp	0x61c	; 0x61c <__vector_5>
      18:	0c 94 fa 00 	jmp	0x1f4	; 0x1f4 <__vector_6>
      1c:	0c 94 20 01 	jmp	0x240	; 0x240 <__vector_7>
      20:	0c 94 46 01 	jmp	0x28c	; 0x28c <__vector_8>
      24:	0c 94 5a 03 	jmp	0x6b4	; 0x6b4 <__vector_9>
      28:	0c 94 6c 01 	jmp	0x2d8	; 0x2d8 <__vector_10>
      2c:	0c 94 7e 03 	jmp	0x6fc	; 0x6fc <__vector_11>
      30:	0c 94 92 01 	jmp	0x324	; 0x324 <__vector_12>
      34:	0c 94 b8 01 	jmp	0x370	; 0x370 <__vector_13>
      38:	0c 94 de 01 	jmp	0x3bc	; 0x3bc <__vector_14>
      3c:	0c 94 04 02 	jmp	0x408	; 0x408 <__vector_15>
      40:	0c 94 2a 02 	jmp	0x454	; 0x454 <__vector_16>
      44:	0c 94 50 02 	jmp	0x4a0	; 0x4a0 <__vector_17>
      48:	0c 94 76 02 	jmp	0x4ec	; 0x4ec <__vector_18>
      4c:	0c 94 9c 02 	jmp	0x538	; 0x538 <__vector_19>
      50:	0c 94 c2 02 	jmp	0x584	; 0x584 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ee e3       	ldi	r30, 0x3E	; 62
      68:	f8 e2       	ldi	r31, 0x28	; 40
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	a0 3d       	cpi	r26, 0xD0	; 208
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	a0 ed       	ldi	r26, 0xD0	; 208
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a6 34       	cpi	r26, 0x46	; 70
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 a2 03 	call	0x744	; 0x744 <main>
      8a:	0c 94 1d 14 	jmp	0x283a	; 0x283a <_exit>

0000008e <APP_IO_SETUP>:
volatile unsigned char F_PIR_DETECTED=0;


void APP_IO_SETUP()
{
	gpio_inputconfg(PORT_DDR_HEAT,PORT_INMOD_HEAT,FLOAT_mod,HEAT_PIN);
      8e:	22 e0       	ldi	r18, 0x02	; 2
      90:	40 e0       	ldi	r20, 0x00	; 0
      92:	6b e3       	ldi	r22, 0x3B	; 59
      94:	70 e0       	ldi	r23, 0x00	; 0
      96:	8a e3       	ldi	r24, 0x3A	; 58
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <gpio_inputconfg>
	gpio_inputconfg(PORT_DDR_LDR,PORT_INMOD_LDR,FLOAT_mod,LDR_PIN);
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	6b e3       	ldi	r22, 0x3B	; 59
      a4:	70 e0       	ldi	r23, 0x00	; 0
      a6:	8a e3       	ldi	r24, 0x3A	; 58
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <gpio_inputconfg>
	gpio_inputconfg(PORT_DDR_PIR,PORT_INMOD_PIR,FLOAT_mod,PIR_PIN);
      ae:	21 e0       	ldi	r18, 0x01	; 1
      b0:	40 e0       	ldi	r20, 0x00	; 0
      b2:	6b e3       	ldi	r22, 0x3B	; 59
      b4:	70 e0       	ldi	r23, 0x00	; 0
      b6:	8a e3       	ldi	r24, 0x3A	; 58
      b8:	90 e0       	ldi	r25, 0x00	; 0
      ba:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <gpio_inputconfg>
      be:	08 95       	ret

000000c0 <APP_SETUP>:
	
}
void APP_SETUP()
{
      c0:	0f 93       	push	r16
	ADC_INIT(ADC_DIVISION_128,ADC_AVCC,SINGLE_MODE,ADC_INTERRUPT_DISABLE,right);
      c2:	00 e0       	ldi	r16, 0x00	; 0
      c4:	20 e0       	ldi	r18, 0x00	; 0
      c6:	40 e0       	ldi	r20, 0x00	; 0
      c8:	50 e0       	ldi	r21, 0x00	; 0
      ca:	60 e4       	ldi	r22, 0x40	; 64
      cc:	87 e0       	ldi	r24, 0x07	; 7
      ce:	0e 94 88 06 	call	0xd10	; 0xd10 <ADC_INIT>
	ADC_START_READ_INT(LDR_ADC_PIN);/*EGNITS THE FIRST ADC CONVERTION*/
      d2:	80 e0       	ldi	r24, 0x00	; 0
      d4:	0e 94 9e 06 	call	0xd3c	; 0xd3c <ADC_START_READ_INT>
}
      d8:	0f 91       	pop	r16
      da:	08 95       	ret

000000dc <APP_LOOP>:
void APP_LOOP()
{
	if (isbitset(ADC_CTRL_STATUS_ACCESS,4))/*CHECK FOR ADC CONVERTION COMPLETED STATE*/
      dc:	34 9b       	sbis	0x06, 4	; 6
      de:	12 c0       	rjmp	.+36     	; 0x104 <APP_LOOP+0x28>
	{
	/*	USART_SEND_str("X\n");*/
		setbit(ADC_CTRL_STATUS_ACCESS,4);/*CLEAR ADC CONVERTION COMPLETED STATE FLAG*/
      e0:	34 9a       	sbi	0x06, 4	; 6
		
		switch (ADC_APP_SELECTOR)
      e2:	80 91 60 00 	lds	r24, 0x0060
      e6:	81 30       	cpi	r24, 0x01	; 1
      e8:	69 f4       	brne	.+26     	; 0x104 <APP_LOOP+0x28>
		{
			/*case HEAT_SENSOR:MAIN_REGISTERS[5]=(unsigned char)TEMP_MEASURE(ADC_10_BIT);
			ADC_APP_SELECTOR=LDR_SENSOR;
			ADC_START_READ_INT(LDR_ADC_PIN);
			break;*/
			case LDR_SENSOR:MAIN_REGISTERS[6]=(unsigned short)(ADC_10_BIT);
      ea:	84 b1       	in	r24, 0x04	; 4
      ec:	25 b1       	in	r18, 0x05	; 5
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	92 2b       	or	r25, r18
      f2:	90 93 2b 02 	sts	0x022B, r25
      f6:	80 93 2a 02 	sts	0x022A, r24
			ADC_APP_SELECTOR=LDR_SENSOR;
      fa:	81 e0       	ldi	r24, 0x01	; 1
      fc:	80 93 60 00 	sts	0x0060, r24
			ADC_START_READ_INT(LDR_SENSOR);
     100:	0e 94 9e 06 	call	0xd3c	; 0xd3c <ADC_START_READ_INT>
			break;
		}
	}
	
	if (isbitset(*PORT_IN_PIR,PIR_PIN))
     104:	c9 9b       	sbis	0x19, 1	; 25
     106:	13 c0       	rjmp	.+38     	; 0x12e <APP_LOOP+0x52>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     108:	8f e9       	ldi	r24, 0x9F	; 159
     10a:	9f e0       	ldi	r25, 0x0F	; 15
     10c:	01 97       	sbiw	r24, 0x01	; 1
     10e:	f1 f7       	brne	.-4      	; 0x10c <APP_LOOP+0x30>
     110:	00 c0       	rjmp	.+0      	; 0x112 <APP_LOOP+0x36>
     112:	00 00       	nop
	{
		_delay_ms(1);
		if (isbitset(*PORT_IN_PIR,PIR_PIN))
     114:	c9 9b       	sbis	0x19, 1	; 25
     116:	0b c0       	rjmp	.+22     	; 0x12e <APP_LOOP+0x52>
		{
			T_PIR_COUNTER=0;
     118:	10 92 d1 01 	sts	0x01D1, r1
			F_PIR_DETECTED=1;
     11c:	81 e0       	ldi	r24, 0x01	; 1
     11e:	80 93 d0 01 	sts	0x01D0, r24
			MAIN_REGISTERS[7]=1;
     122:	81 e0       	ldi	r24, 0x01	; 1
     124:	90 e0       	ldi	r25, 0x00	; 0
     126:	90 93 2d 02 	sts	0x022D, r25
     12a:	80 93 2c 02 	sts	0x022C, r24
     12e:	08 95       	ret

00000130 <APP_TIMER1>:
	
}
void APP_TIMER1()
{
	
	if (F_PIR_DETECTED)
     130:	80 91 d0 01 	lds	r24, 0x01D0
     134:	88 23       	and	r24, r24
     136:	89 f0       	breq	.+34     	; 0x15a <APP_TIMER1+0x2a>
	{
		T_PIR_COUNTER++;
     138:	80 91 d1 01 	lds	r24, 0x01D1
     13c:	8f 5f       	subi	r24, 0xFF	; 255
     13e:	80 93 d1 01 	sts	0x01D1, r24
		if(T_PIR_COUNTER==T_PIR_COUNTER_MAX)
     142:	80 91 d1 01 	lds	r24, 0x01D1
     146:	85 30       	cpi	r24, 0x05	; 5
     148:	41 f4       	brne	.+16     	; 0x15a <APP_TIMER1+0x2a>
		{
			F_PIR_DETECTED=0;
     14a:	10 92 d0 01 	sts	0x01D0, r1
			T_PIR_COUNTER=0;
     14e:	10 92 d1 01 	sts	0x01D1, r1
			MAIN_REGISTERS[7]=0;
     152:	10 92 2d 02 	sts	0x022D, r1
     156:	10 92 2c 02 	sts	0x022C, r1
     15a:	08 95       	ret

0000015c <__vector_3>:

/*test*/
volatile unsigned short z=0;
/*check*/
ISR(INT2_vect)
{
     15c:	1f 92       	push	r1
     15e:	0f 92       	push	r0
     160:	0f b6       	in	r0, 0x3f	; 63
     162:	0f 92       	push	r0
     164:	11 24       	eor	r1, r1
     166:	2f 93       	push	r18
     168:	3f 93       	push	r19
     16a:	4f 93       	push	r20
     16c:	5f 93       	push	r21
     16e:	6f 93       	push	r22
     170:	7f 93       	push	r23
     172:	8f 93       	push	r24
     174:	9f 93       	push	r25
     176:	af 93       	push	r26
     178:	bf 93       	push	r27
     17a:	ef 93       	push	r30
     17c:	ff 93       	push	r31
	USART_SEND_str("BADISR 1\n");
     17e:	81 e7       	ldi	r24, 0x71	; 113
     180:	90 e0       	ldi	r25, 0x00	; 0
     182:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	
}
     186:	ff 91       	pop	r31
     188:	ef 91       	pop	r30
     18a:	bf 91       	pop	r27
     18c:	af 91       	pop	r26
     18e:	9f 91       	pop	r25
     190:	8f 91       	pop	r24
     192:	7f 91       	pop	r23
     194:	6f 91       	pop	r22
     196:	5f 91       	pop	r21
     198:	4f 91       	pop	r20
     19a:	3f 91       	pop	r19
     19c:	2f 91       	pop	r18
     19e:	0f 90       	pop	r0
     1a0:	0f be       	out	0x3f, r0	; 63
     1a2:	0f 90       	pop	r0
     1a4:	1f 90       	pop	r1
     1a6:	18 95       	reti

000001a8 <__vector_4>:
ISR(TIMER2_COMP_vect)
{
     1a8:	1f 92       	push	r1
     1aa:	0f 92       	push	r0
     1ac:	0f b6       	in	r0, 0x3f	; 63
     1ae:	0f 92       	push	r0
     1b0:	11 24       	eor	r1, r1
     1b2:	2f 93       	push	r18
     1b4:	3f 93       	push	r19
     1b6:	4f 93       	push	r20
     1b8:	5f 93       	push	r21
     1ba:	6f 93       	push	r22
     1bc:	7f 93       	push	r23
     1be:	8f 93       	push	r24
     1c0:	9f 93       	push	r25
     1c2:	af 93       	push	r26
     1c4:	bf 93       	push	r27
     1c6:	ef 93       	push	r30
     1c8:	ff 93       	push	r31
		USART_SEND_str("BADISR 2\n");
     1ca:	8b e7       	ldi	r24, 0x7B	; 123
     1cc:	90 e0       	ldi	r25, 0x00	; 0
     1ce:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     1d2:	ff 91       	pop	r31
     1d4:	ef 91       	pop	r30
     1d6:	bf 91       	pop	r27
     1d8:	af 91       	pop	r26
     1da:	9f 91       	pop	r25
     1dc:	8f 91       	pop	r24
     1de:	7f 91       	pop	r23
     1e0:	6f 91       	pop	r22
     1e2:	5f 91       	pop	r21
     1e4:	4f 91       	pop	r20
     1e6:	3f 91       	pop	r19
     1e8:	2f 91       	pop	r18
     1ea:	0f 90       	pop	r0
     1ec:	0f be       	out	0x3f, r0	; 63
     1ee:	0f 90       	pop	r0
     1f0:	1f 90       	pop	r1
     1f2:	18 95       	reti

000001f4 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
     1f4:	1f 92       	push	r1
     1f6:	0f 92       	push	r0
     1f8:	0f b6       	in	r0, 0x3f	; 63
     1fa:	0f 92       	push	r0
     1fc:	11 24       	eor	r1, r1
     1fe:	2f 93       	push	r18
     200:	3f 93       	push	r19
     202:	4f 93       	push	r20
     204:	5f 93       	push	r21
     206:	6f 93       	push	r22
     208:	7f 93       	push	r23
     20a:	8f 93       	push	r24
     20c:	9f 93       	push	r25
     20e:	af 93       	push	r26
     210:	bf 93       	push	r27
     212:	ef 93       	push	r30
     214:	ff 93       	push	r31
		USART_SEND_str("BADISR 3\n");
     216:	85 e8       	ldi	r24, 0x85	; 133
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     21e:	ff 91       	pop	r31
     220:	ef 91       	pop	r30
     222:	bf 91       	pop	r27
     224:	af 91       	pop	r26
     226:	9f 91       	pop	r25
     228:	8f 91       	pop	r24
     22a:	7f 91       	pop	r23
     22c:	6f 91       	pop	r22
     22e:	5f 91       	pop	r21
     230:	4f 91       	pop	r20
     232:	3f 91       	pop	r19
     234:	2f 91       	pop	r18
     236:	0f 90       	pop	r0
     238:	0f be       	out	0x3f, r0	; 63
     23a:	0f 90       	pop	r0
     23c:	1f 90       	pop	r1
     23e:	18 95       	reti

00000240 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     240:	1f 92       	push	r1
     242:	0f 92       	push	r0
     244:	0f b6       	in	r0, 0x3f	; 63
     246:	0f 92       	push	r0
     248:	11 24       	eor	r1, r1
     24a:	2f 93       	push	r18
     24c:	3f 93       	push	r19
     24e:	4f 93       	push	r20
     250:	5f 93       	push	r21
     252:	6f 93       	push	r22
     254:	7f 93       	push	r23
     256:	8f 93       	push	r24
     258:	9f 93       	push	r25
     25a:	af 93       	push	r26
     25c:	bf 93       	push	r27
     25e:	ef 93       	push	r30
     260:	ff 93       	push	r31
	USART_SEND_str("BADISR 4\n");
     262:	8f e8       	ldi	r24, 0x8F	; 143
     264:	90 e0       	ldi	r25, 0x00	; 0
     266:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     26a:	ff 91       	pop	r31
     26c:	ef 91       	pop	r30
     26e:	bf 91       	pop	r27
     270:	af 91       	pop	r26
     272:	9f 91       	pop	r25
     274:	8f 91       	pop	r24
     276:	7f 91       	pop	r23
     278:	6f 91       	pop	r22
     27a:	5f 91       	pop	r21
     27c:	4f 91       	pop	r20
     27e:	3f 91       	pop	r19
     280:	2f 91       	pop	r18
     282:	0f 90       	pop	r0
     284:	0f be       	out	0x3f, r0	; 63
     286:	0f 90       	pop	r0
     288:	1f 90       	pop	r1
     28a:	18 95       	reti

0000028c <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
     28c:	1f 92       	push	r1
     28e:	0f 92       	push	r0
     290:	0f b6       	in	r0, 0x3f	; 63
     292:	0f 92       	push	r0
     294:	11 24       	eor	r1, r1
     296:	2f 93       	push	r18
     298:	3f 93       	push	r19
     29a:	4f 93       	push	r20
     29c:	5f 93       	push	r21
     29e:	6f 93       	push	r22
     2a0:	7f 93       	push	r23
     2a2:	8f 93       	push	r24
     2a4:	9f 93       	push	r25
     2a6:	af 93       	push	r26
     2a8:	bf 93       	push	r27
     2aa:	ef 93       	push	r30
     2ac:	ff 93       	push	r31
		USART_SEND_str("BADISR 5\n");
     2ae:	89 e9       	ldi	r24, 0x99	; 153
     2b0:	90 e0       	ldi	r25, 0x00	; 0
     2b2:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     2b6:	ff 91       	pop	r31
     2b8:	ef 91       	pop	r30
     2ba:	bf 91       	pop	r27
     2bc:	af 91       	pop	r26
     2be:	9f 91       	pop	r25
     2c0:	8f 91       	pop	r24
     2c2:	7f 91       	pop	r23
     2c4:	6f 91       	pop	r22
     2c6:	5f 91       	pop	r21
     2c8:	4f 91       	pop	r20
     2ca:	3f 91       	pop	r19
     2cc:	2f 91       	pop	r18
     2ce:	0f 90       	pop	r0
     2d0:	0f be       	out	0x3f, r0	; 63
     2d2:	0f 90       	pop	r0
     2d4:	1f 90       	pop	r1
     2d6:	18 95       	reti

000002d8 <__vector_10>:
ISR(TIMER0_COMP_vect)
{
     2d8:	1f 92       	push	r1
     2da:	0f 92       	push	r0
     2dc:	0f b6       	in	r0, 0x3f	; 63
     2de:	0f 92       	push	r0
     2e0:	11 24       	eor	r1, r1
     2e2:	2f 93       	push	r18
     2e4:	3f 93       	push	r19
     2e6:	4f 93       	push	r20
     2e8:	5f 93       	push	r21
     2ea:	6f 93       	push	r22
     2ec:	7f 93       	push	r23
     2ee:	8f 93       	push	r24
     2f0:	9f 93       	push	r25
     2f2:	af 93       	push	r26
     2f4:	bf 93       	push	r27
     2f6:	ef 93       	push	r30
     2f8:	ff 93       	push	r31
		USART_SEND_str("BADISR 6\n");
     2fa:	83 ea       	ldi	r24, 0xA3	; 163
     2fc:	90 e0       	ldi	r25, 0x00	; 0
     2fe:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     302:	ff 91       	pop	r31
     304:	ef 91       	pop	r30
     306:	bf 91       	pop	r27
     308:	af 91       	pop	r26
     30a:	9f 91       	pop	r25
     30c:	8f 91       	pop	r24
     30e:	7f 91       	pop	r23
     310:	6f 91       	pop	r22
     312:	5f 91       	pop	r21
     314:	4f 91       	pop	r20
     316:	3f 91       	pop	r19
     318:	2f 91       	pop	r18
     31a:	0f 90       	pop	r0
     31c:	0f be       	out	0x3f, r0	; 63
     31e:	0f 90       	pop	r0
     320:	1f 90       	pop	r1
     322:	18 95       	reti

00000324 <__vector_12>:
ISR(SPI_STC_vect)
{
     324:	1f 92       	push	r1
     326:	0f 92       	push	r0
     328:	0f b6       	in	r0, 0x3f	; 63
     32a:	0f 92       	push	r0
     32c:	11 24       	eor	r1, r1
     32e:	2f 93       	push	r18
     330:	3f 93       	push	r19
     332:	4f 93       	push	r20
     334:	5f 93       	push	r21
     336:	6f 93       	push	r22
     338:	7f 93       	push	r23
     33a:	8f 93       	push	r24
     33c:	9f 93       	push	r25
     33e:	af 93       	push	r26
     340:	bf 93       	push	r27
     342:	ef 93       	push	r30
     344:	ff 93       	push	r31
	USART_SEND_str("BADISR 7\n");
     346:	8d ea       	ldi	r24, 0xAD	; 173
     348:	90 e0       	ldi	r25, 0x00	; 0
     34a:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     34e:	ff 91       	pop	r31
     350:	ef 91       	pop	r30
     352:	bf 91       	pop	r27
     354:	af 91       	pop	r26
     356:	9f 91       	pop	r25
     358:	8f 91       	pop	r24
     35a:	7f 91       	pop	r23
     35c:	6f 91       	pop	r22
     35e:	5f 91       	pop	r21
     360:	4f 91       	pop	r20
     362:	3f 91       	pop	r19
     364:	2f 91       	pop	r18
     366:	0f 90       	pop	r0
     368:	0f be       	out	0x3f, r0	; 63
     36a:	0f 90       	pop	r0
     36c:	1f 90       	pop	r1
     36e:	18 95       	reti

00000370 <__vector_13>:
ISR(USART_RXC_vect)
{
     370:	1f 92       	push	r1
     372:	0f 92       	push	r0
     374:	0f b6       	in	r0, 0x3f	; 63
     376:	0f 92       	push	r0
     378:	11 24       	eor	r1, r1
     37a:	2f 93       	push	r18
     37c:	3f 93       	push	r19
     37e:	4f 93       	push	r20
     380:	5f 93       	push	r21
     382:	6f 93       	push	r22
     384:	7f 93       	push	r23
     386:	8f 93       	push	r24
     388:	9f 93       	push	r25
     38a:	af 93       	push	r26
     38c:	bf 93       	push	r27
     38e:	ef 93       	push	r30
     390:	ff 93       	push	r31
		USART_SEND_str("BADISR 8\n");
     392:	87 eb       	ldi	r24, 0xB7	; 183
     394:	90 e0       	ldi	r25, 0x00	; 0
     396:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     39a:	ff 91       	pop	r31
     39c:	ef 91       	pop	r30
     39e:	bf 91       	pop	r27
     3a0:	af 91       	pop	r26
     3a2:	9f 91       	pop	r25
     3a4:	8f 91       	pop	r24
     3a6:	7f 91       	pop	r23
     3a8:	6f 91       	pop	r22
     3aa:	5f 91       	pop	r21
     3ac:	4f 91       	pop	r20
     3ae:	3f 91       	pop	r19
     3b0:	2f 91       	pop	r18
     3b2:	0f 90       	pop	r0
     3b4:	0f be       	out	0x3f, r0	; 63
     3b6:	0f 90       	pop	r0
     3b8:	1f 90       	pop	r1
     3ba:	18 95       	reti

000003bc <__vector_14>:
ISR(USART_UDRE_vect)
{
     3bc:	1f 92       	push	r1
     3be:	0f 92       	push	r0
     3c0:	0f b6       	in	r0, 0x3f	; 63
     3c2:	0f 92       	push	r0
     3c4:	11 24       	eor	r1, r1
     3c6:	2f 93       	push	r18
     3c8:	3f 93       	push	r19
     3ca:	4f 93       	push	r20
     3cc:	5f 93       	push	r21
     3ce:	6f 93       	push	r22
     3d0:	7f 93       	push	r23
     3d2:	8f 93       	push	r24
     3d4:	9f 93       	push	r25
     3d6:	af 93       	push	r26
     3d8:	bf 93       	push	r27
     3da:	ef 93       	push	r30
     3dc:	ff 93       	push	r31
		USART_SEND_str("BADISR 9\n");
     3de:	81 ec       	ldi	r24, 0xC1	; 193
     3e0:	90 e0       	ldi	r25, 0x00	; 0
     3e2:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     3e6:	ff 91       	pop	r31
     3e8:	ef 91       	pop	r30
     3ea:	bf 91       	pop	r27
     3ec:	af 91       	pop	r26
     3ee:	9f 91       	pop	r25
     3f0:	8f 91       	pop	r24
     3f2:	7f 91       	pop	r23
     3f4:	6f 91       	pop	r22
     3f6:	5f 91       	pop	r21
     3f8:	4f 91       	pop	r20
     3fa:	3f 91       	pop	r19
     3fc:	2f 91       	pop	r18
     3fe:	0f 90       	pop	r0
     400:	0f be       	out	0x3f, r0	; 63
     402:	0f 90       	pop	r0
     404:	1f 90       	pop	r1
     406:	18 95       	reti

00000408 <__vector_15>:
ISR(USART_TXC_vect)
{
     408:	1f 92       	push	r1
     40a:	0f 92       	push	r0
     40c:	0f b6       	in	r0, 0x3f	; 63
     40e:	0f 92       	push	r0
     410:	11 24       	eor	r1, r1
     412:	2f 93       	push	r18
     414:	3f 93       	push	r19
     416:	4f 93       	push	r20
     418:	5f 93       	push	r21
     41a:	6f 93       	push	r22
     41c:	7f 93       	push	r23
     41e:	8f 93       	push	r24
     420:	9f 93       	push	r25
     422:	af 93       	push	r26
     424:	bf 93       	push	r27
     426:	ef 93       	push	r30
     428:	ff 93       	push	r31
		USART_SEND_str("BADISR 10\n");
     42a:	8b ec       	ldi	r24, 0xCB	; 203
     42c:	90 e0       	ldi	r25, 0x00	; 0
     42e:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     432:	ff 91       	pop	r31
     434:	ef 91       	pop	r30
     436:	bf 91       	pop	r27
     438:	af 91       	pop	r26
     43a:	9f 91       	pop	r25
     43c:	8f 91       	pop	r24
     43e:	7f 91       	pop	r23
     440:	6f 91       	pop	r22
     442:	5f 91       	pop	r21
     444:	4f 91       	pop	r20
     446:	3f 91       	pop	r19
     448:	2f 91       	pop	r18
     44a:	0f 90       	pop	r0
     44c:	0f be       	out	0x3f, r0	; 63
     44e:	0f 90       	pop	r0
     450:	1f 90       	pop	r1
     452:	18 95       	reti

00000454 <__vector_16>:
ISR(ADC_vect)
{
     454:	1f 92       	push	r1
     456:	0f 92       	push	r0
     458:	0f b6       	in	r0, 0x3f	; 63
     45a:	0f 92       	push	r0
     45c:	11 24       	eor	r1, r1
     45e:	2f 93       	push	r18
     460:	3f 93       	push	r19
     462:	4f 93       	push	r20
     464:	5f 93       	push	r21
     466:	6f 93       	push	r22
     468:	7f 93       	push	r23
     46a:	8f 93       	push	r24
     46c:	9f 93       	push	r25
     46e:	af 93       	push	r26
     470:	bf 93       	push	r27
     472:	ef 93       	push	r30
     474:	ff 93       	push	r31
		USART_SEND_str("BADISR 11\n");
     476:	86 ed       	ldi	r24, 0xD6	; 214
     478:	90 e0       	ldi	r25, 0x00	; 0
     47a:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     47e:	ff 91       	pop	r31
     480:	ef 91       	pop	r30
     482:	bf 91       	pop	r27
     484:	af 91       	pop	r26
     486:	9f 91       	pop	r25
     488:	8f 91       	pop	r24
     48a:	7f 91       	pop	r23
     48c:	6f 91       	pop	r22
     48e:	5f 91       	pop	r21
     490:	4f 91       	pop	r20
     492:	3f 91       	pop	r19
     494:	2f 91       	pop	r18
     496:	0f 90       	pop	r0
     498:	0f be       	out	0x3f, r0	; 63
     49a:	0f 90       	pop	r0
     49c:	1f 90       	pop	r1
     49e:	18 95       	reti

000004a0 <__vector_17>:
ISR(EE_RDY_vect)
{
     4a0:	1f 92       	push	r1
     4a2:	0f 92       	push	r0
     4a4:	0f b6       	in	r0, 0x3f	; 63
     4a6:	0f 92       	push	r0
     4a8:	11 24       	eor	r1, r1
     4aa:	2f 93       	push	r18
     4ac:	3f 93       	push	r19
     4ae:	4f 93       	push	r20
     4b0:	5f 93       	push	r21
     4b2:	6f 93       	push	r22
     4b4:	7f 93       	push	r23
     4b6:	8f 93       	push	r24
     4b8:	9f 93       	push	r25
     4ba:	af 93       	push	r26
     4bc:	bf 93       	push	r27
     4be:	ef 93       	push	r30
     4c0:	ff 93       	push	r31
		USART_SEND_str("BADISR 12\n");
     4c2:	81 ee       	ldi	r24, 0xE1	; 225
     4c4:	90 e0       	ldi	r25, 0x00	; 0
     4c6:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     4ca:	ff 91       	pop	r31
     4cc:	ef 91       	pop	r30
     4ce:	bf 91       	pop	r27
     4d0:	af 91       	pop	r26
     4d2:	9f 91       	pop	r25
     4d4:	8f 91       	pop	r24
     4d6:	7f 91       	pop	r23
     4d8:	6f 91       	pop	r22
     4da:	5f 91       	pop	r21
     4dc:	4f 91       	pop	r20
     4de:	3f 91       	pop	r19
     4e0:	2f 91       	pop	r18
     4e2:	0f 90       	pop	r0
     4e4:	0f be       	out	0x3f, r0	; 63
     4e6:	0f 90       	pop	r0
     4e8:	1f 90       	pop	r1
     4ea:	18 95       	reti

000004ec <__vector_18>:
ISR(ANA_COMP_vect)
{
     4ec:	1f 92       	push	r1
     4ee:	0f 92       	push	r0
     4f0:	0f b6       	in	r0, 0x3f	; 63
     4f2:	0f 92       	push	r0
     4f4:	11 24       	eor	r1, r1
     4f6:	2f 93       	push	r18
     4f8:	3f 93       	push	r19
     4fa:	4f 93       	push	r20
     4fc:	5f 93       	push	r21
     4fe:	6f 93       	push	r22
     500:	7f 93       	push	r23
     502:	8f 93       	push	r24
     504:	9f 93       	push	r25
     506:	af 93       	push	r26
     508:	bf 93       	push	r27
     50a:	ef 93       	push	r30
     50c:	ff 93       	push	r31
		USART_SEND_str("BADISR 13\n");
     50e:	8c ee       	ldi	r24, 0xEC	; 236
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     516:	ff 91       	pop	r31
     518:	ef 91       	pop	r30
     51a:	bf 91       	pop	r27
     51c:	af 91       	pop	r26
     51e:	9f 91       	pop	r25
     520:	8f 91       	pop	r24
     522:	7f 91       	pop	r23
     524:	6f 91       	pop	r22
     526:	5f 91       	pop	r21
     528:	4f 91       	pop	r20
     52a:	3f 91       	pop	r19
     52c:	2f 91       	pop	r18
     52e:	0f 90       	pop	r0
     530:	0f be       	out	0x3f, r0	; 63
     532:	0f 90       	pop	r0
     534:	1f 90       	pop	r1
     536:	18 95       	reti

00000538 <__vector_19>:
ISR(TWI_vect)
{
     538:	1f 92       	push	r1
     53a:	0f 92       	push	r0
     53c:	0f b6       	in	r0, 0x3f	; 63
     53e:	0f 92       	push	r0
     540:	11 24       	eor	r1, r1
     542:	2f 93       	push	r18
     544:	3f 93       	push	r19
     546:	4f 93       	push	r20
     548:	5f 93       	push	r21
     54a:	6f 93       	push	r22
     54c:	7f 93       	push	r23
     54e:	8f 93       	push	r24
     550:	9f 93       	push	r25
     552:	af 93       	push	r26
     554:	bf 93       	push	r27
     556:	ef 93       	push	r30
     558:	ff 93       	push	r31
		USART_SEND_str("BADISR 14\n");
     55a:	87 ef       	ldi	r24, 0xF7	; 247
     55c:	90 e0       	ldi	r25, 0x00	; 0
     55e:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     562:	ff 91       	pop	r31
     564:	ef 91       	pop	r30
     566:	bf 91       	pop	r27
     568:	af 91       	pop	r26
     56a:	9f 91       	pop	r25
     56c:	8f 91       	pop	r24
     56e:	7f 91       	pop	r23
     570:	6f 91       	pop	r22
     572:	5f 91       	pop	r21
     574:	4f 91       	pop	r20
     576:	3f 91       	pop	r19
     578:	2f 91       	pop	r18
     57a:	0f 90       	pop	r0
     57c:	0f be       	out	0x3f, r0	; 63
     57e:	0f 90       	pop	r0
     580:	1f 90       	pop	r1
     582:	18 95       	reti

00000584 <__vector_20>:

ISR(SPM_RDY_vect)
{
     584:	1f 92       	push	r1
     586:	0f 92       	push	r0
     588:	0f b6       	in	r0, 0x3f	; 63
     58a:	0f 92       	push	r0
     58c:	11 24       	eor	r1, r1
     58e:	2f 93       	push	r18
     590:	3f 93       	push	r19
     592:	4f 93       	push	r20
     594:	5f 93       	push	r21
     596:	6f 93       	push	r22
     598:	7f 93       	push	r23
     59a:	8f 93       	push	r24
     59c:	9f 93       	push	r25
     59e:	af 93       	push	r26
     5a0:	bf 93       	push	r27
     5a2:	ef 93       	push	r30
     5a4:	ff 93       	push	r31
	USART_SEND_str("BADISR 15\n");
     5a6:	82 e0       	ldi	r24, 0x02	; 2
     5a8:	91 e0       	ldi	r25, 0x01	; 1
     5aa:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     5ae:	ff 91       	pop	r31
     5b0:	ef 91       	pop	r30
     5b2:	bf 91       	pop	r27
     5b4:	af 91       	pop	r26
     5b6:	9f 91       	pop	r25
     5b8:	8f 91       	pop	r24
     5ba:	7f 91       	pop	r23
     5bc:	6f 91       	pop	r22
     5be:	5f 91       	pop	r21
     5c0:	4f 91       	pop	r20
     5c2:	3f 91       	pop	r19
     5c4:	2f 91       	pop	r18
     5c6:	0f 90       	pop	r0
     5c8:	0f be       	out	0x3f, r0	; 63
     5ca:	0f 90       	pop	r0
     5cc:	1f 90       	pop	r1
     5ce:	18 95       	reti

000005d0 <__vector_1>:



ISR(INT0_vect)
{
     5d0:	1f 92       	push	r1
     5d2:	0f 92       	push	r0
     5d4:	0f b6       	in	r0, 0x3f	; 63
     5d6:	0f 92       	push	r0
     5d8:	11 24       	eor	r1, r1
     5da:	2f 93       	push	r18
     5dc:	3f 93       	push	r19
     5de:	4f 93       	push	r20
     5e0:	5f 93       	push	r21
     5e2:	6f 93       	push	r22
     5e4:	7f 93       	push	r23
     5e6:	8f 93       	push	r24
     5e8:	9f 93       	push	r25
     5ea:	af 93       	push	r26
     5ec:	bf 93       	push	r27
     5ee:	ef 93       	push	r30
     5f0:	ff 93       	push	r31
		USART_SEND_str("BADISR 16\n");
     5f2:	8d e0       	ldi	r24, 0x0D	; 13
     5f4:	91 e0       	ldi	r25, 0x01	; 1
     5f6:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     5fa:	ff 91       	pop	r31
     5fc:	ef 91       	pop	r30
     5fe:	bf 91       	pop	r27
     600:	af 91       	pop	r26
     602:	9f 91       	pop	r25
     604:	8f 91       	pop	r24
     606:	7f 91       	pop	r23
     608:	6f 91       	pop	r22
     60a:	5f 91       	pop	r21
     60c:	4f 91       	pop	r20
     60e:	3f 91       	pop	r19
     610:	2f 91       	pop	r18
     612:	0f 90       	pop	r0
     614:	0f be       	out	0x3f, r0	; 63
     616:	0f 90       	pop	r0
     618:	1f 90       	pop	r1
     61a:	18 95       	reti

0000061c <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     61c:	1f 92       	push	r1
     61e:	0f 92       	push	r0
     620:	0f b6       	in	r0, 0x3f	; 63
     622:	0f 92       	push	r0
     624:	11 24       	eor	r1, r1
     626:	2f 93       	push	r18
     628:	3f 93       	push	r19
     62a:	4f 93       	push	r20
     62c:	5f 93       	push	r21
     62e:	6f 93       	push	r22
     630:	7f 93       	push	r23
     632:	8f 93       	push	r24
     634:	9f 93       	push	r25
     636:	af 93       	push	r26
     638:	bf 93       	push	r27
     63a:	ef 93       	push	r30
     63c:	ff 93       	push	r31
		USART_SEND_str("BADISR 17\n");
     63e:	88 e1       	ldi	r24, 0x18	; 24
     640:	91 e0       	ldi	r25, 0x01	; 1
     642:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     646:	ff 91       	pop	r31
     648:	ef 91       	pop	r30
     64a:	bf 91       	pop	r27
     64c:	af 91       	pop	r26
     64e:	9f 91       	pop	r25
     650:	8f 91       	pop	r24
     652:	7f 91       	pop	r23
     654:	6f 91       	pop	r22
     656:	5f 91       	pop	r21
     658:	4f 91       	pop	r20
     65a:	3f 91       	pop	r19
     65c:	2f 91       	pop	r18
     65e:	0f 90       	pop	r0
     660:	0f be       	out	0x3f, r0	; 63
     662:	0f 90       	pop	r0
     664:	1f 90       	pop	r1
     666:	18 95       	reti

00000668 <__vector_2>:
ISR(INT1_vect)
{
     668:	1f 92       	push	r1
     66a:	0f 92       	push	r0
     66c:	0f b6       	in	r0, 0x3f	; 63
     66e:	0f 92       	push	r0
     670:	11 24       	eor	r1, r1
     672:	2f 93       	push	r18
     674:	3f 93       	push	r19
     676:	4f 93       	push	r20
     678:	5f 93       	push	r21
     67a:	6f 93       	push	r22
     67c:	7f 93       	push	r23
     67e:	8f 93       	push	r24
     680:	9f 93       	push	r25
     682:	af 93       	push	r26
     684:	bf 93       	push	r27
     686:	ef 93       	push	r30
     688:	ff 93       	push	r31
		USART_SEND_str("BADISR 18\n");
     68a:	83 e2       	ldi	r24, 0x23	; 35
     68c:	91 e0       	ldi	r25, 0x01	; 1
     68e:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
}
     692:	ff 91       	pop	r31
     694:	ef 91       	pop	r30
     696:	bf 91       	pop	r27
     698:	af 91       	pop	r26
     69a:	9f 91       	pop	r25
     69c:	8f 91       	pop	r24
     69e:	7f 91       	pop	r23
     6a0:	6f 91       	pop	r22
     6a2:	5f 91       	pop	r21
     6a4:	4f 91       	pop	r20
     6a6:	3f 91       	pop	r19
     6a8:	2f 91       	pop	r18
     6aa:	0f 90       	pop	r0
     6ac:	0f be       	out	0x3f, r0	; 63
     6ae:	0f 90       	pop	r0
     6b0:	1f 90       	pop	r1
     6b2:	18 95       	reti

000006b4 <__vector_9>:

/*test*/


ISR(TIMER1_OVF_vect)
{
     6b4:	1f 92       	push	r1
     6b6:	0f 92       	push	r0
     6b8:	0f b6       	in	r0, 0x3f	; 63
     6ba:	0f 92       	push	r0
     6bc:	11 24       	eor	r1, r1
     6be:	2f 93       	push	r18
     6c0:	3f 93       	push	r19
     6c2:	4f 93       	push	r20
     6c4:	5f 93       	push	r21
     6c6:	6f 93       	push	r22
     6c8:	7f 93       	push	r23
     6ca:	8f 93       	push	r24
     6cc:	9f 93       	push	r25
     6ce:	af 93       	push	r26
     6d0:	bf 93       	push	r27
     6d2:	ef 93       	push	r30
     6d4:	ff 93       	push	r31
	TIMER1_INT_EVENT();
     6d6:	0e 94 62 11 	call	0x22c4	; 0x22c4 <TIMER1_INT_EVENT>
}
     6da:	ff 91       	pop	r31
     6dc:	ef 91       	pop	r30
     6de:	bf 91       	pop	r27
     6e0:	af 91       	pop	r26
     6e2:	9f 91       	pop	r25
     6e4:	8f 91       	pop	r24
     6e6:	7f 91       	pop	r23
     6e8:	6f 91       	pop	r22
     6ea:	5f 91       	pop	r21
     6ec:	4f 91       	pop	r20
     6ee:	3f 91       	pop	r19
     6f0:	2f 91       	pop	r18
     6f2:	0f 90       	pop	r0
     6f4:	0f be       	out	0x3f, r0	; 63
     6f6:	0f 90       	pop	r0
     6f8:	1f 90       	pop	r1
     6fa:	18 95       	reti

000006fc <__vector_11>:
ISR(TIMER0_OVF_vect)
{
     6fc:	1f 92       	push	r1
     6fe:	0f 92       	push	r0
     700:	0f b6       	in	r0, 0x3f	; 63
     702:	0f 92       	push	r0
     704:	11 24       	eor	r1, r1
     706:	2f 93       	push	r18
     708:	3f 93       	push	r19
     70a:	4f 93       	push	r20
     70c:	5f 93       	push	r21
     70e:	6f 93       	push	r22
     710:	7f 93       	push	r23
     712:	8f 93       	push	r24
     714:	9f 93       	push	r25
     716:	af 93       	push	r26
     718:	bf 93       	push	r27
     71a:	ef 93       	push	r30
     71c:	ff 93       	push	r31
	TIMER0_INT_EVENT();
     71e:	0e 94 61 11 	call	0x22c2	; 0x22c2 <TIMER0_INT_EVENT>
}
     722:	ff 91       	pop	r31
     724:	ef 91       	pop	r30
     726:	bf 91       	pop	r27
     728:	af 91       	pop	r26
     72a:	9f 91       	pop	r25
     72c:	8f 91       	pop	r24
     72e:	7f 91       	pop	r23
     730:	6f 91       	pop	r22
     732:	5f 91       	pop	r21
     734:	4f 91       	pop	r20
     736:	3f 91       	pop	r19
     738:	2f 91       	pop	r18
     73a:	0f 90       	pop	r0
     73c:	0f be       	out	0x3f, r0	; 63
     73e:	0f 90       	pop	r0
     740:	1f 90       	pop	r1
     742:	18 95       	reti

00000744 <main>:
{
	USART_SEND_str("BADISR\n");
}
int main(void)
{
   SETUP();
     744:	0e 94 b9 03 	call	0x772	; 0x772 <SETUP>
   while(1)
   {
	   LOOP();
     748:	0e 94 a7 03 	call	0x74e	; 0x74e <LOOP>
     74c:	fd cf       	rjmp	.-6      	; 0x748 <main+0x4>

0000074e <LOOP>:
}

void LOOP()
{
	
	 SENSOR_MANAGE_LOOP();
     74e:	0e 94 ec 0d 	call	0x1bd8	; 0x1bd8 <SENSOR_MANAGE_LOOP>
	 APP_LOOP();
     752:	0e 94 6e 00 	call	0xdc	; 0xdc <APP_LOOP>
	 /*USART_SEND_str("loop\n");*/
	 toggybit(*PORT_OUT_READY_LED,READY_LED_PIN);
     756:	92 b3       	in	r25, 0x12	; 18
     758:	80 e2       	ldi	r24, 0x20	; 32
     75a:	89 27       	eor	r24, r25
     75c:	82 bb       	out	0x12, r24	; 18
     75e:	08 95       	ret

00000760 <OTHER_SETUPS_IO>:
}

void OTHER_SETUPS_IO()
{
	gpio_outputconfg(PORT_DDR_READY_LED,PORT_OUTMOD_READY_LED,OUTPASS,READY_LED_PIN);
     760:	25 e0       	ldi	r18, 0x05	; 5
     762:	40 e0       	ldi	r20, 0x00	; 0
     764:	60 e3       	ldi	r22, 0x30	; 48
     766:	70 e0       	ldi	r23, 0x00	; 0
     768:	81 e3       	ldi	r24, 0x31	; 49
     76a:	90 e0       	ldi	r25, 0x00	; 0
     76c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
     770:	08 95       	ret

00000772 <SETUP>:
 * Created: 05-Apr-21 4:07:18 PM
 *  Author: Mina Medhat
 */ 
#include "MAIN_DRIVER.h"
void SETUP()
{
     772:	0f 93       	push	r16
     774:	2f ef       	ldi	r18, 0xFF	; 255
     776:	83 ed       	ldi	r24, 0xD3	; 211
     778:	90 e3       	ldi	r25, 0x30	; 48
     77a:	21 50       	subi	r18, 0x01	; 1
     77c:	80 40       	sbci	r24, 0x00	; 0
     77e:	90 40       	sbci	r25, 0x00	; 0
     780:	e1 f7       	brne	.-8      	; 0x77a <SETUP+0x8>
     782:	00 c0       	rjmp	.+0      	; 0x784 <SETUP+0x12>
     784:	00 00       	nop
	_delay_ms(1000);
	SPI_INT(SPI_MASTER,SPI_SCALE_16,SPI_MODE_0,SPI_INT_DISABLE,SPI_MSF);
     786:	00 e0       	ldi	r16, 0x00	; 0
     788:	20 e0       	ldi	r18, 0x00	; 0
     78a:	40 e0       	ldi	r20, 0x00	; 0
     78c:	61 e0       	ldi	r22, 0x01	; 1
     78e:	70 e0       	ldi	r23, 0x00	; 0
     790:	80 e1       	ldi	r24, 0x10	; 16
     792:	0e 94 a6 06 	call	0xd4c	; 0xd4c <SPI_INT>
	SENSOR_IO_SETUP();
     796:	0e 94 2e 0e 	call	0x1c5c	; 0x1c5c <SENSOR_IO_SETUP>
	OTHER_SETUPS_IO();
     79a:	0e 94 b0 03 	call	0x760	; 0x760 <OTHER_SETUPS_IO>
	TEST_IO_SETUP();
     79e:	0e 94 ce 0f 	call	0x1f9c	; 0x1f9c <TEST_IO_SETUP>
	APP_IO_SETUP();
     7a2:	0e 94 47 00 	call	0x8e	; 0x8e <APP_IO_SETUP>
	
	
	
	
	TEST_SETUP();
     7a6:	0e 94 e7 0f 	call	0x1fce	; 0x1fce <TEST_SETUP>
	 
	 
	 
	APP_SETUP(); 
     7aa:	0e 94 60 00 	call	0xc0	; 0xc0 <APP_SETUP>
	TIMERS_SETUP();
     7ae:	0e 94 3f 11 	call	0x227e	; 0x227e <TIMERS_SETUP>
	USART_SEND_str("NEW here start");
     7b2:	86 e3       	ldi	r24, 0x36	; 54
     7b4:	91 e0       	ldi	r25, 0x01	; 1
     7b6:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	SENSOR_SETUP();
     7ba:	0e 94 39 0e 	call	0x1c72	; 0x1c72 <SENSOR_SETUP>
	setbit(*PORT_OUT_READY_LED,READY_LED_PIN);
     7be:	95 9a       	sbi	0x12, 5	; 18

}
     7c0:	0f 91       	pop	r16
     7c2:	08 95       	ret

000007c4 <gpio_inputconfg>:
 * Created: 04/09/2018 01:28:50 م
 *  Author: ideapad510
 */ 
#include "microconfigrations.h"
	void gpio_inputconfg(volatile uint8 * DiR_address,volatile uint8 * inputmodreg_address,INPUT_MOD mod,uint8 pin)
	{
     7c4:	fb 01       	movw	r30, r22
		clearbit(*DiR_address,pin);
     7c6:	dc 01       	movw	r26, r24
     7c8:	3c 91       	ld	r19, X
     7ca:	61 e0       	ldi	r22, 0x01	; 1
     7cc:	70 e0       	ldi	r23, 0x00	; 0
     7ce:	02 2e       	mov	r0, r18
     7d0:	02 c0       	rjmp	.+4      	; 0x7d6 <gpio_inputconfg+0x12>
     7d2:	66 0f       	add	r22, r22
     7d4:	77 1f       	adc	r23, r23
     7d6:	0a 94       	dec	r0
     7d8:	e2 f7       	brpl	.-8      	; 0x7d2 <gpio_inputconfg+0xe>
     7da:	60 95       	com	r22
     7dc:	36 23       	and	r19, r22
     7de:	3c 93       	st	X, r19
		clearbit(*inputmodreg_address,pin);
     7e0:	80 81       	ld	r24, Z
     7e2:	68 23       	and	r22, r24
     7e4:	60 83       	st	Z, r22
				*inputmodreg_address|=mod<<pin;
     7e6:	80 81       	ld	r24, Z
     7e8:	50 e0       	ldi	r21, 0x00	; 0
     7ea:	ba 01       	movw	r22, r20
     7ec:	02 c0       	rjmp	.+4      	; 0x7f2 <gpio_inputconfg+0x2e>
     7ee:	66 0f       	add	r22, r22
     7f0:	77 1f       	adc	r23, r23
     7f2:	2a 95       	dec	r18
     7f4:	e2 f7       	brpl	.-8      	; 0x7ee <gpio_inputconfg+0x2a>
     7f6:	9b 01       	movw	r18, r22
     7f8:	28 2b       	or	r18, r24
     7fa:	20 83       	st	Z, r18
     7fc:	08 95       	ret

000007fe <gpio_outputconfg>:
	
	
	
	
	void gpio_outputconfg(volatile uint8 * DiR_address,volatile uint8 * outputmodreg_address,OUTPUTMOD mod,uint8 pin)
	{
     7fe:	fb 01       	movw	r30, r22
		
		setbit(*DiR_address,pin);
     800:	dc 01       	movw	r26, r24
     802:	3c 91       	ld	r19, X
     804:	61 e0       	ldi	r22, 0x01	; 1
     806:	70 e0       	ldi	r23, 0x00	; 0
     808:	02 2e       	mov	r0, r18
     80a:	02 c0       	rjmp	.+4      	; 0x810 <gpio_outputconfg+0x12>
     80c:	66 0f       	add	r22, r22
     80e:	77 1f       	adc	r23, r23
     810:	0a 94       	dec	r0
     812:	e2 f7       	brpl	.-8      	; 0x80c <gpio_outputconfg+0xe>
     814:	36 2b       	or	r19, r22
     816:	3c 93       	st	X, r19
		clearbit(*outputmodreg_address,pin);
     818:	80 81       	ld	r24, Z
     81a:	60 95       	com	r22
     81c:	68 23       	and	r22, r24
     81e:	60 83       	st	Z, r22
		*outputmodreg_address|=mod<<pin;
     820:	80 81       	ld	r24, Z
     822:	50 e0       	ldi	r21, 0x00	; 0
     824:	ba 01       	movw	r22, r20
     826:	02 c0       	rjmp	.+4      	; 0x82c <gpio_outputconfg+0x2e>
     828:	66 0f       	add	r22, r22
     82a:	77 1f       	adc	r23, r23
     82c:	2a 95       	dec	r18
     82e:	e2 f7       	brpl	.-8      	; 0x828 <gpio_outputconfg+0x2a>
     830:	9b 01       	movw	r18, r22
     832:	28 2b       	or	r18, r24
     834:	20 83       	st	Z, r18
     836:	08 95       	ret

00000838 <NRF_SPI_EXCHANGE>:



volatile unsigned char NRF_SPI_EXCHANGE(unsigned char TX_DATA)
{
	SPDR=TX_DATA;
     838:	8f b9       	out	0x0f, r24	; 15
	while(isbitclear(SPSR,7));
     83a:	77 9b       	sbis	0x0e, 7	; 14
     83c:	fe cf       	rjmp	.-4      	; 0x83a <NRF_SPI_EXCHANGE+0x2>
	
	return SPDR;
     83e:	8f b1       	in	r24, 0x0f	; 15
}
     840:	08 95       	ret

00000842 <NRF_WRITE_REGISTER>:

void NRF_WRITE_REGISTER(unsigned char REGISTER_NUM,unsigned char DATA)
{
     842:	cf 93       	push	r28
     844:	c6 2f       	mov	r28, r22
	NRF_SPI_CLEAR_PIN();
     846:	c0 98       	cbi	0x18, 0	; 24
	
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND(REGISTER_NUM));
     848:	80 62       	ori	r24, 0x20	; 32
     84a:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     84e:	80 93 04 02 	sts	0x0204, r24
		
	NRF_SPI_EXCHANGE(DATA);
     852:	8c 2f       	mov	r24, r28
     854:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>

	NRF_SPI_SET_PIN();  
     858:	c0 9a       	sbi	0x18, 0	; 24
     85a:	8f e9       	ldi	r24, 0x9F	; 159
     85c:	9f e0       	ldi	r25, 0x0F	; 15
     85e:	01 97       	sbiw	r24, 0x01	; 1
     860:	f1 f7       	brne	.-4      	; 0x85e <NRF_WRITE_REGISTER+0x1c>
     862:	00 c0       	rjmp	.+0      	; 0x864 <__stack+0x5>
     864:	00 00       	nop
	_delay_ms(1);
}
     866:	cf 91       	pop	r28
     868:	08 95       	ret

0000086a <NRF_READ_REGISTER>:

unsigned char NRF_READ_REGISTER(unsigned char REGISTER_NUM)
{
	unsigned char DATA;
	NRF_SPI_CLEAR_PIN();
     86a:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_REGISTER_COMMAND(REGISTER_NUM));
     86c:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     870:	80 93 04 02 	sts	0x0204, r24
	DATA=NRF_SPI_EXCHANGE(0xFF);
     874:	8f ef       	ldi	r24, 0xFF	; 255
     876:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
	NRF_SPI_SET_PIN();
     87a:	c0 9a       	sbi	0x18, 0	; 24
     87c:	ef e9       	ldi	r30, 0x9F	; 159
     87e:	ff e0       	ldi	r31, 0x0F	; 15
     880:	31 97       	sbiw	r30, 0x01	; 1
     882:	f1 f7       	brne	.-4      	; 0x880 <NRF_READ_REGISTER+0x16>
     884:	00 c0       	rjmp	.+0      	; 0x886 <NRF_READ_REGISTER+0x1c>
     886:	00 00       	nop
	_delay_ms(1);
	return DATA;
}
     888:	08 95       	ret

0000088a <NRF_R_RX_PAYLOAD_DYNAMIC>:

void NRF_R_RX_PAYLOAD_DYNAMIC(unsigned char *DATA,unsigned char LENGTH)
{
     88a:	ff 92       	push	r15
     88c:	0f 93       	push	r16
     88e:	1f 93       	push	r17
     890:	cf 93       	push	r28
     892:	df 93       	push	r29
     894:	f8 2e       	mov	r15, r24
     896:	19 2f       	mov	r17, r25
     898:	06 2f       	mov	r16, r22
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
     89a:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_RX_PAYLOAD_COMMAND);
     89c:	81 e6       	ldi	r24, 0x61	; 97
     89e:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     8a2:	80 93 04 02 	sts	0x0204, r24
	for (i=0;i<LENGTH;++i)
     8a6:	00 23       	and	r16, r16
     8a8:	51 f0       	breq	.+20     	; 0x8be <NRF_R_RX_PAYLOAD_DYNAMIC+0x34>
     8aa:	cf 2d       	mov	r28, r15
     8ac:	d1 2f       	mov	r29, r17
     8ae:	10 e0       	ldi	r17, 0x00	; 0
	{
		DATA[i]=NRF_SPI_EXCHANGE(0xff);
     8b0:	8f ef       	ldi	r24, 0xFF	; 255
     8b2:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     8b6:	89 93       	st	Y+, r24
{
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_RX_PAYLOAD_COMMAND);
	for (i=0;i<LENGTH;++i)
     8b8:	1f 5f       	subi	r17, 0xFF	; 255
     8ba:	10 13       	cpse	r17, r16
     8bc:	f9 cf       	rjmp	.-14     	; 0x8b0 <NRF_R_RX_PAYLOAD_DYNAMIC+0x26>
	{
		DATA[i]=NRF_SPI_EXCHANGE(0xff);
	}
	NRF_SPI_SET_PIN();
     8be:	c0 9a       	sbi	0x18, 0	; 24
}
     8c0:	df 91       	pop	r29
     8c2:	cf 91       	pop	r28
     8c4:	1f 91       	pop	r17
     8c6:	0f 91       	pop	r16
     8c8:	ff 90       	pop	r15
     8ca:	08 95       	ret

000008cc <NRF_W_TX_PAYLOAD_ACK>:

void NRF_W_TX_PAYLOAD_ACK(unsigned char *DATA,unsigned char LENGTH)
{
     8cc:	ff 92       	push	r15
     8ce:	0f 93       	push	r16
     8d0:	1f 93       	push	r17
     8d2:	cf 93       	push	r28
     8d4:	df 93       	push	r29
     8d6:	f8 2e       	mov	r15, r24
     8d8:	19 2f       	mov	r17, r25
     8da:	06 2f       	mov	r16, r22
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
     8dc:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_TX_PAYLOAD_COMMAND);
     8de:	80 ea       	ldi	r24, 0xA0	; 160
     8e0:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     8e4:	80 93 04 02 	sts	0x0204, r24
	for (i=0;i<LENGTH;++i)
     8e8:	00 23       	and	r16, r16
     8ea:	49 f0       	breq	.+18     	; 0x8fe <NRF_W_TX_PAYLOAD_ACK+0x32>
     8ec:	cf 2d       	mov	r28, r15
     8ee:	d1 2f       	mov	r29, r17
     8f0:	10 e0       	ldi	r17, 0x00	; 0
	{
		NRF_SPI_EXCHANGE(DATA[i]);
     8f2:	89 91       	ld	r24, Y+
     8f4:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
{
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_TX_PAYLOAD_COMMAND);
	for (i=0;i<LENGTH;++i)
     8f8:	1f 5f       	subi	r17, 0xFF	; 255
     8fa:	10 13       	cpse	r17, r16
     8fc:	fa cf       	rjmp	.-12     	; 0x8f2 <NRF_W_TX_PAYLOAD_ACK+0x26>
	{
		NRF_SPI_EXCHANGE(DATA[i]);
	}
	NRF_SPI_SET_PIN();
     8fe:	c0 9a       	sbi	0x18, 0	; 24
}
     900:	df 91       	pop	r29
     902:	cf 91       	pop	r28
     904:	1f 91       	pop	r17
     906:	0f 91       	pop	r16
     908:	ff 90       	pop	r15
     90a:	08 95       	ret

0000090c <NRF_FLUSH_TX_BUFFER>:
	}
	NRF_SPI_SET_PIN();
}
void NRF_FLUSH_TX_BUFFER()
{
	NRF_SPI_CLEAR_PIN();
     90c:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(FLUSH_TX_COMMAND);
     90e:	81 ee       	ldi	r24, 0xE1	; 225
     910:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     914:	80 93 04 02 	sts	0x0204, r24
	NRF_SPI_SET_PIN();
     918:	c0 9a       	sbi	0x18, 0	; 24
     91a:	08 95       	ret

0000091c <NRF_FLUSH_RX_BUFFER>:
}
void NRF_FLUSH_RX_BUFFER()
{
	NRF_SPI_CLEAR_PIN();
     91c:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(FLUSH_RX_COMMAND);
     91e:	82 ee       	ldi	r24, 0xE2	; 226
     920:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     924:	80 93 04 02 	sts	0x0204, r24
	NRF_SPI_SET_PIN();
     928:	c0 9a       	sbi	0x18, 0	; 24
     92a:	08 95       	ret

0000092c <NRF_READ_LENGTH_RX_PL>:
	NRF_SPI_SET_PIN();
}
unsigned char NRF_READ_LENGTH_RX_PL()
{
	unsigned char DATA;
	NRF_SPI_CLEAR_PIN();
     92c:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_RX_PL_WIDTH_COMMAND);
     92e:	80 e6       	ldi	r24, 0x60	; 96
     930:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     934:	80 93 04 02 	sts	0x0204, r24
	DATA=NRF_SPI_EXCHANGE(0xFF);
     938:	8f ef       	ldi	r24, 0xFF	; 255
     93a:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
	NRF_SPI_SET_PIN();
     93e:	c0 9a       	sbi	0x18, 0	; 24
	return DATA;
}
     940:	08 95       	ret

00000942 <NRF_READ_RX_DR_AND_CLEAR>:
{
	return NRF_READ_REGISTER(NRF_RPD_ADDRESS);
}

unsigned char NRF_READ_RX_DR_AND_CLEAR()
{
     942:	cf 93       	push	r28
     944:	df 93       	push	r29
     946:	1f 92       	push	r1
     948:	cd b7       	in	r28, 0x3d	; 61
     94a:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char STATES_TEMP;
	STATES_TEMP=NRF_READ_REGISTER(NRF_STATUS_ADDRESS);
     94c:	87 e0       	ldi	r24, 0x07	; 7
     94e:	0e 94 35 04 	call	0x86a	; 0x86a <NRF_READ_REGISTER>
     952:	89 83       	std	Y+1, r24	; 0x01
	if (STATES_TEMP&0b01000000)
     954:	99 81       	ldd	r25, Y+1	; 0x01
     956:	89 2f       	mov	r24, r25
     958:	80 74       	andi	r24, 0x40	; 64
     95a:	96 ff       	sbrs	r25, 6
     95c:	05 c0       	rjmp	.+10     	; 0x968 <NRF_READ_RX_DR_AND_CLEAR+0x26>
	{
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,STATES_TEMP);
     95e:	69 81       	ldd	r22, Y+1	; 0x01
     960:	87 e0       	ldi	r24, 0x07	; 7
     962:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
		return 1;
     966:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;	
	}
}
     968:	0f 90       	pop	r0
     96a:	df 91       	pop	r29
     96c:	cf 91       	pop	r28
     96e:	08 95       	ret

00000970 <NRF_READ_TX_DS_AND_CLEAR>:
unsigned char NRF_READ_TX_DS_AND_CLEAR()
{
     970:	cf 93       	push	r28
     972:	df 93       	push	r29
     974:	1f 92       	push	r1
     976:	cd b7       	in	r28, 0x3d	; 61
     978:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char STATES_TEMP;
	STATES_TEMP=NRF_READ_REGISTER(NRF_STATUS_ADDRESS);
     97a:	87 e0       	ldi	r24, 0x07	; 7
     97c:	0e 94 35 04 	call	0x86a	; 0x86a <NRF_READ_REGISTER>
     980:	89 83       	std	Y+1, r24	; 0x01
	if (STATES_TEMP&0b00100000)
     982:	99 81       	ldd	r25, Y+1	; 0x01
     984:	89 2f       	mov	r24, r25
     986:	80 72       	andi	r24, 0x20	; 32
     988:	95 ff       	sbrs	r25, 5
     98a:	05 c0       	rjmp	.+10     	; 0x996 <NRF_READ_TX_DS_AND_CLEAR+0x26>
	{
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,STATES_TEMP);
     98c:	69 81       	ldd	r22, Y+1	; 0x01
     98e:	87 e0       	ldi	r24, 0x07	; 7
     990:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
		return 1;
     994:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
     996:	0f 90       	pop	r0
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	08 95       	ret

0000099e <NRF_READ_MAX_RT_AND_CLEAR>:
unsigned char NRF_READ_MAX_RT_AND_CLEAR()
{
     99e:	cf 93       	push	r28
     9a0:	df 93       	push	r29
     9a2:	1f 92       	push	r1
     9a4:	cd b7       	in	r28, 0x3d	; 61
     9a6:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char STATES_TEMP;
	STATES_TEMP=NRF_READ_REGISTER(NRF_STATUS_ADDRESS);
     9a8:	87 e0       	ldi	r24, 0x07	; 7
     9aa:	0e 94 35 04 	call	0x86a	; 0x86a <NRF_READ_REGISTER>
     9ae:	89 83       	std	Y+1, r24	; 0x01
	if (STATES_TEMP&0b00010000)
     9b0:	99 81       	ldd	r25, Y+1	; 0x01
     9b2:	89 2f       	mov	r24, r25
     9b4:	80 71       	andi	r24, 0x10	; 16
     9b6:	94 ff       	sbrs	r25, 4
     9b8:	05 c0       	rjmp	.+10     	; 0x9c4 <NRF_READ_MAX_RT_AND_CLEAR+0x26>
	{
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,STATES_TEMP);
     9ba:	69 81       	ldd	r22, Y+1	; 0x01
     9bc:	87 e0       	ldi	r24, 0x07	; 7
     9be:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
		return 1;
     9c2:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
     9c4:	0f 90       	pop	r0
     9c6:	df 91       	pop	r29
     9c8:	cf 91       	pop	r28
     9ca:	08 95       	ret

000009cc <NRF_SET_TX_MODE>:

void NRF_SET_TX_MODE()
{
     9cc:	cf 93       	push	r28
     9ce:	df 93       	push	r29
     9d0:	1f 92       	push	r1
     9d2:	cd b7       	in	r28, 0x3d	; 61
     9d4:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char TEMP;
	TEMP=NRF_READ_REGISTER(NRF_CONFIG_ADDRESS);
     9d6:	80 e0       	ldi	r24, 0x00	; 0
     9d8:	0e 94 35 04 	call	0x86a	; 0x86a <NRF_READ_REGISTER>
     9dc:	89 83       	std	Y+1, r24	; 0x01
	clearbit(TEMP,NRF_PRIM_RX_BIT);
     9de:	89 81       	ldd	r24, Y+1	; 0x01
     9e0:	8e 7f       	andi	r24, 0xFE	; 254
     9e2:	89 83       	std	Y+1, r24	; 0x01
	NRF_WRITE_REGISTER(NRF_CONFIG_ADDRESS,TEMP);
     9e4:	69 81       	ldd	r22, Y+1	; 0x01
     9e6:	80 e0       	ldi	r24, 0x00	; 0
     9e8:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
}
     9ec:	0f 90       	pop	r0
     9ee:	df 91       	pop	r29
     9f0:	cf 91       	pop	r28
     9f2:	08 95       	ret

000009f4 <NRF_SET_RX_MODE>:
void NRF_SET_RX_MODE()
{
     9f4:	cf 93       	push	r28
     9f6:	df 93       	push	r29
     9f8:	1f 92       	push	r1
     9fa:	cd b7       	in	r28, 0x3d	; 61
     9fc:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char TEMP;
	TEMP=NRF_READ_REGISTER(NRF_CONFIG_ADDRESS);
     9fe:	80 e0       	ldi	r24, 0x00	; 0
     a00:	0e 94 35 04 	call	0x86a	; 0x86a <NRF_READ_REGISTER>
     a04:	89 83       	std	Y+1, r24	; 0x01
	setbit(TEMP,NRF_PRIM_RX_BIT);
     a06:	89 81       	ldd	r24, Y+1	; 0x01
     a08:	81 60       	ori	r24, 0x01	; 1
     a0a:	89 83       	std	Y+1, r24	; 0x01
	NRF_WRITE_REGISTER(NRF_CONFIG_ADDRESS,TEMP);
     a0c:	69 81       	ldd	r22, Y+1	; 0x01
     a0e:	80 e0       	ldi	r24, 0x00	; 0
     a10:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
}
     a14:	0f 90       	pop	r0
     a16:	df 91       	pop	r29
     a18:	cf 91       	pop	r28
     a1a:	08 95       	ret

00000a1c <NRF_UPDATE_PIPE_RX_ADDRESS>:




void NRF_UPDATE_PIPE_RX_ADDRESS(unsigned char NUMBER,volatile unsigned char *ADDRESS,unsigned char LENGTH)
{
     a1c:	ff 92       	push	r15
     a1e:	0f 93       	push	r16
     a20:	1f 93       	push	r17
     a22:	cf 93       	push	r28
     a24:	df 93       	push	r29
     a26:	f6 2e       	mov	r15, r22
     a28:	17 2f       	mov	r17, r23
     a2a:	04 2f       	mov	r16, r20
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
     a2c:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND((unsigned char)(NRF_RX_ADDR_P0_ADDRESS+NUMBER)));
     a2e:	86 5f       	subi	r24, 0xF6	; 246
     a30:	80 62       	ori	r24, 0x20	; 32
     a32:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     a36:	80 93 04 02 	sts	0x0204, r24
		
	for(i=0;i<LENGTH;++i)
     a3a:	00 23       	and	r16, r16
     a3c:	49 f0       	breq	.+18     	; 0xa50 <NRF_UPDATE_PIPE_RX_ADDRESS+0x34>
     a3e:	cf 2d       	mov	r28, r15
     a40:	d1 2f       	mov	r29, r17
     a42:	10 e0       	ldi	r17, 0x00	; 0
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
     a44:	89 91       	ld	r24, Y+
     a46:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
{
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND((unsigned char)(NRF_RX_ADDR_P0_ADDRESS+NUMBER)));
		
	for(i=0;i<LENGTH;++i)
     a4a:	1f 5f       	subi	r17, 0xFF	; 255
     a4c:	10 13       	cpse	r17, r16
     a4e:	fa cf       	rjmp	.-12     	; 0xa44 <NRF_UPDATE_PIPE_RX_ADDRESS+0x28>
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
	}
	NRF_SPI_SET_PIN();
     a50:	c0 9a       	sbi	0x18, 0	; 24
}
     a52:	df 91       	pop	r29
     a54:	cf 91       	pop	r28
     a56:	1f 91       	pop	r17
     a58:	0f 91       	pop	r16
     a5a:	ff 90       	pop	r15
     a5c:	08 95       	ret

00000a5e <NRF_UPDATE_TX_ADDRESS>:


void NRF_UPDATE_TX_ADDRESS(unsigned char *ADDRESS,unsigned char LENGTH)
{
     a5e:	ff 92       	push	r15
     a60:	0f 93       	push	r16
     a62:	1f 93       	push	r17
     a64:	cf 93       	push	r28
     a66:	df 93       	push	r29
     a68:	f8 2e       	mov	r15, r24
     a6a:	19 2f       	mov	r17, r25
     a6c:	06 2f       	mov	r16, r22
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
     a6e:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND(NRF_TX_ADDR_TX_ADDRESS));
     a70:	80 e3       	ldi	r24, 0x30	; 48
     a72:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
     a76:	80 93 04 02 	sts	0x0204, r24
	for(i=0;i<LENGTH;++i)
     a7a:	00 23       	and	r16, r16
     a7c:	49 f0       	breq	.+18     	; 0xa90 <NRF_UPDATE_TX_ADDRESS+0x32>
     a7e:	cf 2d       	mov	r28, r15
     a80:	d1 2f       	mov	r29, r17
     a82:	10 e0       	ldi	r17, 0x00	; 0
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
     a84:	89 91       	ld	r24, Y+
     a86:	0e 94 1c 04 	call	0x838	; 0x838 <NRF_SPI_EXCHANGE>
void NRF_UPDATE_TX_ADDRESS(unsigned char *ADDRESS,unsigned char LENGTH)
{
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND(NRF_TX_ADDR_TX_ADDRESS));
	for(i=0;i<LENGTH;++i)
     a8a:	1f 5f       	subi	r17, 0xFF	; 255
     a8c:	10 13       	cpse	r17, r16
     a8e:	fa cf       	rjmp	.-12     	; 0xa84 <NRF_UPDATE_TX_ADDRESS+0x26>
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
	}
	NRF_SPI_SET_PIN();
     a90:	c0 9a       	sbi	0x18, 0	; 24
}
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	ff 90       	pop	r15
     a9c:	08 95       	ret

00000a9e <NRF_UPDATE_USED_CHANNEL>:

void NRF_UPDATE_USED_CHANNEL(NRF_RF_CHANNEL_DT channel)
{
	NRF1.NRF_RF_CH=channel;
     a9e:	80 93 e3 01 	sts	0x01E3, r24
	NRF_WRITE_REGISTER(NRF_RF_CH_ADDRESS,channel);
     aa2:	68 2f       	mov	r22, r24
     aa4:	85 e0       	ldi	r24, 0x05	; 5
     aa6:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
     aaa:	08 95       	ret

00000aac <NRF_IO_SETUP>:
	NRF1.NRF_SETUP_RETR|=RET;	
	NRF_WRITE_REGISTER(NRF_SETUP_RETR_ADDRESS,NRF1.NRF_SETUP_RETR);
}
void NRF_IO_SETUP()
{
	gpio_outputconfg(PORT_DDR_CE,PORT_OUTMOD_CE,OUTPASS,CE_PIN);
     aac:	22 e0       	ldi	r18, 0x02	; 2
     aae:	40 e0       	ldi	r20, 0x00	; 0
     ab0:	66 e3       	ldi	r22, 0x36	; 54
     ab2:	70 e0       	ldi	r23, 0x00	; 0
     ab4:	87 e3       	ldi	r24, 0x37	; 55
     ab6:	90 e0       	ldi	r25, 0x00	; 0
     ab8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_CSN,PORT_OUTMOD_CSN,OUTPASS,CSN_PIN);
     abc:	20 e0       	ldi	r18, 0x00	; 0
     abe:	40 e0       	ldi	r20, 0x00	; 0
     ac0:	66 e3       	ldi	r22, 0x36	; 54
     ac2:	70 e0       	ldi	r23, 0x00	; 0
     ac4:	87 e3       	ldi	r24, 0x37	; 55
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
	gpio_inputconfg(PORT_DDR_IRQ,PORT_INMOD_IRQ,PULLUP_mod,IRQ_PIN);
     acc:	23 e0       	ldi	r18, 0x03	; 3
     ace:	41 e0       	ldi	r20, 0x01	; 1
     ad0:	68 e3       	ldi	r22, 0x38	; 56
     ad2:	70 e0       	ldi	r23, 0x00	; 0
     ad4:	87 e3       	ldi	r24, 0x37	; 55
     ad6:	90 e0       	ldi	r25, 0x00	; 0
     ad8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <gpio_inputconfg>
     adc:	08 95       	ret

00000ade <NRF_SETUP_USED_CONFIG>:
}
void NRF_SETUP_USED_CONFIG()
{
     ade:	0f 93       	push	r16
     ae0:	1f 93       	push	r17
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
	NRF_SPI_SET_PIN(); 
     ae6:	c0 9a       	sbi	0x18, 0	; 24
     ae8:	2f ef       	ldi	r18, 0xFF	; 255
     aea:	81 ee       	ldi	r24, 0xE1	; 225
     aec:	94 e0       	ldi	r25, 0x04	; 4
     aee:	21 50       	subi	r18, 0x01	; 1
     af0:	80 40       	sbci	r24, 0x00	; 0
     af2:	90 40       	sbci	r25, 0x00	; 0
     af4:	e1 f7       	brne	.-8      	; 0xaee <NRF_SETUP_USED_CONFIG+0x10>
     af6:	00 c0       	rjmp	.+0      	; 0xaf8 <NRF_SETUP_USED_CONFIG+0x1a>
     af8:	00 00       	nop
	_delay_ms(100);
	
	NRF1.NRF_CONFIG=(NRF_USED_MASK_RX_DR<<NRF_MASK_RX_DR_BIT)|(NRF_USED_MASK_TX_DR<<NRF_MASK_TX_DS_BIT)|(NRF_USED_MASK_MAX_RT_DR<<NRF_MASK_MAX_RT_BIT)|(NRF_USED_CRC_STATE<<NRF_EN_CRC_BIT)|(NRF_USED_CRC<<NRF_CRCO_BIT)|(1<<NRF_PWR_UP_BIT);
     afa:	ee ed       	ldi	r30, 0xDE	; 222
     afc:	f1 e0       	ldi	r31, 0x01	; 1
     afe:	8a e0       	ldi	r24, 0x0A	; 10
     b00:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_CONFIG_ADDRESS,NRF1.NRF_CONFIG);
     b02:	60 81       	ld	r22, Z
     b04:	80 e0       	ldi	r24, 0x00	; 0
     b06:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
     b0a:	8f e3       	ldi	r24, 0x3F	; 63
     b0c:	9f e1       	ldi	r25, 0x1F	; 31
     b0e:	01 97       	sbiw	r24, 0x01	; 1
     b10:	f1 f7       	brne	.-4      	; 0xb0e <NRF_SETUP_USED_CONFIG+0x30>
     b12:	00 c0       	rjmp	.+0      	; 0xb14 <NRF_SETUP_USED_CONFIG+0x36>
     b14:	00 00       	nop
		
	
	_delay_ms(2);
	NRF1.NRF_ENABLE_AA=(NRF_USED_ENNAA_P0<<0)|(NRF_USED_ENNAA_P1<<1)|(NRF_USED_ENNAA_P2<<2)|(NRF_USED_ENNAA_P3<<3)|(NRF_USED_ENNAA_P4<<4)|(NRF_USED_ENNAA_P5<<5);
     b16:	ef ed       	ldi	r30, 0xDF	; 223
     b18:	f1 e0       	ldi	r31, 0x01	; 1
     b1a:	03 e0       	ldi	r16, 0x03	; 3
     b1c:	00 83       	st	Z, r16
	NRF_WRITE_REGISTER(NRF_ENABLE_AA_ADDRESS,NRF1.NRF_ENABLE_AA);
     b1e:	60 81       	ld	r22, Z
     b20:	81 e0       	ldi	r24, 0x01	; 1
     b22:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF1.NRF_ENABLE_RX_ADDRESS=(NRF_USED_ERX_P0<<0)|(NRF_USED_ERX_P1<<1)|(NRF_USED_ERX_P2<<2)|(NRF_USED_ERX_P3<<3)|(NRF_USED_ERX_P4<<4)|(NRF_USED_ERX_P5<<5);
     b26:	e0 ee       	ldi	r30, 0xE0	; 224
     b28:	f1 e0       	ldi	r31, 0x01	; 1
     b2a:	c2 e0       	ldi	r28, 0x02	; 2
     b2c:	c0 83       	st	Z, r28
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,NRF1.NRF_ENABLE_RX_ADDRESS);
     b2e:	60 81       	ld	r22, Z
     b30:	82 e0       	ldi	r24, 0x02	; 2
     b32:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF1.NRF_SETUP_AW=2;
     b36:	c0 93 e1 01 	sts	0x01E1, r28
	NRF1.NRF_SETUP_RETR=NRF_USED_WAIT_TIME|NRF_USED_RET_COUNT;
     b3a:	e2 ee       	ldi	r30, 0xE2	; 226
     b3c:	f1 e0       	ldi	r31, 0x01	; 1
     b3e:	85 e3       	ldi	r24, 0x35	; 53
     b40:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_SETUP_RETR_ADDRESS,NRF1.NRF_SETUP_RETR);
     b42:	60 81       	ld	r22, Z
     b44:	84 e0       	ldi	r24, 0x04	; 4
     b46:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF1.NRF_RF_CH=NRF_USED_CH_1;
     b4a:	e3 ee       	ldi	r30, 0xE3	; 227
     b4c:	f1 e0       	ldi	r31, 0x01	; 1
     b4e:	c0 83       	st	Z, r28
	NRF_WRITE_REGISTER(NRF_RF_CH_ADDRESS,NRF1.NRF_RF_CH);
     b50:	60 81       	ld	r22, Z
     b52:	85 e0       	ldi	r24, 0x05	; 5
     b54:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF1.NRF_RF_SETUP=NRF_USED_RF_SPEED|NRF_USED_POWER;
     b58:	e4 ee       	ldi	r30, 0xE4	; 228
     b5a:	f1 e0       	ldi	r31, 0x01	; 1
     b5c:	84 e2       	ldi	r24, 0x24	; 36
     b5e:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_RF_SETUP_ADDRESS,NRF1.NRF_RF_SETUP);
     b60:	60 81       	ld	r22, Z
     b62:	86 e0       	ldi	r24, 0x06	; 6
     b64:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>

	NRF1.NRF_RX_ADDR_P1[0]=NRF_USED_RX_ADDR_P1&0XFF;
     b68:	10 e2       	ldi	r17, 0x20	; 32
     b6a:	10 93 ed 01 	sts	0x01ED, r17
	NRF1.NRF_RX_ADDR_P1[1]=(NRF_USED_RX_ADDR_P1>>8)&0XFF;
     b6e:	10 93 ee 01 	sts	0x01EE, r17
	NRF1.NRF_RX_ADDR_P1[2]=(NRF_USED_RX_ADDR_P1>>16)&0XFF;
     b72:	10 93 ef 01 	sts	0x01EF, r17
	NRF1.NRF_RX_ADDR_P1[3]=(NRF_USED_RX_ADDR_P1>>24)&0XFF;
     b76:	10 93 f0 01 	sts	0x01F0, r17
	NRF1.NRF_RX_ADDR_P1[4]=(NRF_USED_RX_ADDR_P1>>32)&0XFF;
     b7a:	10 93 f1 01 	sts	0x01F1, r17
	NRF_UPDATE_PIPE_RX_ADDRESS(1,NRF1.NRF_RX_ADDR_P1,5);
     b7e:	45 e0       	ldi	r20, 0x05	; 5
     b80:	6d ee       	ldi	r22, 0xED	; 237
     b82:	71 e0       	ldi	r23, 0x01	; 1
     b84:	81 e0       	ldi	r24, 0x01	; 1
     b86:	0e 94 0e 05 	call	0xa1c	; 0xa1c <NRF_UPDATE_PIPE_RX_ADDRESS>

	NRF1.NRF_RX_PW_P1=32;
     b8a:	ec ef       	ldi	r30, 0xFC	; 252
     b8c:	f1 e0       	ldi	r31, 0x01	; 1
     b8e:	10 83       	st	Z, r17
	NRF1.NRF_RX_PW_P0=32;
     b90:	cb ef       	ldi	r28, 0xFB	; 251
     b92:	d1 e0       	ldi	r29, 0x01	; 1
     b94:	18 83       	st	Y, r17
	NRF_WRITE_REGISTER(NRF_RX_PW_P1_ADDRESS,NRF1.NRF_RX_PW_P1);
     b96:	60 81       	ld	r22, Z
     b98:	82 e1       	ldi	r24, 0x12	; 18
     b9a:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(NRF_RX_PW_P0_ADDRESS,NRF1.NRF_RX_PW_P0);	
     b9e:	68 81       	ld	r22, Y
     ba0:	81 e1       	ldi	r24, 0x11	; 17
     ba2:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF1.NRF_DYNPD=0b00000011;
     ba6:	e2 e0       	ldi	r30, 0x02	; 2
     ba8:	f2 e0       	ldi	r31, 0x02	; 2
     baa:	00 83       	st	Z, r16
	NRF_WRITE_REGISTER(NRF_DYNPD_ADDRESS,NRF1.NRF_DYNPD);
     bac:	60 81       	ld	r22, Z
     bae:	8c e1       	ldi	r24, 0x1C	; 28
     bb0:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF1.NRF_FEATURE=(NRF_USED_PL_WITH_ACK_STATE_AT_FIRST<<1)|(NRF_USED_EN_DPL<<2);
     bb4:	e3 e0       	ldi	r30, 0x03	; 3
     bb6:	f2 e0       	ldi	r31, 0x02	; 2
     bb8:	84 e0       	ldi	r24, 0x04	; 4
     bba:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_FEATURE_ADDRESS,NRF1.NRF_FEATURE);
     bbc:	60 81       	ld	r22, Z
     bbe:	8d e1       	ldi	r24, 0x1D	; 29
     bc0:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	USART_SEND_str("state:");
     bc4:	85 e4       	ldi	r24, 0x45	; 69
     bc6:	91 e0       	ldi	r25, 0x01	; 1
     bc8:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	TEST_UART_SEND_VALUE(NRF_STATUS);
     bcc:	20 91 04 02 	lds	r18, 0x0204
     bd0:	30 e0       	ldi	r19, 0x00	; 0
     bd2:	40 e0       	ldi	r20, 0x00	; 0
     bd4:	50 e0       	ldi	r21, 0x00	; 0
     bd6:	60 e0       	ldi	r22, 0x00	; 0
     bd8:	70 e0       	ldi	r23, 0x00	; 0
     bda:	80 e0       	ldi	r24, 0x00	; 0
     bdc:	90 e0       	ldi	r25, 0x00	; 0
     bde:	0e 94 0f 10 	call	0x201e	; 0x201e <TEST_UART_SEND_VALUE>
}
     be2:	df 91       	pop	r29
     be4:	cf 91       	pop	r28
     be6:	1f 91       	pop	r17
     be8:	0f 91       	pop	r16
     bea:	08 95       	ret

00000bec <NRF_SEND_DATA_WITH_ACK>:

unsigned char NRF_SEND_DATA_WITH_ACK(unsigned char *ADDRESS,unsigned char ADDRESS_LENGTH,unsigned char *DATA,unsigned char DATA_LENGTH)
{
     bec:	ef 92       	push	r14
     bee:	ff 92       	push	r15
     bf0:	0f 93       	push	r16
     bf2:	1f 93       	push	r17
     bf4:	cf 93       	push	r28
     bf6:	df 93       	push	r29
     bf8:	ec 01       	movw	r28, r24
     bfa:	f6 2e       	mov	r15, r22
     bfc:	8a 01       	movw	r16, r20
     bfe:	e2 2e       	mov	r14, r18
	NRF_CLEAR_CE();
     c00:	c2 98       	cbi	0x18, 2	; 24
     c02:	8f e9       	ldi	r24, 0x9F	; 159
     c04:	9f e0       	ldi	r25, 0x0F	; 15
     c06:	01 97       	sbiw	r24, 0x01	; 1
     c08:	f1 f7       	brne	.-4      	; 0xc06 <NRF_SEND_DATA_WITH_ACK+0x1a>
     c0a:	00 c0       	rjmp	.+0      	; 0xc0c <NRF_SEND_DATA_WITH_ACK+0x20>
     c0c:	00 00       	nop
	_delay_ms(1);
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000011);
     c0e:	63 e0       	ldi	r22, 0x03	; 3
     c10:	82 e0       	ldi	r24, 0x02	; 2
     c12:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
     c16:	60 e7       	ldi	r22, 0x70	; 112
     c18:	87 e0       	ldi	r24, 0x07	; 7
     c1a:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF_UPDATE_TX_ADDRESS(ADDRESS, ADDRESS_LENGTH);
     c1e:	6f 2d       	mov	r22, r15
     c20:	ce 01       	movw	r24, r28
     c22:	0e 94 2f 05 	call	0xa5e	; 0xa5e <NRF_UPDATE_TX_ADDRESS>
	NRF_UPDATE_PIPE_RX_ADDRESS(0,ADDRESS,ADDRESS_LENGTH);
     c26:	4f 2d       	mov	r20, r15
     c28:	be 01       	movw	r22, r28
     c2a:	80 e0       	ldi	r24, 0x00	; 0
     c2c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <NRF_UPDATE_PIPE_RX_ADDRESS>
	NRF_FLUSH_TX_BUFFER();
     c30:	0e 94 86 04 	call	0x90c	; 0x90c <NRF_FLUSH_TX_BUFFER>
	NRF_SET_TX_MODE();
     c34:	0e 94 e6 04 	call	0x9cc	; 0x9cc <NRF_SET_TX_MODE>
	NRF_W_TX_PAYLOAD_ACK(DATA,DATA_LENGTH);
     c38:	6e 2d       	mov	r22, r14
     c3a:	c8 01       	movw	r24, r16
     c3c:	0e 94 66 04 	call	0x8cc	; 0x8cc <NRF_W_TX_PAYLOAD_ACK>
	NRF_SET_CE();
     c40:	c2 9a       	sbi	0x18, 2	; 24
     c42:	8f e3       	ldi	r24, 0x3F	; 63
     c44:	9f e1       	ldi	r25, 0x1F	; 31
     c46:	01 97       	sbiw	r24, 0x01	; 1
     c48:	f1 f7       	brne	.-4      	; 0xc46 <NRF_SEND_DATA_WITH_ACK+0x5a>
     c4a:	00 c0       	rjmp	.+0      	; 0xc4c <NRF_SEND_DATA_WITH_ACK+0x60>
     c4c:	00 00       	nop
	_delay_ms(2);
	while (NRF_IS_IRQ_SET());
     c4e:	b3 99       	sbic	0x16, 3	; 22
     c50:	fe cf       	rjmp	.-4      	; 0xc4e <NRF_SEND_DATA_WITH_ACK+0x62>
	NRF_CLEAR_CE();
     c52:	c2 98       	cbi	0x18, 2	; 24
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000010);
     c54:	62 e0       	ldi	r22, 0x02	; 2
     c56:	82 e0       	ldi	r24, 0x02	; 2
     c58:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	if (NRF_READ_TX_DS_AND_CLEAR())
     c5c:	0e 94 b8 04 	call	0x970	; 0x970 <NRF_READ_TX_DS_AND_CLEAR>
     c60:	d8 2f       	mov	r29, r24
     c62:	81 11       	cpse	r24, r1
     c64:	10 c0       	rjmp	.+32     	; 0xc86 <NRF_SEND_DATA_WITH_ACK+0x9a>
	{
		return 1;
	}
	if (NRF_READ_MAX_RT_AND_CLEAR())
     c66:	0e 94 cf 04 	call	0x99e	; 0x99e <NRF_READ_MAX_RT_AND_CLEAR>
     c6a:	c8 2f       	mov	r28, r24
     c6c:	88 23       	and	r24, r24
     c6e:	31 f0       	breq	.+12     	; 0xc7c <NRF_SEND_DATA_WITH_ACK+0x90>
	{
		USART_SEND_str("HERE FAIL10\n");
     c70:	8c e4       	ldi	r24, 0x4C	; 76
     c72:	91 e0       	ldi	r25, 0x01	; 1
     c74:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
		return 0;
     c78:	cd 2f       	mov	r28, r29
     c7a:	06 c0       	rjmp	.+12     	; 0xc88 <NRF_SEND_DATA_WITH_ACK+0x9c>
	}
	USART_SEND_str("HERE FAIL11\n");
     c7c:	89 e5       	ldi	r24, 0x59	; 89
     c7e:	91 e0       	ldi	r25, 0x01	; 1
     c80:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	return 0;
     c84:	01 c0       	rjmp	.+2      	; 0xc88 <NRF_SEND_DATA_WITH_ACK+0x9c>
	while (NRF_IS_IRQ_SET());
	NRF_CLEAR_CE();
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000010);
	if (NRF_READ_TX_DS_AND_CLEAR())
	{
		return 1;
     c86:	c1 e0       	ldi	r28, 0x01	; 1
		USART_SEND_str("HERE FAIL10\n");
		return 0;
	}
	USART_SEND_str("HERE FAIL11\n");
	return 0;
}
     c88:	8c 2f       	mov	r24, r28
     c8a:	df 91       	pop	r29
     c8c:	cf 91       	pop	r28
     c8e:	1f 91       	pop	r17
     c90:	0f 91       	pop	r16
     c92:	ff 90       	pop	r15
     c94:	ef 90       	pop	r14
     c96:	08 95       	ret

00000c98 <NRF_START_RX_MODE>:

void NRF_START_RX_MODE()
{
	NRF_CLEAR_CE();
     c98:	c2 98       	cbi	0x18, 2	; 24
     c9a:	8f e9       	ldi	r24, 0x9F	; 159
     c9c:	9f e0       	ldi	r25, 0x0F	; 15
     c9e:	01 97       	sbiw	r24, 0x01	; 1
     ca0:	f1 f7       	brne	.-4      	; 0xc9e <NRF_START_RX_MODE+0x6>
     ca2:	00 c0       	rjmp	.+0      	; 0xca4 <NRF_START_RX_MODE+0xc>
     ca4:	00 00       	nop
	_delay_ms(1);
	NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
     ca6:	60 e7       	ldi	r22, 0x70	; 112
     ca8:	87 e0       	ldi	r24, 0x07	; 7
     caa:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
	NRF_FLUSH_RX_BUFFER();
     cae:	0e 94 8e 04 	call	0x91c	; 0x91c <NRF_FLUSH_RX_BUFFER>
	NRF_SET_RX_MODE();
     cb2:	0e 94 fa 04 	call	0x9f4	; 0x9f4 <NRF_SET_RX_MODE>
	NRF_SET_CE();
     cb6:	c2 9a       	sbi	0x18, 2	; 24
     cb8:	08 95       	ret

00000cba <NRF_STOP_RX_MODE>:
}

void NRF_STOP_RX_MODE()
{
		NRF_CLEAR_CE();
     cba:	c2 98       	cbi	0x18, 2	; 24
     cbc:	8f e9       	ldi	r24, 0x9F	; 159
     cbe:	9f e0       	ldi	r25, 0x0F	; 15
     cc0:	01 97       	sbiw	r24, 0x01	; 1
     cc2:	f1 f7       	brne	.-4      	; 0xcc0 <NRF_STOP_RX_MODE+0x6>
     cc4:	00 c0       	rjmp	.+0      	; 0xcc6 <NRF_STOP_RX_MODE+0xc>
     cc6:	00 00       	nop
		_delay_ms(1);
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
     cc8:	60 e7       	ldi	r22, 0x70	; 112
     cca:	87 e0       	ldi	r24, 0x07	; 7
     ccc:	0e 94 21 04 	call	0x842	; 0x842 <NRF_WRITE_REGISTER>
		NRF_FLUSH_RX_BUFFER();
     cd0:	0e 94 8e 04 	call	0x91c	; 0x91c <NRF_FLUSH_RX_BUFFER>
     cd4:	08 95       	ret

00000cd6 <NRF_CHECK_RX_PL>:
}

unsigned char NRF_CHECK_RX_PL(unsigned char *DATA,unsigned char* LENGTH)
{
     cd6:	0f 93       	push	r16
     cd8:	1f 93       	push	r17
     cda:	cf 93       	push	r28
     cdc:	df 93       	push	r29
     cde:	ec 01       	movw	r28, r24
     ce0:	8b 01       	movw	r16, r22
	if (NRF_IS_IRQ_CLEAR())
     ce2:	b3 99       	sbic	0x16, 3	; 22
     ce4:	0f c0       	rjmp	.+30     	; 0xd04 <NRF_CHECK_RX_PL+0x2e>
	{
	
		if (NRF_READ_RX_DR_AND_CLEAR())
     ce6:	0e 94 a1 04 	call	0x942	; 0x942 <NRF_READ_RX_DR_AND_CLEAR>
     cea:	88 23       	and	r24, r24
     cec:	61 f0       	breq	.+24     	; 0xd06 <NRF_CHECK_RX_PL+0x30>
		{
			NRF_CLEAR_CE();
     cee:	c2 98       	cbi	0x18, 2	; 24
			*LENGTH=NRF_READ_LENGTH_RX_PL();
     cf0:	0e 94 96 04 	call	0x92c	; 0x92c <NRF_READ_LENGTH_RX_PL>
     cf4:	f8 01       	movw	r30, r16
     cf6:	80 83       	st	Z, r24
			NRF_R_RX_PAYLOAD_DYNAMIC(DATA,*LENGTH);	
     cf8:	68 2f       	mov	r22, r24
     cfa:	ce 01       	movw	r24, r28
     cfc:	0e 94 45 04 	call	0x88a	; 0x88a <NRF_R_RX_PAYLOAD_DYNAMIC>
			return 1;
     d00:	81 e0       	ldi	r24, 0x01	; 1
     d02:	01 c0       	rjmp	.+2      	; 0xd06 <NRF_CHECK_RX_PL+0x30>
		}
		return 0;
	}
	else
	{
		return 0;
     d04:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <ADC_INIT>:
 *  Author: ideapad510
 */ 
#include "adcmodule.h"

	void ADC_INIT (ADC_PRESCALE P,ADC_VOLT_REF VF,ADC_MODE MODE ,ADC_INTERRUPT_MODE INT_STATE,ADC_ADJUST ADC_DATA_ORDER)
	{
     d10:	0f 93       	push	r16
		ADMUX_ACCESS=0x00;
     d12:	17 b8       	out	0x07, r1	; 7
		ADMUX_ACCESS|=VF|ADC_DATA_ORDER;	
     d14:	97 b1       	in	r25, 0x07	; 7
     d16:	09 2b       	or	r16, r25
     d18:	60 2b       	or	r22, r16
     d1a:	67 b9       	out	0x07, r22	; 7
		ADC_CTRL_STATUS_ACCESS = P|MODE|(1<<7)|INT_STATE;
     d1c:	20 68       	ori	r18, 0x80	; 128
     d1e:	82 2b       	or	r24, r18
     d20:	28 2f       	mov	r18, r24
     d22:	24 2b       	or	r18, r20
     d24:	26 b9       	out	0x06, r18	; 6
		switch (MODE)
     d26:	41 15       	cp	r20, r1
     d28:	51 05       	cpc	r21, r1
     d2a:	31 f0       	breq	.+12     	; 0xd38 <ADC_INIT+0x28>
		{case SINGLE_MODE:break;
			default:
				  SFIOR&=0x1F;
     d2c:	80 b7       	in	r24, 0x30	; 48
     d2e:	8f 71       	andi	r24, 0x1F	; 31
     d30:	80 bf       	out	0x30, r24	; 48
			      SFIOR|=(MODE>>8);
     d32:	80 b7       	in	r24, 0x30	; 48
     d34:	85 2b       	or	r24, r21
     d36:	80 bf       	out	0x30, r24	; 48
				  break;
		}
		
	}
     d38:	0f 91       	pop	r16
     d3a:	08 95       	ret

00000d3c <ADC_START_READ_INT>:
	return -1;
	}

void ADC_START_READ_INT(ADC_CHANNEL channel)
{
	ADMUX_ACCESS&=0xE0;
     d3c:	97 b1       	in	r25, 0x07	; 7
     d3e:	90 7e       	andi	r25, 0xE0	; 224
     d40:	97 b9       	out	0x07, r25	; 7
	ADMUX_ACCESS|=channel;
     d42:	97 b1       	in	r25, 0x07	; 7
     d44:	89 2b       	or	r24, r25
     d46:	87 b9       	out	0x07, r24	; 7
	setbit(ADC_CTRL_STATUS_ACCESS,6);/* adc start*/
     d48:	36 9a       	sbi	0x06, 6	; 6
     d4a:	08 95       	ret

00000d4c <SPI_INT>:
 */ 

#include "spi.h"
 volatile  SPI_DATA data;
void SPI_INT(SPI_OPMODE opmode, SPI_PRESCALE prescale,SPI_MODE mode, SPI_INTURUPT intupt,SPI_DATA_ORDER order)
{	switch (opmode)
     d4c:	ff 92       	push	r15
     d4e:	0f 93       	push	r16
     d50:	1f 93       	push	r17
     d52:	cf 93       	push	r28
     d54:	df 93       	push	r29
     d56:	c6 2f       	mov	r28, r22
     d58:	f7 2e       	mov	r15, r23
     d5a:	d4 2f       	mov	r29, r20
     d5c:	12 2f       	mov	r17, r18
     d5e:	88 23       	and	r24, r24
     d60:	29 f1       	breq	.+74     	; 0xdac <SPI_INT+0x60>
     d62:	80 31       	cpi	r24, 0x10	; 16
     d64:	89 f5       	brne	.+98     	; 0xdc8 <SPI_INT+0x7c>
	{
		case SPI_MASTER: gpio_outputconfg(DDR_MOSI_ADDRESS,PORT_OUTMOD_MOSI_ADDRESS,OUTPASS,MOSI_PIN);
     d66:	25 e0       	ldi	r18, 0x05	; 5
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	66 e3       	ldi	r22, 0x36	; 54
     d6c:	70 e0       	ldi	r23, 0x00	; 0
     d6e:	87 e3       	ldi	r24, 0x37	; 55
     d70:	90 e0       	ldi	r25, 0x00	; 0
     d72:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
		                 gpio_outputconfg(DDR_SS_ADDRESS,PORT_OUTMOD_SS_ADDRESS,OUTPASS,SS_PIN);
     d76:	24 e0       	ldi	r18, 0x04	; 4
     d78:	40 e0       	ldi	r20, 0x00	; 0
     d7a:	66 e3       	ldi	r22, 0x36	; 54
     d7c:	70 e0       	ldi	r23, 0x00	; 0
     d7e:	87 e3       	ldi	r24, 0x37	; 55
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
						 gpio_outputconfg(DDR_SCK_ADDRESS,PORT_OUTMOD_SCK_ADDRESS,OUTPASS,SCK_PIN);
     d86:	27 e0       	ldi	r18, 0x07	; 7
     d88:	40 e0       	ldi	r20, 0x00	; 0
     d8a:	66 e3       	ldi	r22, 0x36	; 54
     d8c:	70 e0       	ldi	r23, 0x00	; 0
     d8e:	87 e3       	ldi	r24, 0x37	; 55
     d90:	90 e0       	ldi	r25, 0x00	; 0
     d92:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
                        clearbit(*PORT_OUT_SCK_ADDRESS,SCK_PIN);
     d96:	c7 98       	cbi	0x18, 7	; 24
						SPSR_ACCESS &=0xFE;
     d98:	70 98       	cbi	0x0e, 0	; 14
						SPSR_ACCESS |=(prescale>>8);
     d9a:	8e b1       	in	r24, 0x0e	; 14
     d9c:	f8 2a       	or	r15, r24
     d9e:	fe b8       	out	0x0e, r15	; 14
						SPCR_ACCESS=opmode|prescale|mode|intupt|order|0X40;
     da0:	00 65       	ori	r16, 0x50	; 80
     da2:	10 2b       	or	r17, r16
     da4:	d1 2b       	or	r29, r17
     da6:	cd 2b       	or	r28, r29
     da8:	cd b9       	out	0x0d, r28	; 13
						
						 break;	                 
     daa:	0e c0       	rjmp	.+28     	; 0xdc8 <SPI_INT+0x7c>
		
		case SPI_SLAVE: gpio_outputconfg(DDR_MISO_ADDRESS,PORT_OUTMOD_MISO_ADDRESS,OUTPASS,MISO_PIN);
     dac:	26 e0       	ldi	r18, 0x06	; 6
     dae:	40 e0       	ldi	r20, 0x00	; 0
     db0:	66 e3       	ldi	r22, 0x36	; 54
     db2:	70 e0       	ldi	r23, 0x00	; 0
     db4:	87 e3       	ldi	r24, 0x37	; 55
     db6:	90 e0       	ldi	r25, 0x00	; 0
     db8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
		              SPSR_ACCESS &=0xFE;
     dbc:	70 98       	cbi	0x0e, 0	; 14
					  SPCR_ACCESS=opmode|prescale|mode|intupt|order|0X40;
     dbe:	00 64       	ori	r16, 0x40	; 64
     dc0:	10 2b       	or	r17, r16
     dc2:	d1 2b       	or	r29, r17
     dc4:	cd 2b       	or	r28, r29
     dc6:	cd b9       	out	0x0d, r28	; 13

	

/*	setbit(*PORT_OUT_SS_ADDRESS,SS_PIN);*/
/*	setbit(*PORT_OUT_SCK_ADDRESS,SCK_PIN);*/
}
     dc8:	df 91       	pop	r29
     dca:	cf 91       	pop	r28
     dcc:	1f 91       	pop	r17
     dce:	0f 91       	pop	r16
     dd0:	ff 90       	pop	r15
     dd2:	08 95       	ret

00000dd4 <TIMER1_READ_COUNTER>:
	TIMER1_ENABLE(T1_OCA1_DISCONNECT,T1_OCB1_DISCONNECT,T1_NORMAL,clk_pre,0,0,overflowint,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT);
}

unsigned short TIMER1_READ_COUNTER()
{
	unsigned short x= TCNT1L_ACCESS;
     dd4:	8c b5       	in	r24, 0x2c	; 44
	x|=TCNT1H_ACCESS<<8;
     dd6:	2d b5       	in	r18, 0x2d	; 45
     dd8:	90 e0       	ldi	r25, 0x00	; 0
	return x;
}
     dda:	92 2b       	or	r25, r18
     ddc:	08 95       	ret

00000dde <TIMER1_ENABLE>:
				   unsigned short OCR1B_DATA, 
				   T1_INT_DATATYPE TOIE1_state, 
				   T1_INT_DATATYPE OCIE1B_state, 
				   T1_INT_DATATYPE OCIE1A_state, 
				   T1_INT_DATATYPE TICIE1_state)
{
     dde:	8f 92       	push	r8
     de0:	af 92       	push	r10
     de2:	cf 92       	push	r12
     de4:	df 92       	push	r13
     de6:	ef 92       	push	r14
     de8:	ff 92       	push	r15
     dea:	0f 93       	push	r16
     dec:	1f 93       	push	r17
     dee:	cf 93       	push	r28
     df0:	df 93       	push	r29
     df2:	cd b7       	in	r28, 0x3d	; 61
     df4:	de b7       	in	r29, 0x3e	; 62
     df6:	d6 2e       	mov	r13, r22
	TCCR1A_ACCESS=00;
     df8:	1f bc       	out	0x2f, r1	; 47
	TCCR1B_ACCESS=00;
     dfa:	1e bc       	out	0x2e, r1	; 46
	TCCR1A_ACCESS|=COM1A<<6;
     dfc:	9f b5       	in	r25, 0x2f	; 47
     dfe:	30 e4       	ldi	r19, 0x40	; 64
     e00:	83 9f       	mul	r24, r19
     e02:	f0 01       	movw	r30, r0
     e04:	11 24       	eor	r1, r1
     e06:	e9 2b       	or	r30, r25
     e08:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=COM1B<<4;
     e0a:	9f b5       	in	r25, 0x2f	; 47
     e0c:	30 e1       	ldi	r19, 0x10	; 16
     e0e:	63 9f       	mul	r22, r19
     e10:	f0 01       	movw	r30, r0
     e12:	11 24       	eor	r1, r1
     e14:	e9 2b       	or	r30, r25
     e16:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=WGM1&0x03;
     e18:	9f b5       	in	r25, 0x2f	; 47
     e1a:	34 2f       	mov	r19, r20
     e1c:	33 70       	andi	r19, 0x03	; 3
     e1e:	93 2b       	or	r25, r19
     e20:	9f bd       	out	0x2f, r25	; 47
	TCCR1B_ACCESS|=(WGM1&0x0c)<<1;
     e22:	9e b5       	in	r25, 0x2e	; 46
     e24:	4c 70       	andi	r20, 0x0C	; 12
     e26:	44 0f       	add	r20, r20
     e28:	49 2b       	or	r20, r25
     e2a:	4e bd       	out	0x2e, r20	; 46
    OCR1AH_ACCESS=OCR1A_DATA>>8;
     e2c:	1b bd       	out	0x2b, r17	; 43
	OCR1AL_ACCESS=OCR1A_DATA;
     e2e:	0a bd       	out	0x2a, r16	; 42
	OCR1BH_ACCESS=OCR1B_DATA>>8;
     e30:	f9 bc       	out	0x29, r15	; 41
	OCR1BL_ACCESS=OCR1B_DATA;
     e32:	e8 bc       	out	0x28, r14	; 40
	TIMSK_ACCESS&=0xc3;
     e34:	99 b7       	in	r25, 0x39	; 57
     e36:	93 7c       	andi	r25, 0xC3	; 195
     e38:	99 bf       	out	0x39, r25	; 57
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
	TIMSK_ACCESS|=x<<2;
     e3a:	99 b7       	in	r25, 0x39	; 57
    OCR1AH_ACCESS=OCR1A_DATA>>8;
	OCR1AL_ACCESS=OCR1A_DATA;
	OCR1BH_ACCESS=OCR1B_DATA>>8;
	OCR1BL_ACCESS=OCR1B_DATA;
	TIMSK_ACCESS&=0xc3;
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
     e3c:	3d 85       	ldd	r19, Y+13	; 0x0d
     e3e:	33 0f       	add	r19, r19
     e40:	33 0f       	add	r19, r19
     e42:	33 0f       	add	r19, r19
     e44:	c3 2a       	or	r12, r19
     e46:	88 0c       	add	r8, r8
     e48:	88 0c       	add	r8, r8
     e4a:	c8 28       	or	r12, r8
     e4c:	aa 0c       	add	r10, r10
     e4e:	ac 28       	or	r10, r12
	TIMSK_ACCESS|=x<<2;
     e50:	aa 0c       	add	r10, r10
     e52:	aa 0c       	add	r10, r10
     e54:	a9 2a       	or	r10, r25
     e56:	a9 be       	out	0x39, r10	; 57
	TCCR1B_ACCESS|=CS1;
     e58:	9e b5       	in	r25, 0x2e	; 46
     e5a:	29 2b       	or	r18, r25
     e5c:	2e bd       	out	0x2e, r18	; 46
	if (COM1A!=T1_OCA1_DISCONNECT)
     e5e:	88 23       	and	r24, r24
     e60:	41 f0       	breq	.+16     	; 0xe72 <TIMER1_ENABLE+0x94>
	{gpio_outputconfg(DDR_OC1A_ADDRESS,PORT_OUTMOD_OC1A_ADDRESS,OUTPASS,OC1A_PIN);
     e62:	25 e0       	ldi	r18, 0x05	; 5
     e64:	40 e0       	ldi	r20, 0x00	; 0
     e66:	60 e3       	ldi	r22, 0x30	; 48
     e68:	70 e0       	ldi	r23, 0x00	; 0
     e6a:	81 e3       	ldi	r24, 0x31	; 49
     e6c:	90 e0       	ldi	r25, 0x00	; 0
     e6e:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
	}
	if (COM1B!=T1_OCB1_DISCONNECT)
     e72:	dd 20       	and	r13, r13
     e74:	41 f0       	breq	.+16     	; 0xe86 <TIMER1_ENABLE+0xa8>
	{gpio_outputconfg(DDR_OC1B_ADDRESS,PORT_OUTMOD_OC1B_ADDRESS,OUTPASS,OC1B_PIN);
     e76:	24 e0       	ldi	r18, 0x04	; 4
     e78:	40 e0       	ldi	r20, 0x00	; 0
     e7a:	60 e3       	ldi	r22, 0x30	; 48
     e7c:	70 e0       	ldi	r23, 0x00	; 0
     e7e:	81 e3       	ldi	r24, 0x31	; 49
     e80:	90 e0       	ldi	r25, 0x00	; 0
     e82:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
	}
	/**/
	TCCR1A_ACCESS|=0x08;
     e86:	8f b5       	in	r24, 0x2f	; 47
     e88:	88 60       	ori	r24, 0x08	; 8
     e8a:	8f bd       	out	0x2f, r24	; 47
	/**/
}
     e8c:	df 91       	pop	r29
     e8e:	cf 91       	pop	r28
     e90:	1f 91       	pop	r17
     e92:	0f 91       	pop	r16
     e94:	ff 90       	pop	r15
     e96:	ef 90       	pop	r14
     e98:	df 90       	pop	r13
     e9a:	cf 90       	pop	r12
     e9c:	af 90       	pop	r10
     e9e:	8f 90       	pop	r8
     ea0:	08 95       	ret

00000ea2 <PROTOCOL_SETUP>:



void PROTOCOL_SETUP()
{
	 NRF_SETUP_USED_CONFIG();
     ea2:	0e 94 6f 05 	call	0xade	; 0xade <NRF_SETUP_USED_CONFIG>
	 NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[0]);
     ea6:	80 91 61 00 	lds	r24, 0x0061
     eaa:	0e 94 4f 05 	call	0xa9e	; 0xa9e <NRF_UPDATE_USED_CHANNEL>
	 NRF_START_RX_MODE();
     eae:	0e 94 4c 06 	call	0xc98	; 0xc98 <NRF_START_RX_MODE>
     eb2:	08 95       	ret

00000eb4 <PROTOCOL_IO_SETUP>:
	 
}

void PROTOCOL_IO_SETUP()
{
	 NRF_IO_SETUP();
     eb4:	0e 94 56 05 	call	0xaac	; 0xaac <NRF_IO_SETUP>
     eb8:	08 95       	ret

00000eba <PROTOCOL_CHECK_RECIVED_PACKET>:
}


unsigned char PROTOCOL_CHECK_RECIVED_PACKET(unsigned char *PACKET, unsigned char CHECK_ADDRESS, unsigned char *MASTER_ADDRESS,unsigned char LENGTH_LOCAL)
{
     eba:	ff 92       	push	r15
     ebc:	0f 93       	push	r16
     ebe:	1f 93       	push	r17
     ec0:	cf 93       	push	r28
     ec2:	df 93       	push	r29
     ec4:	00 d0       	rcall	.+0      	; 0xec6 <PROTOCOL_CHECK_RECIVED_PACKET+0xc>
     ec6:	cd b7       	in	r28, 0x3d	; 61
     ec8:	de b7       	in	r29, 0x3e	; 62
     eca:	8c 01       	movw	r16, r24
	if (LENGTH_LOCAL!=(0b01111111 & PACKET[0]))
     ecc:	fc 01       	movw	r30, r24
     ece:	80 81       	ld	r24, Z
     ed0:	f8 2f       	mov	r31, r24
     ed2:	ff 77       	andi	r31, 0x7F	; 127
     ed4:	ff 2e       	mov	r15, r31
     ed6:	f2 13       	cpse	r31, r18
     ed8:	42 c0       	rjmp	.+132    	; 0xf5e <PROTOCOL_CHECK_RECIVED_PACKET+0xa4>
	{
		return 0;
	}
	if (PACKET[1]>PROTOCOL_CURRENT_VERSION)
     eda:	f8 01       	movw	r30, r16
     edc:	91 81       	ldd	r25, Z+1	; 0x01
     ede:	92 30       	cpi	r25, 0x02	; 2
     ee0:	08 f0       	brcs	.+2      	; 0xee4 <PROTOCOL_CHECK_RECIVED_PACKET+0x2a>
     ee2:	3f c0       	rjmp	.+126    	; 0xf62 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>
	{
		return 0;
	}
	unsigned char i;
	if (CHECK_ADDRESS)
     ee4:	66 23       	and	r22, r22
     ee6:	79 f0       	breq	.+30     	; 0xf06 <PROTOCOL_CHECK_RECIVED_PACKET+0x4c>
	{
		for(i=0;i<5;i++)
		{
		if (PACKET[2+i]!=MASTER_ADDRESS[i])
     ee8:	22 81       	ldd	r18, Z+2	; 0x02
     eea:	fa 01       	movw	r30, r20
     eec:	90 81       	ld	r25, Z
     eee:	29 13       	cpse	r18, r25
     ef0:	3a c0       	rjmp	.+116    	; 0xf66 <PROTOCOL_CHECK_RECIVED_PACKET+0xac>
     ef2:	d8 01       	movw	r26, r16
     ef4:	13 96       	adiw	r26, 0x03	; 3
     ef6:	31 96       	adiw	r30, 0x01	; 1
     ef8:	94 e0       	ldi	r25, 0x04	; 4
     efa:	3d 91       	ld	r19, X+
     efc:	21 91       	ld	r18, Z+
     efe:	32 13       	cpse	r19, r18
     f00:	34 c0       	rjmp	.+104    	; 0xf6a <PROTOCOL_CHECK_RECIVED_PACKET+0xb0>
     f02:	91 50       	subi	r25, 0x01	; 1
		return 0;
	}
	unsigned char i;
	if (CHECK_ADDRESS)
	{
		for(i=0;i<5;i++)
     f04:	d1 f7       	brne	.-12     	; 0xefa <PROTOCOL_CHECK_RECIVED_PACKET+0x40>
	
	
	
	
	volatile unsigned char HASH_VALUE[2];
	if (0b10000000&PACKET[0])
     f06:	88 23       	and	r24, r24
     f08:	5c f4       	brge	.+22     	; 0xf20 <PROTOCOL_CHECK_RECIVED_PACKET+0x66>
	{
		HASH_PASWORD_KEY(PACKET,HASH_VALUE,LENGTH_LOCAL-2,SENSOR_PASSWORD);
     f0a:	29 e6       	ldi	r18, 0x69	; 105
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	4e ef       	ldi	r20, 0xFE	; 254
     f10:	4f 0d       	add	r20, r15
     f12:	be 01       	movw	r22, r28
     f14:	6f 5f       	subi	r22, 0xFF	; 255
     f16:	7f 4f       	sbci	r23, 0xFF	; 255
     f18:	c8 01       	movw	r24, r16
     f1a:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <HASH_PASWORD_KEY>
     f1e:	0a c0       	rjmp	.+20     	; 0xf34 <PROTOCOL_CHECK_RECIVED_PACKET+0x7a>
	}
	else
	{
		HASH_SESSION_KEY(PACKET,HASH_VALUE,LENGTH_LOCAL-2,SENSOR_SESSION_KEY);
     f20:	25 e0       	ldi	r18, 0x05	; 5
     f22:	32 e0       	ldi	r19, 0x02	; 2
     f24:	4e ef       	ldi	r20, 0xFE	; 254
     f26:	4f 0d       	add	r20, r15
     f28:	be 01       	movw	r22, r28
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	c8 01       	movw	r24, r16
     f30:	0e 94 8f 0c 	call	0x191e	; 0x191e <HASH_SESSION_KEY>
	}
	if ((HASH_VALUE[0]==PACKET[LENGTH_LOCAL-2])&&(HASH_VALUE[1]==PACKET[LENGTH_LOCAL-1]))
     f34:	39 81       	ldd	r19, Y+1	; 0x01
     f36:	8f 2d       	mov	r24, r15
     f38:	90 e0       	ldi	r25, 0x00	; 0
     f3a:	f8 01       	movw	r30, r16
     f3c:	e8 0f       	add	r30, r24
     f3e:	f9 1f       	adc	r31, r25
     f40:	32 97       	sbiw	r30, 0x02	; 2
     f42:	20 81       	ld	r18, Z
     f44:	32 13       	cpse	r19, r18
     f46:	13 c0       	rjmp	.+38     	; 0xf6e <PROTOCOL_CHECK_RECIVED_PACKET+0xb4>
     f48:	2a 81       	ldd	r18, Y+2	; 0x02
     f4a:	08 0f       	add	r16, r24
     f4c:	19 1f       	adc	r17, r25
     f4e:	f8 01       	movw	r30, r16
     f50:	31 97       	sbiw	r30, 0x01	; 1
     f52:	81 e0       	ldi	r24, 0x01	; 1
     f54:	90 81       	ld	r25, Z
     f56:	29 17       	cp	r18, r25
     f58:	59 f0       	breq	.+22     	; 0xf70 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
     f5a:	80 e0       	ldi	r24, 0x00	; 0
     f5c:	09 c0       	rjmp	.+18     	; 0xf70 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>

unsigned char PROTOCOL_CHECK_RECIVED_PACKET(unsigned char *PACKET, unsigned char CHECK_ADDRESS, unsigned char *MASTER_ADDRESS,unsigned char LENGTH_LOCAL)
{
	if (LENGTH_LOCAL!=(0b01111111 & PACKET[0]))
	{
		return 0;
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	07 c0       	rjmp	.+14     	; 0xf70 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
	}
	if (PACKET[1]>PROTOCOL_CURRENT_VERSION)
	{
		return 0;
     f62:	80 e0       	ldi	r24, 0x00	; 0
     f64:	05 c0       	rjmp	.+10     	; 0xf70 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
	{
		for(i=0;i<5;i++)
		{
		if (PACKET[2+i]!=MASTER_ADDRESS[i])
		{
			return 0;
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	03 c0       	rjmp	.+6      	; 0xf70 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
     f6a:	80 e0       	ldi	r24, 0x00	; 0
     f6c:	01 c0       	rjmp	.+2      	; 0xf70 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
	}
	if ((HASH_VALUE[0]==PACKET[LENGTH_LOCAL-2])&&(HASH_VALUE[1]==PACKET[LENGTH_LOCAL-1]))
	{
		return 1;
	}
	return 0;
     f6e:	80 e0       	ldi	r24, 0x00	; 0
	
}
     f70:	0f 90       	pop	r0
     f72:	0f 90       	pop	r0
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	08 95       	ret

00000f80 <PROTOCOL_BEACON>:

unsigned char PROTOCOL_BEACON()
{
     f80:	cf 93       	push	r28
     f82:	df 93       	push	r29
     f84:	00 d0       	rcall	.+0      	; 0xf86 <PROTOCOL_BEACON+0x6>
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
	 volatile unsigned char HASH_VALUE[2];
	 DATA_BUFFER[0]=10|0B00000000;
     f8a:	8a e0       	ldi	r24, 0x0A	; 10
     f8c:	80 93 0c 02 	sts	0x020C, r24
	 DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
     f90:	81 e0       	ldi	r24, 0x01	; 1
     f92:	80 93 0d 02 	sts	0x020D, r24
	 DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
     f96:	80 e2       	ldi	r24, 0x20	; 32
     f98:	80 93 0e 02 	sts	0x020E, r24
	 DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
     f9c:	80 93 0f 02 	sts	0x020F, r24
	 DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
     fa0:	80 93 10 02 	sts	0x0210, r24
	 DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
     fa4:	80 93 11 02 	sts	0x0211, r24
	 DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
     fa8:	80 93 12 02 	sts	0x0212, r24
	 DATA_BUFFER[7]=BEACON_RECEIVED_CODE;
     fac:	86 e0       	ldi	r24, 0x06	; 6
     fae:	80 93 13 02 	sts	0x0213, r24
	 HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,8,SENSOR_SESSION_KEY);
     fb2:	25 e0       	ldi	r18, 0x05	; 5
     fb4:	32 e0       	ldi	r19, 0x02	; 2
     fb6:	48 e0       	ldi	r20, 0x08	; 8
     fb8:	be 01       	movw	r22, r28
     fba:	6f 5f       	subi	r22, 0xFF	; 255
     fbc:	7f 4f       	sbci	r23, 0xFF	; 255
     fbe:	8c e0       	ldi	r24, 0x0C	; 12
     fc0:	92 e0       	ldi	r25, 0x02	; 2
     fc2:	0e 94 8f 0c 	call	0x191e	; 0x191e <HASH_SESSION_KEY>
	 DATA_BUFFER[8]=HASH_VALUE[0];
     fc6:	89 81       	ldd	r24, Y+1	; 0x01
     fc8:	80 93 14 02 	sts	0x0214, r24
	 DATA_BUFFER[9]=HASH_VALUE[1];
     fcc:	8a 81       	ldd	r24, Y+2	; 0x02
     fce:	80 93 15 02 	sts	0x0215, r24
	 if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,10))
     fd2:	2a e0       	ldi	r18, 0x0A	; 10
     fd4:	4c e0       	ldi	r20, 0x0C	; 12
     fd6:	52 e0       	ldi	r21, 0x02	; 2
     fd8:	65 e0       	ldi	r22, 0x05	; 5
     fda:	84 ed       	ldi	r24, 0xD4	; 212
     fdc:	91 e0       	ldi	r25, 0x01	; 1
     fde:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
     fe2:	88 23       	and	r24, r24
     fe4:	19 f0       	breq	.+6      	; 0xfec <PROTOCOL_BEACON+0x6c>
	 {
		 return 0;
	 }
	 C_T_BEACON=0;
     fe6:	10 92 d9 01 	sts	0x01D9, r1
	 return 1;
     fea:	81 e0       	ldi	r24, 0x01	; 1
}
     fec:	0f 90       	pop	r0
     fee:	0f 90       	pop	r0
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	08 95       	ret

00000ff6 <PROTOCOL_SESSION_KEY>:

unsigned char PROTOCOL_SESSION_KEY()
{
     ff6:	cf 93       	push	r28
     ff8:	df 93       	push	r29
     ffa:	00 d0       	rcall	.+0      	; 0xffc <PROTOCOL_SESSION_KEY+0x6>
     ffc:	00 d0       	rcall	.+0      	; 0xffe <PROTOCOL_SESSION_KEY+0x8>
     ffe:	1f 92       	push	r1
    1000:	cd b7       	in	r28, 0x3d	; 61
    1002:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char SESSION_KEY_LOCAL[2];	
	unsigned char TEMP_LOCAL=CHALLANGE_RESULT_SUCCESS;
    1004:	84 e4       	ldi	r24, 0x44	; 68
    1006:	8b 83       	std	Y+3, r24	; 0x03
	DECRYPT_ALGORISM_2_V1(SESSION_KEY_LOCAL,&DATA_BUFFER[8],2,SENSOR_PASSWORD);
    1008:	29 e6       	ldi	r18, 0x69	; 105
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	42 e0       	ldi	r20, 0x02	; 2
    100e:	64 e1       	ldi	r22, 0x14	; 20
    1010:	72 e0       	ldi	r23, 0x02	; 2
    1012:	ce 01       	movw	r24, r28
    1014:	01 96       	adiw	r24, 0x01	; 1
    1016:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <DECRYPT_ALGORISM_2_V1>
	volatile unsigned char HASH_VALUE[2];
	DATA_BUFFER[0]=11|0B10000000;
    101a:	8b e8       	ldi	r24, 0x8B	; 139
    101c:	80 93 0c 02 	sts	0x020C, r24
	DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    1020:	81 e0       	ldi	r24, 0x01	; 1
    1022:	80 93 0d 02 	sts	0x020D, r24
	DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    1026:	80 e2       	ldi	r24, 0x20	; 32
    1028:	80 93 0e 02 	sts	0x020E, r24
	DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    102c:	80 93 0f 02 	sts	0x020F, r24
	DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    1030:	80 93 10 02 	sts	0x0210, r24
	DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1034:	80 93 11 02 	sts	0x0211, r24
	DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    1038:	80 93 12 02 	sts	0x0212, r24
	DATA_BUFFER[7]=NEW_SESSION_KEY_APPLIED_CODE;
    103c:	88 e0       	ldi	r24, 0x08	; 8
    103e:	80 93 13 02 	sts	0x0213, r24
	ENCRYPT_ALGORISM_2_V1(&TEMP_LOCAL,&DATA_BUFFER[8],1,SENSOR_PASSWORD);
    1042:	29 e6       	ldi	r18, 0x69	; 105
    1044:	30 e0       	ldi	r19, 0x00	; 0
    1046:	41 e0       	ldi	r20, 0x01	; 1
    1048:	64 e1       	ldi	r22, 0x14	; 20
    104a:	72 e0       	ldi	r23, 0x02	; 2
    104c:	ce 01       	movw	r24, r28
    104e:	03 96       	adiw	r24, 0x03	; 3
    1050:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <ENCRYPT_ALGORISM_2_V1>
	HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_PASSWORD);
    1054:	29 e6       	ldi	r18, 0x69	; 105
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	49 e0       	ldi	r20, 0x09	; 9
    105a:	be 01       	movw	r22, r28
    105c:	6c 5f       	subi	r22, 0xFC	; 252
    105e:	7f 4f       	sbci	r23, 0xFF	; 255
    1060:	8c e0       	ldi	r24, 0x0C	; 12
    1062:	92 e0       	ldi	r25, 0x02	; 2
    1064:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <HASH_PASWORD_KEY>
	DATA_BUFFER[9]=HASH_VALUE[0];
    1068:	8c 81       	ldd	r24, Y+4	; 0x04
    106a:	80 93 15 02 	sts	0x0215, r24
	DATA_BUFFER[10]=HASH_VALUE[1];
    106e:	8d 81       	ldd	r24, Y+5	; 0x05
    1070:	80 93 16 02 	sts	0x0216, r24
	if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,11))
    1074:	2b e0       	ldi	r18, 0x0B	; 11
    1076:	4c e0       	ldi	r20, 0x0C	; 12
    1078:	52 e0       	ldi	r21, 0x02	; 2
    107a:	65 e0       	ldi	r22, 0x05	; 5
    107c:	84 ed       	ldi	r24, 0xD4	; 212
    107e:	91 e0       	ldi	r25, 0x01	; 1
    1080:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
    1084:	88 23       	and	r24, r24
    1086:	49 f0       	breq	.+18     	; 0x109a <PROTOCOL_SESSION_KEY+0xa4>
	{
		return 0;
	}
	SENSOR_SESSION_KEY[0]=SESSION_KEY_LOCAL[0];
    1088:	89 81       	ldd	r24, Y+1	; 0x01
    108a:	80 93 05 02 	sts	0x0205, r24
	SENSOR_SESSION_KEY[1]=SESSION_KEY_LOCAL[1];	
    108e:	8a 81       	ldd	r24, Y+2	; 0x02
    1090:	80 93 06 02 	sts	0x0206, r24
	 C_T_BEACON=0;
    1094:	10 92 d9 01 	sts	0x01D9, r1
	
	
	
	return 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
}
    109a:	0f 90       	pop	r0
    109c:	0f 90       	pop	r0
    109e:	0f 90       	pop	r0
    10a0:	0f 90       	pop	r0
    10a2:	0f 90       	pop	r0
    10a4:	df 91       	pop	r29
    10a6:	cf 91       	pop	r28
    10a8:	08 95       	ret

000010aa <PROTOCOL_CHANGE_CHANNEL>:

unsigned char PROTOCOL_CHANGE_CHANNEL()
{
    10aa:	cf 93       	push	r28
    10ac:	df 93       	push	r29
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <PROTOCOL_CHANGE_CHANNEL+0x6>
    10b0:	00 d0       	rcall	.+0      	; 0x10b2 <PROTOCOL_CHANGE_CHANNEL+0x8>
    10b2:	cd b7       	in	r28, 0x3d	; 61
    10b4:	de b7       	in	r29, 0x3e	; 62
		unsigned char TEMP_LOCAL=CHALLANGE_RESULT_SUCCESS;
    10b6:	84 e4       	ldi	r24, 0x44	; 68
    10b8:	89 83       	std	Y+1, r24	; 0x01
		unsigned char CHANNEL_LOCAL;
		DECRYPT_ALGORISM_1_V1(&CHANNEL_LOCAL,&DATA_BUFFER[8],1,SENSOR_SESSION_KEY);
    10ba:	25 e0       	ldi	r18, 0x05	; 5
    10bc:	32 e0       	ldi	r19, 0x02	; 2
    10be:	41 e0       	ldi	r20, 0x01	; 1
    10c0:	64 e1       	ldi	r22, 0x14	; 20
    10c2:	72 e0       	ldi	r23, 0x02	; 2
    10c4:	ce 01       	movw	r24, r28
    10c6:	02 96       	adiw	r24, 0x02	; 2
    10c8:	0e 94 3b 0c 	call	0x1876	; 0x1876 <DECRYPT_ALGORISM_1_V1>
		volatile unsigned char HASH_VALUE[2];
		DATA_BUFFER[0]=11|0B00000000;
    10cc:	8b e0       	ldi	r24, 0x0B	; 11
    10ce:	80 93 0c 02 	sts	0x020C, r24
		DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	80 93 0d 02 	sts	0x020D, r24
		DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    10d8:	80 e2       	ldi	r24, 0x20	; 32
    10da:	80 93 0e 02 	sts	0x020E, r24
		DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    10de:	80 93 0f 02 	sts	0x020F, r24
		DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    10e2:	80 93 10 02 	sts	0x0210, r24
		DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    10e6:	80 93 11 02 	sts	0x0211, r24
		DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    10ea:	80 93 12 02 	sts	0x0212, r24
		DATA_BUFFER[7]=CHANNEL_CHANGED_CODE;
    10ee:	8a e0       	ldi	r24, 0x0A	; 10
    10f0:	80 93 13 02 	sts	0x0213, r24
		ENCRYPT_ALGORISM_1_V1(&TEMP_LOCAL,&DATA_BUFFER[8],1,SENSOR_SESSION_KEY);
    10f4:	25 e0       	ldi	r18, 0x05	; 5
    10f6:	32 e0       	ldi	r19, 0x02	; 2
    10f8:	41 e0       	ldi	r20, 0x01	; 1
    10fa:	64 e1       	ldi	r22, 0x14	; 20
    10fc:	72 e0       	ldi	r23, 0x02	; 2
    10fe:	ce 01       	movw	r24, r28
    1100:	01 96       	adiw	r24, 0x01	; 1
    1102:	0e 94 1d 0c 	call	0x183a	; 0x183a <ENCRYPT_ALGORISM_1_V1>
		HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_SESSION_KEY);
    1106:	25 e0       	ldi	r18, 0x05	; 5
    1108:	32 e0       	ldi	r19, 0x02	; 2
    110a:	49 e0       	ldi	r20, 0x09	; 9
    110c:	be 01       	movw	r22, r28
    110e:	6d 5f       	subi	r22, 0xFD	; 253
    1110:	7f 4f       	sbci	r23, 0xFF	; 255
    1112:	8c e0       	ldi	r24, 0x0C	; 12
    1114:	92 e0       	ldi	r25, 0x02	; 2
    1116:	0e 94 8f 0c 	call	0x191e	; 0x191e <HASH_SESSION_KEY>
		DATA_BUFFER[9]=HASH_VALUE[0];
    111a:	8b 81       	ldd	r24, Y+3	; 0x03
    111c:	80 93 15 02 	sts	0x0215, r24
		DATA_BUFFER[10]=HASH_VALUE[1];
    1120:	8c 81       	ldd	r24, Y+4	; 0x04
    1122:	80 93 16 02 	sts	0x0216, r24
		if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,11))
    1126:	2b e0       	ldi	r18, 0x0B	; 11
    1128:	4c e0       	ldi	r20, 0x0C	; 12
    112a:	52 e0       	ldi	r21, 0x02	; 2
    112c:	65 e0       	ldi	r22, 0x05	; 5
    112e:	84 ed       	ldi	r24, 0xD4	; 212
    1130:	91 e0       	ldi	r25, 0x01	; 1
    1132:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
    1136:	88 23       	and	r24, r24
    1138:	e1 f0       	breq	.+56     	; 0x1172 <PROTOCOL_CHANGE_CHANNEL+0xc8>
		{
			return 0;
		}
		NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[CHANNEL_LOCAL]);
    113a:	ea 81       	ldd	r30, Y+2	; 0x02
    113c:	f0 e0       	ldi	r31, 0x00	; 0
    113e:	ef 59       	subi	r30, 0x9F	; 159
    1140:	ff 4f       	sbci	r31, 0xFF	; 255
    1142:	80 81       	ld	r24, Z
    1144:	0e 94 4f 05 	call	0xa9e	; 0xa9e <NRF_UPDATE_USED_CHANNEL>
		 C_T_BEACON=0;
    1148:	10 92 d9 01 	sts	0x01D9, r1
		
		
			USART_SEND_str("CHANNEL :");
    114c:	86 e6       	ldi	r24, 0x66	; 102
    114e:	91 e0       	ldi	r25, 0x01	; 1
    1150:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
				TEST_UART_SEND_VALUE(CHANNEL_LOCAL);
    1154:	2a 81       	ldd	r18, Y+2	; 0x02
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	40 e0       	ldi	r20, 0x00	; 0
    115a:	50 e0       	ldi	r21, 0x00	; 0
    115c:	60 e0       	ldi	r22, 0x00	; 0
    115e:	70 e0       	ldi	r23, 0x00	; 0
    1160:	80 e0       	ldi	r24, 0x00	; 0
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	0e 94 0f 10 	call	0x201e	; 0x201e <TEST_UART_SEND_VALUE>
				USART_SEND_str("\n");
    1168:	84 ed       	ldi	r24, 0xD4	; 212
    116a:	90 e0       	ldi	r25, 0x00	; 0
    116c:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
		
		
		
		
		return 1;
    1170:	81 e0       	ldi	r24, 0x01	; 1
}
    1172:	0f 90       	pop	r0
    1174:	0f 90       	pop	r0
    1176:	0f 90       	pop	r0
    1178:	0f 90       	pop	r0
    117a:	df 91       	pop	r29
    117c:	cf 91       	pop	r28
    117e:	08 95       	ret

00001180 <PROTOCOL_CHANGE_DATA>:

unsigned char PROTOCOL_CHANGE_DATA()
{
    1180:	8f 92       	push	r8
    1182:	9f 92       	push	r9
    1184:	af 92       	push	r10
    1186:	bf 92       	push	r11
    1188:	cf 92       	push	r12
    118a:	df 92       	push	r13
    118c:	ef 92       	push	r14
    118e:	ff 92       	push	r15
    1190:	cf 93       	push	r28
    1192:	df 93       	push	r29
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
    1198:	2a 97       	sbiw	r28, 0x0a	; 10
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	de bf       	out	0x3e, r29	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	cd bf       	out	0x3d, r28	; 61
	unsigned char LOCAL_DATA[4];
	DECRYPT_ALGORISM_1_V1(LOCAL_DATA,&DATA_BUFFER[8],4,SENSOR_SESSION_KEY);
    11a4:	25 e0       	ldi	r18, 0x05	; 5
    11a6:	32 e0       	ldi	r19, 0x02	; 2
    11a8:	44 e0       	ldi	r20, 0x04	; 4
    11aa:	64 e1       	ldi	r22, 0x14	; 20
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	ce 01       	movw	r24, r28
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	0e 94 3b 0c 	call	0x1876	; 0x1876 <DECRYPT_ALGORISM_1_V1>
	
	
	
	volatile unsigned char HASH_VALUE[2];
	DATA_BUFFER[0]=10|0B00000000;
    11b6:	8a e0       	ldi	r24, 0x0A	; 10
    11b8:	80 93 0c 02 	sts	0x020C, r24
	DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    11bc:	81 e0       	ldi	r24, 0x01	; 1
    11be:	80 93 0d 02 	sts	0x020D, r24
	DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    11c2:	80 e2       	ldi	r24, 0x20	; 32
    11c4:	80 93 0e 02 	sts	0x020E, r24
	DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    11c8:	80 93 0f 02 	sts	0x020F, r24
	DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    11cc:	80 93 10 02 	sts	0x0210, r24
	DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    11d0:	80 93 11 02 	sts	0x0211, r24
	DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    11d4:	80 93 12 02 	sts	0x0212, r24
	DATA_BUFFER[7]=DATA_CHANGED_CODE;
    11d8:	81 e1       	ldi	r24, 0x11	; 17
    11da:	80 93 13 02 	sts	0x0213, r24
	HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,8,SENSOR_SESSION_KEY);
    11de:	25 e0       	ldi	r18, 0x05	; 5
    11e0:	32 e0       	ldi	r19, 0x02	; 2
    11e2:	48 e0       	ldi	r20, 0x08	; 8
    11e4:	be 01       	movw	r22, r28
    11e6:	6b 5f       	subi	r22, 0xFB	; 251
    11e8:	7f 4f       	sbci	r23, 0xFF	; 255
    11ea:	8c e0       	ldi	r24, 0x0C	; 12
    11ec:	92 e0       	ldi	r25, 0x02	; 2
    11ee:	0e 94 8f 0c 	call	0x191e	; 0x191e <HASH_SESSION_KEY>
	DATA_BUFFER[8]=HASH_VALUE[0];
    11f2:	8d 81       	ldd	r24, Y+5	; 0x05
    11f4:	80 93 14 02 	sts	0x0214, r24
	DATA_BUFFER[9]=HASH_VALUE[1];
    11f8:	8e 81       	ldd	r24, Y+6	; 0x06
    11fa:	80 93 15 02 	sts	0x0215, r24
	if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,10))
    11fe:	2a e0       	ldi	r18, 0x0A	; 10
    1200:	4c e0       	ldi	r20, 0x0C	; 12
    1202:	52 e0       	ldi	r21, 0x02	; 2
    1204:	65 e0       	ldi	r22, 0x05	; 5
    1206:	84 ed       	ldi	r24, 0xD4	; 212
    1208:	91 e0       	ldi	r25, 0x01	; 1
    120a:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
    120e:	88 23       	and	r24, r24
    1210:	09 f4       	brne	.+2      	; 0x1214 <PROTOCOL_CHANGE_DATA+0x94>
    1212:	4f c0       	rjmp	.+158    	; 0x12b2 <PROTOCOL_CHANGE_DATA+0x132>
	{
		return 0;
	}
	global_interupt_disable();
    1214:	8f b7       	in	r24, 0x3f	; 63
    1216:	8f 77       	andi	r24, 0x7F	; 127
    1218:	8f bf       	out	0x3f, r24	; 63
	MAIN_REGISTERS[(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1])]=((LOCAL_DATA[2]<<8)|(LOCAL_DATA[3]));
    121a:	e9 81       	ldd	r30, Y+1	; 0x01
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	fe 2f       	mov	r31, r30
    1220:	ee 27       	eor	r30, r30
    1222:	8a 81       	ldd	r24, Y+2	; 0x02
    1224:	e8 2b       	or	r30, r24
    1226:	8b 81       	ldd	r24, Y+3	; 0x03
    1228:	90 e0       	ldi	r25, 0x00	; 0
    122a:	98 2f       	mov	r25, r24
    122c:	88 27       	eor	r24, r24
    122e:	2c 81       	ldd	r18, Y+4	; 0x04
    1230:	82 2b       	or	r24, r18
    1232:	ee 0f       	add	r30, r30
    1234:	ff 1f       	adc	r31, r31
    1236:	e2 5e       	subi	r30, 0xE2	; 226
    1238:	fd 4f       	sbci	r31, 0xFD	; 253
    123a:	91 83       	std	Z+1, r25	; 0x01
    123c:	80 83       	st	Z, r24
	global_interupt_enable();
    123e:	8f b7       	in	r24, 0x3f	; 63
    1240:	80 68       	ori	r24, 0x80	; 128
    1242:	8f bf       	out	0x3f, r24	; 63
	 C_T_BEACON=0;
    1244:	10 92 d9 01 	sts	0x01D9, r1
	 
	 
	 
	 volatile unsigned short ADDRESS=(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1]);
    1248:	89 81       	ldd	r24, Y+1	; 0x01
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	98 2f       	mov	r25, r24
    124e:	88 27       	eor	r24, r24
    1250:	2a 81       	ldd	r18, Y+2	; 0x02
    1252:	82 2b       	or	r24, r18
    1254:	98 87       	std	Y+8, r25	; 0x08
    1256:	8f 83       	std	Y+7, r24	; 0x07
	 volatile unsigned short VALUE=((LOCAL_DATA[2]<<8)|(LOCAL_DATA[3]));
    1258:	8b 81       	ldd	r24, Y+3	; 0x03
    125a:	90 e0       	ldi	r25, 0x00	; 0
    125c:	98 2f       	mov	r25, r24
    125e:	88 27       	eor	r24, r24
    1260:	2c 81       	ldd	r18, Y+4	; 0x04
    1262:	82 2b       	or	r24, r18
    1264:	9a 87       	std	Y+10, r25	; 0x0a
    1266:	89 87       	std	Y+9, r24	; 0x09
	 USART_SEND_str("ADDRESS : ");
    1268:	82 e8       	ldi	r24, 0x82	; 130
    126a:	91 e0       	ldi	r25, 0x01	; 1
    126c:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(ADDRESS);
    1270:	8f 80       	ldd	r8, Y+7	; 0x07
    1272:	98 84       	ldd	r9, Y+8	; 0x08
    1274:	28 2d       	mov	r18, r8
    1276:	39 2d       	mov	r19, r9
    1278:	40 e0       	ldi	r20, 0x00	; 0
    127a:	50 e0       	ldi	r21, 0x00	; 0
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	70 e0       	ldi	r23, 0x00	; 0
    1280:	80 e0       	ldi	r24, 0x00	; 0
    1282:	90 e0       	ldi	r25, 0x00	; 0
    1284:	0e 94 0f 10 	call	0x201e	; 0x201e <TEST_UART_SEND_VALUE>
	 USART_SEND_str("  DATA : ");
    1288:	80 e7       	ldi	r24, 0x70	; 112
    128a:	91 e0       	ldi	r25, 0x01	; 1
    128c:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(VALUE);
    1290:	89 84       	ldd	r8, Y+9	; 0x09
    1292:	9a 84       	ldd	r9, Y+10	; 0x0a
    1294:	28 2d       	mov	r18, r8
    1296:	39 2d       	mov	r19, r9
    1298:	40 e0       	ldi	r20, 0x00	; 0
    129a:	50 e0       	ldi	r21, 0x00	; 0
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	80 e0       	ldi	r24, 0x00	; 0
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	0e 94 0f 10 	call	0x201e	; 0x201e <TEST_UART_SEND_VALUE>
	 USART_SEND_str("\n");
    12a8:	84 ed       	ldi	r24, 0xD4	; 212
    12aa:	90 e0       	ldi	r25, 0x00	; 0
    12ac:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 
	 
	return 1;
    12b0:	81 e0       	ldi	r24, 0x01	; 1
}
    12b2:	2a 96       	adiw	r28, 0x0a	; 10
    12b4:	0f b6       	in	r0, 0x3f	; 63
    12b6:	f8 94       	cli
    12b8:	de bf       	out	0x3e, r29	; 62
    12ba:	0f be       	out	0x3f, r0	; 63
    12bc:	cd bf       	out	0x3d, r28	; 61
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	ff 90       	pop	r15
    12c4:	ef 90       	pop	r14
    12c6:	df 90       	pop	r13
    12c8:	cf 90       	pop	r12
    12ca:	bf 90       	pop	r11
    12cc:	af 90       	pop	r10
    12ce:	9f 90       	pop	r9
    12d0:	8f 90       	pop	r8
    12d2:	08 95       	ret

000012d4 <PROTOCOL_READ_DATA>:

unsigned char PROTOCOL_READ_DATA()
{
    12d4:	8f 92       	push	r8
    12d6:	9f 92       	push	r9
    12d8:	af 92       	push	r10
    12da:	bf 92       	push	r11
    12dc:	cf 92       	push	r12
    12de:	df 92       	push	r13
    12e0:	ef 92       	push	r14
    12e2:	ff 92       	push	r15
    12e4:	cf 93       	push	r28
    12e6:	df 93       	push	r29
    12e8:	cd b7       	in	r28, 0x3d	; 61
    12ea:	de b7       	in	r29, 0x3e	; 62
    12ec:	2a 97       	sbiw	r28, 0x0a	; 10
    12ee:	0f b6       	in	r0, 0x3f	; 63
    12f0:	f8 94       	cli
    12f2:	de bf       	out	0x3e, r29	; 62
    12f4:	0f be       	out	0x3f, r0	; 63
    12f6:	cd bf       	out	0x3d, r28	; 61
	unsigned char LOCAL_DATA[4];
	DECRYPT_ALGORISM_1_V1(LOCAL_DATA,&DATA_BUFFER[8],2,SENSOR_SESSION_KEY);
    12f8:	25 e0       	ldi	r18, 0x05	; 5
    12fa:	32 e0       	ldi	r19, 0x02	; 2
    12fc:	42 e0       	ldi	r20, 0x02	; 2
    12fe:	64 e1       	ldi	r22, 0x14	; 20
    1300:	72 e0       	ldi	r23, 0x02	; 2
    1302:	ce 01       	movw	r24, r28
    1304:	01 96       	adiw	r24, 0x01	; 1
    1306:	0e 94 3b 0c 	call	0x1876	; 0x1876 <DECRYPT_ALGORISM_1_V1>
	global_interupt_disable();
    130a:	8f b7       	in	r24, 0x3f	; 63
    130c:	8f 77       	andi	r24, 0x7F	; 127
    130e:	8f bf       	out	0x3f, r24	; 63
	LOCAL_DATA[2]=MAIN_REGISTERS[(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1])]>>8;
    1310:	e9 81       	ldd	r30, Y+1	; 0x01
    1312:	f0 e0       	ldi	r31, 0x00	; 0
    1314:	fe 2f       	mov	r31, r30
    1316:	ee 27       	eor	r30, r30
    1318:	8a 81       	ldd	r24, Y+2	; 0x02
    131a:	e8 2b       	or	r30, r24
    131c:	ee 0f       	add	r30, r30
    131e:	ff 1f       	adc	r31, r31
    1320:	e2 5e       	subi	r30, 0xE2	; 226
    1322:	fd 4f       	sbci	r31, 0xFD	; 253
    1324:	80 81       	ld	r24, Z
    1326:	91 81       	ldd	r25, Z+1	; 0x01
    1328:	9b 83       	std	Y+3, r25	; 0x03
	LOCAL_DATA[3]=MAIN_REGISTERS[(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1])]&0XFF;
    132a:	80 81       	ld	r24, Z
    132c:	91 81       	ldd	r25, Z+1	; 0x01
    132e:	8c 83       	std	Y+4, r24	; 0x04
	global_interupt_enable();
    1330:	8f b7       	in	r24, 0x3f	; 63
    1332:	80 68       	ori	r24, 0x80	; 128
    1334:	8f bf       	out	0x3f, r24	; 63
	
	/*TESTING*/
	 volatile unsigned short ADDRESS=(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1]);
    1336:	89 81       	ldd	r24, Y+1	; 0x01
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	98 2f       	mov	r25, r24
    133c:	88 27       	eor	r24, r24
    133e:	2a 81       	ldd	r18, Y+2	; 0x02
    1340:	82 2b       	or	r24, r18
    1342:	9e 83       	std	Y+6, r25	; 0x06
    1344:	8d 83       	std	Y+5, r24	; 0x05
	 volatile unsigned short VALUE=((LOCAL_DATA[2]<<8)|(LOCAL_DATA[3]));
    1346:	8b 81       	ldd	r24, Y+3	; 0x03
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	98 2f       	mov	r25, r24
    134c:	88 27       	eor	r24, r24
    134e:	2c 81       	ldd	r18, Y+4	; 0x04
    1350:	82 2b       	or	r24, r18
    1352:	98 87       	std	Y+8, r25	; 0x08
    1354:	8f 83       	std	Y+7, r24	; 0x07
	/************/
	
	
	volatile unsigned char HASH_VALUE[2];
	DATA_BUFFER[0]=12|0B00000000;
    1356:	8c e0       	ldi	r24, 0x0C	; 12
    1358:	80 93 0c 02 	sts	0x020C, r24
	DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    135c:	81 e0       	ldi	r24, 0x01	; 1
    135e:	80 93 0d 02 	sts	0x020D, r24
	DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    1362:	80 e2       	ldi	r24, 0x20	; 32
    1364:	80 93 0e 02 	sts	0x020E, r24
	DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    1368:	80 93 0f 02 	sts	0x020F, r24
	DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    136c:	80 93 10 02 	sts	0x0210, r24
	DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1370:	80 93 11 02 	sts	0x0211, r24
	DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    1374:	80 93 12 02 	sts	0x0212, r24
	DATA_BUFFER[7]=DATA_READ_CODE;
    1378:	83 e1       	ldi	r24, 0x13	; 19
    137a:	80 93 13 02 	sts	0x0213, r24
	/*ENCR FUNCTION PUTS 8 , 9*/
	ENCRYPT_ALGORISM_1_V1(&LOCAL_DATA[2],&DATA_BUFFER[8],2,SENSOR_SESSION_KEY);
    137e:	25 e0       	ldi	r18, 0x05	; 5
    1380:	32 e0       	ldi	r19, 0x02	; 2
    1382:	42 e0       	ldi	r20, 0x02	; 2
    1384:	64 e1       	ldi	r22, 0x14	; 20
    1386:	72 e0       	ldi	r23, 0x02	; 2
    1388:	ce 01       	movw	r24, r28
    138a:	03 96       	adiw	r24, 0x03	; 3
    138c:	0e 94 1d 0c 	call	0x183a	; 0x183a <ENCRYPT_ALGORISM_1_V1>
	
	HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,10,SENSOR_SESSION_KEY);
    1390:	25 e0       	ldi	r18, 0x05	; 5
    1392:	32 e0       	ldi	r19, 0x02	; 2
    1394:	4a e0       	ldi	r20, 0x0A	; 10
    1396:	be 01       	movw	r22, r28
    1398:	67 5f       	subi	r22, 0xF7	; 247
    139a:	7f 4f       	sbci	r23, 0xFF	; 255
    139c:	8c e0       	ldi	r24, 0x0C	; 12
    139e:	92 e0       	ldi	r25, 0x02	; 2
    13a0:	0e 94 8f 0c 	call	0x191e	; 0x191e <HASH_SESSION_KEY>
	DATA_BUFFER[10]=HASH_VALUE[0];
    13a4:	89 85       	ldd	r24, Y+9	; 0x09
    13a6:	80 93 16 02 	sts	0x0216, r24
	DATA_BUFFER[11]=HASH_VALUE[1];
    13aa:	8a 85       	ldd	r24, Y+10	; 0x0a
    13ac:	80 93 17 02 	sts	0x0217, r24
	if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,12))
    13b0:	2c e0       	ldi	r18, 0x0C	; 12
    13b2:	4c e0       	ldi	r20, 0x0C	; 12
    13b4:	52 e0       	ldi	r21, 0x02	; 2
    13b6:	65 e0       	ldi	r22, 0x05	; 5
    13b8:	84 ed       	ldi	r24, 0xD4	; 212
    13ba:	91 e0       	ldi	r25, 0x01	; 1
    13bc:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
    13c0:	88 23       	and	r24, r24
    13c2:	39 f1       	breq	.+78     	; 0x1412 <PROTOCOL_READ_DATA+0x13e>
	{
		return 0;
	}
	 C_T_BEACON=0;
    13c4:	10 92 d9 01 	sts	0x01D9, r1
	 
	/*************************/
	 USART_SEND_str("READING ADDRESS : ");
    13c8:	8a e7       	ldi	r24, 0x7A	; 122
    13ca:	91 e0       	ldi	r25, 0x01	; 1
    13cc:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(ADDRESS);
    13d0:	8d 80       	ldd	r8, Y+5	; 0x05
    13d2:	9e 80       	ldd	r9, Y+6	; 0x06
    13d4:	28 2d       	mov	r18, r8
    13d6:	39 2d       	mov	r19, r9
    13d8:	40 e0       	ldi	r20, 0x00	; 0
    13da:	50 e0       	ldi	r21, 0x00	; 0
    13dc:	60 e0       	ldi	r22, 0x00	; 0
    13de:	70 e0       	ldi	r23, 0x00	; 0
    13e0:	80 e0       	ldi	r24, 0x00	; 0
    13e2:	90 e0       	ldi	r25, 0x00	; 0
    13e4:	0e 94 0f 10 	call	0x201e	; 0x201e <TEST_UART_SEND_VALUE>
	 USART_SEND_str("  DATA : ");
    13e8:	80 e7       	ldi	r24, 0x70	; 112
    13ea:	91 e0       	ldi	r25, 0x01	; 1
    13ec:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(VALUE);
    13f0:	8f 80       	ldd	r8, Y+7	; 0x07
    13f2:	98 84       	ldd	r9, Y+8	; 0x08
    13f4:	28 2d       	mov	r18, r8
    13f6:	39 2d       	mov	r19, r9
    13f8:	40 e0       	ldi	r20, 0x00	; 0
    13fa:	50 e0       	ldi	r21, 0x00	; 0
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	80 e0       	ldi	r24, 0x00	; 0
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	0e 94 0f 10 	call	0x201e	; 0x201e <TEST_UART_SEND_VALUE>
	 USART_SEND_str("\n");
    1408:	84 ed       	ldi	r24, 0xD4	; 212
    140a:	90 e0       	ldi	r25, 0x00	; 0
    140c:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 /************************/
	return 1;
    1410:	81 e0       	ldi	r24, 0x01	; 1
}
    1412:	2a 96       	adiw	r28, 0x0a	; 10
    1414:	0f b6       	in	r0, 0x3f	; 63
    1416:	f8 94       	cli
    1418:	de bf       	out	0x3e, r29	; 62
    141a:	0f be       	out	0x3f, r0	; 63
    141c:	cd bf       	out	0x3d, r28	; 61
    141e:	df 91       	pop	r29
    1420:	cf 91       	pop	r28
    1422:	ff 90       	pop	r15
    1424:	ef 90       	pop	r14
    1426:	df 90       	pop	r13
    1428:	cf 90       	pop	r12
    142a:	bf 90       	pop	r11
    142c:	af 90       	pop	r10
    142e:	9f 90       	pop	r9
    1430:	8f 90       	pop	r8
    1432:	08 95       	ret

00001434 <PROTOCOL_CONNECT>:
volatile unsigned char MASTER_ADDRESS_BUFFER[5];
unsigned char PROTOCOL_CONNECT()
{
    1434:	cf 92       	push	r12
    1436:	df 92       	push	r13
    1438:	ef 92       	push	r14
    143a:	ff 92       	push	r15
    143c:	0f 93       	push	r16
    143e:	1f 93       	push	r17
    1440:	cf 93       	push	r28
    1442:	df 93       	push	r29
    1444:	cd b7       	in	r28, 0x3d	; 61
    1446:	de b7       	in	r29, 0x3e	; 62
    1448:	27 97       	sbiw	r28, 0x07	; 7
    144a:	0f b6       	in	r0, 0x3f	; 63
    144c:	f8 94       	cli
    144e:	de bf       	out	0x3e, r29	; 62
    1450:	0f be       	out	0x3f, r0	; 63
    1452:	cd bf       	out	0x3d, r28	; 61
	
	volatile unsigned short R_N=GENNERATE_RANDOM_NUMBER();
    1454:	0e 94 b1 0d 	call	0x1b62	; 0x1b62 <GENNERATE_RANDOM_NUMBER>
    1458:	9a 83       	std	Y+2, r25	; 0x02
    145a:	89 83       	std	Y+1, r24	; 0x01
	volatile unsigned char HASH_VALUE[2];
	unsigned long COUNT_TIMER=0;
	USART_SEND_str("connect request\n");
    145c:	8d e8       	ldi	r24, 0x8D	; 141
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 MASTER_ADDRESS_BUFFER[0]=DATA_BUFFER[2];
    1464:	4e e0       	ldi	r20, 0x0E	; 14
    1466:	52 e0       	ldi	r21, 0x02	; 2
    1468:	fa 01       	movw	r30, r20
    146a:	80 81       	ld	r24, Z
    146c:	80 93 07 02 	sts	0x0207, r24
	 MASTER_ADDRESS_BUFFER[1]=DATA_BUFFER[3];
    1470:	2f e0       	ldi	r18, 0x0F	; 15
    1472:	32 e0       	ldi	r19, 0x02	; 2
    1474:	f9 01       	movw	r30, r18
    1476:	80 81       	ld	r24, Z
    1478:	80 93 08 02 	sts	0x0208, r24
	 MASTER_ADDRESS_BUFFER[2]=DATA_BUFFER[4];
    147c:	80 e1       	ldi	r24, 0x10	; 16
    147e:	92 e0       	ldi	r25, 0x02	; 2
    1480:	fc 01       	movw	r30, r24
    1482:	60 81       	ld	r22, Z
    1484:	60 93 09 02 	sts	0x0209, r22
	 MASTER_ADDRESS_BUFFER[3]=DATA_BUFFER[5];
    1488:	a1 e1       	ldi	r26, 0x11	; 17
    148a:	b2 e0       	ldi	r27, 0x02	; 2
    148c:	6c 91       	ld	r22, X
    148e:	60 93 0a 02 	sts	0x020A, r22
	 MASTER_ADDRESS_BUFFER[4]=DATA_BUFFER[6];
    1492:	02 e1       	ldi	r16, 0x12	; 18
    1494:	12 e0       	ldi	r17, 0x02	; 2
    1496:	f8 01       	movw	r30, r16
    1498:	60 81       	ld	r22, Z
    149a:	60 93 0b 02 	sts	0x020B, r22
	 
	 
	 /*****************SEND CHALLANGE******************/
	 DATA_BUFFER[0]=12|0B10000000;
    149e:	6c e8       	ldi	r22, 0x8C	; 140
    14a0:	60 93 0c 02 	sts	0x020C, r22
	 DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    14a4:	61 e0       	ldi	r22, 0x01	; 1
    14a6:	60 93 0d 02 	sts	0x020D, r22
	 DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    14aa:	60 e2       	ldi	r22, 0x20	; 32
    14ac:	fa 01       	movw	r30, r20
    14ae:	60 83       	st	Z, r22
	 DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    14b0:	f9 01       	movw	r30, r18
    14b2:	60 83       	st	Z, r22
	 DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    14b4:	fc 01       	movw	r30, r24
    14b6:	60 83       	st	Z, r22
	 DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    14b8:	6c 93       	st	X, r22
	 DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    14ba:	f8 01       	movw	r30, r16
    14bc:	60 83       	st	Z, r22
	 DATA_BUFFER[7]=SENSOR_CHALLENGE_CODE;
    14be:	82 e0       	ldi	r24, 0x02	; 2
    14c0:	80 93 13 02 	sts	0x0213, r24
	 DATA_BUFFER[8]=R_N>>8;
    14c4:	89 81       	ldd	r24, Y+1	; 0x01
    14c6:	9a 81       	ldd	r25, Y+2	; 0x02
    14c8:	90 93 14 02 	sts	0x0214, r25
	 DATA_BUFFER[9]=R_N; 
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	80 93 15 02 	sts	0x0215, r24
	 HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,10,SENSOR_PASSWORD);
    14d4:	29 e6       	ldi	r18, 0x69	; 105
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a e0       	ldi	r20, 0x0A	; 10
    14da:	be 01       	movw	r22, r28
    14dc:	6d 5f       	subi	r22, 0xFD	; 253
    14de:	7f 4f       	sbci	r23, 0xFF	; 255
    14e0:	8c e0       	ldi	r24, 0x0C	; 12
    14e2:	92 e0       	ldi	r25, 0x02	; 2
    14e4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <HASH_PASWORD_KEY>
	 DATA_BUFFER[10]=HASH_VALUE[0];
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	80 93 16 02 	sts	0x0216, r24
	 DATA_BUFFER[11]=HASH_VALUE[1];
    14ee:	8c 81       	ldd	r24, Y+4	; 0x04
    14f0:	80 93 17 02 	sts	0x0217, r24
    14f4:	8f e1       	ldi	r24, 0x1F	; 31
    14f6:	9e e4       	ldi	r25, 0x4E	; 78
    14f8:	01 97       	sbiw	r24, 0x01	; 1
    14fa:	f1 f7       	brne	.-4      	; 0x14f8 <PROTOCOL_CONNECT+0xc4>
    14fc:	00 c0       	rjmp	.+0      	; 0x14fe <PROTOCOL_CONNECT+0xca>
    14fe:	00 00       	nop
	 _delay_ms(5);
	 

	 if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS_BUFFER,5,DATA_BUFFER,12))
    1500:	2c e0       	ldi	r18, 0x0C	; 12
    1502:	4c e0       	ldi	r20, 0x0C	; 12
    1504:	52 e0       	ldi	r21, 0x02	; 2
    1506:	65 e0       	ldi	r22, 0x05	; 5
    1508:	87 e0       	ldi	r24, 0x07	; 7
    150a:	92 e0       	ldi	r25, 0x02	; 2
    150c:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
    1510:	18 2f       	mov	r17, r24
    1512:	88 23       	and	r24, r24
    1514:	09 f4       	brne	.+2      	; 0x1518 <PROTOCOL_CONNECT+0xe4>
    1516:	fb c0       	rjmp	.+502    	; 0x170e <PROTOCOL_CONNECT+0x2da>
	 {
		 return 0;
	 }
	  USART_SEND_str("X\n");
    1518:	8e e9       	ldi	r24, 0x9E	; 158
    151a:	91 e0       	ldi	r25, 0x01	; 1
    151c:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 /****************************************************/
	 NRF_START_RX_MODE();
    1520:	0e 94 4c 06 	call	0xc98	; 0xc98 <NRF_START_RX_MODE>
	 
	 COUNT_TIMER=0;
	 while(!NRF_CHECK_RX_PL(DATA_BUFFER,&LENGTH))
    1524:	0f 2e       	mov	r0, r31
    1526:	cc 24       	eor	r12, r12
    1528:	ca 94       	dec	r12
    152a:	dc 2c       	mov	r13, r12
    152c:	ff e0       	ldi	r31, 0x0F	; 15
    152e:	ef 2e       	mov	r14, r31
    1530:	f1 2c       	mov	r15, r1
    1532:	f0 2d       	mov	r31, r0
    1534:	11 c0       	rjmp	.+34     	; 0x1558 <PROTOCOL_CONNECT+0x124>
    1536:	91 e0       	ldi	r25, 0x01	; 1
    1538:	c9 1a       	sub	r12, r25
    153a:	d1 08       	sbc	r13, r1
    153c:	e1 08       	sbc	r14, r1
    153e:	f1 08       	sbc	r15, r1
	 {
		 COUNT_TIMER++;
		 if(COUNT_TIMER==MAX_COUNT_WAIT)
    1540:	c1 14       	cp	r12, r1
    1542:	d1 04       	cpc	r13, r1
    1544:	e1 04       	cpc	r14, r1
    1546:	f1 04       	cpc	r15, r1
    1548:	39 f4       	brne	.+14     	; 0x1558 <PROTOCOL_CONNECT+0x124>
		 {
			USART_SEND_str("XS\n");
    154a:	81 ea       	ldi	r24, 0xA1	; 161
    154c:	91 e0       	ldi	r25, 0x01	; 1
    154e:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
			 NRF_STOP_RX_MODE();
    1552:	0e 94 5d 06 	call	0xcba	; 0xcba <NRF_STOP_RX_MODE>
			 return 0;
    1556:	db c0       	rjmp	.+438    	; 0x170e <PROTOCOL_CONNECT+0x2da>
	  USART_SEND_str("X\n");
	 /****************************************************/
	 NRF_START_RX_MODE();
	 
	 COUNT_TIMER=0;
	 while(!NRF_CHECK_RX_PL(DATA_BUFFER,&LENGTH))
    1558:	62 ed       	ldi	r22, 0xD2	; 210
    155a:	71 e0       	ldi	r23, 0x01	; 1
    155c:	8c e0       	ldi	r24, 0x0C	; 12
    155e:	92 e0       	ldi	r25, 0x02	; 2
    1560:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <NRF_CHECK_RX_PL>
    1564:	18 2f       	mov	r17, r24
    1566:	88 23       	and	r24, r24
    1568:	31 f3       	breq	.-52     	; 0x1536 <PROTOCOL_CONNECT+0x102>
			USART_SEND_str("XS\n");
			 NRF_STOP_RX_MODE();
			 return 0;
		 }
	 }
	 USART_SEND_str("H\n");
    156a:	85 ea       	ldi	r24, 0xA5	; 165
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	 NRF_STOP_RX_MODE();
    1572:	0e 94 5d 06 	call	0xcba	; 0xcba <NRF_STOP_RX_MODE>
	 if (!PROTOCOL_CHECK_RECIVED_PACKET(DATA_BUFFER,1,MASTER_ADDRESS_BUFFER,LENGTH))
    1576:	20 91 d2 01 	lds	r18, 0x01D2
    157a:	47 e0       	ldi	r20, 0x07	; 7
    157c:	52 e0       	ldi	r21, 0x02	; 2
    157e:	61 e0       	ldi	r22, 0x01	; 1
    1580:	8c e0       	ldi	r24, 0x0C	; 12
    1582:	92 e0       	ldi	r25, 0x02	; 2
    1584:	0e 94 5d 07 	call	0xeba	; 0xeba <PROTOCOL_CHECK_RECIVED_PACKET>
    1588:	18 2f       	mov	r17, r24
    158a:	88 23       	and	r24, r24
    158c:	09 f4       	brne	.+2      	; 0x1590 <PROTOCOL_CONNECT+0x15c>
    158e:	bf c0       	rjmp	.+382    	; 0x170e <PROTOCOL_CONNECT+0x2da>
	 {
		 return 0;
	 }
	 if(PROTOCOL_READ_PACKET_TYPE()!=CHALLENGE_ANSWER_CODE)
    1590:	80 91 13 02 	lds	r24, 0x0213
    1594:	83 30       	cpi	r24, 0x03	; 3
    1596:	09 f0       	breq	.+2      	; 0x159a <PROTOCOL_CONNECT+0x166>
    1598:	b9 c0       	rjmp	.+370    	; 0x170c <PROTOCOL_CONNECT+0x2d8>
	 {
		 return 0;
	 }
	 volatile unsigned char RECIVED_R_N[2];
	 DECRYPT_ALGORISM_2_V1(RECIVED_R_N,&DATA_BUFFER[8],2,SENSOR_PASSWORD);
    159a:	29 e6       	ldi	r18, 0x69	; 105
    159c:	30 e0       	ldi	r19, 0x00	; 0
    159e:	42 e0       	ldi	r20, 0x02	; 2
    15a0:	64 e1       	ldi	r22, 0x14	; 20
    15a2:	72 e0       	ldi	r23, 0x02	; 2
    15a4:	ce 01       	movw	r24, r28
    15a6:	05 96       	adiw	r24, 0x05	; 5
    15a8:	0e 94 74 0c 	call	0x18e8	; 0x18e8 <DECRYPT_ALGORISM_2_V1>
	 unsigned char TEMP_1;
	 if ((RECIVED_R_N[0]!=(R_N>>8))||(RECIVED_R_N[1]!=(R_N&0xff)))
    15ac:	2d 81       	ldd	r18, Y+5	; 0x05
    15ae:	89 81       	ldd	r24, Y+1	; 0x01
    15b0:	9a 81       	ldd	r25, Y+2	; 0x02
    15b2:	30 e0       	ldi	r19, 0x00	; 0
    15b4:	89 2f       	mov	r24, r25
    15b6:	99 27       	eor	r25, r25
    15b8:	28 17       	cp	r18, r24
    15ba:	39 07       	cpc	r19, r25
    15bc:	49 f4       	brne	.+18     	; 0x15d0 <PROTOCOL_CONNECT+0x19c>
    15be:	2e 81       	ldd	r18, Y+6	; 0x06
    15c0:	89 81       	ldd	r24, Y+1	; 0x01
    15c2:	9a 81       	ldd	r25, Y+2	; 0x02
    15c4:	30 e0       	ldi	r19, 0x00	; 0
    15c6:	99 27       	eor	r25, r25
    15c8:	28 17       	cp	r18, r24
    15ca:	39 07       	cpc	r19, r25
    15cc:	09 f4       	brne	.+2      	; 0x15d0 <PROTOCOL_CONNECT+0x19c>
    15ce:	43 c0       	rjmp	.+134    	; 0x1656 <PROTOCOL_CONNECT+0x222>
	 {
		  USART_SEND_str("FAIL\n");
    15d0:	88 ea       	ldi	r24, 0xA8	; 168
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
		 /*FAILED*/
		  TEMP_1=CHALLANGE_RESULT_FAILED;
    15d8:	85 e5       	ldi	r24, 0x55	; 85
    15da:	8f 83       	std	Y+7, r24	; 0x07
		  DATA_BUFFER[0]=11|0B10000000;
    15dc:	8b e8       	ldi	r24, 0x8B	; 139
    15de:	80 93 0c 02 	sts	0x020C, r24
		  DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    15e2:	81 e0       	ldi	r24, 0x01	; 1
    15e4:	80 93 0d 02 	sts	0x020D, r24
		  DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    15e8:	80 e2       	ldi	r24, 0x20	; 32
    15ea:	80 93 0e 02 	sts	0x020E, r24
		  DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    15ee:	80 93 0f 02 	sts	0x020F, r24
		  DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    15f2:	80 93 10 02 	sts	0x0210, r24
		  DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    15f6:	80 93 11 02 	sts	0x0211, r24
		  DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    15fa:	80 93 12 02 	sts	0x0212, r24
		  DATA_BUFFER[7]=CHALLENGE_RESULT_CODE;
    15fe:	84 e0       	ldi	r24, 0x04	; 4
    1600:	80 93 13 02 	sts	0x0213, r24
		  ENCRYPT_ALGORISM_2_V1(&TEMP_1,&DATA_BUFFER[8],1,SENSOR_PASSWORD);
    1604:	29 e6       	ldi	r18, 0x69	; 105
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	41 e0       	ldi	r20, 0x01	; 1
    160a:	64 e1       	ldi	r22, 0x14	; 20
    160c:	72 e0       	ldi	r23, 0x02	; 2
    160e:	ce 01       	movw	r24, r28
    1610:	07 96       	adiw	r24, 0x07	; 7
    1612:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <ENCRYPT_ALGORISM_2_V1>
		  HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_PASSWORD);
    1616:	29 e6       	ldi	r18, 0x69	; 105
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	49 e0       	ldi	r20, 0x09	; 9
    161c:	be 01       	movw	r22, r28
    161e:	6d 5f       	subi	r22, 0xFD	; 253
    1620:	7f 4f       	sbci	r23, 0xFF	; 255
    1622:	8c e0       	ldi	r24, 0x0C	; 12
    1624:	92 e0       	ldi	r25, 0x02	; 2
    1626:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <HASH_PASWORD_KEY>
		  DATA_BUFFER[9]=HASH_VALUE[0];
    162a:	8b 81       	ldd	r24, Y+3	; 0x03
    162c:	80 93 15 02 	sts	0x0215, r24
		  DATA_BUFFER[10]=HASH_VALUE[1];
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	80 93 16 02 	sts	0x0216, r24
    1636:	ef e3       	ldi	r30, 0x3F	; 63
    1638:	ff e1       	ldi	r31, 0x1F	; 31
    163a:	31 97       	sbiw	r30, 0x01	; 1
    163c:	f1 f7       	brne	.-4      	; 0x163a <PROTOCOL_CONNECT+0x206>
    163e:	00 c0       	rjmp	.+0      	; 0x1640 <PROTOCOL_CONNECT+0x20c>
    1640:	00 00       	nop
		  _delay_ms(2);
		  NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS_BUFFER,5,DATA_BUFFER,11);
    1642:	2b e0       	ldi	r18, 0x0B	; 11
    1644:	4c e0       	ldi	r20, 0x0C	; 12
    1646:	52 e0       	ldi	r21, 0x02	; 2
    1648:	65 e0       	ldi	r22, 0x05	; 5
    164a:	87 e0       	ldi	r24, 0x07	; 7
    164c:	92 e0       	ldi	r25, 0x02	; 2
    164e:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
		  return 0; 
    1652:	10 e0       	ldi	r17, 0x00	; 0
    1654:	5c c0       	rjmp	.+184    	; 0x170e <PROTOCOL_CONNECT+0x2da>
	 }
	 
	
	 /***********************************************************************************/
	  TEMP_1=CHALLANGE_RESULT_SUCCESS;
    1656:	84 e4       	ldi	r24, 0x44	; 68
    1658:	8f 83       	std	Y+7, r24	; 0x07
	  DATA_BUFFER[0]=11|0B10000000;
    165a:	8b e8       	ldi	r24, 0x8B	; 139
    165c:	80 93 0c 02 	sts	0x020C, r24
	  DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    1660:	81 e0       	ldi	r24, 0x01	; 1
    1662:	80 93 0d 02 	sts	0x020D, r24
	  DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    1666:	80 e2       	ldi	r24, 0x20	; 32
    1668:	80 93 0e 02 	sts	0x020E, r24
	  DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    166c:	80 93 0f 02 	sts	0x020F, r24
	  DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    1670:	80 93 10 02 	sts	0x0210, r24
	  DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1674:	80 93 11 02 	sts	0x0211, r24
	  DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    1678:	80 93 12 02 	sts	0x0212, r24
	  DATA_BUFFER[7]=CHALLENGE_RESULT_CODE;
    167c:	84 e0       	ldi	r24, 0x04	; 4
    167e:	80 93 13 02 	sts	0x0213, r24
	  ENCRYPT_ALGORISM_2_V1(&TEMP_1,&DATA_BUFFER[8],1,SENSOR_PASSWORD);
    1682:	29 e6       	ldi	r18, 0x69	; 105
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	41 e0       	ldi	r20, 0x01	; 1
    1688:	64 e1       	ldi	r22, 0x14	; 20
    168a:	72 e0       	ldi	r23, 0x02	; 2
    168c:	ce 01       	movw	r24, r28
    168e:	07 96       	adiw	r24, 0x07	; 7
    1690:	0e 94 59 0c 	call	0x18b2	; 0x18b2 <ENCRYPT_ALGORISM_2_V1>
	  HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_PASSWORD);
    1694:	29 e6       	ldi	r18, 0x69	; 105
    1696:	30 e0       	ldi	r19, 0x00	; 0
    1698:	49 e0       	ldi	r20, 0x09	; 9
    169a:	be 01       	movw	r22, r28
    169c:	6d 5f       	subi	r22, 0xFD	; 253
    169e:	7f 4f       	sbci	r23, 0xFF	; 255
    16a0:	8c e0       	ldi	r24, 0x0C	; 12
    16a2:	92 e0       	ldi	r25, 0x02	; 2
    16a4:	0e 94 1e 0d 	call	0x1a3c	; 0x1a3c <HASH_PASWORD_KEY>
	  DATA_BUFFER[9]=HASH_VALUE[0];
    16a8:	8b 81       	ldd	r24, Y+3	; 0x03
    16aa:	80 93 15 02 	sts	0x0215, r24
	  DATA_BUFFER[10]=HASH_VALUE[1];
    16ae:	8c 81       	ldd	r24, Y+4	; 0x04
    16b0:	80 93 16 02 	sts	0x0216, r24
    16b4:	8f e3       	ldi	r24, 0x3F	; 63
    16b6:	9f e1       	ldi	r25, 0x1F	; 31
    16b8:	01 97       	sbiw	r24, 0x01	; 1
    16ba:	f1 f7       	brne	.-4      	; 0x16b8 <PROTOCOL_CONNECT+0x284>
    16bc:	00 c0       	rjmp	.+0      	; 0x16be <PROTOCOL_CONNECT+0x28a>
    16be:	00 00       	nop
	  _delay_ms(2);
	  if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS_BUFFER,5,DATA_BUFFER,11))
    16c0:	2b e0       	ldi	r18, 0x0B	; 11
    16c2:	4c e0       	ldi	r20, 0x0C	; 12
    16c4:	52 e0       	ldi	r21, 0x02	; 2
    16c6:	65 e0       	ldi	r22, 0x05	; 5
    16c8:	87 e0       	ldi	r24, 0x07	; 7
    16ca:	92 e0       	ldi	r25, 0x02	; 2
    16cc:	0e 94 f6 05 	call	0xbec	; 0xbec <NRF_SEND_DATA_WITH_ACK>
    16d0:	18 2f       	mov	r17, r24
    16d2:	88 23       	and	r24, r24
    16d4:	e1 f0       	breq	.+56     	; 0x170e <PROTOCOL_CONNECT+0x2da>
	  {
		  return 0;
	  }
	     
	/*CONNECTED*/	
	MASTER_ADDRESS[0]=MASTER_ADDRESS_BUFFER[0];
    16d6:	80 91 07 02 	lds	r24, 0x0207
    16da:	80 93 d4 01 	sts	0x01D4, r24
	MASTER_ADDRESS[1]=MASTER_ADDRESS_BUFFER[1];
    16de:	80 91 08 02 	lds	r24, 0x0208
    16e2:	80 93 d5 01 	sts	0x01D5, r24
	MASTER_ADDRESS[2]=MASTER_ADDRESS_BUFFER[2];
    16e6:	80 91 09 02 	lds	r24, 0x0209
    16ea:	80 93 d6 01 	sts	0x01D6, r24
	MASTER_ADDRESS[3]=MASTER_ADDRESS_BUFFER[3];
    16ee:	80 91 0a 02 	lds	r24, 0x020A
    16f2:	80 93 d7 01 	sts	0x01D7, r24
	MASTER_ADDRESS[4]=MASTER_ADDRESS_BUFFER[4];
    16f6:	80 91 0b 02 	lds	r24, 0x020B
    16fa:	80 93 d8 01 	sts	0x01D8, r24
	F_SENSOR_STATE=CONNECTED_STATE; 
    16fe:	81 e0       	ldi	r24, 0x01	; 1
    1700:	80 93 d3 01 	sts	0x01D3, r24
	C_T_BEACON=0;
    1704:	10 92 d9 01 	sts	0x01D9, r1
	
				
	return 1;
    1708:	11 e0       	ldi	r17, 0x01	; 1
    170a:	01 c0       	rjmp	.+2      	; 0x170e <PROTOCOL_CONNECT+0x2da>
	 {
		 return 0;
	 }
	 if(PROTOCOL_READ_PACKET_TYPE()!=CHALLENGE_ANSWER_CODE)
	 {
		 return 0;
    170c:	10 e0       	ldi	r17, 0x00	; 0
	C_T_BEACON=0;
	
				
	return 1;
	 
}
    170e:	81 2f       	mov	r24, r17
    1710:	27 96       	adiw	r28, 0x07	; 7
    1712:	0f b6       	in	r0, 0x3f	; 63
    1714:	f8 94       	cli
    1716:	de bf       	out	0x3e, r29	; 62
    1718:	0f be       	out	0x3f, r0	; 63
    171a:	cd bf       	out	0x3d, r28	; 61
    171c:	df 91       	pop	r29
    171e:	cf 91       	pop	r28
    1720:	1f 91       	pop	r17
    1722:	0f 91       	pop	r16
    1724:	ff 90       	pop	r15
    1726:	ef 90       	pop	r14
    1728:	df 90       	pop	r13
    172a:	cf 90       	pop	r12
    172c:	08 95       	ret

0000172e <PROTOCOL_SWITCH>:




void PROTOCOL_SWITCH()
{
    172e:	8f 92       	push	r8
    1730:	9f 92       	push	r9
    1732:	af 92       	push	r10
    1734:	bf 92       	push	r11
    1736:	cf 92       	push	r12
    1738:	df 92       	push	r13
    173a:	ef 92       	push	r14
    173c:	ff 92       	push	r15
    173e:	cf 93       	push	r28
    1740:	df 93       	push	r29
    1742:	00 d0       	rcall	.+0      	; 0x1744 <PROTOCOL_SWITCH+0x16>
    1744:	cd b7       	in	r28, 0x3d	; 61
    1746:	de b7       	in	r29, 0x3e	; 62
		if (F_SENSOR_STATE==NOTCONNECTED_STATE)
    1748:	80 91 d3 01 	lds	r24, 0x01D3
    174c:	81 11       	cpse	r24, r1
    174e:	10 c0       	rjmp	.+32     	; 0x1770 <PROTOCOL_SWITCH+0x42>
		{
			if (PROTOCOL_READ_PACKET_TYPE()==MASTER_REQUEST_CONNECT_CODE) /*master want to connect*/
    1750:	80 91 13 02 	lds	r24, 0x0213
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	09 f0       	breq	.+2      	; 0x175a <PROTOCOL_SWITCH+0x2c>
    1758:	63 c0       	rjmp	.+198    	; 0x1820 <PROTOCOL_SWITCH+0xf2>
			{
				if (PROTOCOL_CONNECT())
    175a:	0e 94 1a 0a 	call	0x1434	; 0x1434 <PROTOCOL_CONNECT>
    175e:	88 23       	and	r24, r24
    1760:	09 f4       	brne	.+2      	; 0x1764 <PROTOCOL_SWITCH+0x36>
    1762:	5e c0       	rjmp	.+188    	; 0x1820 <PROTOCOL_SWITCH+0xf2>
				{
					USART_SEND_str("CONNECTED\n");
    1764:	84 ec       	ldi	r24, 0xC4	; 196
    1766:	91 e0       	ldi	r25, 0x01	; 1
    1768:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
					setbit(*PORT_OUT_CONNECTED_LED,CONNECTED_LED_PIN);
    176c:	96 9a       	sbi	0x12, 6	; 18
    176e:	58 c0       	rjmp	.+176    	; 0x1820 <PROTOCOL_SWITCH+0xf2>
				}
			}
		}
		else
		{
			switch (PROTOCOL_READ_PACKET_TYPE())
    1770:	80 91 13 02 	lds	r24, 0x0213
    1774:	89 30       	cpi	r24, 0x09	; 9
    1776:	09 f4       	brne	.+2      	; 0x177a <PROTOCOL_SWITCH+0x4c>
    1778:	41 c0       	rjmp	.+130    	; 0x17fc <PROTOCOL_SWITCH+0xce>
    177a:	28 f4       	brcc	.+10     	; 0x1786 <PROTOCOL_SWITCH+0x58>
    177c:	85 30       	cpi	r24, 0x05	; 5
    177e:	51 f0       	breq	.+20     	; 0x1794 <PROTOCOL_SWITCH+0x66>
    1780:	87 30       	cpi	r24, 0x07	; 7
    1782:	a9 f0       	breq	.+42     	; 0x17ae <PROTOCOL_SWITCH+0x80>
    1784:	4d c0       	rjmp	.+154    	; 0x1820 <PROTOCOL_SWITCH+0xf2>
    1786:	80 31       	cpi	r24, 0x10	; 16
    1788:	09 f4       	brne	.+2      	; 0x178c <PROTOCOL_SWITCH+0x5e>
    178a:	45 c0       	rjmp	.+138    	; 0x1816 <PROTOCOL_SWITCH+0xe8>
    178c:	82 31       	cpi	r24, 0x12	; 18
    178e:	09 f4       	brne	.+2      	; 0x1792 <PROTOCOL_SWITCH+0x64>
    1790:	45 c0       	rjmp	.+138    	; 0x181c <PROTOCOL_SWITCH+0xee>
    1792:	46 c0       	rjmp	.+140    	; 0x1820 <PROTOCOL_SWITCH+0xf2>
			{
				case BEACON_CODE:USART_SEND_str("T B\n");
    1794:	8e ea       	ldi	r24, 0xAE	; 174
    1796:	91 e0       	ldi	r25, 0x01	; 1
    1798:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
									if (PROTOCOL_BEACON())
    179c:	0e 94 c0 07 	call	0xf80	; 0xf80 <PROTOCOL_BEACON>
    17a0:	88 23       	and	r24, r24
    17a2:	f1 f1       	breq	.+124    	; 0x1820 <PROTOCOL_SWITCH+0xf2>
									{
										USART_SEND_str("B\n");
    17a4:	80 eb       	ldi	r24, 0xB0	; 176
    17a6:	91 e0       	ldi	r25, 0x01	; 1
    17a8:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
    17ac:	39 c0       	rjmp	.+114    	; 0x1820 <PROTOCOL_SWITCH+0xf2>
									}
									
								 break;
				
				case NEW_SESSION_KEY_CODE:	USART_SEND_str("T S\n");
    17ae:	83 eb       	ldi	r24, 0xB3	; 179
    17b0:	91 e0       	ldi	r25, 0x01	; 1
    17b2:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
											if (PROTOCOL_SESSION_KEY())
    17b6:	0e 94 fb 07 	call	0xff6	; 0xff6 <PROTOCOL_SESSION_KEY>
    17ba:	88 23       	and	r24, r24
    17bc:	89 f1       	breq	.+98     	; 0x1820 <PROTOCOL_SWITCH+0xf2>
											{
												/*TEST*/
												USART_SEND_str("S: ");
    17be:	88 eb       	ldi	r24, 0xB8	; 184
    17c0:	91 e0       	ldi	r25, 0x01	; 1
    17c2:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
												volatile unsigned short SES_TEST=((SENSOR_SESSION_KEY[0]<<8)|SENSOR_SESSION_KEY[1]);
    17c6:	80 91 05 02 	lds	r24, 0x0205
    17ca:	90 e0       	ldi	r25, 0x00	; 0
    17cc:	98 2f       	mov	r25, r24
    17ce:	88 27       	eor	r24, r24
    17d0:	20 91 06 02 	lds	r18, 0x0206
    17d4:	82 2b       	or	r24, r18
    17d6:	9a 83       	std	Y+2, r25	; 0x02
    17d8:	89 83       	std	Y+1, r24	; 0x01
												
												TEST_UART_SEND_VALUE(SES_TEST);
    17da:	89 80       	ldd	r8, Y+1	; 0x01
    17dc:	9a 80       	ldd	r9, Y+2	; 0x02
    17de:	28 2d       	mov	r18, r8
    17e0:	39 2d       	mov	r19, r9
    17e2:	40 e0       	ldi	r20, 0x00	; 0
    17e4:	50 e0       	ldi	r21, 0x00	; 0
    17e6:	60 e0       	ldi	r22, 0x00	; 0
    17e8:	70 e0       	ldi	r23, 0x00	; 0
    17ea:	80 e0       	ldi	r24, 0x00	; 0
    17ec:	90 e0       	ldi	r25, 0x00	; 0
    17ee:	0e 94 0f 10 	call	0x201e	; 0x201e <TEST_UART_SEND_VALUE>
												USART_SEND_str("\n");
    17f2:	84 ed       	ldi	r24, 0xD4	; 212
    17f4:	90 e0       	ldi	r25, 0x00	; 0
    17f6:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
    17fa:	12 c0       	rjmp	.+36     	; 0x1820 <PROTOCOL_SWITCH+0xf2>
											}
											break;
				
				case MASTER_CHANGE_CHANNEL_CODE:USART_SEND_str("T C\n");
    17fc:	8c eb       	ldi	r24, 0xBC	; 188
    17fe:	91 e0       	ldi	r25, 0x01	; 1
    1800:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
												if (PROTOCOL_CHANGE_CHANNEL())
    1804:	0e 94 55 08 	call	0x10aa	; 0x10aa <PROTOCOL_CHANGE_CHANNEL>
    1808:	88 23       	and	r24, r24
    180a:	51 f0       	breq	.+20     	; 0x1820 <PROTOCOL_SWITCH+0xf2>
												{
													USART_SEND_str("C\n");
    180c:	8e eb       	ldi	r24, 0xBE	; 190
    180e:	91 e0       	ldi	r25, 0x01	; 1
    1810:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
    1814:	05 c0       	rjmp	.+10     	; 0x1820 <PROTOCOL_SWITCH+0xf2>
												}
				
												break;
				
				case MASTER_CHANGE_DATA_CODE:PROTOCOL_CHANGE_DATA();
    1816:	0e 94 c0 08 	call	0x1180	; 0x1180 <PROTOCOL_CHANGE_DATA>
											break;
    181a:	02 c0       	rjmp	.+4      	; 0x1820 <PROTOCOL_SWITCH+0xf2>
				
				case MASTER_NEEDS_DATA_CODE:PROTOCOL_READ_DATA();
    181c:	0e 94 6a 09 	call	0x12d4	; 0x12d4 <PROTOCOL_READ_DATA>
				
				
				
			}
		}
}
    1820:	0f 90       	pop	r0
    1822:	0f 90       	pop	r0
    1824:	df 91       	pop	r29
    1826:	cf 91       	pop	r28
    1828:	ff 90       	pop	r15
    182a:	ef 90       	pop	r14
    182c:	df 90       	pop	r13
    182e:	cf 90       	pop	r12
    1830:	bf 90       	pop	r11
    1832:	af 90       	pop	r10
    1834:	9f 90       	pop	r9
    1836:	8f 90       	pop	r8
    1838:	08 95       	ret

0000183a <ENCRYPT_ALGORISM_1_V1>:
 */ 
#include "SECURITY_DRIVER.h"


void ENCRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    183a:	0f 93       	push	r16
    183c:	1f 93       	push	r17
    183e:	cf 93       	push	r28
    1840:	df 93       	push	r29
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1842:	44 23       	and	r20, r20
    1844:	99 f0       	breq	.+38     	; 0x186c <ENCRYPT_ALGORISM_1_V1+0x32>
    1846:	c8 2f       	mov	r28, r24
    1848:	d9 2f       	mov	r29, r25
    184a:	a6 2f       	mov	r26, r22
    184c:	b7 2f       	mov	r27, r23
    184e:	50 e0       	ldi	r21, 0x00	; 0
	{
		CIPHER_TEXT[i]=PLAIN_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
    1850:	69 91       	ld	r22, Y+
    1852:	05 2f       	mov	r16, r21
    1854:	01 70       	andi	r16, 0x01	; 1
    1856:	10 e0       	ldi	r17, 0x00	; 0
    1858:	c9 01       	movw	r24, r18
    185a:	80 0f       	add	r24, r16
    185c:	91 1f       	adc	r25, r17
    185e:	fc 01       	movw	r30, r24
    1860:	80 81       	ld	r24, Z
    1862:	86 27       	eor	r24, r22
    1864:	8d 93       	st	X+, r24


void ENCRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1866:	5f 5f       	subi	r21, 0xFF	; 255
    1868:	54 13       	cpse	r21, r20
    186a:	f2 cf       	rjmp	.-28     	; 0x1850 <ENCRYPT_ALGORISM_1_V1+0x16>
	{
		CIPHER_TEXT[i]=PLAIN_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
	}
}
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	1f 91       	pop	r17
    1872:	0f 91       	pop	r16
    1874:	08 95       	ret

00001876 <DECRYPT_ALGORISM_1_V1>:

void DECRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    1876:	0f 93       	push	r16
    1878:	1f 93       	push	r17
    187a:	cf 93       	push	r28
    187c:	df 93       	push	r29
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    187e:	44 23       	and	r20, r20
    1880:	99 f0       	breq	.+38     	; 0x18a8 <DECRYPT_ALGORISM_1_V1+0x32>
    1882:	c6 2f       	mov	r28, r22
    1884:	d7 2f       	mov	r29, r23
    1886:	a8 2f       	mov	r26, r24
    1888:	b9 2f       	mov	r27, r25
    188a:	50 e0       	ldi	r21, 0x00	; 0
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
    188c:	69 91       	ld	r22, Y+
    188e:	05 2f       	mov	r16, r21
    1890:	01 70       	andi	r16, 0x01	; 1
    1892:	10 e0       	ldi	r17, 0x00	; 0
    1894:	c9 01       	movw	r24, r18
    1896:	80 0f       	add	r24, r16
    1898:	91 1f       	adc	r25, r17
    189a:	fc 01       	movw	r30, r24
    189c:	80 81       	ld	r24, Z
    189e:	86 27       	eor	r24, r22
    18a0:	8d 93       	st	X+, r24
}

void DECRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    18a2:	5f 5f       	subi	r21, 0xFF	; 255
    18a4:	54 13       	cpse	r21, r20
    18a6:	f2 cf       	rjmp	.-28     	; 0x188c <DECRYPT_ALGORISM_1_V1+0x16>
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
	}
}
    18a8:	df 91       	pop	r29
    18aa:	cf 91       	pop	r28
    18ac:	1f 91       	pop	r17
    18ae:	0f 91       	pop	r16
    18b0:	08 95       	ret

000018b2 <ENCRYPT_ALGORISM_2_V1>:

void ENCRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    18b2:	cf 93       	push	r28
    18b4:	df 93       	push	r29
    18b6:	f9 01       	movw	r30, r18
		unsigned char i;
		for (i=0;i<LENGTH;i++)
    18b8:	44 23       	and	r20, r20
    18ba:	99 f0       	breq	.+38     	; 0x18e2 <ENCRYPT_ALGORISM_2_V1+0x30>
    18bc:	38 2f       	mov	r19, r24
    18be:	c6 2f       	mov	r28, r22
    18c0:	d7 2f       	mov	r29, r23
    18c2:	a8 2f       	mov	r26, r24
    18c4:	b9 2f       	mov	r27, r25
		{
			CIPHER_TEXT[i]=PLAIN_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
    18c6:	9d 91       	ld	r25, X+
    18c8:	21 81       	ldd	r18, Z+1	; 0x01
    18ca:	80 81       	ld	r24, Z
    18cc:	82 27       	eor	r24, r18
    18ce:	22 81       	ldd	r18, Z+2	; 0x02
    18d0:	82 27       	eor	r24, r18
    18d2:	23 81       	ldd	r18, Z+3	; 0x03
    18d4:	82 27       	eor	r24, r18
    18d6:	89 27       	eor	r24, r25
    18d8:	89 93       	st	Y+, r24
    18da:	8a 2f       	mov	r24, r26
    18dc:	83 1b       	sub	r24, r19
}

void ENCRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
		unsigned char i;
		for (i=0;i<LENGTH;i++)
    18de:	84 17       	cp	r24, r20
    18e0:	90 f3       	brcs	.-28     	; 0x18c6 <ENCRYPT_ALGORISM_2_V1+0x14>
		{
			CIPHER_TEXT[i]=PLAIN_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
		}
}
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	08 95       	ret

000018e8 <DECRYPT_ALGORISM_2_V1>:

void DECRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    18e8:	cf 93       	push	r28
    18ea:	df 93       	push	r29
    18ec:	f9 01       	movw	r30, r18
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    18ee:	44 23       	and	r20, r20
    18f0:	99 f0       	breq	.+38     	; 0x1918 <DECRYPT_ALGORISM_2_V1+0x30>
    18f2:	36 2f       	mov	r19, r22
    18f4:	c8 2f       	mov	r28, r24
    18f6:	d9 2f       	mov	r29, r25
    18f8:	a6 2f       	mov	r26, r22
    18fa:	b7 2f       	mov	r27, r23
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
    18fc:	9d 91       	ld	r25, X+
    18fe:	21 81       	ldd	r18, Z+1	; 0x01
    1900:	80 81       	ld	r24, Z
    1902:	82 27       	eor	r24, r18
    1904:	22 81       	ldd	r18, Z+2	; 0x02
    1906:	82 27       	eor	r24, r18
    1908:	23 81       	ldd	r18, Z+3	; 0x03
    190a:	82 27       	eor	r24, r18
    190c:	89 27       	eor	r24, r25
    190e:	89 93       	st	Y+, r24
    1910:	8a 2f       	mov	r24, r26
    1912:	83 1b       	sub	r24, r19
}

void DECRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1914:	84 17       	cp	r24, r20
    1916:	90 f3       	brcs	.-28     	; 0x18fc <DECRYPT_ALGORISM_2_V1+0x14>
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
	}
}
    1918:	df 91       	pop	r29
    191a:	cf 91       	pop	r28
    191c:	08 95       	ret

0000191e <HASH_SESSION_KEY>:

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    191e:	3f 92       	push	r3
    1920:	4f 92       	push	r4
    1922:	5f 92       	push	r5
    1924:	6f 92       	push	r6
    1926:	7f 92       	push	r7
    1928:	8f 92       	push	r8
    192a:	9f 92       	push	r9
    192c:	af 92       	push	r10
    192e:	bf 92       	push	r11
    1930:	cf 92       	push	r12
    1932:	df 92       	push	r13
    1934:	ef 92       	push	r14
    1936:	ff 92       	push	r15
    1938:	0f 93       	push	r16
    193a:	1f 93       	push	r17
    193c:	cf 93       	push	r28
    193e:	df 93       	push	r29
    1940:	8c 01       	movw	r16, r24
    1942:	7b 01       	movw	r14, r22
    1944:	34 2e       	mov	r3, r20
    1946:	69 01       	movw	r12, r18
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1948:	44 23       	and	r20, r20
    194a:	09 f4       	brne	.+2      	; 0x194e <HASH_SESSION_KEY+0x30>
    194c:	44 c0       	rjmp	.+136    	; 0x19d6 <HASH_SESSION_KEY+0xb8>
    194e:	c0 e0       	ldi	r28, 0x00	; 0
}

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    1950:	81 2c       	mov	r8, r1
    1952:	91 2c       	mov	r9, r1
    1954:	54 01       	movw	r10, r8
    1956:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
    1958:	44 24       	eor	r4, r4
    195a:	4a 94       	dec	r4
    195c:	54 2c       	mov	r5, r4
    195e:	61 2c       	mov	r6, r1
    1960:	71 2c       	mov	r7, r1
    1962:	f8 01       	movw	r30, r16
    1964:	ec 0f       	add	r30, r28
    1966:	f1 1d       	adc	r31, r1
    1968:	a0 81       	ld	r26, Z
    196a:	b0 e0       	ldi	r27, 0x00	; 0
    196c:	a5 01       	movw	r20, r10
    196e:	94 01       	movw	r18, r8
    1970:	0e 94 20 13 	call	0x2640	; 0x2640 <__muluhisi3>
    1974:	a3 01       	movw	r20, r6
    1976:	92 01       	movw	r18, r4
    1978:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    197c:	4b 01       	movw	r8, r22
    197e:	5c 01       	movw	r10, r24
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1980:	ce 5f       	subi	r28, 0xFE	; 254
    1982:	c3 15       	cp	r28, r3
    1984:	70 f3       	brcs	.-36     	; 0x1962 <HASH_SESSION_KEY+0x44>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1986:	81 e0       	ldi	r24, 0x01	; 1
    1988:	83 15       	cp	r24, r3
    198a:	70 f5       	brcc	.+92     	; 0x19e8 <HASH_SESSION_KEY+0xca>
    198c:	e8 01       	movw	r28, r16
    198e:	21 96       	adiw	r28, 0x01	; 1
    1990:	0d 5f       	subi	r16, 0xFD	; 253
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	3a 94       	dec	r3
    1996:	3a 94       	dec	r3
    1998:	36 94       	lsr	r3
    199a:	83 2d       	mov	r24, r3
    199c:	90 e0       	ldi	r25, 0x00	; 0
    199e:	88 0f       	add	r24, r24
    19a0:	99 1f       	adc	r25, r25
    19a2:	08 0f       	add	r16, r24
    19a4:	19 1f       	adc	r17, r25
    19a6:	61 e0       	ldi	r22, 0x01	; 1
    19a8:	70 e0       	ldi	r23, 0x00	; 0
    19aa:	80 e0       	ldi	r24, 0x00	; 0
    19ac:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
    19ae:	44 24       	eor	r4, r4
    19b0:	4a 94       	dec	r4
    19b2:	54 2c       	mov	r5, r4
    19b4:	61 2c       	mov	r6, r1
    19b6:	71 2c       	mov	r7, r1
    19b8:	a8 81       	ld	r26, Y
    19ba:	b0 e0       	ldi	r27, 0x00	; 0
    19bc:	9b 01       	movw	r18, r22
    19be:	ac 01       	movw	r20, r24
    19c0:	0e 94 20 13 	call	0x2640	; 0x2640 <__muluhisi3>
    19c4:	a3 01       	movw	r20, r6
    19c6:	92 01       	movw	r18, r4
    19c8:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    19cc:	22 96       	adiw	r28, 0x02	; 2
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    19ce:	c0 17       	cp	r28, r16
    19d0:	d1 07       	cpc	r29, r17
    19d2:	91 f7       	brne	.-28     	; 0x19b8 <HASH_SESSION_KEY+0x9a>
    19d4:	0d c0       	rjmp	.+26     	; 0x19f0 <HASH_SESSION_KEY+0xd2>
}

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    19d6:	81 2c       	mov	r8, r1
    19d8:	91 2c       	mov	r9, r1
    19da:	54 01       	movw	r10, r8
    19dc:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    19de:	61 e0       	ldi	r22, 0x01	; 1
    19e0:	70 e0       	ldi	r23, 0x00	; 0
    19e2:	80 e0       	ldi	r24, 0x00	; 0
    19e4:	90 e0       	ldi	r25, 0x00	; 0
    19e6:	04 c0       	rjmp	.+8      	; 0x19f0 <HASH_SESSION_KEY+0xd2>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    19e8:	61 e0       	ldi	r22, 0x01	; 1
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	80 e0       	ldi	r24, 0x00	; 0
    19ee:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
			}
			TEMP_HASH_VALUE=(HASH_ODD^HASH_EVEN)%0xffff;
    19f0:	68 25       	eor	r22, r8
    19f2:	79 25       	eor	r23, r9
    19f4:	8a 25       	eor	r24, r10
    19f6:	9b 25       	eor	r25, r11
    19f8:	2f ef       	ldi	r18, 0xFF	; 255
    19fa:	3f ef       	ldi	r19, 0xFF	; 255
    19fc:	40 e0       	ldi	r20, 0x00	; 0
    19fe:	50 e0       	ldi	r21, 0x00	; 0
    1a00:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
			HASH_VALUE[0]=(TEMP_HASH_VALUE>>8)^SESSION_KEY[0];
    1a04:	f6 01       	movw	r30, r12
    1a06:	80 81       	ld	r24, Z
    1a08:	78 27       	eor	r23, r24
    1a0a:	f7 01       	movw	r30, r14
    1a0c:	70 83       	st	Z, r23
			HASH_VALUE[1]=(TEMP_HASH_VALUE&0x00ff)^SESSION_KEY[1];
    1a0e:	f6 01       	movw	r30, r12
    1a10:	81 81       	ldd	r24, Z+1	; 0x01
    1a12:	68 27       	eor	r22, r24
    1a14:	f7 01       	movw	r30, r14
    1a16:	61 83       	std	Z+1, r22	; 0x01
				
}
    1a18:	df 91       	pop	r29
    1a1a:	cf 91       	pop	r28
    1a1c:	1f 91       	pop	r17
    1a1e:	0f 91       	pop	r16
    1a20:	ff 90       	pop	r15
    1a22:	ef 90       	pop	r14
    1a24:	df 90       	pop	r13
    1a26:	cf 90       	pop	r12
    1a28:	bf 90       	pop	r11
    1a2a:	af 90       	pop	r10
    1a2c:	9f 90       	pop	r9
    1a2e:	8f 90       	pop	r8
    1a30:	7f 90       	pop	r7
    1a32:	6f 90       	pop	r6
    1a34:	5f 90       	pop	r5
    1a36:	4f 90       	pop	r4
    1a38:	3f 90       	pop	r3
    1a3a:	08 95       	ret

00001a3c <HASH_PASWORD_KEY>:

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    1a3c:	3f 92       	push	r3
    1a3e:	4f 92       	push	r4
    1a40:	5f 92       	push	r5
    1a42:	6f 92       	push	r6
    1a44:	7f 92       	push	r7
    1a46:	8f 92       	push	r8
    1a48:	9f 92       	push	r9
    1a4a:	af 92       	push	r10
    1a4c:	bf 92       	push	r11
    1a4e:	cf 92       	push	r12
    1a50:	df 92       	push	r13
    1a52:	ef 92       	push	r14
    1a54:	ff 92       	push	r15
    1a56:	0f 93       	push	r16
    1a58:	1f 93       	push	r17
    1a5a:	cf 93       	push	r28
    1a5c:	df 93       	push	r29
    1a5e:	8c 01       	movw	r16, r24
    1a60:	6b 01       	movw	r12, r22
    1a62:	34 2e       	mov	r3, r20
    1a64:	79 01       	movw	r14, r18
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1a66:	44 23       	and	r20, r20
    1a68:	09 f4       	brne	.+2      	; 0x1a6c <HASH_PASWORD_KEY+0x30>
    1a6a:	44 c0       	rjmp	.+136    	; 0x1af4 <HASH_PASWORD_KEY+0xb8>
    1a6c:	c0 e0       	ldi	r28, 0x00	; 0
}

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    1a6e:	81 2c       	mov	r8, r1
    1a70:	91 2c       	mov	r9, r1
    1a72:	54 01       	movw	r10, r8
    1a74:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
    1a76:	44 24       	eor	r4, r4
    1a78:	4a 94       	dec	r4
    1a7a:	54 2c       	mov	r5, r4
    1a7c:	61 2c       	mov	r6, r1
    1a7e:	71 2c       	mov	r7, r1
    1a80:	f8 01       	movw	r30, r16
    1a82:	ec 0f       	add	r30, r28
    1a84:	f1 1d       	adc	r31, r1
    1a86:	a0 81       	ld	r26, Z
    1a88:	b0 e0       	ldi	r27, 0x00	; 0
    1a8a:	a5 01       	movw	r20, r10
    1a8c:	94 01       	movw	r18, r8
    1a8e:	0e 94 20 13 	call	0x2640	; 0x2640 <__muluhisi3>
    1a92:	a3 01       	movw	r20, r6
    1a94:	92 01       	movw	r18, r4
    1a96:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    1a9a:	4b 01       	movw	r8, r22
    1a9c:	5c 01       	movw	r10, r24
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1a9e:	ce 5f       	subi	r28, 0xFE	; 254
    1aa0:	c3 15       	cp	r28, r3
    1aa2:	70 f3       	brcs	.-36     	; 0x1a80 <HASH_PASWORD_KEY+0x44>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1aa4:	81 e0       	ldi	r24, 0x01	; 1
    1aa6:	83 15       	cp	r24, r3
    1aa8:	70 f5       	brcc	.+92     	; 0x1b06 <HASH_PASWORD_KEY+0xca>
    1aaa:	e8 01       	movw	r28, r16
    1aac:	21 96       	adiw	r28, 0x01	; 1
    1aae:	0d 5f       	subi	r16, 0xFD	; 253
    1ab0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ab2:	3a 94       	dec	r3
    1ab4:	3a 94       	dec	r3
    1ab6:	36 94       	lsr	r3
    1ab8:	83 2d       	mov	r24, r3
    1aba:	90 e0       	ldi	r25, 0x00	; 0
    1abc:	88 0f       	add	r24, r24
    1abe:	99 1f       	adc	r25, r25
    1ac0:	08 0f       	add	r16, r24
    1ac2:	19 1f       	adc	r17, r25
    1ac4:	61 e0       	ldi	r22, 0x01	; 1
    1ac6:	70 e0       	ldi	r23, 0x00	; 0
    1ac8:	80 e0       	ldi	r24, 0x00	; 0
    1aca:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
    1acc:	44 24       	eor	r4, r4
    1ace:	4a 94       	dec	r4
    1ad0:	54 2c       	mov	r5, r4
    1ad2:	61 2c       	mov	r6, r1
    1ad4:	71 2c       	mov	r7, r1
    1ad6:	a8 81       	ld	r26, Y
    1ad8:	b0 e0       	ldi	r27, 0x00	; 0
    1ada:	9b 01       	movw	r18, r22
    1adc:	ac 01       	movw	r20, r24
    1ade:	0e 94 20 13 	call	0x2640	; 0x2640 <__muluhisi3>
    1ae2:	a3 01       	movw	r20, r6
    1ae4:	92 01       	movw	r18, r4
    1ae6:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    1aea:	22 96       	adiw	r28, 0x02	; 2
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1aec:	c0 17       	cp	r28, r16
    1aee:	d1 07       	cpc	r29, r17
    1af0:	91 f7       	brne	.-28     	; 0x1ad6 <HASH_PASWORD_KEY+0x9a>
    1af2:	0d c0       	rjmp	.+26     	; 0x1b0e <HASH_PASWORD_KEY+0xd2>
}

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    1af4:	81 2c       	mov	r8, r1
    1af6:	91 2c       	mov	r9, r1
    1af8:	54 01       	movw	r10, r8
    1afa:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1afc:	61 e0       	ldi	r22, 0x01	; 1
    1afe:	70 e0       	ldi	r23, 0x00	; 0
    1b00:	80 e0       	ldi	r24, 0x00	; 0
    1b02:	90 e0       	ldi	r25, 0x00	; 0
    1b04:	04 c0       	rjmp	.+8      	; 0x1b0e <HASH_PASWORD_KEY+0xd2>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1b06:	61 e0       	ldi	r22, 0x01	; 1
    1b08:	70 e0       	ldi	r23, 0x00	; 0
    1b0a:	80 e0       	ldi	r24, 0x00	; 0
    1b0c:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
			}
			TEMP_HASH_VALUE=(HASH_ODD^HASH_EVEN)%0xffff;
    1b0e:	68 25       	eor	r22, r8
    1b10:	79 25       	eor	r23, r9
    1b12:	8a 25       	eor	r24, r10
    1b14:	9b 25       	eor	r25, r11
    1b16:	2f ef       	ldi	r18, 0xFF	; 255
    1b18:	3f ef       	ldi	r19, 0xFF	; 255
    1b1a:	40 e0       	ldi	r20, 0x00	; 0
    1b1c:	50 e0       	ldi	r21, 0x00	; 0
    1b1e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
			HASH_VALUE[0]=(TEMP_HASH_VALUE>>8)^PASSWORD_KEY[0]^PASSWORD_KEY[1];
    1b22:	f7 01       	movw	r30, r14
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	80 81       	ld	r24, Z
    1b28:	89 27       	eor	r24, r25
    1b2a:	78 27       	eor	r23, r24
    1b2c:	f6 01       	movw	r30, r12
    1b2e:	70 83       	st	Z, r23
			HASH_VALUE[1]=(TEMP_HASH_VALUE&0x00ff)^PASSWORD_KEY[2]^PASSWORD_KEY[3];
    1b30:	f7 01       	movw	r30, r14
    1b32:	93 81       	ldd	r25, Z+3	; 0x03
    1b34:	82 81       	ldd	r24, Z+2	; 0x02
    1b36:	89 27       	eor	r24, r25
    1b38:	68 27       	eor	r22, r24
    1b3a:	f6 01       	movw	r30, r12
    1b3c:	61 83       	std	Z+1, r22	; 0x01
	
}
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	cf 90       	pop	r12
    1b4e:	bf 90       	pop	r11
    1b50:	af 90       	pop	r10
    1b52:	9f 90       	pop	r9
    1b54:	8f 90       	pop	r8
    1b56:	7f 90       	pop	r7
    1b58:	6f 90       	pop	r6
    1b5a:	5f 90       	pop	r5
    1b5c:	4f 90       	pop	r4
    1b5e:	3f 90       	pop	r3
    1b60:	08 95       	ret

00001b62 <GENNERATE_RANDOM_NUMBER>:
 *  Author: Mina Medhat
 */ 
#include "RANDOM_NUM_GEN.h"
volatile unsigned long RANDOM_NUMBER=1; 
unsigned short GENNERATE_RANDOM_NUMBER()
{
    1b62:	cf 92       	push	r12
    1b64:	df 92       	push	r13
    1b66:	ef 92       	push	r14
    1b68:	ff 92       	push	r15
	   RANDOM_NUMBER=(RANDOM_NUMBER+0x44444*((unsigned long)TIMER1_READ_COUNTER()+1))%(0xffff);
    1b6a:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <TIMER1_READ_COUNTER>
    1b6e:	c0 90 6d 00 	lds	r12, 0x006D
    1b72:	d0 90 6e 00 	lds	r13, 0x006E
    1b76:	e0 90 6f 00 	lds	r14, 0x006F
    1b7a:	f0 90 70 00 	lds	r15, 0x0070
    1b7e:	a0 e0       	ldi	r26, 0x00	; 0
    1b80:	b0 e0       	ldi	r27, 0x00	; 0
    1b82:	9c 01       	movw	r18, r24
    1b84:	ad 01       	movw	r20, r26
    1b86:	2f 5f       	subi	r18, 0xFF	; 255
    1b88:	3f 4f       	sbci	r19, 0xFF	; 255
    1b8a:	4f 4f       	sbci	r20, 0xFF	; 255
    1b8c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b8e:	64 e4       	ldi	r22, 0x44	; 68
    1b90:	74 e4       	ldi	r23, 0x44	; 68
    1b92:	84 e0       	ldi	r24, 0x04	; 4
    1b94:	90 e0       	ldi	r25, 0x00	; 0
    1b96:	0e 94 ee 12 	call	0x25dc	; 0x25dc <__mulsi3>
    1b9a:	6c 0d       	add	r22, r12
    1b9c:	7d 1d       	adc	r23, r13
    1b9e:	8e 1d       	adc	r24, r14
    1ba0:	9f 1d       	adc	r25, r15
    1ba2:	2f ef       	ldi	r18, 0xFF	; 255
    1ba4:	3f ef       	ldi	r19, 0xFF	; 255
    1ba6:	40 e0       	ldi	r20, 0x00	; 0
    1ba8:	50 e0       	ldi	r21, 0x00	; 0
    1baa:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    1bae:	60 93 6d 00 	sts	0x006D, r22
    1bb2:	70 93 6e 00 	sts	0x006E, r23
    1bb6:	80 93 6f 00 	sts	0x006F, r24
    1bba:	90 93 70 00 	sts	0x0070, r25
	   return (unsigned short)RANDOM_NUMBER;
    1bbe:	80 91 6d 00 	lds	r24, 0x006D
    1bc2:	90 91 6e 00 	lds	r25, 0x006E
    1bc6:	a0 91 6f 00 	lds	r26, 0x006F
    1bca:	b0 91 70 00 	lds	r27, 0x0070
}
    1bce:	ff 90       	pop	r15
    1bd0:	ef 90       	pop	r14
    1bd2:	df 90       	pop	r13
    1bd4:	cf 90       	pop	r12
    1bd6:	08 95       	ret

00001bd8 <SENSOR_MANAGE_LOOP>:

volatile unsigned short MAIN_REGISTERS[20];


void SENSOR_MANAGE_LOOP()
{	
    1bd8:	cf 93       	push	r28
    1bda:	df 93       	push	r29
    1bdc:	1f 92       	push	r1
    1bde:	cd b7       	in	r28, 0x3d	; 61
    1be0:	de b7       	in	r29, 0x3e	; 62
	if (NRF_CHECK_RX_PL(DATA_BUFFER,&LENGTH))
    1be2:	62 ed       	ldi	r22, 0xD2	; 210
    1be4:	71 e0       	ldi	r23, 0x01	; 1
    1be6:	8c e0       	ldi	r24, 0x0C	; 12
    1be8:	92 e0       	ldi	r25, 0x02	; 2
    1bea:	0e 94 6b 06 	call	0xcd6	; 0xcd6 <NRF_CHECK_RX_PL>
    1bee:	88 23       	and	r24, r24
    1bf0:	c1 f0       	breq	.+48     	; 0x1c22 <SENSOR_MANAGE_LOOP+0x4a>
	{
		USART_SEND_str("R\n");
    1bf2:	83 e3       	ldi	r24, 0x33	; 51
    1bf4:	91 e0       	ldi	r25, 0x01	; 1
    1bf6:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
		volatile unsigned char TEMP=0;
    1bfa:	19 82       	std	Y+1, r1	; 0x01
		if (F_SENSOR_STATE==CONNECTED_STATE)
    1bfc:	80 91 d3 01 	lds	r24, 0x01D3
    1c00:	81 30       	cpi	r24, 0x01	; 1
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <SENSOR_MANAGE_LOOP+0x2e>
		{
			TEMP=1;	
    1c04:	89 83       	std	Y+1, r24	; 0x01
		}		
		if (PROTOCOL_CHECK_RECIVED_PACKET(DATA_BUFFER,TEMP,MASTER_ADDRESS, LENGTH))
    1c06:	20 91 d2 01 	lds	r18, 0x01D2
    1c0a:	69 81       	ldd	r22, Y+1	; 0x01
    1c0c:	44 ed       	ldi	r20, 0xD4	; 212
    1c0e:	51 e0       	ldi	r21, 0x01	; 1
    1c10:	8c e0       	ldi	r24, 0x0C	; 12
    1c12:	92 e0       	ldi	r25, 0x02	; 2
    1c14:	0e 94 5d 07 	call	0xeba	; 0xeba <PROTOCOL_CHECK_RECIVED_PACKET>
    1c18:	81 11       	cpse	r24, r1
		{
		/*USART_SEND_str("checked1\n");*/
			PROTOCOL_SWITCH();
    1c1a:	0e 94 97 0b 	call	0x172e	; 0x172e <PROTOCOL_SWITCH>
		}		
		NRF_START_RX_MODE();
    1c1e:	0e 94 4c 06 	call	0xc98	; 0xc98 <NRF_START_RX_MODE>
	}
	
	if (F_SENSOR_STATE==CONNECTED_STATE)
    1c22:	80 91 d3 01 	lds	r24, 0x01D3
    1c26:	81 30       	cpi	r24, 0x01	; 1
    1c28:	a9 f4       	brne	.+42     	; 0x1c54 <SENSOR_MANAGE_LOOP+0x7c>
	{
		
		if (C_T_BEACON==MAX_C_T_BEACON)
    1c2a:	80 91 d9 01 	lds	r24, 0x01D9
    1c2e:	8a 30       	cpi	r24, 0x0A	; 10
    1c30:	89 f4       	brne	.+34     	; 0x1c54 <SENSOR_MANAGE_LOOP+0x7c>
		{
			C_T_BEACON=0;
    1c32:	10 92 d9 01 	sts	0x01D9, r1
			F_SENSOR_STATE=NOTCONNECTED_STATE;
    1c36:	10 92 d3 01 	sts	0x01D3, r1
			NRF_STOP_RX_MODE();
    1c3a:	0e 94 5d 06 	call	0xcba	; 0xcba <NRF_STOP_RX_MODE>
			NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[0]);
    1c3e:	80 91 61 00 	lds	r24, 0x0061
    1c42:	0e 94 4f 05 	call	0xa9e	; 0xa9e <NRF_UPDATE_USED_CHANNEL>
			NRF_START_RX_MODE();
    1c46:	0e 94 4c 06 	call	0xc98	; 0xc98 <NRF_START_RX_MODE>
			clearbit(*PORT_OUT_CONNECTED_LED,CONNECTED_LED_PIN);
    1c4a:	96 98       	cbi	0x12, 6	; 18
			USART_SEND_str("DISCONNECTED\n");
    1c4c:	81 ec       	ldi	r24, 0xC1	; 193
    1c4e:	91 e0       	ldi	r25, 0x01	; 1
    1c50:	0e 94 21 11 	call	0x2242	; 0x2242 <USART_SEND_str>
	

			
		
	
}
    1c54:	0f 90       	pop	r0
    1c56:	df 91       	pop	r29
    1c58:	cf 91       	pop	r28
    1c5a:	08 95       	ret

00001c5c <SENSOR_IO_SETUP>:

void SENSOR_IO_SETUP()
{
	PROTOCOL_IO_SETUP();
    1c5c:	0e 94 5a 07 	call	0xeb4	; 0xeb4 <PROTOCOL_IO_SETUP>
	gpio_outputconfg(PORT_DDR_CONNECTED_LED,PORT_OUTMOD_CONNECTED_LED,OUTPASS,CONNECTED_LED_PIN);
    1c60:	26 e0       	ldi	r18, 0x06	; 6
    1c62:	40 e0       	ldi	r20, 0x00	; 0
    1c64:	60 e3       	ldi	r22, 0x30	; 48
    1c66:	70 e0       	ldi	r23, 0x00	; 0
    1c68:	81 e3       	ldi	r24, 0x31	; 49
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
    1c70:	08 95       	ret

00001c72 <SENSOR_SETUP>:
}

void SENSOR_SETUP()
{
	 PROTOCOL_SETUP();
    1c72:	0e 94 51 07 	call	0xea2	; 0xea2 <PROTOCOL_SETUP>
    1c76:	08 95       	ret

00001c78 <SENSOR_TIMER1>:
	 
}

void SENSOR_TIMER1()
{
	if (C_T_BEACON!=MAX_C_T_BEACON)
    1c78:	80 91 d9 01 	lds	r24, 0x01D9
    1c7c:	8a 30       	cpi	r24, 0x0A	; 10
    1c7e:	29 f0       	breq	.+10     	; 0x1c8a <SENSOR_TIMER1+0x12>
	{
		C_T_BEACON++;
    1c80:	80 91 d9 01 	lds	r24, 0x01D9
    1c84:	8f 5f       	subi	r24, 0xFF	; 255
    1c86:	80 93 d9 01 	sts	0x01D9, r24
    1c8a:	08 95       	ret

00001c8c <inttostring>:
 * Created: 9/1/2020 12:42:54 PM
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long long thenumber)
{
    1c8c:	2f 92       	push	r2
    1c8e:	3f 92       	push	r3
    1c90:	4f 92       	push	r4
    1c92:	5f 92       	push	r5
    1c94:	6f 92       	push	r6
    1c96:	7f 92       	push	r7
    1c98:	8f 92       	push	r8
    1c9a:	9f 92       	push	r9
    1c9c:	af 92       	push	r10
    1c9e:	bf 92       	push	r11
    1ca0:	cf 92       	push	r12
    1ca2:	df 92       	push	r13
    1ca4:	ef 92       	push	r14
    1ca6:	ff 92       	push	r15
    1ca8:	0f 93       	push	r16
    1caa:	1f 93       	push	r17
    1cac:	cf 93       	push	r28
    1cae:	df 93       	push	r29
    1cb0:	cd b7       	in	r28, 0x3d	; 61
    1cb2:	de b7       	in	r29, 0x3e	; 62
    1cb4:	6a 97       	sbiw	r28, 0x1a	; 26
    1cb6:	0f b6       	in	r0, 0x3f	; 63
    1cb8:	f8 94       	cli
    1cba:	de bf       	out	0x3e, r29	; 62
    1cbc:	0f be       	out	0x3f, r0	; 63
    1cbe:	cd bf       	out	0x3d, r28	; 61
    1cc0:	1c 01       	movw	r2, r24
    1cc2:	09 83       	std	Y+1, r16	; 0x01
    1cc4:	19 87       	std	Y+9, r17	; 0x09
    1cc6:	2a 8b       	std	Y+18, r18	; 0x12
    1cc8:	3b 8b       	std	Y+19, r19	; 0x13
    1cca:	4d 8b       	std	Y+21, r20	; 0x15
    1ccc:	85 2e       	mov	r8, r21
    1cce:	69 8f       	std	Y+25, r22	; 0x19
    1cd0:	7a 8f       	std	Y+26, r23	; 0x1a
	unsigned char counter=0;
	unsigned long the_scaler=1000000000;
	if (thenumber<0)
    1cd2:	20 2f       	mov	r18, r16
    1cd4:	31 2f       	mov	r19, r17
    1cd6:	4a 89       	ldd	r20, Y+18	; 0x12
    1cd8:	5b 89       	ldd	r21, Y+19	; 0x13
    1cda:	6d 89       	ldd	r22, Y+21	; 0x15
    1cdc:	78 2d       	mov	r23, r8
    1cde:	89 8d       	ldd	r24, Y+25	; 0x19
    1ce0:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ce2:	a0 e0       	ldi	r26, 0x00	; 0
    1ce4:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpdi2_s8>
    1ce8:	8c f4       	brge	.+34     	; 0x1d0c <inttostring+0x80>
	{
		the_return[0]='-';
    1cea:	8d e2       	ldi	r24, 0x2D	; 45
    1cec:	f1 01       	movw	r30, r2
    1cee:	80 83       	st	Z, r24
		thenumber=thenumber*(-1);
    1cf0:	89 8d       	ldd	r24, Y+25	; 0x19
    1cf2:	0e 94 bb 13 	call	0x2776	; 0x2776 <__negdi2>
    1cf6:	29 83       	std	Y+1, r18	; 0x01
    1cf8:	39 87       	std	Y+9, r19	; 0x09
    1cfa:	4a 8b       	std	Y+18, r20	; 0x12
    1cfc:	5b 8b       	std	Y+19, r21	; 0x13
    1cfe:	6d 8b       	std	Y+21, r22	; 0x15
    1d00:	87 2e       	mov	r8, r23
    1d02:	89 8f       	std	Y+25, r24	; 0x19
    1d04:	9a 8f       	std	Y+26, r25	; 0x1a
		counter=1;
    1d06:	99 24       	eor	r9, r9
    1d08:	93 94       	inc	r9
    1d0a:	01 c0       	rjmp	.+2      	; 0x1d0e <inttostring+0x82>
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long long thenumber)
{
	unsigned char counter=0;
    1d0c:	91 2c       	mov	r9, r1
	{
		the_return[0]='-';
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
    1d0e:	29 81       	ldd	r18, Y+1	; 0x01
    1d10:	39 85       	ldd	r19, Y+9	; 0x09
    1d12:	4a 89       	ldd	r20, Y+18	; 0x12
    1d14:	5b 89       	ldd	r21, Y+19	; 0x13
    1d16:	6d 89       	ldd	r22, Y+21	; 0x15
    1d18:	78 2d       	mov	r23, r8
    1d1a:	89 8d       	ldd	r24, Y+25	; 0x19
    1d1c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1d1e:	a0 e0       	ldi	r26, 0x00	; 0
    1d20:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpdi2_s8>
    1d24:	c9 f0       	breq	.+50     	; 0x1d58 <inttostring+0xcc>
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
    1d26:	a1 2c       	mov	r10, r1
    1d28:	0f 2e       	mov	r0, r31
    1d2a:	fa ec       	ldi	r31, 0xCA	; 202
    1d2c:	bf 2e       	mov	r11, r31
    1d2e:	f0 2d       	mov	r31, r0
    1d30:	0f 2e       	mov	r0, r31
    1d32:	fa e9       	ldi	r31, 0x9A	; 154
    1d34:	cf 2e       	mov	r12, r31
    1d36:	f0 2d       	mov	r31, r0
    1d38:	0f 2e       	mov	r0, r31
    1d3a:	fb e3       	ldi	r31, 0x3B	; 59
    1d3c:	df 2e       	mov	r13, r31
    1d3e:	f0 2d       	mov	r31, r0
    1d40:	e1 2c       	mov	r14, r1
    1d42:	f1 2c       	mov	r15, r1
    1d44:	00 e0       	ldi	r16, 0x00	; 0
    1d46:	10 e0       	ldi	r17, 0x00	; 0
    1d48:	0e 94 2d 13 	call	0x265a	; 0x265a <__divdi3>
    1d4c:	b2 2f       	mov	r27, r18
    1d4e:	a0 e0       	ldi	r26, 0x00	; 0
    1d50:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpdi2_s8>
    1d54:	31 f0       	breq	.+12     	; 0x1d62 <inttostring+0xd6>
    1d56:	cf c0       	rjmp	.+414    	; 0x1ef6 <inttostring+0x26a>
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
	{
		the_return[0]='0';
    1d58:	80 e3       	ldi	r24, 0x30	; 48
    1d5a:	f1 01       	movw	r30, r2
    1d5c:	80 83       	st	Z, r24
		return 1;
    1d5e:	81 e0       	ldi	r24, 0x01	; 1
    1d60:	04 c1       	rjmp	.+520    	; 0x1f6a <inttostring+0x2de>
	}
	while (thenumber/the_scaler==0)
    1d62:	0f 2e       	mov	r0, r31
    1d64:	41 2c       	mov	r4, r1
    1d66:	fa ec       	ldi	r31, 0xCA	; 202
    1d68:	5f 2e       	mov	r5, r31
    1d6a:	fa e9       	ldi	r31, 0x9A	; 154
    1d6c:	6f 2e       	mov	r6, r31
    1d6e:	fb e3       	ldi	r31, 0x3B	; 59
    1d70:	7f 2e       	mov	r7, r31
    1d72:	f0 2d       	mov	r31, r0
	{
		the_scaler=the_scaler/10;
    1d74:	9a 86       	std	Y+10, r9	; 0x0a
    1d76:	38 8e       	std	Y+24, r3	; 0x18
    1d78:	2f 8a       	std	Y+23, r2	; 0x17
    1d7a:	9a 88       	ldd	r9, Y+18	; 0x12
    1d7c:	3b 88       	ldd	r3, Y+19	; 0x13
    1d7e:	2d 88       	ldd	r2, Y+21	; 0x15
    1d80:	c3 01       	movw	r24, r6
    1d82:	b2 01       	movw	r22, r4
    1d84:	2a e0       	ldi	r18, 0x0A	; 10
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e0       	ldi	r20, 0x00	; 0
    1d8a:	50 e0       	ldi	r21, 0x00	; 0
    1d8c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    1d90:	29 01       	movw	r4, r18
    1d92:	3a 01       	movw	r6, r20
	if (thenumber==0)
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
    1d94:	89 01       	movw	r16, r18
    1d96:	9a 01       	movw	r18, r20
    1d98:	a0 2e       	mov	r10, r16
    1d9a:	b1 2e       	mov	r11, r17
    1d9c:	c2 2e       	mov	r12, r18
    1d9e:	d3 2e       	mov	r13, r19
    1da0:	e1 2c       	mov	r14, r1
    1da2:	f1 2c       	mov	r15, r1
    1da4:	00 e0       	ldi	r16, 0x00	; 0
    1da6:	10 e0       	ldi	r17, 0x00	; 0
    1da8:	29 81       	ldd	r18, Y+1	; 0x01
    1daa:	39 85       	ldd	r19, Y+9	; 0x09
    1dac:	49 2d       	mov	r20, r9
    1dae:	53 2d       	mov	r21, r3
    1db0:	62 2d       	mov	r22, r2
    1db2:	78 2d       	mov	r23, r8
    1db4:	89 8d       	ldd	r24, Y+25	; 0x19
    1db6:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1db8:	0e 94 2d 13 	call	0x265a	; 0x265a <__divdi3>
    1dbc:	a0 e0       	ldi	r26, 0x00	; 0
    1dbe:	0e 94 02 14 	call	0x2804	; 0x2804 <__cmpdi2_s8>
    1dc2:	f1 f2       	breq	.-68     	; 0x1d80 <inttostring+0xf4>
    1dc4:	9a 84       	ldd	r9, Y+10	; 0x0a
    1dc6:	2f 88       	ldd	r2, Y+23	; 0x17
    1dc8:	38 8c       	ldd	r3, Y+24	; 0x18
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    1dca:	93 01       	movw	r18, r6
    1dcc:	82 01       	movw	r16, r4
    1dce:	40 e0       	ldi	r20, 0x00	; 0
    1dd0:	50 e0       	ldi	r21, 0x00	; 0
    1dd2:	ba 01       	movw	r22, r20
    1dd4:	71 01       	movw	r14, r2
    1dd6:	e9 0c       	add	r14, r9
    1dd8:	f1 1c       	adc	r15, r1
    1dda:	f8 8e       	std	Y+24, r15	; 0x18
    1ddc:	ef 8a       	std	Y+23, r14	; 0x17
    1dde:	4a 86       	std	Y+10, r4	; 0x0a
    1de0:	1b 87       	std	Y+11, r17	; 0x0b
    1de2:	2c 87       	std	Y+12, r18	; 0x0c
    1de4:	3d 87       	std	Y+13, r19	; 0x0d
    1de6:	4e 87       	std	Y+14, r20	; 0x0e
    1de8:	5f 87       	std	Y+15, r21	; 0x0f
    1dea:	68 8b       	std	Y+16, r22	; 0x10
    1dec:	79 8b       	std	Y+17, r23	; 0x11
    1dee:	a4 2c       	mov	r10, r4
    1df0:	b1 2e       	mov	r11, r17
    1df2:	c2 2e       	mov	r12, r18
    1df4:	d3 2e       	mov	r13, r19
    1df6:	e1 2c       	mov	r14, r1
    1df8:	f1 2c       	mov	r15, r1
    1dfa:	00 e0       	ldi	r16, 0x00	; 0
    1dfc:	10 e0       	ldi	r17, 0x00	; 0
    1dfe:	29 81       	ldd	r18, Y+1	; 0x01
    1e00:	39 85       	ldd	r19, Y+9	; 0x09
    1e02:	4a 89       	ldd	r20, Y+18	; 0x12
    1e04:	5b 89       	ldd	r21, Y+19	; 0x13
    1e06:	6d 89       	ldd	r22, Y+21	; 0x15
    1e08:	78 2d       	mov	r23, r8
    1e0a:	89 8d       	ldd	r24, Y+25	; 0x19
    1e0c:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e0e:	0e 94 2d 13 	call	0x265a	; 0x265a <__divdi3>
    1e12:	20 5d       	subi	r18, 0xD0	; 208
    1e14:	ef 89       	ldd	r30, Y+23	; 0x17
    1e16:	f8 8d       	ldd	r31, Y+24	; 0x18
    1e18:	20 83       	st	Z, r18
			counter++;
    1e1a:	93 94       	inc	r9
			thenumber=thenumber%the_scaler;
    1e1c:	29 81       	ldd	r18, Y+1	; 0x01
    1e1e:	39 85       	ldd	r19, Y+9	; 0x09
    1e20:	4a 89       	ldd	r20, Y+18	; 0x12
    1e22:	5b 89       	ldd	r21, Y+19	; 0x13
    1e24:	6d 89       	ldd	r22, Y+21	; 0x15
    1e26:	78 2d       	mov	r23, r8
    1e28:	89 8d       	ldd	r24, Y+25	; 0x19
    1e2a:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e2c:	0e 94 2b 13 	call	0x2656	; 0x2656 <__moddi3>
    1e30:	82 2e       	mov	r8, r18
    1e32:	39 87       	std	Y+9, r19	; 0x09
    1e34:	4a 87       	std	Y+10, r20	; 0x0a
    1e36:	e5 2e       	mov	r14, r21
    1e38:	16 2f       	mov	r17, r22
    1e3a:	07 2f       	mov	r16, r23
    1e3c:	f8 2e       	mov	r15, r24
    1e3e:	9a 8b       	std	Y+18, r25	; 0x12
			if (the_scaler==1)
    1e40:	f1 e0       	ldi	r31, 0x01	; 1
    1e42:	4f 16       	cp	r4, r31
    1e44:	51 04       	cpc	r5, r1
    1e46:	61 04       	cpc	r6, r1
    1e48:	71 04       	cpc	r7, r1
    1e4a:	09 f0       	breq	.+2      	; 0x1e4e <inttostring+0x1c2>
    1e4c:	86 c0       	rjmp	.+268    	; 0x1f5a <inttostring+0x2ce>
    1e4e:	51 c0       	rjmp	.+162    	; 0x1ef2 <inttostring+0x266>
			{
				break;
			}
			the_scaler=the_scaler/10;
    1e50:	c3 01       	movw	r24, r6
    1e52:	b2 01       	movw	r22, r4
    1e54:	2a e0       	ldi	r18, 0x0A	; 10
    1e56:	30 e0       	ldi	r19, 0x00	; 0
    1e58:	40 e0       	ldi	r20, 0x00	; 0
    1e5a:	50 e0       	ldi	r21, 0x00	; 0
    1e5c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    1e60:	29 01       	movw	r4, r18
    1e62:	3a 01       	movw	r6, r20
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    1e64:	59 01       	movw	r10, r18
    1e66:	6a 01       	movw	r12, r20
    1e68:	e1 2c       	mov	r14, r1
    1e6a:	f1 2c       	mov	r15, r1
    1e6c:	87 01       	movw	r16, r14
    1e6e:	29 83       	std	Y+1, r18	; 0x01
    1e70:	ba 82       	std	Y+2, r11	; 0x02
    1e72:	cb 82       	std	Y+3, r12	; 0x03
    1e74:	dc 82       	std	Y+4, r13	; 0x04
    1e76:	ed 82       	std	Y+5, r14	; 0x05
    1e78:	fe 82       	std	Y+6, r15	; 0x06
    1e7a:	0f 83       	std	Y+7, r16	; 0x07
    1e7c:	18 87       	std	Y+8, r17	; 0x08
    1e7e:	cd 88       	ldd	r12, Y+21	; 0x15
    1e80:	de 88       	ldd	r13, Y+22	; 0x16
    1e82:	ea 8c       	ldd	r14, Y+26	; 0x1a
    1e84:	ce 0c       	add	r12, r14
    1e86:	d1 1c       	adc	r13, r1
    1e88:	dc 8a       	std	Y+20, r13	; 0x14
    1e8a:	cb 8a       	std	Y+19, r12	; 0x13
    1e8c:	cb 80       	ldd	r12, Y+3	; 0x03
    1e8e:	dc 80       	ldd	r13, Y+4	; 0x04
    1e90:	e1 2c       	mov	r14, r1
    1e92:	f1 2c       	mov	r15, r1
    1e94:	00 e0       	ldi	r16, 0x00	; 0
    1e96:	10 e0       	ldi	r17, 0x00	; 0
    1e98:	28 2d       	mov	r18, r8
    1e9a:	39 85       	ldd	r19, Y+9	; 0x09
    1e9c:	4a 85       	ldd	r20, Y+10	; 0x0a
    1e9e:	52 2d       	mov	r21, r2
    1ea0:	63 2d       	mov	r22, r3
    1ea2:	79 2d       	mov	r23, r9
    1ea4:	89 8d       	ldd	r24, Y+25	; 0x19
    1ea6:	9a 89       	ldd	r25, Y+18	; 0x12
    1ea8:	0e 94 2d 13 	call	0x265a	; 0x265a <__divdi3>
    1eac:	20 5d       	subi	r18, 0xD0	; 208
    1eae:	eb 89       	ldd	r30, Y+19	; 0x13
    1eb0:	fc 89       	ldd	r31, Y+20	; 0x14
    1eb2:	20 83       	st	Z, r18
			counter++;
    1eb4:	fa 8d       	ldd	r31, Y+26	; 0x1a
    1eb6:	ff 5f       	subi	r31, 0xFF	; 255
    1eb8:	fa 8f       	std	Y+26, r31	; 0x1a
			thenumber=thenumber%the_scaler;
    1eba:	28 2d       	mov	r18, r8
    1ebc:	39 85       	ldd	r19, Y+9	; 0x09
    1ebe:	4a 85       	ldd	r20, Y+10	; 0x0a
    1ec0:	52 2d       	mov	r21, r2
    1ec2:	63 2d       	mov	r22, r3
    1ec4:	79 2d       	mov	r23, r9
    1ec6:	89 8d       	ldd	r24, Y+25	; 0x19
    1ec8:	9a 89       	ldd	r25, Y+18	; 0x12
    1eca:	0e 94 2b 13 	call	0x2656	; 0x2656 <__moddi3>
    1ece:	82 2e       	mov	r8, r18
    1ed0:	39 87       	std	Y+9, r19	; 0x09
    1ed2:	4a 87       	std	Y+10, r20	; 0x0a
    1ed4:	25 2e       	mov	r2, r21
    1ed6:	36 2e       	mov	r3, r22
    1ed8:	97 2e       	mov	r9, r23
    1eda:	89 8f       	std	Y+25, r24	; 0x19
    1edc:	9a 8b       	std	Y+18, r25	; 0x12
			if (the_scaler==1)
    1ede:	01 e0       	ldi	r16, 0x01	; 1
    1ee0:	40 16       	cp	r4, r16
    1ee2:	51 04       	cpc	r5, r1
    1ee4:	61 04       	cpc	r6, r1
    1ee6:	71 04       	cpc	r7, r1
    1ee8:	09 f0       	breq	.+2      	; 0x1eec <inttostring+0x260>
    1eea:	b2 cf       	rjmp	.-156    	; 0x1e50 <inttostring+0x1c4>
    1eec:	9a 8c       	ldd	r9, Y+26	; 0x1a
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
			counter++;
    1eee:	89 2d       	mov	r24, r9
    1ef0:	3c c0       	rjmp	.+120    	; 0x1f6a <inttostring+0x2de>
    1ef2:	89 2d       	mov	r24, r9
    1ef4:	3a c0       	rjmp	.+116    	; 0x1f6a <inttostring+0x2de>
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    1ef6:	f1 01       	movw	r30, r2
    1ef8:	e9 0d       	add	r30, r9
    1efa:	f1 1d       	adc	r31, r1
    1efc:	b0 5d       	subi	r27, 0xD0	; 208
    1efe:	b0 83       	st	Z, r27
			counter++;
    1f00:	93 94       	inc	r9
			thenumber=thenumber%the_scaler;
    1f02:	a1 2c       	mov	r10, r1
    1f04:	0f 2e       	mov	r0, r31
    1f06:	fa ec       	ldi	r31, 0xCA	; 202
    1f08:	bf 2e       	mov	r11, r31
    1f0a:	f0 2d       	mov	r31, r0
    1f0c:	0f 2e       	mov	r0, r31
    1f0e:	fa e9       	ldi	r31, 0x9A	; 154
    1f10:	cf 2e       	mov	r12, r31
    1f12:	f0 2d       	mov	r31, r0
    1f14:	0f 2e       	mov	r0, r31
    1f16:	fb e3       	ldi	r31, 0x3B	; 59
    1f18:	df 2e       	mov	r13, r31
    1f1a:	f0 2d       	mov	r31, r0
    1f1c:	e1 2c       	mov	r14, r1
    1f1e:	f1 2c       	mov	r15, r1
    1f20:	00 e0       	ldi	r16, 0x00	; 0
    1f22:	10 e0       	ldi	r17, 0x00	; 0
    1f24:	29 81       	ldd	r18, Y+1	; 0x01
    1f26:	39 85       	ldd	r19, Y+9	; 0x09
    1f28:	4a 89       	ldd	r20, Y+18	; 0x12
    1f2a:	5b 89       	ldd	r21, Y+19	; 0x13
    1f2c:	6d 89       	ldd	r22, Y+21	; 0x15
    1f2e:	78 2d       	mov	r23, r8
    1f30:	89 8d       	ldd	r24, Y+25	; 0x19
    1f32:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f34:	0e 94 2b 13 	call	0x2656	; 0x2656 <__moddi3>
    1f38:	82 2e       	mov	r8, r18
    1f3a:	39 87       	std	Y+9, r19	; 0x09
    1f3c:	4a 87       	std	Y+10, r20	; 0x0a
    1f3e:	e5 2e       	mov	r14, r21
    1f40:	16 2f       	mov	r17, r22
    1f42:	07 2f       	mov	r16, r23
    1f44:	f8 2e       	mov	r15, r24
    1f46:	9a 8b       	std	Y+18, r25	; 0x12
    1f48:	0f 2e       	mov	r0, r31
    1f4a:	41 2c       	mov	r4, r1
    1f4c:	fa ec       	ldi	r31, 0xCA	; 202
    1f4e:	5f 2e       	mov	r5, r31
    1f50:	fa e9       	ldi	r31, 0x9A	; 154
    1f52:	6f 2e       	mov	r6, r31
    1f54:	fb e3       	ldi	r31, 0x3B	; 59
    1f56:	7f 2e       	mov	r7, r31
    1f58:	f0 2d       	mov	r31, r0
    1f5a:	9a 8e       	std	Y+26, r9	; 0x1a
    1f5c:	3e 8a       	std	Y+22, r3	; 0x16
    1f5e:	2d 8a       	std	Y+21, r2	; 0x15
    1f60:	2e 2c       	mov	r2, r14
    1f62:	31 2e       	mov	r3, r17
    1f64:	90 2e       	mov	r9, r16
    1f66:	f9 8e       	std	Y+25, r15	; 0x19
    1f68:	73 cf       	rjmp	.-282    	; 0x1e50 <inttostring+0x1c4>
	
	
	
	
	return counter;
}
    1f6a:	6a 96       	adiw	r28, 0x1a	; 26
    1f6c:	0f b6       	in	r0, 0x3f	; 63
    1f6e:	f8 94       	cli
    1f70:	de bf       	out	0x3e, r29	; 62
    1f72:	0f be       	out	0x3f, r0	; 63
    1f74:	cd bf       	out	0x3d, r28	; 61
    1f76:	df 91       	pop	r29
    1f78:	cf 91       	pop	r28
    1f7a:	1f 91       	pop	r17
    1f7c:	0f 91       	pop	r16
    1f7e:	ff 90       	pop	r15
    1f80:	ef 90       	pop	r14
    1f82:	df 90       	pop	r13
    1f84:	cf 90       	pop	r12
    1f86:	bf 90       	pop	r11
    1f88:	af 90       	pop	r10
    1f8a:	9f 90       	pop	r9
    1f8c:	8f 90       	pop	r8
    1f8e:	7f 90       	pop	r7
    1f90:	6f 90       	pop	r6
    1f92:	5f 90       	pop	r5
    1f94:	4f 90       	pop	r4
    1f96:	3f 90       	pop	r3
    1f98:	2f 90       	pop	r2
    1f9a:	08 95       	ret

00001f9c <TEST_IO_SETUP>:
#include "TEST.h"
#include "minohelper.h"
extern volatile unsigned short MAIN_REGISTERS[20];
void TEST_IO_SETUP()
{
	gpio_outputconfg(PORT_DDR_TEST_1,PORT_OUTMOD_TEST_1,OUTPASS,TEST_1_PIN);
    1f9c:	22 e0       	ldi	r18, 0x02	; 2
    1f9e:	40 e0       	ldi	r20, 0x00	; 0
    1fa0:	69 e3       	ldi	r22, 0x39	; 57
    1fa2:	70 e0       	ldi	r23, 0x00	; 0
    1fa4:	8a e3       	ldi	r24, 0x3A	; 58
    1fa6:	90 e0       	ldi	r25, 0x00	; 0
    1fa8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_TEST_2,PORT_OUTMOD_TEST_2,OUTPASS,TEST_2_PIN);
    1fac:	23 e0       	ldi	r18, 0x03	; 3
    1fae:	40 e0       	ldi	r20, 0x00	; 0
    1fb0:	69 e3       	ldi	r22, 0x39	; 57
    1fb2:	70 e0       	ldi	r23, 0x00	; 0
    1fb4:	8a e3       	ldi	r24, 0x3A	; 58
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_TEST_3,PORT_OUTMOD_TEST_3,OUTPASS,TEST_3_PIN);
    1fbc:	24 e0       	ldi	r18, 0x04	; 4
    1fbe:	40 e0       	ldi	r20, 0x00	; 0
    1fc0:	69 e3       	ldi	r22, 0x39	; 57
    1fc2:	70 e0       	ldi	r23, 0x00	; 0
    1fc4:	8a e3       	ldi	r24, 0x3A	; 58
    1fc6:	90 e0       	ldi	r25, 0x00	; 0
    1fc8:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
    1fcc:	08 95       	ret

00001fce <TEST_SETUP>:
}

void TEST_SETUP()
{
    1fce:	cf 92       	push	r12
    1fd0:	df 92       	push	r13
    1fd2:	ef 92       	push	r14
    1fd4:	ff 92       	push	r15
    1fd6:	0f 93       	push	r16
    1fd8:	1f 93       	push	r17
	USART_INIT(ASYNCHRONOUS_NORMAL,INT_disable,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,9600);
    1fda:	0f 2e       	mov	r0, r31
    1fdc:	f0 e8       	ldi	r31, 0x80	; 128
    1fde:	cf 2e       	mov	r12, r31
    1fe0:	f5 e2       	ldi	r31, 0x25	; 37
    1fe2:	df 2e       	mov	r13, r31
    1fe4:	e1 2c       	mov	r14, r1
    1fe6:	f1 2c       	mov	r15, r1
    1fe8:	f0 2d       	mov	r31, r0
    1fea:	06 e0       	ldi	r16, 0x06	; 6
    1fec:	10 e0       	ldi	r17, 0x00	; 0
    1fee:	20 e0       	ldi	r18, 0x00	; 0
    1ff0:	48 e1       	ldi	r20, 0x18	; 24
    1ff2:	60 e0       	ldi	r22, 0x00	; 0
    1ff4:	80 e0       	ldi	r24, 0x00	; 0
    1ff6:	90 e0       	ldi	r25, 0x00	; 0
    1ff8:	0e 94 37 10 	call	0x206e	; 0x206e <USART_INIT>
	MAIN_REGISTERS[7]=0;
    1ffc:	10 92 2d 02 	sts	0x022D, r1
    2000:	10 92 2c 02 	sts	0x022C, r1
	MAIN_REGISTERS[8]=1;
    2004:	81 e0       	ldi	r24, 0x01	; 1
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	90 93 2f 02 	sts	0x022F, r25
    200c:	80 93 2e 02 	sts	0x022E, r24
}
    2010:	1f 91       	pop	r17
    2012:	0f 91       	pop	r16
    2014:	ff 90       	pop	r15
    2016:	ef 90       	pop	r14
    2018:	df 90       	pop	r13
    201a:	cf 90       	pop	r12
    201c:	08 95       	ret

0000201e <TEST_UART_SEND_VALUE>:

void TEST_UART_SEND_VALUE(long long X)
{
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	2f 97       	sbiw	r28, 0x0f	; 15
    202c:	0f b6       	in	r0, 0x3f	; 63
    202e:	f8 94       	cli
    2030:	de bf       	out	0x3e, r29	; 62
    2032:	0f be       	out	0x3f, r0	; 63
    2034:	cd bf       	out	0x3d, r28	; 61
	unsigned char VALUE[15];
	USART_SEND_ARRAY(VALUE,inttostring(VALUE,X));
    2036:	02 2f       	mov	r16, r18
    2038:	13 2f       	mov	r17, r19
    203a:	24 2f       	mov	r18, r20
    203c:	35 2f       	mov	r19, r21
    203e:	46 2f       	mov	r20, r22
    2040:	57 2f       	mov	r21, r23
    2042:	68 2f       	mov	r22, r24
    2044:	79 2f       	mov	r23, r25
    2046:	ce 01       	movw	r24, r28
    2048:	01 96       	adiw	r24, 0x01	; 1
    204a:	0e 94 46 0e 	call	0x1c8c	; 0x1c8c <inttostring>
    204e:	68 2f       	mov	r22, r24
    2050:	ce 01       	movw	r24, r28
    2052:	01 96       	adiw	r24, 0x01	; 1
    2054:	0e 94 0c 11 	call	0x2218	; 0x2218 <USART_SEND_ARRAY>
}
    2058:	2f 96       	adiw	r28, 0x0f	; 15
    205a:	0f b6       	in	r0, 0x3f	; 63
    205c:	f8 94       	cli
    205e:	de bf       	out	0x3e, r29	; 62
    2060:	0f be       	out	0x3f, r0	; 63
    2062:	cd bf       	out	0x3d, r28	; 61
    2064:	df 91       	pop	r29
    2066:	cf 91       	pop	r28
    2068:	1f 91       	pop	r17
    206a:	0f 91       	pop	r16
    206c:	08 95       	ret

0000206e <USART_INIT>:
#include "uart.h"
volatile unsigned long uart_waiting=0;

/*USART_INIT(ASYNCHRONOUS_NORMAL,INT_disable,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,USART_BAUD_38400);*/
	void USART_INIT(usart_mode mode_of_sync,usart_int intrupts,USART_ENABLE usarttype_TX_RX,USART_CONTORL_FRAME controlframe,USART_DATA_FRAME dataframe,USART_BAUDE_RATES buade_rate)
	{  
    206e:	9f 92       	push	r9
    2070:	af 92       	push	r10
    2072:	bf 92       	push	r11
    2074:	cf 92       	push	r12
    2076:	df 92       	push	r13
    2078:	ef 92       	push	r14
    207a:	ff 92       	push	r15
    207c:	0f 93       	push	r16
    207e:	1f 93       	push	r17
    2080:	cf 93       	push	r28
    2082:	df 93       	push	r29
    2084:	ec 01       	movw	r28, r24
    2086:	b6 2e       	mov	r11, r22
    2088:	a4 2e       	mov	r10, r20
    208a:	92 2e       	mov	r9, r18
		uint16 ubrr_=0;
		 gpio_outputconfg(PORTD_DDRA_ADDRESS,PORTD_OUTMOD_ADDRESS,OUTPASS,1);
    208c:	21 e0       	ldi	r18, 0x01	; 1
    208e:	40 e0       	ldi	r20, 0x00	; 0
    2090:	60 e3       	ldi	r22, 0x30	; 48
    2092:	70 e0       	ldi	r23, 0x00	; 0
    2094:	81 e3       	ldi	r24, 0x31	; 49
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
		  gpio_inputconfg(PORTD_DDRA_ADDRESS,PORTD_INMOD_ADDRESS,FLOAT_mod,0);
    209c:	20 e0       	ldi	r18, 0x00	; 0
    209e:	40 e0       	ldi	r20, 0x00	; 0
    20a0:	62 e3       	ldi	r22, 0x32	; 50
    20a2:	70 e0       	ldi	r23, 0x00	; 0
    20a4:	81 e3       	ldi	r24, 0x31	; 49
    20a6:	90 e0       	ldi	r25, 0x00	; 0
    20a8:	0e 94 e2 03 	call	0x7c4	; 0x7c4 <gpio_inputconfg>




      
         UCSRB_Access=0;
    20ac:	1a b8       	out	0x0a, r1	; 10

	  
		UCSRC_Access=0x80|mode_of_sync|controlframe|dataframe;
    20ae:	89 2d       	mov	r24, r9
    20b0:	80 2b       	or	r24, r16
    20b2:	80 68       	ori	r24, 0x80	; 128
    20b4:	9c 2e       	mov	r9, r28
    20b6:	98 2a       	or	r9, r24
    20b8:	90 bc       	out	0x20, r9	; 32
	  UCSRB_Access |= intrupts|usarttype_TX_RX;
    20ba:	8a b1       	in	r24, 0x0a	; 10
    20bc:	a8 2a       	or	r10, r24
    20be:	ba 28       	or	r11, r10
    20c0:	ba b8       	out	0x0a, r11	; 10
	   UCSRB_Access|=dataframe>>8;
    20c2:	8a b1       	in	r24, 0x0a	; 10
    20c4:	18 2b       	or	r17, r24
    20c6:	1a b9       	out	0x0a, r17	; 10
	
	  
	  
	  UCSRA_Access|=(mode_of_sync>>8)|mult_mcus_comm_mode;
    20c8:	8b b1       	in	r24, 0x0b	; 11
    20ca:	8d 2b       	or	r24, r29
    20cc:	8b b9       	out	0x0b, r24	; 11
		if ((mode_of_sync==SYNC_sample_FALLING) ||(mode_of_sync==SYNC_sample_RISING))
    20ce:	ce 01       	movw	r24, r28
    20d0:	80 54       	subi	r24, 0x40	; 64
    20d2:	91 09       	sbc	r25, r1
    20d4:	02 97       	sbiw	r24, 0x02	; 2
    20d6:	40 f4       	brcc	.+16     	; 0x20e8 <USART_INIT+0x7a>
		{
	     #if _MASTER_ ==1  
		 gpio_outputconfg(PORTB_DDRA_ADDRESS,PORTB_OUTMOD_ADDRESS,OUTPASS,0);
    20d8:	20 e0       	ldi	r18, 0x00	; 0
    20da:	40 e0       	ldi	r20, 0x00	; 0
    20dc:	66 e3       	ldi	r22, 0x36	; 54
    20de:	70 e0       	ldi	r23, 0x00	; 0
    20e0:	87 e3       	ldi	r24, 0x37	; 55
    20e2:	90 e0       	ldi	r25, 0x00	; 0
    20e4:	0e 94 ff 03 	call	0x7fe	; 0x7fe <gpio_outputconfg>
		 gpio_inputconfg(PORTB_DDRA_ADDRESS,PORTB_INMOD_ADDRESS,FLOAT_mod,0);
         #endif
		 ;
		}
	
		  switch (mode_of_sync)
    20e8:	c2 34       	cpi	r28, 0x42	; 66
    20ea:	d1 05       	cpc	r29, r1
    20ec:	30 f4       	brcc	.+12     	; 0x20fa <USART_INIT+0x8c>
    20ee:	c0 34       	cpi	r28, 0x40	; 64
    20f0:	d1 05       	cpc	r29, r1
    20f2:	c8 f5       	brcc	.+114    	; 0x2166 <USART_INIT+0xf8>
    20f4:	cd 2b       	or	r28, r29
    20f6:	29 f0       	breq	.+10     	; 0x2102 <USART_INIT+0x94>
    20f8:	50 c0       	rjmp	.+160    	; 0x219a <USART_INIT+0x12c>
    20fa:	c1 15       	cp	r28, r1
    20fc:	d2 40       	sbci	r29, 0x02	; 2
    20fe:	e1 f0       	breq	.+56     	; 0x2138 <USART_INIT+0xca>
    2100:	4c c0       	rjmp	.+152    	; 0x219a <USART_INIT+0x12c>
		{case ASYNCHRONOUS_NORMAL:ubrr_= (F_CPU/(16UL*buade_rate)-1);
    2102:	cc 0c       	add	r12, r12
    2104:	dd 1c       	adc	r13, r13
    2106:	ee 1c       	adc	r14, r14
    2108:	ff 1c       	adc	r15, r15
    210a:	cc 0c       	add	r12, r12
    210c:	dd 1c       	adc	r13, r13
    210e:	ee 1c       	adc	r14, r14
    2110:	ff 1c       	adc	r15, r15
    2112:	a7 01       	movw	r20, r14
    2114:	96 01       	movw	r18, r12
    2116:	22 0f       	add	r18, r18
    2118:	33 1f       	adc	r19, r19
    211a:	44 1f       	adc	r20, r20
    211c:	55 1f       	adc	r21, r21
    211e:	22 0f       	add	r18, r18
    2120:	33 1f       	adc	r19, r19
    2122:	44 1f       	adc	r20, r20
    2124:	55 1f       	adc	r21, r21
    2126:	60 e0       	ldi	r22, 0x00	; 0
    2128:	74 e2       	ldi	r23, 0x24	; 36
    212a:	84 ef       	ldi	r24, 0xF4	; 244
    212c:	90 e0       	ldi	r25, 0x00	; 0
    212e:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    2132:	21 50       	subi	r18, 0x01	; 1
    2134:	31 09       	sbc	r19, r1
			                       break;
    2136:	33 c0       	rjmp	.+102    	; 0x219e <USART_INIT+0x130>
			case ASYNCHRONOUS_DOUBLE:ubrr_= (F_CPU/(8UL*buade_rate)-1);
    2138:	cc 0c       	add	r12, r12
    213a:	dd 1c       	adc	r13, r13
    213c:	ee 1c       	adc	r14, r14
    213e:	ff 1c       	adc	r15, r15
    2140:	cc 0c       	add	r12, r12
    2142:	dd 1c       	adc	r13, r13
    2144:	ee 1c       	adc	r14, r14
    2146:	ff 1c       	adc	r15, r15
    2148:	a7 01       	movw	r20, r14
    214a:	96 01       	movw	r18, r12
    214c:	22 0f       	add	r18, r18
    214e:	33 1f       	adc	r19, r19
    2150:	44 1f       	adc	r20, r20
    2152:	55 1f       	adc	r21, r21
    2154:	60 e0       	ldi	r22, 0x00	; 0
    2156:	74 e2       	ldi	r23, 0x24	; 36
    2158:	84 ef       	ldi	r24, 0xF4	; 244
    215a:	90 e0       	ldi	r25, 0x00	; 0
    215c:	0e 94 fe 12 	call	0x25fc	; 0x25fc <__udivmodsi4>
    2160:	21 50       	subi	r18, 0x01	; 1
    2162:	31 09       	sbc	r19, r1
			                       break;
    2164:	1c c0       	rjmp	.+56     	; 0x219e <USART_INIT+0x130>
			
			case SYNC_sample_RISING:
			case SYNC_sample_FALLING:
			                        ubrr_= (F_CPU/(2.0*buade_rate)-1);
    2166:	c7 01       	movw	r24, r14
    2168:	b6 01       	movw	r22, r12
    216a:	0e 94 60 12 	call	0x24c0	; 0x24c0 <__floatunsisf>
    216e:	9b 01       	movw	r18, r22
    2170:	ac 01       	movw	r20, r24
    2172:	0e 94 68 11 	call	0x22d0	; 0x22d0 <__addsf3>
    2176:	9b 01       	movw	r18, r22
    2178:	ac 01       	movw	r20, r24
    217a:	60 e0       	ldi	r22, 0x00	; 0
    217c:	74 e2       	ldi	r23, 0x24	; 36
    217e:	84 e7       	ldi	r24, 0x74	; 116
    2180:	9b e4       	ldi	r25, 0x4B	; 75
    2182:	0e 94 cc 11 	call	0x2398	; 0x2398 <__divsf3>
    2186:	20 e0       	ldi	r18, 0x00	; 0
    2188:	30 e0       	ldi	r19, 0x00	; 0
    218a:	40 e8       	ldi	r20, 0x80	; 128
    218c:	5f e3       	ldi	r21, 0x3F	; 63
    218e:	0e 94 67 11 	call	0x22ce	; 0x22ce <__subsf3>
    2192:	0e 94 34 12 	call	0x2468	; 0x2468 <__fixunssfsi>
    2196:	9b 01       	movw	r18, r22
			                        break;
    2198:	02 c0       	rjmp	.+4      	; 0x219e <USART_INIT+0x130>
volatile unsigned long uart_waiting=0;

/*USART_INIT(ASYNCHRONOUS_NORMAL,INT_disable,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,USART_BAUD_38400);*/
	void USART_INIT(usart_mode mode_of_sync,usart_int intrupts,USART_ENABLE usarttype_TX_RX,USART_CONTORL_FRAME controlframe,USART_DATA_FRAME dataframe,USART_BAUDE_RATES buade_rate)
	{  
		uint16 ubrr_=0;
    219a:	20 e0       	ldi	r18, 0x00	; 0
    219c:	30 e0       	ldi	r19, 0x00	; 0
									
		}
		
		
		
		 UBRRL_Access=0xff & ubrr_;
    219e:	29 b9       	out	0x09, r18	; 9
		  UBRRH_Access=0x0f & (ubrr_>>8);
    21a0:	83 2f       	mov	r24, r19
    21a2:	8f 70       	andi	r24, 0x0F	; 15
    21a4:	80 bd       	out	0x20, r24	; 32
		 
		 
	}
    21a6:	df 91       	pop	r29
    21a8:	cf 91       	pop	r28
    21aa:	1f 91       	pop	r17
    21ac:	0f 91       	pop	r16
    21ae:	ff 90       	pop	r15
    21b0:	ef 90       	pop	r14
    21b2:	df 90       	pop	r13
    21b4:	cf 90       	pop	r12
    21b6:	bf 90       	pop	r11
    21b8:	af 90       	pop	r10
    21ba:	9f 90       	pop	r9
    21bc:	08 95       	ret

000021be <USART_SEND_BYTE>:
	void USART_SEND_BYTE(uint8 data)
	{
		uart_waiting=0;
    21be:	10 92 da 01 	sts	0x01DA, r1
    21c2:	10 92 db 01 	sts	0x01DB, r1
    21c6:	10 92 dc 01 	sts	0x01DC, r1
    21ca:	10 92 dd 01 	sts	0x01DD, r1
		
		UDR_Access=data;
    21ce:	8c b9       	out	0x0c, r24	; 12
		
		while(isbitclear(UCSRA_Access,UDRE_))
    21d0:	20 c0       	rjmp	.+64     	; 0x2212 <USART_SEND_BYTE+0x54>
		{
			uart_waiting++;
    21d2:	80 91 da 01 	lds	r24, 0x01DA
    21d6:	90 91 db 01 	lds	r25, 0x01DB
    21da:	a0 91 dc 01 	lds	r26, 0x01DC
    21de:	b0 91 dd 01 	lds	r27, 0x01DD
    21e2:	01 96       	adiw	r24, 0x01	; 1
    21e4:	a1 1d       	adc	r26, r1
    21e6:	b1 1d       	adc	r27, r1
    21e8:	80 93 da 01 	sts	0x01DA, r24
    21ec:	90 93 db 01 	sts	0x01DB, r25
    21f0:	a0 93 dc 01 	sts	0x01DC, r26
    21f4:	b0 93 dd 01 	sts	0x01DD, r27
		if (uart_waiting>uart_max_count)
    21f8:	80 91 da 01 	lds	r24, 0x01DA
    21fc:	90 91 db 01 	lds	r25, 0x01DB
    2200:	a0 91 dc 01 	lds	r26, 0x01DC
    2204:	b0 91 dd 01 	lds	r27, 0x01DD
    2208:	81 35       	cpi	r24, 0x51	; 81
    220a:	93 4c       	sbci	r25, 0xC3	; 195
    220c:	a1 05       	cpc	r26, r1
    220e:	b1 05       	cpc	r27, r1
    2210:	10 f4       	brcc	.+4      	; 0x2216 <USART_SEND_BYTE+0x58>
	{
		uart_waiting=0;
		
		UDR_Access=data;
		
		while(isbitclear(UCSRA_Access,UDRE_))
    2212:	5d 9b       	sbis	0x0b, 5	; 11
    2214:	de cf       	rjmp	.-68     	; 0x21d2 <USART_SEND_BYTE+0x14>
    2216:	08 95       	ret

00002218 <USART_SEND_ARRAY>:
			*vaildity=1;
		return UDR_Access;
		
	}
	void USART_SEND_ARRAY(uint8* ptr,uint8 size)
	{uint8 i=0;
    2218:	0f 93       	push	r16
    221a:	1f 93       	push	r17
    221c:	cf 93       	push	r28
    221e:	df 93       	push	r29
    2220:	06 2f       	mov	r16, r22
		for(i=0;i<size;i++)
    2222:	66 23       	and	r22, r22
    2224:	49 f0       	breq	.+18     	; 0x2238 <USART_SEND_ARRAY+0x20>
    2226:	c8 2f       	mov	r28, r24
    2228:	d9 2f       	mov	r29, r25
    222a:	10 e0       	ldi	r17, 0x00	; 0
		{
			USART_SEND_BYTE(ptr[i]);	
    222c:	89 91       	ld	r24, Y+
    222e:	0e 94 df 10 	call	0x21be	; 0x21be <USART_SEND_BYTE>
		return UDR_Access;
		
	}
	void USART_SEND_ARRAY(uint8* ptr,uint8 size)
	{uint8 i=0;
		for(i=0;i<size;i++)
    2232:	1f 5f       	subi	r17, 0xFF	; 255
    2234:	10 13       	cpse	r17, r16
    2236:	fa cf       	rjmp	.-12     	; 0x222c <USART_SEND_ARRAY+0x14>
		{
			USART_SEND_BYTE(ptr[i]);	
		}
		
	}
    2238:	df 91       	pop	r29
    223a:	cf 91       	pop	r28
    223c:	1f 91       	pop	r17
    223e:	0f 91       	pop	r16
    2240:	08 95       	ret

00002242 <USART_SEND_str>:
	
	void USART_SEND_str(char* ptr)
{  uint8 i=0;
    2242:	1f 93       	push	r17
    2244:	cf 93       	push	r28
    2246:	df 93       	push	r29
    2248:	ec 01       	movw	r28, r24
		while(ptr[i]!='\0')
    224a:	88 81       	ld	r24, Y
    224c:	88 23       	and	r24, r24
    224e:	81 f0       	breq	.+32     	; 0x2270 <USART_SEND_str+0x2e>
		}
		
	}
	
	void USART_SEND_str(char* ptr)
{  uint8 i=0;
    2250:	10 e0       	ldi	r17, 0x00	; 0
		while(ptr[i]!='\0')
		{
			USART_SEND_BYTE(ptr[i]);
    2252:	0e 94 df 10 	call	0x21be	; 0x21be <USART_SEND_BYTE>
    2256:	8f e9       	ldi	r24, 0x9F	; 159
    2258:	9f e0       	ldi	r25, 0x0F	; 15
    225a:	01 97       	sbiw	r24, 0x01	; 1
    225c:	f1 f7       	brne	.-4      	; 0x225a <USART_SEND_str+0x18>
    225e:	00 c0       	rjmp	.+0      	; 0x2260 <USART_SEND_str+0x1e>
    2260:	00 00       	nop
			_delay_ms(1);
			++i;
    2262:	1f 5f       	subi	r17, 0xFF	; 255
		
	}
	
	void USART_SEND_str(char* ptr)
{  uint8 i=0;
		while(ptr[i]!='\0')
    2264:	fe 01       	movw	r30, r28
    2266:	e1 0f       	add	r30, r17
    2268:	f1 1d       	adc	r31, r1
    226a:	80 81       	ld	r24, Z
    226c:	81 11       	cpse	r24, r1
    226e:	f1 cf       	rjmp	.-30     	; 0x2252 <USART_SEND_str+0x10>
		{
			USART_SEND_BYTE(ptr[i]);
			_delay_ms(1);
			++i;
		}
		USART_SEND_BYTE('\0');
    2270:	80 e0       	ldi	r24, 0x00	; 0
    2272:	0e 94 df 10 	call	0x21be	; 0x21be <USART_SEND_BYTE>
		}
    2276:	df 91       	pop	r29
    2278:	cf 91       	pop	r28
    227a:	1f 91       	pop	r17
    227c:	08 95       	ret

0000227e <TIMERS_SETUP>:
#include "TIMER.h"



void TIMERS_SETUP()
{
    227e:	8f 92       	push	r8
    2280:	af 92       	push	r10
    2282:	cf 92       	push	r12
    2284:	ef 92       	push	r14
    2286:	ff 92       	push	r15
    2288:	0f 93       	push	r16
    228a:	1f 93       	push	r17
	
	TIMER1_ENABLE(T1_OCA1_DISCONNECT,T1_OCB1_DISCONNECT,T1_NORMAL,T1_TIMER_256,0,0,ENABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT);
    228c:	1f 92       	push	r1
    228e:	81 2c       	mov	r8, r1
    2290:	a1 2c       	mov	r10, r1
    2292:	cc 24       	eor	r12, r12
    2294:	c3 94       	inc	r12
    2296:	e1 2c       	mov	r14, r1
    2298:	f1 2c       	mov	r15, r1
    229a:	00 e0       	ldi	r16, 0x00	; 0
    229c:	10 e0       	ldi	r17, 0x00	; 0
    229e:	24 e0       	ldi	r18, 0x04	; 4
    22a0:	40 e0       	ldi	r20, 0x00	; 0
    22a2:	60 e0       	ldi	r22, 0x00	; 0
    22a4:	80 e0       	ldi	r24, 0x00	; 0
    22a6:	0e 94 ef 06 	call	0xdde	; 0xdde <TIMER1_ENABLE>
	global_interupt_enable();
    22aa:	8f b7       	in	r24, 0x3f	; 63
    22ac:	80 68       	ori	r24, 0x80	; 128
    22ae:	8f bf       	out	0x3f, r24	; 63
    22b0:	0f 90       	pop	r0
}
    22b2:	1f 91       	pop	r17
    22b4:	0f 91       	pop	r16
    22b6:	ff 90       	pop	r15
    22b8:	ef 90       	pop	r14
    22ba:	cf 90       	pop	r12
    22bc:	af 90       	pop	r10
    22be:	8f 90       	pop	r8
    22c0:	08 95       	ret

000022c2 <TIMER0_INT_EVENT>:

void TIMER0_INT_EVENT()
{
    22c2:	08 95       	ret

000022c4 <TIMER1_INT_EVENT>:
	;
}

void TIMER1_INT_EVENT()
{
	SENSOR_TIMER1();
    22c4:	0e 94 3c 0e 	call	0x1c78	; 0x1c78 <SENSOR_TIMER1>
	APP_TIMER1();
    22c8:	0e 94 98 00 	call	0x130	; 0x130 <APP_TIMER1>
    22cc:	08 95       	ret

000022ce <__subsf3>:
    22ce:	50 58       	subi	r21, 0x80	; 128

000022d0 <__addsf3>:
    22d0:	bb 27       	eor	r27, r27
    22d2:	aa 27       	eor	r26, r26
    22d4:	0e d0       	rcall	.+28     	; 0x22f2 <__addsf3x>
    22d6:	48 c1       	rjmp	.+656    	; 0x2568 <__fp_round>
    22d8:	39 d1       	rcall	.+626    	; 0x254c <__fp_pscA>
    22da:	30 f0       	brcs	.+12     	; 0x22e8 <__addsf3+0x18>
    22dc:	3e d1       	rcall	.+636    	; 0x255a <__fp_pscB>
    22de:	20 f0       	brcs	.+8      	; 0x22e8 <__addsf3+0x18>
    22e0:	31 f4       	brne	.+12     	; 0x22ee <__addsf3+0x1e>
    22e2:	9f 3f       	cpi	r25, 0xFF	; 255
    22e4:	11 f4       	brne	.+4      	; 0x22ea <__addsf3+0x1a>
    22e6:	1e f4       	brtc	.+6      	; 0x22ee <__addsf3+0x1e>
    22e8:	2e c1       	rjmp	.+604    	; 0x2546 <__fp_nan>
    22ea:	0e f4       	brtc	.+2      	; 0x22ee <__addsf3+0x1e>
    22ec:	e0 95       	com	r30
    22ee:	e7 fb       	bst	r30, 7
    22f0:	24 c1       	rjmp	.+584    	; 0x253a <__fp_inf>

000022f2 <__addsf3x>:
    22f2:	e9 2f       	mov	r30, r25
    22f4:	4a d1       	rcall	.+660    	; 0x258a <__fp_split3>
    22f6:	80 f3       	brcs	.-32     	; 0x22d8 <__addsf3+0x8>
    22f8:	ba 17       	cp	r27, r26
    22fa:	62 07       	cpc	r22, r18
    22fc:	73 07       	cpc	r23, r19
    22fe:	84 07       	cpc	r24, r20
    2300:	95 07       	cpc	r25, r21
    2302:	18 f0       	brcs	.+6      	; 0x230a <__addsf3x+0x18>
    2304:	71 f4       	brne	.+28     	; 0x2322 <__addsf3x+0x30>
    2306:	9e f5       	brtc	.+102    	; 0x236e <__addsf3x+0x7c>
    2308:	62 c1       	rjmp	.+708    	; 0x25ce <__fp_zero>
    230a:	0e f4       	brtc	.+2      	; 0x230e <__addsf3x+0x1c>
    230c:	e0 95       	com	r30
    230e:	0b 2e       	mov	r0, r27
    2310:	ba 2f       	mov	r27, r26
    2312:	a0 2d       	mov	r26, r0
    2314:	0b 01       	movw	r0, r22
    2316:	b9 01       	movw	r22, r18
    2318:	90 01       	movw	r18, r0
    231a:	0c 01       	movw	r0, r24
    231c:	ca 01       	movw	r24, r20
    231e:	a0 01       	movw	r20, r0
    2320:	11 24       	eor	r1, r1
    2322:	ff 27       	eor	r31, r31
    2324:	59 1b       	sub	r21, r25
    2326:	99 f0       	breq	.+38     	; 0x234e <__addsf3x+0x5c>
    2328:	59 3f       	cpi	r21, 0xF9	; 249
    232a:	50 f4       	brcc	.+20     	; 0x2340 <__addsf3x+0x4e>
    232c:	50 3e       	cpi	r21, 0xE0	; 224
    232e:	68 f1       	brcs	.+90     	; 0x238a <__addsf3x+0x98>
    2330:	1a 16       	cp	r1, r26
    2332:	f0 40       	sbci	r31, 0x00	; 0
    2334:	a2 2f       	mov	r26, r18
    2336:	23 2f       	mov	r18, r19
    2338:	34 2f       	mov	r19, r20
    233a:	44 27       	eor	r20, r20
    233c:	58 5f       	subi	r21, 0xF8	; 248
    233e:	f3 cf       	rjmp	.-26     	; 0x2326 <__addsf3x+0x34>
    2340:	46 95       	lsr	r20
    2342:	37 95       	ror	r19
    2344:	27 95       	ror	r18
    2346:	a7 95       	ror	r26
    2348:	f0 40       	sbci	r31, 0x00	; 0
    234a:	53 95       	inc	r21
    234c:	c9 f7       	brne	.-14     	; 0x2340 <__addsf3x+0x4e>
    234e:	7e f4       	brtc	.+30     	; 0x236e <__addsf3x+0x7c>
    2350:	1f 16       	cp	r1, r31
    2352:	ba 0b       	sbc	r27, r26
    2354:	62 0b       	sbc	r22, r18
    2356:	73 0b       	sbc	r23, r19
    2358:	84 0b       	sbc	r24, r20
    235a:	ba f0       	brmi	.+46     	; 0x238a <__addsf3x+0x98>
    235c:	91 50       	subi	r25, 0x01	; 1
    235e:	a1 f0       	breq	.+40     	; 0x2388 <__addsf3x+0x96>
    2360:	ff 0f       	add	r31, r31
    2362:	bb 1f       	adc	r27, r27
    2364:	66 1f       	adc	r22, r22
    2366:	77 1f       	adc	r23, r23
    2368:	88 1f       	adc	r24, r24
    236a:	c2 f7       	brpl	.-16     	; 0x235c <__addsf3x+0x6a>
    236c:	0e c0       	rjmp	.+28     	; 0x238a <__addsf3x+0x98>
    236e:	ba 0f       	add	r27, r26
    2370:	62 1f       	adc	r22, r18
    2372:	73 1f       	adc	r23, r19
    2374:	84 1f       	adc	r24, r20
    2376:	48 f4       	brcc	.+18     	; 0x238a <__addsf3x+0x98>
    2378:	87 95       	ror	r24
    237a:	77 95       	ror	r23
    237c:	67 95       	ror	r22
    237e:	b7 95       	ror	r27
    2380:	f7 95       	ror	r31
    2382:	9e 3f       	cpi	r25, 0xFE	; 254
    2384:	08 f0       	brcs	.+2      	; 0x2388 <__addsf3x+0x96>
    2386:	b3 cf       	rjmp	.-154    	; 0x22ee <__addsf3+0x1e>
    2388:	93 95       	inc	r25
    238a:	88 0f       	add	r24, r24
    238c:	08 f0       	brcs	.+2      	; 0x2390 <__addsf3x+0x9e>
    238e:	99 27       	eor	r25, r25
    2390:	ee 0f       	add	r30, r30
    2392:	97 95       	ror	r25
    2394:	87 95       	ror	r24
    2396:	08 95       	ret

00002398 <__divsf3>:
    2398:	0c d0       	rcall	.+24     	; 0x23b2 <__divsf3x>
    239a:	e6 c0       	rjmp	.+460    	; 0x2568 <__fp_round>
    239c:	de d0       	rcall	.+444    	; 0x255a <__fp_pscB>
    239e:	40 f0       	brcs	.+16     	; 0x23b0 <__divsf3+0x18>
    23a0:	d5 d0       	rcall	.+426    	; 0x254c <__fp_pscA>
    23a2:	30 f0       	brcs	.+12     	; 0x23b0 <__divsf3+0x18>
    23a4:	21 f4       	brne	.+8      	; 0x23ae <__divsf3+0x16>
    23a6:	5f 3f       	cpi	r21, 0xFF	; 255
    23a8:	19 f0       	breq	.+6      	; 0x23b0 <__divsf3+0x18>
    23aa:	c7 c0       	rjmp	.+398    	; 0x253a <__fp_inf>
    23ac:	51 11       	cpse	r21, r1
    23ae:	10 c1       	rjmp	.+544    	; 0x25d0 <__fp_szero>
    23b0:	ca c0       	rjmp	.+404    	; 0x2546 <__fp_nan>

000023b2 <__divsf3x>:
    23b2:	eb d0       	rcall	.+470    	; 0x258a <__fp_split3>
    23b4:	98 f3       	brcs	.-26     	; 0x239c <__divsf3+0x4>

000023b6 <__divsf3_pse>:
    23b6:	99 23       	and	r25, r25
    23b8:	c9 f3       	breq	.-14     	; 0x23ac <__divsf3+0x14>
    23ba:	55 23       	and	r21, r21
    23bc:	b1 f3       	breq	.-20     	; 0x23aa <__divsf3+0x12>
    23be:	95 1b       	sub	r25, r21
    23c0:	55 0b       	sbc	r21, r21
    23c2:	bb 27       	eor	r27, r27
    23c4:	aa 27       	eor	r26, r26
    23c6:	62 17       	cp	r22, r18
    23c8:	73 07       	cpc	r23, r19
    23ca:	84 07       	cpc	r24, r20
    23cc:	38 f0       	brcs	.+14     	; 0x23dc <__divsf3_pse+0x26>
    23ce:	9f 5f       	subi	r25, 0xFF	; 255
    23d0:	5f 4f       	sbci	r21, 0xFF	; 255
    23d2:	22 0f       	add	r18, r18
    23d4:	33 1f       	adc	r19, r19
    23d6:	44 1f       	adc	r20, r20
    23d8:	aa 1f       	adc	r26, r26
    23da:	a9 f3       	breq	.-22     	; 0x23c6 <__divsf3_pse+0x10>
    23dc:	33 d0       	rcall	.+102    	; 0x2444 <__divsf3_pse+0x8e>
    23de:	0e 2e       	mov	r0, r30
    23e0:	3a f0       	brmi	.+14     	; 0x23f0 <__divsf3_pse+0x3a>
    23e2:	e0 e8       	ldi	r30, 0x80	; 128
    23e4:	30 d0       	rcall	.+96     	; 0x2446 <__divsf3_pse+0x90>
    23e6:	91 50       	subi	r25, 0x01	; 1
    23e8:	50 40       	sbci	r21, 0x00	; 0
    23ea:	e6 95       	lsr	r30
    23ec:	00 1c       	adc	r0, r0
    23ee:	ca f7       	brpl	.-14     	; 0x23e2 <__divsf3_pse+0x2c>
    23f0:	29 d0       	rcall	.+82     	; 0x2444 <__divsf3_pse+0x8e>
    23f2:	fe 2f       	mov	r31, r30
    23f4:	27 d0       	rcall	.+78     	; 0x2444 <__divsf3_pse+0x8e>
    23f6:	66 0f       	add	r22, r22
    23f8:	77 1f       	adc	r23, r23
    23fa:	88 1f       	adc	r24, r24
    23fc:	bb 1f       	adc	r27, r27
    23fe:	26 17       	cp	r18, r22
    2400:	37 07       	cpc	r19, r23
    2402:	48 07       	cpc	r20, r24
    2404:	ab 07       	cpc	r26, r27
    2406:	b0 e8       	ldi	r27, 0x80	; 128
    2408:	09 f0       	breq	.+2      	; 0x240c <__divsf3_pse+0x56>
    240a:	bb 0b       	sbc	r27, r27
    240c:	80 2d       	mov	r24, r0
    240e:	bf 01       	movw	r22, r30
    2410:	ff 27       	eor	r31, r31
    2412:	93 58       	subi	r25, 0x83	; 131
    2414:	5f 4f       	sbci	r21, 0xFF	; 255
    2416:	2a f0       	brmi	.+10     	; 0x2422 <__divsf3_pse+0x6c>
    2418:	9e 3f       	cpi	r25, 0xFE	; 254
    241a:	51 05       	cpc	r21, r1
    241c:	68 f0       	brcs	.+26     	; 0x2438 <__divsf3_pse+0x82>
    241e:	8d c0       	rjmp	.+282    	; 0x253a <__fp_inf>
    2420:	d7 c0       	rjmp	.+430    	; 0x25d0 <__fp_szero>
    2422:	5f 3f       	cpi	r21, 0xFF	; 255
    2424:	ec f3       	brlt	.-6      	; 0x2420 <__divsf3_pse+0x6a>
    2426:	98 3e       	cpi	r25, 0xE8	; 232
    2428:	dc f3       	brlt	.-10     	; 0x2420 <__divsf3_pse+0x6a>
    242a:	86 95       	lsr	r24
    242c:	77 95       	ror	r23
    242e:	67 95       	ror	r22
    2430:	b7 95       	ror	r27
    2432:	f7 95       	ror	r31
    2434:	9f 5f       	subi	r25, 0xFF	; 255
    2436:	c9 f7       	brne	.-14     	; 0x242a <__divsf3_pse+0x74>
    2438:	88 0f       	add	r24, r24
    243a:	91 1d       	adc	r25, r1
    243c:	96 95       	lsr	r25
    243e:	87 95       	ror	r24
    2440:	97 f9       	bld	r25, 7
    2442:	08 95       	ret
    2444:	e1 e0       	ldi	r30, 0x01	; 1
    2446:	66 0f       	add	r22, r22
    2448:	77 1f       	adc	r23, r23
    244a:	88 1f       	adc	r24, r24
    244c:	bb 1f       	adc	r27, r27
    244e:	62 17       	cp	r22, r18
    2450:	73 07       	cpc	r23, r19
    2452:	84 07       	cpc	r24, r20
    2454:	ba 07       	cpc	r27, r26
    2456:	20 f0       	brcs	.+8      	; 0x2460 <__divsf3_pse+0xaa>
    2458:	62 1b       	sub	r22, r18
    245a:	73 0b       	sbc	r23, r19
    245c:	84 0b       	sbc	r24, r20
    245e:	ba 0b       	sbc	r27, r26
    2460:	ee 1f       	adc	r30, r30
    2462:	88 f7       	brcc	.-30     	; 0x2446 <__divsf3_pse+0x90>
    2464:	e0 95       	com	r30
    2466:	08 95       	ret

00002468 <__fixunssfsi>:
    2468:	98 d0       	rcall	.+304    	; 0x259a <__fp_splitA>
    246a:	88 f0       	brcs	.+34     	; 0x248e <__fixunssfsi+0x26>
    246c:	9f 57       	subi	r25, 0x7F	; 127
    246e:	90 f0       	brcs	.+36     	; 0x2494 <__fixunssfsi+0x2c>
    2470:	b9 2f       	mov	r27, r25
    2472:	99 27       	eor	r25, r25
    2474:	b7 51       	subi	r27, 0x17	; 23
    2476:	a0 f0       	brcs	.+40     	; 0x24a0 <__fixunssfsi+0x38>
    2478:	d1 f0       	breq	.+52     	; 0x24ae <__fixunssfsi+0x46>
    247a:	66 0f       	add	r22, r22
    247c:	77 1f       	adc	r23, r23
    247e:	88 1f       	adc	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	1a f0       	brmi	.+6      	; 0x248a <__fixunssfsi+0x22>
    2484:	ba 95       	dec	r27
    2486:	c9 f7       	brne	.-14     	; 0x247a <__fixunssfsi+0x12>
    2488:	12 c0       	rjmp	.+36     	; 0x24ae <__fixunssfsi+0x46>
    248a:	b1 30       	cpi	r27, 0x01	; 1
    248c:	81 f0       	breq	.+32     	; 0x24ae <__fixunssfsi+0x46>
    248e:	9f d0       	rcall	.+318    	; 0x25ce <__fp_zero>
    2490:	b1 e0       	ldi	r27, 0x01	; 1
    2492:	08 95       	ret
    2494:	9c c0       	rjmp	.+312    	; 0x25ce <__fp_zero>
    2496:	67 2f       	mov	r22, r23
    2498:	78 2f       	mov	r23, r24
    249a:	88 27       	eor	r24, r24
    249c:	b8 5f       	subi	r27, 0xF8	; 248
    249e:	39 f0       	breq	.+14     	; 0x24ae <__fixunssfsi+0x46>
    24a0:	b9 3f       	cpi	r27, 0xF9	; 249
    24a2:	cc f3       	brlt	.-14     	; 0x2496 <__fixunssfsi+0x2e>
    24a4:	86 95       	lsr	r24
    24a6:	77 95       	ror	r23
    24a8:	67 95       	ror	r22
    24aa:	b3 95       	inc	r27
    24ac:	d9 f7       	brne	.-10     	; 0x24a4 <__fixunssfsi+0x3c>
    24ae:	3e f4       	brtc	.+14     	; 0x24be <__fixunssfsi+0x56>
    24b0:	90 95       	com	r25
    24b2:	80 95       	com	r24
    24b4:	70 95       	com	r23
    24b6:	61 95       	neg	r22
    24b8:	7f 4f       	sbci	r23, 0xFF	; 255
    24ba:	8f 4f       	sbci	r24, 0xFF	; 255
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	08 95       	ret

000024c0 <__floatunsisf>:
    24c0:	e8 94       	clt
    24c2:	09 c0       	rjmp	.+18     	; 0x24d6 <__floatsisf+0x12>

000024c4 <__floatsisf>:
    24c4:	97 fb       	bst	r25, 7
    24c6:	3e f4       	brtc	.+14     	; 0x24d6 <__floatsisf+0x12>
    24c8:	90 95       	com	r25
    24ca:	80 95       	com	r24
    24cc:	70 95       	com	r23
    24ce:	61 95       	neg	r22
    24d0:	7f 4f       	sbci	r23, 0xFF	; 255
    24d2:	8f 4f       	sbci	r24, 0xFF	; 255
    24d4:	9f 4f       	sbci	r25, 0xFF	; 255
    24d6:	99 23       	and	r25, r25
    24d8:	a9 f0       	breq	.+42     	; 0x2504 <__floatsisf+0x40>
    24da:	f9 2f       	mov	r31, r25
    24dc:	96 e9       	ldi	r25, 0x96	; 150
    24de:	bb 27       	eor	r27, r27
    24e0:	93 95       	inc	r25
    24e2:	f6 95       	lsr	r31
    24e4:	87 95       	ror	r24
    24e6:	77 95       	ror	r23
    24e8:	67 95       	ror	r22
    24ea:	b7 95       	ror	r27
    24ec:	f1 11       	cpse	r31, r1
    24ee:	f8 cf       	rjmp	.-16     	; 0x24e0 <__floatsisf+0x1c>
    24f0:	fa f4       	brpl	.+62     	; 0x2530 <__floatsisf+0x6c>
    24f2:	bb 0f       	add	r27, r27
    24f4:	11 f4       	brne	.+4      	; 0x24fa <__floatsisf+0x36>
    24f6:	60 ff       	sbrs	r22, 0
    24f8:	1b c0       	rjmp	.+54     	; 0x2530 <__floatsisf+0x6c>
    24fa:	6f 5f       	subi	r22, 0xFF	; 255
    24fc:	7f 4f       	sbci	r23, 0xFF	; 255
    24fe:	8f 4f       	sbci	r24, 0xFF	; 255
    2500:	9f 4f       	sbci	r25, 0xFF	; 255
    2502:	16 c0       	rjmp	.+44     	; 0x2530 <__floatsisf+0x6c>
    2504:	88 23       	and	r24, r24
    2506:	11 f0       	breq	.+4      	; 0x250c <__floatsisf+0x48>
    2508:	96 e9       	ldi	r25, 0x96	; 150
    250a:	11 c0       	rjmp	.+34     	; 0x252e <__floatsisf+0x6a>
    250c:	77 23       	and	r23, r23
    250e:	21 f0       	breq	.+8      	; 0x2518 <__floatsisf+0x54>
    2510:	9e e8       	ldi	r25, 0x8E	; 142
    2512:	87 2f       	mov	r24, r23
    2514:	76 2f       	mov	r23, r22
    2516:	05 c0       	rjmp	.+10     	; 0x2522 <__floatsisf+0x5e>
    2518:	66 23       	and	r22, r22
    251a:	71 f0       	breq	.+28     	; 0x2538 <__floatsisf+0x74>
    251c:	96 e8       	ldi	r25, 0x86	; 134
    251e:	86 2f       	mov	r24, r22
    2520:	70 e0       	ldi	r23, 0x00	; 0
    2522:	60 e0       	ldi	r22, 0x00	; 0
    2524:	2a f0       	brmi	.+10     	; 0x2530 <__floatsisf+0x6c>
    2526:	9a 95       	dec	r25
    2528:	66 0f       	add	r22, r22
    252a:	77 1f       	adc	r23, r23
    252c:	88 1f       	adc	r24, r24
    252e:	da f7       	brpl	.-10     	; 0x2526 <__floatsisf+0x62>
    2530:	88 0f       	add	r24, r24
    2532:	96 95       	lsr	r25
    2534:	87 95       	ror	r24
    2536:	97 f9       	bld	r25, 7
    2538:	08 95       	ret

0000253a <__fp_inf>:
    253a:	97 f9       	bld	r25, 7
    253c:	9f 67       	ori	r25, 0x7F	; 127
    253e:	80 e8       	ldi	r24, 0x80	; 128
    2540:	70 e0       	ldi	r23, 0x00	; 0
    2542:	60 e0       	ldi	r22, 0x00	; 0
    2544:	08 95       	ret

00002546 <__fp_nan>:
    2546:	9f ef       	ldi	r25, 0xFF	; 255
    2548:	80 ec       	ldi	r24, 0xC0	; 192
    254a:	08 95       	ret

0000254c <__fp_pscA>:
    254c:	00 24       	eor	r0, r0
    254e:	0a 94       	dec	r0
    2550:	16 16       	cp	r1, r22
    2552:	17 06       	cpc	r1, r23
    2554:	18 06       	cpc	r1, r24
    2556:	09 06       	cpc	r0, r25
    2558:	08 95       	ret

0000255a <__fp_pscB>:
    255a:	00 24       	eor	r0, r0
    255c:	0a 94       	dec	r0
    255e:	12 16       	cp	r1, r18
    2560:	13 06       	cpc	r1, r19
    2562:	14 06       	cpc	r1, r20
    2564:	05 06       	cpc	r0, r21
    2566:	08 95       	ret

00002568 <__fp_round>:
    2568:	09 2e       	mov	r0, r25
    256a:	03 94       	inc	r0
    256c:	00 0c       	add	r0, r0
    256e:	11 f4       	brne	.+4      	; 0x2574 <__fp_round+0xc>
    2570:	88 23       	and	r24, r24
    2572:	52 f0       	brmi	.+20     	; 0x2588 <__fp_round+0x20>
    2574:	bb 0f       	add	r27, r27
    2576:	40 f4       	brcc	.+16     	; 0x2588 <__fp_round+0x20>
    2578:	bf 2b       	or	r27, r31
    257a:	11 f4       	brne	.+4      	; 0x2580 <__fp_round+0x18>
    257c:	60 ff       	sbrs	r22, 0
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <__fp_round+0x20>
    2580:	6f 5f       	subi	r22, 0xFF	; 255
    2582:	7f 4f       	sbci	r23, 0xFF	; 255
    2584:	8f 4f       	sbci	r24, 0xFF	; 255
    2586:	9f 4f       	sbci	r25, 0xFF	; 255
    2588:	08 95       	ret

0000258a <__fp_split3>:
    258a:	57 fd       	sbrc	r21, 7
    258c:	90 58       	subi	r25, 0x80	; 128
    258e:	44 0f       	add	r20, r20
    2590:	55 1f       	adc	r21, r21
    2592:	59 f0       	breq	.+22     	; 0x25aa <__fp_splitA+0x10>
    2594:	5f 3f       	cpi	r21, 0xFF	; 255
    2596:	71 f0       	breq	.+28     	; 0x25b4 <__fp_splitA+0x1a>
    2598:	47 95       	ror	r20

0000259a <__fp_splitA>:
    259a:	88 0f       	add	r24, r24
    259c:	97 fb       	bst	r25, 7
    259e:	99 1f       	adc	r25, r25
    25a0:	61 f0       	breq	.+24     	; 0x25ba <__fp_splitA+0x20>
    25a2:	9f 3f       	cpi	r25, 0xFF	; 255
    25a4:	79 f0       	breq	.+30     	; 0x25c4 <__fp_splitA+0x2a>
    25a6:	87 95       	ror	r24
    25a8:	08 95       	ret
    25aa:	12 16       	cp	r1, r18
    25ac:	13 06       	cpc	r1, r19
    25ae:	14 06       	cpc	r1, r20
    25b0:	55 1f       	adc	r21, r21
    25b2:	f2 cf       	rjmp	.-28     	; 0x2598 <__fp_split3+0xe>
    25b4:	46 95       	lsr	r20
    25b6:	f1 df       	rcall	.-30     	; 0x259a <__fp_splitA>
    25b8:	08 c0       	rjmp	.+16     	; 0x25ca <__fp_splitA+0x30>
    25ba:	16 16       	cp	r1, r22
    25bc:	17 06       	cpc	r1, r23
    25be:	18 06       	cpc	r1, r24
    25c0:	99 1f       	adc	r25, r25
    25c2:	f1 cf       	rjmp	.-30     	; 0x25a6 <__fp_splitA+0xc>
    25c4:	86 95       	lsr	r24
    25c6:	71 05       	cpc	r23, r1
    25c8:	61 05       	cpc	r22, r1
    25ca:	08 94       	sec
    25cc:	08 95       	ret

000025ce <__fp_zero>:
    25ce:	e8 94       	clt

000025d0 <__fp_szero>:
    25d0:	bb 27       	eor	r27, r27
    25d2:	66 27       	eor	r22, r22
    25d4:	77 27       	eor	r23, r23
    25d6:	cb 01       	movw	r24, r22
    25d8:	97 f9       	bld	r25, 7
    25da:	08 95       	ret

000025dc <__mulsi3>:
    25dc:	db 01       	movw	r26, r22
    25de:	8f 93       	push	r24
    25e0:	9f 93       	push	r25
    25e2:	0e 94 20 13 	call	0x2640	; 0x2640 <__muluhisi3>
    25e6:	bf 91       	pop	r27
    25e8:	af 91       	pop	r26
    25ea:	a2 9f       	mul	r26, r18
    25ec:	80 0d       	add	r24, r0
    25ee:	91 1d       	adc	r25, r1
    25f0:	a3 9f       	mul	r26, r19
    25f2:	90 0d       	add	r25, r0
    25f4:	b2 9f       	mul	r27, r18
    25f6:	90 0d       	add	r25, r0
    25f8:	11 24       	eor	r1, r1
    25fa:	08 95       	ret

000025fc <__udivmodsi4>:
    25fc:	a1 e2       	ldi	r26, 0x21	; 33
    25fe:	1a 2e       	mov	r1, r26
    2600:	aa 1b       	sub	r26, r26
    2602:	bb 1b       	sub	r27, r27
    2604:	fd 01       	movw	r30, r26
    2606:	0d c0       	rjmp	.+26     	; 0x2622 <__udivmodsi4_ep>

00002608 <__udivmodsi4_loop>:
    2608:	aa 1f       	adc	r26, r26
    260a:	bb 1f       	adc	r27, r27
    260c:	ee 1f       	adc	r30, r30
    260e:	ff 1f       	adc	r31, r31
    2610:	a2 17       	cp	r26, r18
    2612:	b3 07       	cpc	r27, r19
    2614:	e4 07       	cpc	r30, r20
    2616:	f5 07       	cpc	r31, r21
    2618:	20 f0       	brcs	.+8      	; 0x2622 <__udivmodsi4_ep>
    261a:	a2 1b       	sub	r26, r18
    261c:	b3 0b       	sbc	r27, r19
    261e:	e4 0b       	sbc	r30, r20
    2620:	f5 0b       	sbc	r31, r21

00002622 <__udivmodsi4_ep>:
    2622:	66 1f       	adc	r22, r22
    2624:	77 1f       	adc	r23, r23
    2626:	88 1f       	adc	r24, r24
    2628:	99 1f       	adc	r25, r25
    262a:	1a 94       	dec	r1
    262c:	69 f7       	brne	.-38     	; 0x2608 <__udivmodsi4_loop>
    262e:	60 95       	com	r22
    2630:	70 95       	com	r23
    2632:	80 95       	com	r24
    2634:	90 95       	com	r25
    2636:	9b 01       	movw	r18, r22
    2638:	ac 01       	movw	r20, r24
    263a:	bd 01       	movw	r22, r26
    263c:	cf 01       	movw	r24, r30
    263e:	08 95       	ret

00002640 <__muluhisi3>:
    2640:	0e 94 0e 14 	call	0x281c	; 0x281c <__umulhisi3>
    2644:	a5 9f       	mul	r26, r21
    2646:	90 0d       	add	r25, r0
    2648:	b4 9f       	mul	r27, r20
    264a:	90 0d       	add	r25, r0
    264c:	a4 9f       	mul	r26, r20
    264e:	80 0d       	add	r24, r0
    2650:	91 1d       	adc	r25, r1
    2652:	11 24       	eor	r1, r1
    2654:	08 95       	ret

00002656 <__moddi3>:
    2656:	68 94       	set
    2658:	01 c0       	rjmp	.+2      	; 0x265c <__divdi3_moddi3>

0000265a <__divdi3>:
    265a:	e8 94       	clt

0000265c <__divdi3_moddi3>:
    265c:	f9 2f       	mov	r31, r25
    265e:	f1 2b       	or	r31, r17
    2660:	12 f0       	brmi	.+4      	; 0x2666 <__divdi3_moddi3+0xa>
    2662:	0c 94 5f 13 	jmp	0x26be	; 0x26be <__udivdi3_umoddi3>
    2666:	a0 e0       	ldi	r26, 0x00	; 0
    2668:	b0 e0       	ldi	r27, 0x00	; 0
    266a:	e9 e3       	ldi	r30, 0x39	; 57
    266c:	f3 e1       	ldi	r31, 0x13	; 19
    266e:	0c 94 d1 13 	jmp	0x27a2	; 0x27a2 <__prologue_saves__+0xc>
    2672:	09 2e       	mov	r0, r25
    2674:	05 94       	asr	r0
    2676:	22 f4       	brpl	.+8      	; 0x2680 <__divdi3_moddi3+0x24>
    2678:	0e 94 bb 13 	call	0x2776	; 0x2776 <__negdi2>
    267c:	11 23       	and	r17, r17
    267e:	92 f4       	brpl	.+36     	; 0x26a4 <__divdi3_moddi3+0x48>
    2680:	f0 e8       	ldi	r31, 0x80	; 128
    2682:	0f 26       	eor	r0, r31
    2684:	ff ef       	ldi	r31, 0xFF	; 255
    2686:	e0 94       	com	r14
    2688:	f0 94       	com	r15
    268a:	00 95       	com	r16
    268c:	10 95       	com	r17
    268e:	b0 94       	com	r11
    2690:	c0 94       	com	r12
    2692:	d0 94       	com	r13
    2694:	a1 94       	neg	r10
    2696:	bf 0a       	sbc	r11, r31
    2698:	cf 0a       	sbc	r12, r31
    269a:	df 0a       	sbc	r13, r31
    269c:	ef 0a       	sbc	r14, r31
    269e:	ff 0a       	sbc	r15, r31
    26a0:	0f 0b       	sbc	r16, r31
    26a2:	1f 0b       	sbc	r17, r31
    26a4:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__udivmod64>
    26a8:	07 fc       	sbrc	r0, 7
    26aa:	0e 94 bb 13 	call	0x2776	; 0x2776 <__negdi2>
    26ae:	cd b7       	in	r28, 0x3d	; 61
    26b0:	de b7       	in	r29, 0x3e	; 62
    26b2:	ec e0       	ldi	r30, 0x0C	; 12
    26b4:	0c 94 ed 13 	jmp	0x27da	; 0x27da <__epilogue_restores__+0xc>

000026b8 <__umoddi3>:
    26b8:	68 94       	set
    26ba:	01 c0       	rjmp	.+2      	; 0x26be <__udivdi3_umoddi3>

000026bc <__udivdi3>:
    26bc:	e8 94       	clt

000026be <__udivdi3_umoddi3>:
    26be:	8f 92       	push	r8
    26c0:	9f 92       	push	r9
    26c2:	cf 93       	push	r28
    26c4:	df 93       	push	r29
    26c6:	0e 94 6a 13 	call	0x26d4	; 0x26d4 <__udivmod64>
    26ca:	df 91       	pop	r29
    26cc:	cf 91       	pop	r28
    26ce:	9f 90       	pop	r9
    26d0:	8f 90       	pop	r8
    26d2:	08 95       	ret

000026d4 <__udivmod64>:
    26d4:	88 24       	eor	r8, r8
    26d6:	99 24       	eor	r9, r9
    26d8:	f4 01       	movw	r30, r8
    26da:	e4 01       	movw	r28, r8
    26dc:	b0 e4       	ldi	r27, 0x40	; 64
    26de:	9f 93       	push	r25
    26e0:	aa 27       	eor	r26, r26
    26e2:	9a 15       	cp	r25, r10
    26e4:	8b 04       	cpc	r8, r11
    26e6:	9c 04       	cpc	r9, r12
    26e8:	ed 05       	cpc	r30, r13
    26ea:	fe 05       	cpc	r31, r14
    26ec:	cf 05       	cpc	r28, r15
    26ee:	d0 07       	cpc	r29, r16
    26f0:	a1 07       	cpc	r26, r17
    26f2:	98 f4       	brcc	.+38     	; 0x271a <__udivmod64+0x46>
    26f4:	ad 2f       	mov	r26, r29
    26f6:	dc 2f       	mov	r29, r28
    26f8:	cf 2f       	mov	r28, r31
    26fa:	fe 2f       	mov	r31, r30
    26fc:	e9 2d       	mov	r30, r9
    26fe:	98 2c       	mov	r9, r8
    2700:	89 2e       	mov	r8, r25
    2702:	98 2f       	mov	r25, r24
    2704:	87 2f       	mov	r24, r23
    2706:	76 2f       	mov	r23, r22
    2708:	65 2f       	mov	r22, r21
    270a:	54 2f       	mov	r21, r20
    270c:	43 2f       	mov	r20, r19
    270e:	32 2f       	mov	r19, r18
    2710:	22 27       	eor	r18, r18
    2712:	b8 50       	subi	r27, 0x08	; 8
    2714:	31 f7       	brne	.-52     	; 0x26e2 <__udivmod64+0xe>
    2716:	bf 91       	pop	r27
    2718:	27 c0       	rjmp	.+78     	; 0x2768 <__udivmod64+0x94>
    271a:	1b 2e       	mov	r1, r27
    271c:	bf 91       	pop	r27
    271e:	bb 27       	eor	r27, r27
    2720:	22 0f       	add	r18, r18
    2722:	33 1f       	adc	r19, r19
    2724:	44 1f       	adc	r20, r20
    2726:	55 1f       	adc	r21, r21
    2728:	66 1f       	adc	r22, r22
    272a:	77 1f       	adc	r23, r23
    272c:	88 1f       	adc	r24, r24
    272e:	99 1f       	adc	r25, r25
    2730:	88 1c       	adc	r8, r8
    2732:	99 1c       	adc	r9, r9
    2734:	ee 1f       	adc	r30, r30
    2736:	ff 1f       	adc	r31, r31
    2738:	cc 1f       	adc	r28, r28
    273a:	dd 1f       	adc	r29, r29
    273c:	aa 1f       	adc	r26, r26
    273e:	bb 1f       	adc	r27, r27
    2740:	8a 14       	cp	r8, r10
    2742:	9b 04       	cpc	r9, r11
    2744:	ec 05       	cpc	r30, r12
    2746:	fd 05       	cpc	r31, r13
    2748:	ce 05       	cpc	r28, r14
    274a:	df 05       	cpc	r29, r15
    274c:	a0 07       	cpc	r26, r16
    274e:	b1 07       	cpc	r27, r17
    2750:	48 f0       	brcs	.+18     	; 0x2764 <__udivmod64+0x90>
    2752:	8a 18       	sub	r8, r10
    2754:	9b 08       	sbc	r9, r11
    2756:	ec 09       	sbc	r30, r12
    2758:	fd 09       	sbc	r31, r13
    275a:	ce 09       	sbc	r28, r14
    275c:	df 09       	sbc	r29, r15
    275e:	a0 0b       	sbc	r26, r16
    2760:	b1 0b       	sbc	r27, r17
    2762:	21 60       	ori	r18, 0x01	; 1
    2764:	1a 94       	dec	r1
    2766:	e1 f6       	brne	.-72     	; 0x2720 <__udivmod64+0x4c>
    2768:	2e f4       	brtc	.+10     	; 0x2774 <__udivmod64+0xa0>
    276a:	94 01       	movw	r18, r8
    276c:	af 01       	movw	r20, r30
    276e:	be 01       	movw	r22, r28
    2770:	cd 01       	movw	r24, r26
    2772:	00 0c       	add	r0, r0
    2774:	08 95       	ret

00002776 <__negdi2>:
    2776:	60 95       	com	r22
    2778:	70 95       	com	r23
    277a:	80 95       	com	r24
    277c:	90 95       	com	r25
    277e:	30 95       	com	r19
    2780:	40 95       	com	r20
    2782:	50 95       	com	r21
    2784:	21 95       	neg	r18
    2786:	3f 4f       	sbci	r19, 0xFF	; 255
    2788:	4f 4f       	sbci	r20, 0xFF	; 255
    278a:	5f 4f       	sbci	r21, 0xFF	; 255
    278c:	6f 4f       	sbci	r22, 0xFF	; 255
    278e:	7f 4f       	sbci	r23, 0xFF	; 255
    2790:	8f 4f       	sbci	r24, 0xFF	; 255
    2792:	9f 4f       	sbci	r25, 0xFF	; 255
    2794:	08 95       	ret

00002796 <__prologue_saves__>:
    2796:	2f 92       	push	r2
    2798:	3f 92       	push	r3
    279a:	4f 92       	push	r4
    279c:	5f 92       	push	r5
    279e:	6f 92       	push	r6
    27a0:	7f 92       	push	r7
    27a2:	8f 92       	push	r8
    27a4:	9f 92       	push	r9
    27a6:	af 92       	push	r10
    27a8:	bf 92       	push	r11
    27aa:	cf 92       	push	r12
    27ac:	df 92       	push	r13
    27ae:	ef 92       	push	r14
    27b0:	ff 92       	push	r15
    27b2:	0f 93       	push	r16
    27b4:	1f 93       	push	r17
    27b6:	cf 93       	push	r28
    27b8:	df 93       	push	r29
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	ca 1b       	sub	r28, r26
    27c0:	db 0b       	sbc	r29, r27
    27c2:	0f b6       	in	r0, 0x3f	; 63
    27c4:	f8 94       	cli
    27c6:	de bf       	out	0x3e, r29	; 62
    27c8:	0f be       	out	0x3f, r0	; 63
    27ca:	cd bf       	out	0x3d, r28	; 61
    27cc:	09 94       	ijmp

000027ce <__epilogue_restores__>:
    27ce:	2a 88       	ldd	r2, Y+18	; 0x12
    27d0:	39 88       	ldd	r3, Y+17	; 0x11
    27d2:	48 88       	ldd	r4, Y+16	; 0x10
    27d4:	5f 84       	ldd	r5, Y+15	; 0x0f
    27d6:	6e 84       	ldd	r6, Y+14	; 0x0e
    27d8:	7d 84       	ldd	r7, Y+13	; 0x0d
    27da:	8c 84       	ldd	r8, Y+12	; 0x0c
    27dc:	9b 84       	ldd	r9, Y+11	; 0x0b
    27de:	aa 84       	ldd	r10, Y+10	; 0x0a
    27e0:	b9 84       	ldd	r11, Y+9	; 0x09
    27e2:	c8 84       	ldd	r12, Y+8	; 0x08
    27e4:	df 80       	ldd	r13, Y+7	; 0x07
    27e6:	ee 80       	ldd	r14, Y+6	; 0x06
    27e8:	fd 80       	ldd	r15, Y+5	; 0x05
    27ea:	0c 81       	ldd	r16, Y+4	; 0x04
    27ec:	1b 81       	ldd	r17, Y+3	; 0x03
    27ee:	aa 81       	ldd	r26, Y+2	; 0x02
    27f0:	b9 81       	ldd	r27, Y+1	; 0x01
    27f2:	ce 0f       	add	r28, r30
    27f4:	d1 1d       	adc	r29, r1
    27f6:	0f b6       	in	r0, 0x3f	; 63
    27f8:	f8 94       	cli
    27fa:	de bf       	out	0x3e, r29	; 62
    27fc:	0f be       	out	0x3f, r0	; 63
    27fe:	cd bf       	out	0x3d, r28	; 61
    2800:	ed 01       	movw	r28, r26
    2802:	08 95       	ret

00002804 <__cmpdi2_s8>:
    2804:	00 24       	eor	r0, r0
    2806:	a7 fd       	sbrc	r26, 7
    2808:	00 94       	com	r0
    280a:	2a 17       	cp	r18, r26
    280c:	30 05       	cpc	r19, r0
    280e:	40 05       	cpc	r20, r0
    2810:	50 05       	cpc	r21, r0
    2812:	60 05       	cpc	r22, r0
    2814:	70 05       	cpc	r23, r0
    2816:	80 05       	cpc	r24, r0
    2818:	90 05       	cpc	r25, r0
    281a:	08 95       	ret

0000281c <__umulhisi3>:
    281c:	a2 9f       	mul	r26, r18
    281e:	b0 01       	movw	r22, r0
    2820:	b3 9f       	mul	r27, r19
    2822:	c0 01       	movw	r24, r0
    2824:	a3 9f       	mul	r26, r19
    2826:	70 0d       	add	r23, r0
    2828:	81 1d       	adc	r24, r1
    282a:	11 24       	eor	r1, r1
    282c:	91 1d       	adc	r25, r1
    282e:	b2 9f       	mul	r27, r18
    2830:	70 0d       	add	r23, r0
    2832:	81 1d       	adc	r24, r1
    2834:	11 24       	eor	r1, r1
    2836:	91 1d       	adc	r25, r1
    2838:	08 95       	ret

0000283a <_exit>:
    283a:	f8 94       	cli

0000283c <__stop_program>:
    283c:	ff cf       	rjmp	.-2      	; 0x283c <__stop_program>
