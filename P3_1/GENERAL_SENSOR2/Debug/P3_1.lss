
P3_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000029f0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000017a  00800060  000029f0  00002a84  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000077  008001da  008001da  00002bfe  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002bfe  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000588  00000000  00000000  00002c2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000646b  00000000  00000000  000031b6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001781  00000000  00000000  00009621  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00001927  00000000  00000000  0000ada2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000015bc  00000000  00000000  0000c6cc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000028e6  00000000  00000000  0000dc88  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00004868  00000000  00000000  0001056e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000478  00000000  00000000  00014dd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 a1 03 	jmp	0x742	; 0x742 <__vector_1>
       8:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__vector_2>
       c:	0c 94 67 01 	jmp	0x2ce	; 0x2ce <__vector_3>
      10:	0c 94 8d 01 	jmp	0x31a	; 0x31a <__vector_4>
      14:	0c 94 c7 03 	jmp	0x78e	; 0x78e <__vector_5>
      18:	0c 94 b3 01 	jmp	0x366	; 0x366 <__vector_6>
      1c:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <__vector_7>
      20:	0c 94 ff 01 	jmp	0x3fe	; 0x3fe <__vector_8>
      24:	0c 94 13 04 	jmp	0x826	; 0x826 <__vector_9>
      28:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_10>
      2c:	0c 94 37 04 	jmp	0x86e	; 0x86e <__vector_11>
      30:	0c 94 4b 02 	jmp	0x496	; 0x496 <__vector_12>
      34:	0c 94 71 02 	jmp	0x4e2	; 0x4e2 <__vector_13>
      38:	0c 94 97 02 	jmp	0x52e	; 0x52e <__vector_14>
      3c:	0c 94 bd 02 	jmp	0x57a	; 0x57a <__vector_15>
      40:	0c 94 e3 02 	jmp	0x5c6	; 0x5c6 <__vector_16>
      44:	0c 94 09 03 	jmp	0x612	; 0x612 <__vector_17>
      48:	0c 94 2f 03 	jmp	0x65e	; 0x65e <__vector_18>
      4c:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__vector_19>
      50:	0c 94 7b 03 	jmp	0x6f6	; 0x6f6 <__vector_20>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 ef       	ldi	r30, 0xF0	; 240
      68:	f9 e2       	ldi	r31, 0x29	; 41
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	aa 3d       	cpi	r26, 0xDA	; 218
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	22 e0       	ldi	r18, 0x02	; 2
      78:	aa ed       	ldi	r26, 0xDA	; 218
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a1 35       	cpi	r26, 0x51	; 81
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 5b 04 	call	0x8b6	; 0x8b6 <main>
      8a:	0c 94 f6 14 	jmp	0x29ec	; 0x29ec <_exit>

0000008e <APP_IO_SETUP>:
volatile unsigned char F_PIR_DETECTED=0;


void APP_IO_SETUP()
{
	gpio_inputconfg(PORT_DDR_PIR,PORT_INMOD_PIR,FLOAT_mod,PIR_PIN);
      8e:	20 e0       	ldi	r18, 0x00	; 0
      90:	40 e0       	ldi	r20, 0x00	; 0
      92:	65 e3       	ldi	r22, 0x35	; 53
      94:	70 e0       	ldi	r23, 0x00	; 0
      96:	84 e3       	ldi	r24, 0x34	; 52
      98:	90 e0       	ldi	r25, 0x00	; 0
      9a:	0e 94 9b 04 	call	0x936	; 0x936 <gpio_inputconfg>
	gpio_outputconfg(PORT_DDR_RELAY,PORT_OUTMOD_RELAY,OUTPASS,RELAY_PIN);		
      9e:	21 e0       	ldi	r18, 0x01	; 1
      a0:	40 e0       	ldi	r20, 0x00	; 0
      a2:	63 e3       	ldi	r22, 0x33	; 51
      a4:	70 e0       	ldi	r23, 0x00	; 0
      a6:	84 e3       	ldi	r24, 0x34	; 52
      a8:	90 e0       	ldi	r25, 0x00	; 0
      aa:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
      ae:	08 95       	ret

000000b0 <APP_LOAD_EEEPROM>:
	OPEN_THE_RELAY();
	MAIN_REGISTERS[6]=T_PIR_COUNTER_MAX;/*as default*/
	APP_LOAD_EEEPROM();
}
void APP_LOAD_EEEPROM()
{
      b0:	cf 93       	push	r28
	if (readeeprom(MY_EEPROM_FIRST_USE)==NOT_FIRST_USE_VALUE)
      b2:	80 e0       	ldi	r24, 0x00	; 0
      b4:	90 e0       	ldi	r25, 0x00	; 0
      b6:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
      ba:	84 34       	cpi	r24, 0x44	; 68
      bc:	b9 f5       	brne	.+110    	; 0x12c <APP_LOAD_EEEPROM+0x7c>
	{
		MAIN_REGISTERS[6]=(readeeprom(1)<<8)|readeeprom(2);
      be:	81 e0       	ldi	r24, 0x01	; 1
      c0:	90 e0       	ldi	r25, 0x00	; 0
      c2:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
      c6:	c8 2f       	mov	r28, r24
      c8:	82 e0       	ldi	r24, 0x02	; 2
      ca:	90 e0       	ldi	r25, 0x00	; 0
      cc:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
      d0:	2c 2f       	mov	r18, r28
      d2:	30 e0       	ldi	r19, 0x00	; 0
      d4:	32 2f       	mov	r19, r18
      d6:	22 27       	eor	r18, r18
      d8:	28 2b       	or	r18, r24
      da:	30 93 36 02 	sts	0x0236, r19
      de:	20 93 35 02 	sts	0x0235, r18
		MAIN_REGISTERS[7]=(readeeprom(3)<<8)|readeeprom(4);
      e2:	83 e0       	ldi	r24, 0x03	; 3
      e4:	90 e0       	ldi	r25, 0x00	; 0
      e6:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
      ea:	c8 2f       	mov	r28, r24
      ec:	84 e0       	ldi	r24, 0x04	; 4
      ee:	90 e0       	ldi	r25, 0x00	; 0
      f0:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
      f4:	2c 2f       	mov	r18, r28
      f6:	30 e0       	ldi	r19, 0x00	; 0
      f8:	32 2f       	mov	r19, r18
      fa:	22 27       	eor	r18, r18
      fc:	28 2b       	or	r18, r24
      fe:	30 93 38 02 	sts	0x0238, r19
     102:	20 93 37 02 	sts	0x0237, r18
		MAIN_REGISTERS[8]=(readeeprom(5)<<8)|readeeprom(6);
     106:	85 e0       	ldi	r24, 0x05	; 5
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
     10e:	c8 2f       	mov	r28, r24
     110:	86 e0       	ldi	r24, 0x06	; 6
     112:	90 e0       	ldi	r25, 0x00	; 0
     114:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
     118:	2c 2f       	mov	r18, r28
     11a:	30 e0       	ldi	r19, 0x00	; 0
     11c:	32 2f       	mov	r19, r18
     11e:	22 27       	eor	r18, r18
     120:	28 2b       	or	r18, r24
     122:	30 93 3a 02 	sts	0x023A, r19
     126:	20 93 39 02 	sts	0x0239, r18
     12a:	09 c0       	rjmp	.+18     	; 0x13e <APP_LOAD_EEEPROM+0x8e>
	}
	else
	{
		writeeeprom(MY_EEPROM_FIRST_USE,NOT_FIRST_USE_VALUE);
     12c:	64 e4       	ldi	r22, 0x44	; 68
     12e:	80 e0       	ldi	r24, 0x00	; 0
     130:	90 e0       	ldi	r25, 0x00	; 0
     132:	0e 94 48 07 	call	0xe90	; 0xe90 <writeeeprom>
		USART_SEND_str("first time\n");
     136:	80 e7       	ldi	r24, 0x70	; 112
     138:	90 e0       	ldi	r25, 0x00	; 0
     13a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	}
}
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <APP_SETUP>:
	gpio_inputconfg(PORT_DDR_PIR,PORT_INMOD_PIR,FLOAT_mod,PIR_PIN);
	gpio_outputconfg(PORT_DDR_RELAY,PORT_OUTMOD_RELAY,OUTPASS,RELAY_PIN);		
}
void APP_SETUP()
{	
	MAIN_REGISTERS[7]=1;
     142:	81 e0       	ldi	r24, 0x01	; 1
     144:	90 e0       	ldi	r25, 0x00	; 0
     146:	90 93 38 02 	sts	0x0238, r25
     14a:	80 93 37 02 	sts	0x0237, r24
	MAIN_REGISTERS[8]=0;
     14e:	10 92 3a 02 	sts	0x023A, r1
     152:	10 92 39 02 	sts	0x0239, r1
	OPEN_THE_RELAY();
     156:	a9 98       	cbi	0x15, 1	; 21
	MAIN_REGISTERS[6]=T_PIR_COUNTER_MAX;/*as default*/
     158:	8a e0       	ldi	r24, 0x0A	; 10
     15a:	90 e0       	ldi	r25, 0x00	; 0
     15c:	90 93 36 02 	sts	0x0236, r25
     160:	80 93 35 02 	sts	0x0235, r24
	APP_LOAD_EEEPROM();
     164:	0e 94 58 00 	call	0xb0	; 0xb0 <APP_LOAD_EEEPROM>
     168:	08 95       	ret

0000016a <APP_LOOP>:
{
	MAIN_REGISTERS[9]=MAIN_REGISTERS[8]|(MAIN_REGISTERS[7]<<1)|(MAIN_REGISTERS[5]<<2)|(MAIN_REGISTERS[6]<<3);
}

void APP_LOOP()
{
     16a:	cf 93       	push	r28
     16c:	df 93       	push	r29
		USART_SEND_str("first time\n");
	}
}
inline void APP_SAVE_EEEPROM()
{
	writeeeprom(1,MAIN_REGISTERS[6]>>8);
     16e:	c5 e3       	ldi	r28, 0x35	; 53
     170:	d2 e0       	ldi	r29, 0x02	; 2
     172:	88 81       	ld	r24, Y
     174:	99 81       	ldd	r25, Y+1	; 0x01
     176:	69 2f       	mov	r22, r25
     178:	81 e0       	ldi	r24, 0x01	; 1
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	0e 94 48 07 	call	0xe90	; 0xe90 <writeeeprom>
	writeeeprom(2,MAIN_REGISTERS[6]);
     180:	68 81       	ld	r22, Y
     182:	79 81       	ldd	r23, Y+1	; 0x01
     184:	82 e0       	ldi	r24, 0x02	; 2
     186:	90 e0       	ldi	r25, 0x00	; 0
     188:	0e 94 48 07 	call	0xe90	; 0xe90 <writeeeprom>
	writeeeprom(3,MAIN_REGISTERS[7]>>8);
     18c:	c7 e3       	ldi	r28, 0x37	; 55
     18e:	d2 e0       	ldi	r29, 0x02	; 2
     190:	88 81       	ld	r24, Y
     192:	99 81       	ldd	r25, Y+1	; 0x01
     194:	69 2f       	mov	r22, r25
     196:	83 e0       	ldi	r24, 0x03	; 3
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	0e 94 48 07 	call	0xe90	; 0xe90 <writeeeprom>
	writeeeprom(4,MAIN_REGISTERS[7]);
     19e:	68 81       	ld	r22, Y
     1a0:	79 81       	ldd	r23, Y+1	; 0x01
     1a2:	84 e0       	ldi	r24, 0x04	; 4
     1a4:	90 e0       	ldi	r25, 0x00	; 0
     1a6:	0e 94 48 07 	call	0xe90	; 0xe90 <writeeeprom>
	writeeeprom(5,MAIN_REGISTERS[8]>>8);
     1aa:	c9 e3       	ldi	r28, 0x39	; 57
     1ac:	d2 e0       	ldi	r29, 0x02	; 2
     1ae:	88 81       	ld	r24, Y
     1b0:	99 81       	ldd	r25, Y+1	; 0x01
     1b2:	69 2f       	mov	r22, r25
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	90 e0       	ldi	r25, 0x00	; 0
     1b8:	0e 94 48 07 	call	0xe90	; 0xe90 <writeeeprom>
	writeeeprom(6,MAIN_REGISTERS[8]);
     1bc:	68 81       	ld	r22, Y
     1be:	79 81       	ldd	r23, Y+1	; 0x01
     1c0:	86 e0       	ldi	r24, 0x06	; 6
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	0e 94 48 07 	call	0xe90	; 0xe90 <writeeeprom>

void APP_LOOP()
{
	
	APP_SAVE_EEEPROM();
	global_interupt_disable();
     1c8:	8f b7       	in	r24, 0x3f	; 63
     1ca:	8f 77       	andi	r24, 0x7F	; 127
     1cc:	8f bf       	out	0x3f, r24	; 63
	if(F_PIR_DETECTED)
     1ce:	80 91 da 01 	lds	r24, 0x01DA
     1d2:	88 23       	and	r24, r24
     1d4:	69 f0       	breq	.+26     	; 0x1f0 <APP_LOOP+0x86>
	{
		MAIN_REGISTERS[5]=1;
     1d6:	81 e0       	ldi	r24, 0x01	; 1
     1d8:	90 e0       	ldi	r25, 0x00	; 0
     1da:	90 93 34 02 	sts	0x0234, r25
     1de:	80 93 33 02 	sts	0x0233, r24
			
			if (MAIN_REGISTERS[7])
     1e2:	80 91 37 02 	lds	r24, 0x0237
     1e6:	90 91 38 02 	lds	r25, 0x0238
     1ea:	89 2b       	or	r24, r25
     1ec:	09 f0       	breq	.+2      	; 0x1f0 <APP_LOOP+0x86>
			{	
					
				CLOSE_THE_RELAY();
     1ee:	a9 9a       	sbi	0x15, 1	; 21
			}
	}
	global_interupt_enable();
     1f0:	8f b7       	in	r24, 0x3f	; 63
     1f2:	80 68       	ori	r24, 0x80	; 128
     1f4:	8f bf       	out	0x3f, r24	; 63
	
	if (MAIN_REGISTERS[7]==0)
     1f6:	80 91 37 02 	lds	r24, 0x0237
     1fa:	90 91 38 02 	lds	r25, 0x0238
     1fe:	89 2b       	or	r24, r25
     200:	49 f4       	brne	.+18     	; 0x214 <APP_LOOP+0xaa>
	{
		
		if (MAIN_REGISTERS[8])
     202:	80 91 39 02 	lds	r24, 0x0239
     206:	90 91 3a 02 	lds	r25, 0x023A
     20a:	89 2b       	or	r24, r25
     20c:	11 f0       	breq	.+4      	; 0x212 <APP_LOOP+0xa8>
		{
			
			CLOSE_THE_RELAY();
     20e:	a9 9a       	sbi	0x15, 1	; 21
     210:	01 c0       	rjmp	.+2      	; 0x214 <APP_LOOP+0xaa>
		}
		else
		{
			OPEN_THE_RELAY();
     212:	a9 98       	cbi	0x15, 1	; 21
	writeeeprom(5,MAIN_REGISTERS[8]>>8);
	writeeeprom(6,MAIN_REGISTERS[8]);
}
void inline FILL_COMPO_REGISTER()
{
	MAIN_REGISTERS[9]=MAIN_REGISTERS[8]|(MAIN_REGISTERS[7]<<1)|(MAIN_REGISTERS[5]<<2)|(MAIN_REGISTERS[6]<<3);
     214:	40 91 39 02 	lds	r20, 0x0239
     218:	50 91 3a 02 	lds	r21, 0x023A
     21c:	60 91 37 02 	lds	r22, 0x0237
     220:	70 91 38 02 	lds	r23, 0x0238
     224:	80 91 33 02 	lds	r24, 0x0233
     228:	90 91 34 02 	lds	r25, 0x0234
     22c:	20 91 35 02 	lds	r18, 0x0235
     230:	30 91 36 02 	lds	r19, 0x0236
     234:	66 0f       	add	r22, r22
     236:	77 1f       	adc	r23, r23
     238:	88 0f       	add	r24, r24
     23a:	99 1f       	adc	r25, r25
     23c:	88 0f       	add	r24, r24
     23e:	99 1f       	adc	r25, r25
     240:	86 2b       	or	r24, r22
     242:	97 2b       	or	r25, r23
     244:	84 2b       	or	r24, r20
     246:	95 2b       	or	r25, r21
     248:	22 0f       	add	r18, r18
     24a:	33 1f       	adc	r19, r19
     24c:	22 0f       	add	r18, r18
     24e:	33 1f       	adc	r19, r19
     250:	22 0f       	add	r18, r18
     252:	33 1f       	adc	r19, r19
     254:	82 2b       	or	r24, r18
     256:	93 2b       	or	r25, r19
     258:	90 93 3c 02 	sts	0x023C, r25
     25c:	80 93 3b 02 	sts	0x023B, r24
		TEST_UART_SEND_VALUE(MAIN_REGISTERS[5]);
		USART_SEND_str("\n");*/
	/**/
	
	
}
     260:	df 91       	pop	r29
     262:	cf 91       	pop	r28
     264:	08 95       	ret

00000266 <APP_TIMER1>:
void APP_TIMER1()
{
	
	if (F_PIR_DETECTED)
     266:	80 91 da 01 	lds	r24, 0x01DA
     26a:	88 23       	and	r24, r24
     26c:	29 f1       	breq	.+74     	; 0x2b8 <APP_TIMER1+0x52>
	{
		T_PIR_COUNTER++;
     26e:	80 91 db 01 	lds	r24, 0x01DB
     272:	90 91 dc 01 	lds	r25, 0x01DC
     276:	01 96       	adiw	r24, 0x01	; 1
     278:	90 93 dc 01 	sts	0x01DC, r25
     27c:	80 93 db 01 	sts	0x01DB, r24
		if(T_PIR_COUNTER>MAIN_REGISTERS[6])
     280:	20 91 35 02 	lds	r18, 0x0235
     284:	30 91 36 02 	lds	r19, 0x0236
     288:	80 91 db 01 	lds	r24, 0x01DB
     28c:	90 91 dc 01 	lds	r25, 0x01DC
     290:	28 17       	cp	r18, r24
     292:	39 07       	cpc	r19, r25
     294:	88 f4       	brcc	.+34     	; 0x2b8 <APP_TIMER1+0x52>
		{
			F_PIR_DETECTED=0;
     296:	10 92 da 01 	sts	0x01DA, r1
			T_PIR_COUNTER=0;
     29a:	10 92 dc 01 	sts	0x01DC, r1
     29e:	10 92 db 01 	sts	0x01DB, r1
			MAIN_REGISTERS[5]=0;
     2a2:	10 92 34 02 	sts	0x0234, r1
     2a6:	10 92 33 02 	sts	0x0233, r1
			if (MAIN_REGISTERS[7]==1)
     2aa:	80 91 37 02 	lds	r24, 0x0237
     2ae:	90 91 38 02 	lds	r25, 0x0238
     2b2:	01 97       	sbiw	r24, 0x01	; 1
     2b4:	09 f4       	brne	.+2      	; 0x2b8 <APP_TIMER1+0x52>
			{
				
				OPEN_THE_RELAY();
     2b6:	a9 98       	cbi	0x15, 1	; 21
     2b8:	08 95       	ret

000002ba <APP_TIMER0>:
}


void APP_TIMER0()
{
	if (isbitset(*PORT_IN_PIR,PIR_PIN))
     2ba:	98 9b       	sbis	0x13, 0	; 19
     2bc:	07 c0       	rjmp	.+14     	; 0x2cc <APP_TIMER0+0x12>
	{
		
		T_PIR_COUNTER=0;
     2be:	10 92 dc 01 	sts	0x01DC, r1
     2c2:	10 92 db 01 	sts	0x01DB, r1
		F_PIR_DETECTED=1;
     2c6:	81 e0       	ldi	r24, 0x01	; 1
     2c8:	80 93 da 01 	sts	0x01DA, r24
     2cc:	08 95       	ret

000002ce <__vector_3>:

/*test*/
volatile unsigned short z=0;
/*check*/
ISR(INT2_vect)
{
     2ce:	1f 92       	push	r1
     2d0:	0f 92       	push	r0
     2d2:	0f b6       	in	r0, 0x3f	; 63
     2d4:	0f 92       	push	r0
     2d6:	11 24       	eor	r1, r1
     2d8:	2f 93       	push	r18
     2da:	3f 93       	push	r19
     2dc:	4f 93       	push	r20
     2de:	5f 93       	push	r21
     2e0:	6f 93       	push	r22
     2e2:	7f 93       	push	r23
     2e4:	8f 93       	push	r24
     2e6:	9f 93       	push	r25
     2e8:	af 93       	push	r26
     2ea:	bf 93       	push	r27
     2ec:	ef 93       	push	r30
     2ee:	ff 93       	push	r31
	USART_SEND_str("BADISR 1\n");
     2f0:	8c e7       	ldi	r24, 0x7C	; 124
     2f2:	90 e0       	ldi	r25, 0x00	; 0
     2f4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	
}
     2f8:	ff 91       	pop	r31
     2fa:	ef 91       	pop	r30
     2fc:	bf 91       	pop	r27
     2fe:	af 91       	pop	r26
     300:	9f 91       	pop	r25
     302:	8f 91       	pop	r24
     304:	7f 91       	pop	r23
     306:	6f 91       	pop	r22
     308:	5f 91       	pop	r21
     30a:	4f 91       	pop	r20
     30c:	3f 91       	pop	r19
     30e:	2f 91       	pop	r18
     310:	0f 90       	pop	r0
     312:	0f be       	out	0x3f, r0	; 63
     314:	0f 90       	pop	r0
     316:	1f 90       	pop	r1
     318:	18 95       	reti

0000031a <__vector_4>:
ISR(TIMER2_COMP_vect)
{
     31a:	1f 92       	push	r1
     31c:	0f 92       	push	r0
     31e:	0f b6       	in	r0, 0x3f	; 63
     320:	0f 92       	push	r0
     322:	11 24       	eor	r1, r1
     324:	2f 93       	push	r18
     326:	3f 93       	push	r19
     328:	4f 93       	push	r20
     32a:	5f 93       	push	r21
     32c:	6f 93       	push	r22
     32e:	7f 93       	push	r23
     330:	8f 93       	push	r24
     332:	9f 93       	push	r25
     334:	af 93       	push	r26
     336:	bf 93       	push	r27
     338:	ef 93       	push	r30
     33a:	ff 93       	push	r31
		USART_SEND_str("BADISR 2\n");
     33c:	86 e8       	ldi	r24, 0x86	; 134
     33e:	90 e0       	ldi	r25, 0x00	; 0
     340:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     344:	ff 91       	pop	r31
     346:	ef 91       	pop	r30
     348:	bf 91       	pop	r27
     34a:	af 91       	pop	r26
     34c:	9f 91       	pop	r25
     34e:	8f 91       	pop	r24
     350:	7f 91       	pop	r23
     352:	6f 91       	pop	r22
     354:	5f 91       	pop	r21
     356:	4f 91       	pop	r20
     358:	3f 91       	pop	r19
     35a:	2f 91       	pop	r18
     35c:	0f 90       	pop	r0
     35e:	0f be       	out	0x3f, r0	; 63
     360:	0f 90       	pop	r0
     362:	1f 90       	pop	r1
     364:	18 95       	reti

00000366 <__vector_6>:


ISR(TIMER1_CAPT_vect)
{
     366:	1f 92       	push	r1
     368:	0f 92       	push	r0
     36a:	0f b6       	in	r0, 0x3f	; 63
     36c:	0f 92       	push	r0
     36e:	11 24       	eor	r1, r1
     370:	2f 93       	push	r18
     372:	3f 93       	push	r19
     374:	4f 93       	push	r20
     376:	5f 93       	push	r21
     378:	6f 93       	push	r22
     37a:	7f 93       	push	r23
     37c:	8f 93       	push	r24
     37e:	9f 93       	push	r25
     380:	af 93       	push	r26
     382:	bf 93       	push	r27
     384:	ef 93       	push	r30
     386:	ff 93       	push	r31
		USART_SEND_str("BADISR 3\n");
     388:	80 e9       	ldi	r24, 0x90	; 144
     38a:	90 e0       	ldi	r25, 0x00	; 0
     38c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     390:	ff 91       	pop	r31
     392:	ef 91       	pop	r30
     394:	bf 91       	pop	r27
     396:	af 91       	pop	r26
     398:	9f 91       	pop	r25
     39a:	8f 91       	pop	r24
     39c:	7f 91       	pop	r23
     39e:	6f 91       	pop	r22
     3a0:	5f 91       	pop	r21
     3a2:	4f 91       	pop	r20
     3a4:	3f 91       	pop	r19
     3a6:	2f 91       	pop	r18
     3a8:	0f 90       	pop	r0
     3aa:	0f be       	out	0x3f, r0	; 63
     3ac:	0f 90       	pop	r0
     3ae:	1f 90       	pop	r1
     3b0:	18 95       	reti

000003b2 <__vector_7>:
ISR(TIMER1_COMPA_vect)
{
     3b2:	1f 92       	push	r1
     3b4:	0f 92       	push	r0
     3b6:	0f b6       	in	r0, 0x3f	; 63
     3b8:	0f 92       	push	r0
     3ba:	11 24       	eor	r1, r1
     3bc:	2f 93       	push	r18
     3be:	3f 93       	push	r19
     3c0:	4f 93       	push	r20
     3c2:	5f 93       	push	r21
     3c4:	6f 93       	push	r22
     3c6:	7f 93       	push	r23
     3c8:	8f 93       	push	r24
     3ca:	9f 93       	push	r25
     3cc:	af 93       	push	r26
     3ce:	bf 93       	push	r27
     3d0:	ef 93       	push	r30
     3d2:	ff 93       	push	r31
	USART_SEND_str("BADISR 4\n");
     3d4:	8a e9       	ldi	r24, 0x9A	; 154
     3d6:	90 e0       	ldi	r25, 0x00	; 0
     3d8:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     3dc:	ff 91       	pop	r31
     3de:	ef 91       	pop	r30
     3e0:	bf 91       	pop	r27
     3e2:	af 91       	pop	r26
     3e4:	9f 91       	pop	r25
     3e6:	8f 91       	pop	r24
     3e8:	7f 91       	pop	r23
     3ea:	6f 91       	pop	r22
     3ec:	5f 91       	pop	r21
     3ee:	4f 91       	pop	r20
     3f0:	3f 91       	pop	r19
     3f2:	2f 91       	pop	r18
     3f4:	0f 90       	pop	r0
     3f6:	0f be       	out	0x3f, r0	; 63
     3f8:	0f 90       	pop	r0
     3fa:	1f 90       	pop	r1
     3fc:	18 95       	reti

000003fe <__vector_8>:
ISR(TIMER1_COMPB_vect)
{
     3fe:	1f 92       	push	r1
     400:	0f 92       	push	r0
     402:	0f b6       	in	r0, 0x3f	; 63
     404:	0f 92       	push	r0
     406:	11 24       	eor	r1, r1
     408:	2f 93       	push	r18
     40a:	3f 93       	push	r19
     40c:	4f 93       	push	r20
     40e:	5f 93       	push	r21
     410:	6f 93       	push	r22
     412:	7f 93       	push	r23
     414:	8f 93       	push	r24
     416:	9f 93       	push	r25
     418:	af 93       	push	r26
     41a:	bf 93       	push	r27
     41c:	ef 93       	push	r30
     41e:	ff 93       	push	r31
		USART_SEND_str("BADISR 5\n");
     420:	84 ea       	ldi	r24, 0xA4	; 164
     422:	90 e0       	ldi	r25, 0x00	; 0
     424:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     428:	ff 91       	pop	r31
     42a:	ef 91       	pop	r30
     42c:	bf 91       	pop	r27
     42e:	af 91       	pop	r26
     430:	9f 91       	pop	r25
     432:	8f 91       	pop	r24
     434:	7f 91       	pop	r23
     436:	6f 91       	pop	r22
     438:	5f 91       	pop	r21
     43a:	4f 91       	pop	r20
     43c:	3f 91       	pop	r19
     43e:	2f 91       	pop	r18
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_10>:
ISR(TIMER0_COMP_vect)
{
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	ef 93       	push	r30
     46a:	ff 93       	push	r31
		USART_SEND_str("BADISR 6\n");
     46c:	8e ea       	ldi	r24, 0xAE	; 174
     46e:	90 e0       	ldi	r25, 0x00	; 0
     470:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     474:	ff 91       	pop	r31
     476:	ef 91       	pop	r30
     478:	bf 91       	pop	r27
     47a:	af 91       	pop	r26
     47c:	9f 91       	pop	r25
     47e:	8f 91       	pop	r24
     480:	7f 91       	pop	r23
     482:	6f 91       	pop	r22
     484:	5f 91       	pop	r21
     486:	4f 91       	pop	r20
     488:	3f 91       	pop	r19
     48a:	2f 91       	pop	r18
     48c:	0f 90       	pop	r0
     48e:	0f be       	out	0x3f, r0	; 63
     490:	0f 90       	pop	r0
     492:	1f 90       	pop	r1
     494:	18 95       	reti

00000496 <__vector_12>:
ISR(SPI_STC_vect)
{
     496:	1f 92       	push	r1
     498:	0f 92       	push	r0
     49a:	0f b6       	in	r0, 0x3f	; 63
     49c:	0f 92       	push	r0
     49e:	11 24       	eor	r1, r1
     4a0:	2f 93       	push	r18
     4a2:	3f 93       	push	r19
     4a4:	4f 93       	push	r20
     4a6:	5f 93       	push	r21
     4a8:	6f 93       	push	r22
     4aa:	7f 93       	push	r23
     4ac:	8f 93       	push	r24
     4ae:	9f 93       	push	r25
     4b0:	af 93       	push	r26
     4b2:	bf 93       	push	r27
     4b4:	ef 93       	push	r30
     4b6:	ff 93       	push	r31
	USART_SEND_str("BADISR 7\n");
     4b8:	88 eb       	ldi	r24, 0xB8	; 184
     4ba:	90 e0       	ldi	r25, 0x00	; 0
     4bc:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     4c0:	ff 91       	pop	r31
     4c2:	ef 91       	pop	r30
     4c4:	bf 91       	pop	r27
     4c6:	af 91       	pop	r26
     4c8:	9f 91       	pop	r25
     4ca:	8f 91       	pop	r24
     4cc:	7f 91       	pop	r23
     4ce:	6f 91       	pop	r22
     4d0:	5f 91       	pop	r21
     4d2:	4f 91       	pop	r20
     4d4:	3f 91       	pop	r19
     4d6:	2f 91       	pop	r18
     4d8:	0f 90       	pop	r0
     4da:	0f be       	out	0x3f, r0	; 63
     4dc:	0f 90       	pop	r0
     4de:	1f 90       	pop	r1
     4e0:	18 95       	reti

000004e2 <__vector_13>:
ISR(USART_RXC_vect)
{
     4e2:	1f 92       	push	r1
     4e4:	0f 92       	push	r0
     4e6:	0f b6       	in	r0, 0x3f	; 63
     4e8:	0f 92       	push	r0
     4ea:	11 24       	eor	r1, r1
     4ec:	2f 93       	push	r18
     4ee:	3f 93       	push	r19
     4f0:	4f 93       	push	r20
     4f2:	5f 93       	push	r21
     4f4:	6f 93       	push	r22
     4f6:	7f 93       	push	r23
     4f8:	8f 93       	push	r24
     4fa:	9f 93       	push	r25
     4fc:	af 93       	push	r26
     4fe:	bf 93       	push	r27
     500:	ef 93       	push	r30
     502:	ff 93       	push	r31
		USART_SEND_str("BADISR 8\n");
     504:	82 ec       	ldi	r24, 0xC2	; 194
     506:	90 e0       	ldi	r25, 0x00	; 0
     508:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     50c:	ff 91       	pop	r31
     50e:	ef 91       	pop	r30
     510:	bf 91       	pop	r27
     512:	af 91       	pop	r26
     514:	9f 91       	pop	r25
     516:	8f 91       	pop	r24
     518:	7f 91       	pop	r23
     51a:	6f 91       	pop	r22
     51c:	5f 91       	pop	r21
     51e:	4f 91       	pop	r20
     520:	3f 91       	pop	r19
     522:	2f 91       	pop	r18
     524:	0f 90       	pop	r0
     526:	0f be       	out	0x3f, r0	; 63
     528:	0f 90       	pop	r0
     52a:	1f 90       	pop	r1
     52c:	18 95       	reti

0000052e <__vector_14>:
ISR(USART_UDRE_vect)
{
     52e:	1f 92       	push	r1
     530:	0f 92       	push	r0
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	0f 92       	push	r0
     536:	11 24       	eor	r1, r1
     538:	2f 93       	push	r18
     53a:	3f 93       	push	r19
     53c:	4f 93       	push	r20
     53e:	5f 93       	push	r21
     540:	6f 93       	push	r22
     542:	7f 93       	push	r23
     544:	8f 93       	push	r24
     546:	9f 93       	push	r25
     548:	af 93       	push	r26
     54a:	bf 93       	push	r27
     54c:	ef 93       	push	r30
     54e:	ff 93       	push	r31
		USART_SEND_str("BADISR 9\n");
     550:	8c ec       	ldi	r24, 0xCC	; 204
     552:	90 e0       	ldi	r25, 0x00	; 0
     554:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     558:	ff 91       	pop	r31
     55a:	ef 91       	pop	r30
     55c:	bf 91       	pop	r27
     55e:	af 91       	pop	r26
     560:	9f 91       	pop	r25
     562:	8f 91       	pop	r24
     564:	7f 91       	pop	r23
     566:	6f 91       	pop	r22
     568:	5f 91       	pop	r21
     56a:	4f 91       	pop	r20
     56c:	3f 91       	pop	r19
     56e:	2f 91       	pop	r18
     570:	0f 90       	pop	r0
     572:	0f be       	out	0x3f, r0	; 63
     574:	0f 90       	pop	r0
     576:	1f 90       	pop	r1
     578:	18 95       	reti

0000057a <__vector_15>:
ISR(USART_TXC_vect)
{
     57a:	1f 92       	push	r1
     57c:	0f 92       	push	r0
     57e:	0f b6       	in	r0, 0x3f	; 63
     580:	0f 92       	push	r0
     582:	11 24       	eor	r1, r1
     584:	2f 93       	push	r18
     586:	3f 93       	push	r19
     588:	4f 93       	push	r20
     58a:	5f 93       	push	r21
     58c:	6f 93       	push	r22
     58e:	7f 93       	push	r23
     590:	8f 93       	push	r24
     592:	9f 93       	push	r25
     594:	af 93       	push	r26
     596:	bf 93       	push	r27
     598:	ef 93       	push	r30
     59a:	ff 93       	push	r31
		USART_SEND_str("BADISR 10\n");
     59c:	86 ed       	ldi	r24, 0xD6	; 214
     59e:	90 e0       	ldi	r25, 0x00	; 0
     5a0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     5a4:	ff 91       	pop	r31
     5a6:	ef 91       	pop	r30
     5a8:	bf 91       	pop	r27
     5aa:	af 91       	pop	r26
     5ac:	9f 91       	pop	r25
     5ae:	8f 91       	pop	r24
     5b0:	7f 91       	pop	r23
     5b2:	6f 91       	pop	r22
     5b4:	5f 91       	pop	r21
     5b6:	4f 91       	pop	r20
     5b8:	3f 91       	pop	r19
     5ba:	2f 91       	pop	r18
     5bc:	0f 90       	pop	r0
     5be:	0f be       	out	0x3f, r0	; 63
     5c0:	0f 90       	pop	r0
     5c2:	1f 90       	pop	r1
     5c4:	18 95       	reti

000005c6 <__vector_16>:
ISR(ADC_vect)
{
     5c6:	1f 92       	push	r1
     5c8:	0f 92       	push	r0
     5ca:	0f b6       	in	r0, 0x3f	; 63
     5cc:	0f 92       	push	r0
     5ce:	11 24       	eor	r1, r1
     5d0:	2f 93       	push	r18
     5d2:	3f 93       	push	r19
     5d4:	4f 93       	push	r20
     5d6:	5f 93       	push	r21
     5d8:	6f 93       	push	r22
     5da:	7f 93       	push	r23
     5dc:	8f 93       	push	r24
     5de:	9f 93       	push	r25
     5e0:	af 93       	push	r26
     5e2:	bf 93       	push	r27
     5e4:	ef 93       	push	r30
     5e6:	ff 93       	push	r31
		USART_SEND_str("BADISR 11\n");
     5e8:	81 ee       	ldi	r24, 0xE1	; 225
     5ea:	90 e0       	ldi	r25, 0x00	; 0
     5ec:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     5f0:	ff 91       	pop	r31
     5f2:	ef 91       	pop	r30
     5f4:	bf 91       	pop	r27
     5f6:	af 91       	pop	r26
     5f8:	9f 91       	pop	r25
     5fa:	8f 91       	pop	r24
     5fc:	7f 91       	pop	r23
     5fe:	6f 91       	pop	r22
     600:	5f 91       	pop	r21
     602:	4f 91       	pop	r20
     604:	3f 91       	pop	r19
     606:	2f 91       	pop	r18
     608:	0f 90       	pop	r0
     60a:	0f be       	out	0x3f, r0	; 63
     60c:	0f 90       	pop	r0
     60e:	1f 90       	pop	r1
     610:	18 95       	reti

00000612 <__vector_17>:
ISR(EE_RDY_vect)
{
     612:	1f 92       	push	r1
     614:	0f 92       	push	r0
     616:	0f b6       	in	r0, 0x3f	; 63
     618:	0f 92       	push	r0
     61a:	11 24       	eor	r1, r1
     61c:	2f 93       	push	r18
     61e:	3f 93       	push	r19
     620:	4f 93       	push	r20
     622:	5f 93       	push	r21
     624:	6f 93       	push	r22
     626:	7f 93       	push	r23
     628:	8f 93       	push	r24
     62a:	9f 93       	push	r25
     62c:	af 93       	push	r26
     62e:	bf 93       	push	r27
     630:	ef 93       	push	r30
     632:	ff 93       	push	r31
		USART_SEND_str("BADISR 12\n");
     634:	8c ee       	ldi	r24, 0xEC	; 236
     636:	90 e0       	ldi	r25, 0x00	; 0
     638:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     63c:	ff 91       	pop	r31
     63e:	ef 91       	pop	r30
     640:	bf 91       	pop	r27
     642:	af 91       	pop	r26
     644:	9f 91       	pop	r25
     646:	8f 91       	pop	r24
     648:	7f 91       	pop	r23
     64a:	6f 91       	pop	r22
     64c:	5f 91       	pop	r21
     64e:	4f 91       	pop	r20
     650:	3f 91       	pop	r19
     652:	2f 91       	pop	r18
     654:	0f 90       	pop	r0
     656:	0f be       	out	0x3f, r0	; 63
     658:	0f 90       	pop	r0
     65a:	1f 90       	pop	r1
     65c:	18 95       	reti

0000065e <__vector_18>:
ISR(ANA_COMP_vect)
{
     65e:	1f 92       	push	r1
     660:	0f 92       	push	r0
     662:	0f b6       	in	r0, 0x3f	; 63
     664:	0f 92       	push	r0
     666:	11 24       	eor	r1, r1
     668:	2f 93       	push	r18
     66a:	3f 93       	push	r19
     66c:	4f 93       	push	r20
     66e:	5f 93       	push	r21
     670:	6f 93       	push	r22
     672:	7f 93       	push	r23
     674:	8f 93       	push	r24
     676:	9f 93       	push	r25
     678:	af 93       	push	r26
     67a:	bf 93       	push	r27
     67c:	ef 93       	push	r30
     67e:	ff 93       	push	r31
		USART_SEND_str("BADISR 13\n");
     680:	87 ef       	ldi	r24, 0xF7	; 247
     682:	90 e0       	ldi	r25, 0x00	; 0
     684:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     688:	ff 91       	pop	r31
     68a:	ef 91       	pop	r30
     68c:	bf 91       	pop	r27
     68e:	af 91       	pop	r26
     690:	9f 91       	pop	r25
     692:	8f 91       	pop	r24
     694:	7f 91       	pop	r23
     696:	6f 91       	pop	r22
     698:	5f 91       	pop	r21
     69a:	4f 91       	pop	r20
     69c:	3f 91       	pop	r19
     69e:	2f 91       	pop	r18
     6a0:	0f 90       	pop	r0
     6a2:	0f be       	out	0x3f, r0	; 63
     6a4:	0f 90       	pop	r0
     6a6:	1f 90       	pop	r1
     6a8:	18 95       	reti

000006aa <__vector_19>:
ISR(TWI_vect)
{
     6aa:	1f 92       	push	r1
     6ac:	0f 92       	push	r0
     6ae:	0f b6       	in	r0, 0x3f	; 63
     6b0:	0f 92       	push	r0
     6b2:	11 24       	eor	r1, r1
     6b4:	2f 93       	push	r18
     6b6:	3f 93       	push	r19
     6b8:	4f 93       	push	r20
     6ba:	5f 93       	push	r21
     6bc:	6f 93       	push	r22
     6be:	7f 93       	push	r23
     6c0:	8f 93       	push	r24
     6c2:	9f 93       	push	r25
     6c4:	af 93       	push	r26
     6c6:	bf 93       	push	r27
     6c8:	ef 93       	push	r30
     6ca:	ff 93       	push	r31
		USART_SEND_str("BADISR 14\n");
     6cc:	82 e0       	ldi	r24, 0x02	; 2
     6ce:	91 e0       	ldi	r25, 0x01	; 1
     6d0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     6d4:	ff 91       	pop	r31
     6d6:	ef 91       	pop	r30
     6d8:	bf 91       	pop	r27
     6da:	af 91       	pop	r26
     6dc:	9f 91       	pop	r25
     6de:	8f 91       	pop	r24
     6e0:	7f 91       	pop	r23
     6e2:	6f 91       	pop	r22
     6e4:	5f 91       	pop	r21
     6e6:	4f 91       	pop	r20
     6e8:	3f 91       	pop	r19
     6ea:	2f 91       	pop	r18
     6ec:	0f 90       	pop	r0
     6ee:	0f be       	out	0x3f, r0	; 63
     6f0:	0f 90       	pop	r0
     6f2:	1f 90       	pop	r1
     6f4:	18 95       	reti

000006f6 <__vector_20>:

ISR(SPM_RDY_vect)
{
     6f6:	1f 92       	push	r1
     6f8:	0f 92       	push	r0
     6fa:	0f b6       	in	r0, 0x3f	; 63
     6fc:	0f 92       	push	r0
     6fe:	11 24       	eor	r1, r1
     700:	2f 93       	push	r18
     702:	3f 93       	push	r19
     704:	4f 93       	push	r20
     706:	5f 93       	push	r21
     708:	6f 93       	push	r22
     70a:	7f 93       	push	r23
     70c:	8f 93       	push	r24
     70e:	9f 93       	push	r25
     710:	af 93       	push	r26
     712:	bf 93       	push	r27
     714:	ef 93       	push	r30
     716:	ff 93       	push	r31
	USART_SEND_str("BADISR 15\n");
     718:	8d e0       	ldi	r24, 0x0D	; 13
     71a:	91 e0       	ldi	r25, 0x01	; 1
     71c:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     720:	ff 91       	pop	r31
     722:	ef 91       	pop	r30
     724:	bf 91       	pop	r27
     726:	af 91       	pop	r26
     728:	9f 91       	pop	r25
     72a:	8f 91       	pop	r24
     72c:	7f 91       	pop	r23
     72e:	6f 91       	pop	r22
     730:	5f 91       	pop	r21
     732:	4f 91       	pop	r20
     734:	3f 91       	pop	r19
     736:	2f 91       	pop	r18
     738:	0f 90       	pop	r0
     73a:	0f be       	out	0x3f, r0	; 63
     73c:	0f 90       	pop	r0
     73e:	1f 90       	pop	r1
     740:	18 95       	reti

00000742 <__vector_1>:



ISR(INT0_vect)
{
     742:	1f 92       	push	r1
     744:	0f 92       	push	r0
     746:	0f b6       	in	r0, 0x3f	; 63
     748:	0f 92       	push	r0
     74a:	11 24       	eor	r1, r1
     74c:	2f 93       	push	r18
     74e:	3f 93       	push	r19
     750:	4f 93       	push	r20
     752:	5f 93       	push	r21
     754:	6f 93       	push	r22
     756:	7f 93       	push	r23
     758:	8f 93       	push	r24
     75a:	9f 93       	push	r25
     75c:	af 93       	push	r26
     75e:	bf 93       	push	r27
     760:	ef 93       	push	r30
     762:	ff 93       	push	r31
		USART_SEND_str("BADISR 16\n");
     764:	88 e1       	ldi	r24, 0x18	; 24
     766:	91 e0       	ldi	r25, 0x01	; 1
     768:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     76c:	ff 91       	pop	r31
     76e:	ef 91       	pop	r30
     770:	bf 91       	pop	r27
     772:	af 91       	pop	r26
     774:	9f 91       	pop	r25
     776:	8f 91       	pop	r24
     778:	7f 91       	pop	r23
     77a:	6f 91       	pop	r22
     77c:	5f 91       	pop	r21
     77e:	4f 91       	pop	r20
     780:	3f 91       	pop	r19
     782:	2f 91       	pop	r18
     784:	0f 90       	pop	r0
     786:	0f be       	out	0x3f, r0	; 63
     788:	0f 90       	pop	r0
     78a:	1f 90       	pop	r1
     78c:	18 95       	reti

0000078e <__vector_5>:

ISR(TIMER2_OVF_vect)
{
     78e:	1f 92       	push	r1
     790:	0f 92       	push	r0
     792:	0f b6       	in	r0, 0x3f	; 63
     794:	0f 92       	push	r0
     796:	11 24       	eor	r1, r1
     798:	2f 93       	push	r18
     79a:	3f 93       	push	r19
     79c:	4f 93       	push	r20
     79e:	5f 93       	push	r21
     7a0:	6f 93       	push	r22
     7a2:	7f 93       	push	r23
     7a4:	8f 93       	push	r24
     7a6:	9f 93       	push	r25
     7a8:	af 93       	push	r26
     7aa:	bf 93       	push	r27
     7ac:	ef 93       	push	r30
     7ae:	ff 93       	push	r31
		USART_SEND_str("BADISR 17\n");
     7b0:	83 e2       	ldi	r24, 0x23	; 35
     7b2:	91 e0       	ldi	r25, 0x01	; 1
     7b4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     7b8:	ff 91       	pop	r31
     7ba:	ef 91       	pop	r30
     7bc:	bf 91       	pop	r27
     7be:	af 91       	pop	r26
     7c0:	9f 91       	pop	r25
     7c2:	8f 91       	pop	r24
     7c4:	7f 91       	pop	r23
     7c6:	6f 91       	pop	r22
     7c8:	5f 91       	pop	r21
     7ca:	4f 91       	pop	r20
     7cc:	3f 91       	pop	r19
     7ce:	2f 91       	pop	r18
     7d0:	0f 90       	pop	r0
     7d2:	0f be       	out	0x3f, r0	; 63
     7d4:	0f 90       	pop	r0
     7d6:	1f 90       	pop	r1
     7d8:	18 95       	reti

000007da <__vector_2>:
ISR(INT1_vect)
{
     7da:	1f 92       	push	r1
     7dc:	0f 92       	push	r0
     7de:	0f b6       	in	r0, 0x3f	; 63
     7e0:	0f 92       	push	r0
     7e2:	11 24       	eor	r1, r1
     7e4:	2f 93       	push	r18
     7e6:	3f 93       	push	r19
     7e8:	4f 93       	push	r20
     7ea:	5f 93       	push	r21
     7ec:	6f 93       	push	r22
     7ee:	7f 93       	push	r23
     7f0:	8f 93       	push	r24
     7f2:	9f 93       	push	r25
     7f4:	af 93       	push	r26
     7f6:	bf 93       	push	r27
     7f8:	ef 93       	push	r30
     7fa:	ff 93       	push	r31
		USART_SEND_str("BADISR 18\n");
     7fc:	8e e2       	ldi	r24, 0x2E	; 46
     7fe:	91 e0       	ldi	r25, 0x01	; 1
     800:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
}
     804:	ff 91       	pop	r31
     806:	ef 91       	pop	r30
     808:	bf 91       	pop	r27
     80a:	af 91       	pop	r26
     80c:	9f 91       	pop	r25
     80e:	8f 91       	pop	r24
     810:	7f 91       	pop	r23
     812:	6f 91       	pop	r22
     814:	5f 91       	pop	r21
     816:	4f 91       	pop	r20
     818:	3f 91       	pop	r19
     81a:	2f 91       	pop	r18
     81c:	0f 90       	pop	r0
     81e:	0f be       	out	0x3f, r0	; 63
     820:	0f 90       	pop	r0
     822:	1f 90       	pop	r1
     824:	18 95       	reti

00000826 <__vector_9>:

/*test*/


ISR(TIMER1_OVF_vect)
{
     826:	1f 92       	push	r1
     828:	0f 92       	push	r0
     82a:	0f b6       	in	r0, 0x3f	; 63
     82c:	0f 92       	push	r0
     82e:	11 24       	eor	r1, r1
     830:	2f 93       	push	r18
     832:	3f 93       	push	r19
     834:	4f 93       	push	r20
     836:	5f 93       	push	r21
     838:	6f 93       	push	r22
     83a:	7f 93       	push	r23
     83c:	8f 93       	push	r24
     83e:	9f 93       	push	r25
     840:	af 93       	push	r26
     842:	bf 93       	push	r27
     844:	ef 93       	push	r30
     846:	ff 93       	push	r31
	TIMER1_INT_EVENT();
     848:	0e 94 3b 12 	call	0x2476	; 0x2476 <TIMER1_INT_EVENT>
}
     84c:	ff 91       	pop	r31
     84e:	ef 91       	pop	r30
     850:	bf 91       	pop	r27
     852:	af 91       	pop	r26
     854:	9f 91       	pop	r25
     856:	8f 91       	pop	r24
     858:	7f 91       	pop	r23
     85a:	6f 91       	pop	r22
     85c:	5f 91       	pop	r21
     85e:	4f 91       	pop	r20
     860:	3f 91       	pop	r19
     862:	2f 91       	pop	r18
     864:	0f 90       	pop	r0
     866:	0f be       	out	0x3f, r0	; 63
     868:	0f 90       	pop	r0
     86a:	1f 90       	pop	r1
     86c:	18 95       	reti

0000086e <__vector_11>:
ISR(TIMER0_OVF_vect)
{
     86e:	1f 92       	push	r1
     870:	0f 92       	push	r0
     872:	0f b6       	in	r0, 0x3f	; 63
     874:	0f 92       	push	r0
     876:	11 24       	eor	r1, r1
     878:	2f 93       	push	r18
     87a:	3f 93       	push	r19
     87c:	4f 93       	push	r20
     87e:	5f 93       	push	r21
     880:	6f 93       	push	r22
     882:	7f 93       	push	r23
     884:	8f 93       	push	r24
     886:	9f 93       	push	r25
     888:	af 93       	push	r26
     88a:	bf 93       	push	r27
     88c:	ef 93       	push	r30
     88e:	ff 93       	push	r31
	TIMER0_INT_EVENT();
     890:	0e 94 38 12 	call	0x2470	; 0x2470 <TIMER0_INT_EVENT>
}
     894:	ff 91       	pop	r31
     896:	ef 91       	pop	r30
     898:	bf 91       	pop	r27
     89a:	af 91       	pop	r26
     89c:	9f 91       	pop	r25
     89e:	8f 91       	pop	r24
     8a0:	7f 91       	pop	r23
     8a2:	6f 91       	pop	r22
     8a4:	5f 91       	pop	r21
     8a6:	4f 91       	pop	r20
     8a8:	3f 91       	pop	r19
     8aa:	2f 91       	pop	r18
     8ac:	0f 90       	pop	r0
     8ae:	0f be       	out	0x3f, r0	; 63
     8b0:	0f 90       	pop	r0
     8b2:	1f 90       	pop	r1
     8b4:	18 95       	reti

000008b6 <main>:
{
	USART_SEND_str("BADISR\n");
}
int main(void)
{
   SETUP();
     8b6:	0e 94 72 04 	call	0x8e4	; 0x8e4 <SETUP>
   while(1)
   {
	   LOOP();
     8ba:	0e 94 60 04 	call	0x8c0	; 0x8c0 <LOOP>
     8be:	fd cf       	rjmp	.-6      	; 0x8ba <main+0x4>

000008c0 <LOOP>:

}

void LOOP()
{
	 SENSOR_MANAGE_LOOP();
     8c0:	0e 94 bd 0e 	call	0x1d7a	; 0x1d7a <SENSOR_MANAGE_LOOP>
	 APP_LOOP();
     8c4:	0e 94 b5 00 	call	0x16a	; 0x16a <APP_LOOP>
	 /*USART_SEND_str("loop\n");*/
	 toggybit(*PORT_OUT_READY_LED,READY_LED_PIN);
     8c8:	92 b3       	in	r25, 0x12	; 18
     8ca:	80 e2       	ldi	r24, 0x20	; 32
     8cc:	89 27       	eor	r24, r25
     8ce:	82 bb       	out	0x12, r24	; 18
     8d0:	08 95       	ret

000008d2 <OTHER_SETUPS_IO>:
}

void OTHER_SETUPS_IO()
{
	gpio_outputconfg(PORT_DDR_READY_LED,PORT_OUTMOD_READY_LED,OUTPASS,READY_LED_PIN);
     8d2:	25 e0       	ldi	r18, 0x05	; 5
     8d4:	40 e0       	ldi	r20, 0x00	; 0
     8d6:	60 e3       	ldi	r22, 0x30	; 48
     8d8:	70 e0       	ldi	r23, 0x00	; 0
     8da:	81 e3       	ldi	r24, 0x31	; 49
     8dc:	90 e0       	ldi	r25, 0x00	; 0
     8de:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
     8e2:	08 95       	ret

000008e4 <SETUP>:
 * Created: 05-Apr-21 4:07:18 PM
 *  Author: Mina Medhat
 */ 
#include "MAIN_DRIVER.h"
void SETUP()
{
     8e4:	0f 93       	push	r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     8e6:	2f ef       	ldi	r18, 0xFF	; 255
     8e8:	83 ed       	ldi	r24, 0xD3	; 211
     8ea:	90 e3       	ldi	r25, 0x30	; 48
     8ec:	21 50       	subi	r18, 0x01	; 1
     8ee:	80 40       	sbci	r24, 0x00	; 0
     8f0:	90 40       	sbci	r25, 0x00	; 0
     8f2:	e1 f7       	brne	.-8      	; 0x8ec <SETUP+0x8>
     8f4:	00 c0       	rjmp	.+0      	; 0x8f6 <SETUP+0x12>
     8f6:	00 00       	nop
	_delay_ms(1000);
	SPI_INT(SPI_MASTER,SPI_SCALE_16,SPI_MODE_0,SPI_INT_DISABLE,SPI_MSF);
     8f8:	00 e0       	ldi	r16, 0x00	; 0
     8fa:	20 e0       	ldi	r18, 0x00	; 0
     8fc:	40 e0       	ldi	r20, 0x00	; 0
     8fe:	61 e0       	ldi	r22, 0x01	; 1
     900:	70 e0       	ldi	r23, 0x00	; 0
     902:	80 e1       	ldi	r24, 0x10	; 16
     904:	0e 94 60 07 	call	0xec0	; 0xec0 <SPI_INT>
	SENSOR_IO_SETUP();
     908:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <SENSOR_IO_SETUP>
	OTHER_SETUPS_IO();
     90c:	0e 94 69 04 	call	0x8d2	; 0x8d2 <OTHER_SETUPS_IO>
	TEST_IO_SETUP();
     910:	0e 94 9f 10 	call	0x213e	; 0x213e <TEST_IO_SETUP>
	APP_IO_SETUP();
     914:	0e 94 47 00 	call	0x8e	; 0x8e <APP_IO_SETUP>
	
	
	
	
	TEST_SETUP();
     918:	0e 94 b8 10 	call	0x2170	; 0x2170 <TEST_SETUP>
	 
	 
	 
	APP_SETUP(); 
     91c:	0e 94 a1 00 	call	0x142	; 0x142 <APP_SETUP>
	TIMERS_SETUP();
     920:	0e 94 10 12 	call	0x2420	; 0x2420 <TIMERS_SETUP>
	USART_SEND_str("NEW here start");
     924:	81 e4       	ldi	r24, 0x41	; 65
     926:	91 e0       	ldi	r25, 0x01	; 1
     928:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	SENSOR_SETUP();
     92c:	0e 94 0a 0f 	call	0x1e14	; 0x1e14 <SENSOR_SETUP>
	setbit(*PORT_OUT_READY_LED,READY_LED_PIN);
     930:	95 9a       	sbi	0x12, 5	; 18

}
     932:	0f 91       	pop	r16
     934:	08 95       	ret

00000936 <gpio_inputconfg>:
 * Created: 04/09/2018 01:28:50 م
 *  Author: ideapad510
 */ 
#include "microconfigrations.h"
	void gpio_inputconfg(volatile uint8 * DiR_address,volatile uint8 * inputmodreg_address,INPUT_MOD mod,uint8 pin)
	{
     936:	fb 01       	movw	r30, r22
		clearbit(*DiR_address,pin);
     938:	dc 01       	movw	r26, r24
     93a:	3c 91       	ld	r19, X
     93c:	61 e0       	ldi	r22, 0x01	; 1
     93e:	70 e0       	ldi	r23, 0x00	; 0
     940:	02 2e       	mov	r0, r18
     942:	02 c0       	rjmp	.+4      	; 0x948 <gpio_inputconfg+0x12>
     944:	66 0f       	add	r22, r22
     946:	77 1f       	adc	r23, r23
     948:	0a 94       	dec	r0
     94a:	e2 f7       	brpl	.-8      	; 0x944 <gpio_inputconfg+0xe>
     94c:	60 95       	com	r22
     94e:	36 23       	and	r19, r22
     950:	3c 93       	st	X, r19
		clearbit(*inputmodreg_address,pin);
     952:	80 81       	ld	r24, Z
     954:	68 23       	and	r22, r24
     956:	60 83       	st	Z, r22
				*inputmodreg_address|=mod<<pin;
     958:	80 81       	ld	r24, Z
     95a:	50 e0       	ldi	r21, 0x00	; 0
     95c:	ba 01       	movw	r22, r20
     95e:	02 c0       	rjmp	.+4      	; 0x964 <gpio_inputconfg+0x2e>
     960:	66 0f       	add	r22, r22
     962:	77 1f       	adc	r23, r23
     964:	2a 95       	dec	r18
     966:	e2 f7       	brpl	.-8      	; 0x960 <gpio_inputconfg+0x2a>
     968:	9b 01       	movw	r18, r22
     96a:	28 2b       	or	r18, r24
     96c:	20 83       	st	Z, r18
     96e:	08 95       	ret

00000970 <gpio_outputconfg>:
	
	
	
	
	void gpio_outputconfg(volatile uint8 * DiR_address,volatile uint8 * outputmodreg_address,OUTPUTMOD mod,uint8 pin)
	{
     970:	fb 01       	movw	r30, r22
		
		setbit(*DiR_address,pin);
     972:	dc 01       	movw	r26, r24
     974:	3c 91       	ld	r19, X
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	70 e0       	ldi	r23, 0x00	; 0
     97a:	02 2e       	mov	r0, r18
     97c:	02 c0       	rjmp	.+4      	; 0x982 <gpio_outputconfg+0x12>
     97e:	66 0f       	add	r22, r22
     980:	77 1f       	adc	r23, r23
     982:	0a 94       	dec	r0
     984:	e2 f7       	brpl	.-8      	; 0x97e <gpio_outputconfg+0xe>
     986:	36 2b       	or	r19, r22
     988:	3c 93       	st	X, r19
		clearbit(*outputmodreg_address,pin);
     98a:	80 81       	ld	r24, Z
     98c:	60 95       	com	r22
     98e:	68 23       	and	r22, r24
     990:	60 83       	st	Z, r22
		*outputmodreg_address|=mod<<pin;
     992:	80 81       	ld	r24, Z
     994:	50 e0       	ldi	r21, 0x00	; 0
     996:	ba 01       	movw	r22, r20
     998:	02 c0       	rjmp	.+4      	; 0x99e <gpio_outputconfg+0x2e>
     99a:	66 0f       	add	r22, r22
     99c:	77 1f       	adc	r23, r23
     99e:	2a 95       	dec	r18
     9a0:	e2 f7       	brpl	.-8      	; 0x99a <gpio_outputconfg+0x2a>
     9a2:	9b 01       	movw	r18, r22
     9a4:	28 2b       	or	r18, r24
     9a6:	20 83       	st	Z, r18
     9a8:	08 95       	ret

000009aa <NRF_SPI_EXCHANGE>:



volatile unsigned char NRF_SPI_EXCHANGE(unsigned char TX_DATA)
{
	SPDR=TX_DATA;
     9aa:	8f b9       	out	0x0f, r24	; 15
	while(isbitclear(SPSR,7));
     9ac:	77 9b       	sbis	0x0e, 7	; 14
     9ae:	fe cf       	rjmp	.-4      	; 0x9ac <NRF_SPI_EXCHANGE+0x2>
	
	return SPDR;
     9b0:	8f b1       	in	r24, 0x0f	; 15
}
     9b2:	08 95       	ret

000009b4 <NRF_WRITE_REGISTER>:

void NRF_WRITE_REGISTER(unsigned char REGISTER_NUM,unsigned char DATA)
{
     9b4:	cf 93       	push	r28
     9b6:	c6 2f       	mov	r28, r22
	NRF_SPI_CLEAR_PIN();
     9b8:	c0 98       	cbi	0x18, 0	; 24
	
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND(REGISTER_NUM));
     9ba:	80 62       	ori	r24, 0x20	; 32
     9bc:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     9c0:	80 93 0f 02 	sts	0x020F, r24
		
	NRF_SPI_EXCHANGE(DATA);
     9c4:	8c 2f       	mov	r24, r28
     9c6:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>

	NRF_SPI_SET_PIN();  
     9ca:	c0 9a       	sbi	0x18, 0	; 24
     9cc:	8f e9       	ldi	r24, 0x9F	; 159
     9ce:	9f e0       	ldi	r25, 0x0F	; 15
     9d0:	01 97       	sbiw	r24, 0x01	; 1
     9d2:	f1 f7       	brne	.-4      	; 0x9d0 <NRF_WRITE_REGISTER+0x1c>
     9d4:	00 c0       	rjmp	.+0      	; 0x9d6 <NRF_WRITE_REGISTER+0x22>
     9d6:	00 00       	nop
	_delay_ms(1);
}
     9d8:	cf 91       	pop	r28
     9da:	08 95       	ret

000009dc <NRF_READ_REGISTER>:

unsigned char NRF_READ_REGISTER(unsigned char REGISTER_NUM)
{
	unsigned char DATA;
	NRF_SPI_CLEAR_PIN();
     9dc:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_REGISTER_COMMAND(REGISTER_NUM));
     9de:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     9e2:	80 93 0f 02 	sts	0x020F, r24
	DATA=NRF_SPI_EXCHANGE(0xFF);
     9e6:	8f ef       	ldi	r24, 0xFF	; 255
     9e8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
	NRF_SPI_SET_PIN();
     9ec:	c0 9a       	sbi	0x18, 0	; 24
     9ee:	ef e9       	ldi	r30, 0x9F	; 159
     9f0:	ff e0       	ldi	r31, 0x0F	; 15
     9f2:	31 97       	sbiw	r30, 0x01	; 1
     9f4:	f1 f7       	brne	.-4      	; 0x9f2 <NRF_READ_REGISTER+0x16>
     9f6:	00 c0       	rjmp	.+0      	; 0x9f8 <NRF_READ_REGISTER+0x1c>
     9f8:	00 00       	nop
	_delay_ms(1);
	return DATA;
}
     9fa:	08 95       	ret

000009fc <NRF_R_RX_PAYLOAD_DYNAMIC>:

void NRF_R_RX_PAYLOAD_DYNAMIC(unsigned char *DATA,unsigned char LENGTH)
{
     9fc:	ff 92       	push	r15
     9fe:	0f 93       	push	r16
     a00:	1f 93       	push	r17
     a02:	cf 93       	push	r28
     a04:	df 93       	push	r29
     a06:	f8 2e       	mov	r15, r24
     a08:	19 2f       	mov	r17, r25
     a0a:	06 2f       	mov	r16, r22
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
     a0c:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_RX_PAYLOAD_COMMAND);
     a0e:	81 e6       	ldi	r24, 0x61	; 97
     a10:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     a14:	80 93 0f 02 	sts	0x020F, r24
	for (i=0;i<LENGTH;++i)
     a18:	00 23       	and	r16, r16
     a1a:	51 f0       	breq	.+20     	; 0xa30 <NRF_R_RX_PAYLOAD_DYNAMIC+0x34>
     a1c:	cf 2d       	mov	r28, r15
     a1e:	d1 2f       	mov	r29, r17
     a20:	10 e0       	ldi	r17, 0x00	; 0
	{
		DATA[i]=NRF_SPI_EXCHANGE(0xff);
     a22:	8f ef       	ldi	r24, 0xFF	; 255
     a24:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     a28:	89 93       	st	Y+, r24
{
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_RX_PAYLOAD_COMMAND);
	for (i=0;i<LENGTH;++i)
     a2a:	1f 5f       	subi	r17, 0xFF	; 255
     a2c:	10 13       	cpse	r17, r16
     a2e:	f9 cf       	rjmp	.-14     	; 0xa22 <NRF_R_RX_PAYLOAD_DYNAMIC+0x26>
	{
		DATA[i]=NRF_SPI_EXCHANGE(0xff);
	}
	NRF_SPI_SET_PIN();
     a30:	c0 9a       	sbi	0x18, 0	; 24
}
     a32:	df 91       	pop	r29
     a34:	cf 91       	pop	r28
     a36:	1f 91       	pop	r17
     a38:	0f 91       	pop	r16
     a3a:	ff 90       	pop	r15
     a3c:	08 95       	ret

00000a3e <NRF_W_TX_PAYLOAD_ACK>:

void NRF_W_TX_PAYLOAD_ACK(unsigned char *DATA,unsigned char LENGTH)
{
     a3e:	ff 92       	push	r15
     a40:	0f 93       	push	r16
     a42:	1f 93       	push	r17
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	f8 2e       	mov	r15, r24
     a4a:	19 2f       	mov	r17, r25
     a4c:	06 2f       	mov	r16, r22
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
     a4e:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_TX_PAYLOAD_COMMAND);
     a50:	80 ea       	ldi	r24, 0xA0	; 160
     a52:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     a56:	80 93 0f 02 	sts	0x020F, r24
	for (i=0;i<LENGTH;++i)
     a5a:	00 23       	and	r16, r16
     a5c:	49 f0       	breq	.+18     	; 0xa70 <NRF_W_TX_PAYLOAD_ACK+0x32>
     a5e:	cf 2d       	mov	r28, r15
     a60:	d1 2f       	mov	r29, r17
     a62:	10 e0       	ldi	r17, 0x00	; 0
	{
		NRF_SPI_EXCHANGE(DATA[i]);
     a64:	89 91       	ld	r24, Y+
     a66:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
{
	unsigned char i=0;
	
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_TX_PAYLOAD_COMMAND);
	for (i=0;i<LENGTH;++i)
     a6a:	1f 5f       	subi	r17, 0xFF	; 255
     a6c:	10 13       	cpse	r17, r16
     a6e:	fa cf       	rjmp	.-12     	; 0xa64 <NRF_W_TX_PAYLOAD_ACK+0x26>
	{
		NRF_SPI_EXCHANGE(DATA[i]);
	}
	NRF_SPI_SET_PIN();
     a70:	c0 9a       	sbi	0x18, 0	; 24
}
     a72:	df 91       	pop	r29
     a74:	cf 91       	pop	r28
     a76:	1f 91       	pop	r17
     a78:	0f 91       	pop	r16
     a7a:	ff 90       	pop	r15
     a7c:	08 95       	ret

00000a7e <NRF_FLUSH_TX_BUFFER>:
	}
	NRF_SPI_SET_PIN();
}
void NRF_FLUSH_TX_BUFFER()
{
	NRF_SPI_CLEAR_PIN();
     a7e:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(FLUSH_TX_COMMAND);
     a80:	81 ee       	ldi	r24, 0xE1	; 225
     a82:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     a86:	80 93 0f 02 	sts	0x020F, r24
	NRF_SPI_SET_PIN();
     a8a:	c0 9a       	sbi	0x18, 0	; 24
     a8c:	08 95       	ret

00000a8e <NRF_FLUSH_RX_BUFFER>:
}
void NRF_FLUSH_RX_BUFFER()
{
	NRF_SPI_CLEAR_PIN();
     a8e:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(FLUSH_RX_COMMAND);
     a90:	82 ee       	ldi	r24, 0xE2	; 226
     a92:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     a96:	80 93 0f 02 	sts	0x020F, r24
	NRF_SPI_SET_PIN();
     a9a:	c0 9a       	sbi	0x18, 0	; 24
     a9c:	08 95       	ret

00000a9e <NRF_READ_LENGTH_RX_PL>:
	NRF_SPI_SET_PIN();
}
unsigned char NRF_READ_LENGTH_RX_PL()
{
	unsigned char DATA;
	NRF_SPI_CLEAR_PIN();
     a9e:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(READ_RX_PL_WIDTH_COMMAND);
     aa0:	80 e6       	ldi	r24, 0x60	; 96
     aa2:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     aa6:	80 93 0f 02 	sts	0x020F, r24
	DATA=NRF_SPI_EXCHANGE(0xFF);
     aaa:	8f ef       	ldi	r24, 0xFF	; 255
     aac:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
	NRF_SPI_SET_PIN();
     ab0:	c0 9a       	sbi	0x18, 0	; 24
	return DATA;
}
     ab2:	08 95       	ret

00000ab4 <NRF_READ_RX_DR_AND_CLEAR>:
{
	return NRF_READ_REGISTER(NRF_RPD_ADDRESS);
}

unsigned char NRF_READ_RX_DR_AND_CLEAR()
{
     ab4:	cf 93       	push	r28
     ab6:	df 93       	push	r29
     ab8:	1f 92       	push	r1
     aba:	cd b7       	in	r28, 0x3d	; 61
     abc:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char STATES_TEMP;
	STATES_TEMP=NRF_READ_REGISTER(NRF_STATUS_ADDRESS);
     abe:	87 e0       	ldi	r24, 0x07	; 7
     ac0:	0e 94 ee 04 	call	0x9dc	; 0x9dc <NRF_READ_REGISTER>
     ac4:	89 83       	std	Y+1, r24	; 0x01
	if (STATES_TEMP&0b01000000)
     ac6:	99 81       	ldd	r25, Y+1	; 0x01
     ac8:	89 2f       	mov	r24, r25
     aca:	80 74       	andi	r24, 0x40	; 64
     acc:	96 ff       	sbrs	r25, 6
     ace:	05 c0       	rjmp	.+10     	; 0xada <NRF_READ_RX_DR_AND_CLEAR+0x26>
	{
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,STATES_TEMP);
     ad0:	69 81       	ldd	r22, Y+1	; 0x01
     ad2:	87 e0       	ldi	r24, 0x07	; 7
     ad4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
		return 1;
     ad8:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;	
	}
}
     ada:	0f 90       	pop	r0
     adc:	df 91       	pop	r29
     ade:	cf 91       	pop	r28
     ae0:	08 95       	ret

00000ae2 <NRF_READ_TX_DS_AND_CLEAR>:
unsigned char NRF_READ_TX_DS_AND_CLEAR()
{
     ae2:	cf 93       	push	r28
     ae4:	df 93       	push	r29
     ae6:	1f 92       	push	r1
     ae8:	cd b7       	in	r28, 0x3d	; 61
     aea:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char STATES_TEMP;
	STATES_TEMP=NRF_READ_REGISTER(NRF_STATUS_ADDRESS);
     aec:	87 e0       	ldi	r24, 0x07	; 7
     aee:	0e 94 ee 04 	call	0x9dc	; 0x9dc <NRF_READ_REGISTER>
     af2:	89 83       	std	Y+1, r24	; 0x01
	if (STATES_TEMP&0b00100000)
     af4:	99 81       	ldd	r25, Y+1	; 0x01
     af6:	89 2f       	mov	r24, r25
     af8:	80 72       	andi	r24, 0x20	; 32
     afa:	95 ff       	sbrs	r25, 5
     afc:	05 c0       	rjmp	.+10     	; 0xb08 <NRF_READ_TX_DS_AND_CLEAR+0x26>
	{
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,STATES_TEMP);
     afe:	69 81       	ldd	r22, Y+1	; 0x01
     b00:	87 e0       	ldi	r24, 0x07	; 7
     b02:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
		return 1;
     b06:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
     b08:	0f 90       	pop	r0
     b0a:	df 91       	pop	r29
     b0c:	cf 91       	pop	r28
     b0e:	08 95       	ret

00000b10 <NRF_READ_MAX_RT_AND_CLEAR>:
unsigned char NRF_READ_MAX_RT_AND_CLEAR()
{
     b10:	cf 93       	push	r28
     b12:	df 93       	push	r29
     b14:	1f 92       	push	r1
     b16:	cd b7       	in	r28, 0x3d	; 61
     b18:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char STATES_TEMP;
	STATES_TEMP=NRF_READ_REGISTER(NRF_STATUS_ADDRESS);
     b1a:	87 e0       	ldi	r24, 0x07	; 7
     b1c:	0e 94 ee 04 	call	0x9dc	; 0x9dc <NRF_READ_REGISTER>
     b20:	89 83       	std	Y+1, r24	; 0x01
	if (STATES_TEMP&0b00010000)
     b22:	99 81       	ldd	r25, Y+1	; 0x01
     b24:	89 2f       	mov	r24, r25
     b26:	80 71       	andi	r24, 0x10	; 16
     b28:	94 ff       	sbrs	r25, 4
     b2a:	05 c0       	rjmp	.+10     	; 0xb36 <NRF_READ_MAX_RT_AND_CLEAR+0x26>
	{
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,STATES_TEMP);
     b2c:	69 81       	ldd	r22, Y+1	; 0x01
     b2e:	87 e0       	ldi	r24, 0x07	; 7
     b30:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
		return 1;
     b34:	81 e0       	ldi	r24, 0x01	; 1
	}
	else
	{
		return 0;
	}
}
     b36:	0f 90       	pop	r0
     b38:	df 91       	pop	r29
     b3a:	cf 91       	pop	r28
     b3c:	08 95       	ret

00000b3e <NRF_SET_TX_MODE>:

void NRF_SET_TX_MODE()
{
     b3e:	cf 93       	push	r28
     b40:	df 93       	push	r29
     b42:	1f 92       	push	r1
     b44:	cd b7       	in	r28, 0x3d	; 61
     b46:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char TEMP;
	TEMP=NRF_READ_REGISTER(NRF_CONFIG_ADDRESS);
     b48:	80 e0       	ldi	r24, 0x00	; 0
     b4a:	0e 94 ee 04 	call	0x9dc	; 0x9dc <NRF_READ_REGISTER>
     b4e:	89 83       	std	Y+1, r24	; 0x01
	clearbit(TEMP,NRF_PRIM_RX_BIT);
     b50:	89 81       	ldd	r24, Y+1	; 0x01
     b52:	8e 7f       	andi	r24, 0xFE	; 254
     b54:	89 83       	std	Y+1, r24	; 0x01
	NRF_WRITE_REGISTER(NRF_CONFIG_ADDRESS,TEMP);
     b56:	69 81       	ldd	r22, Y+1	; 0x01
     b58:	80 e0       	ldi	r24, 0x00	; 0
     b5a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
}
     b5e:	0f 90       	pop	r0
     b60:	df 91       	pop	r29
     b62:	cf 91       	pop	r28
     b64:	08 95       	ret

00000b66 <NRF_SET_RX_MODE>:
void NRF_SET_RX_MODE()
{
     b66:	cf 93       	push	r28
     b68:	df 93       	push	r29
     b6a:	1f 92       	push	r1
     b6c:	cd b7       	in	r28, 0x3d	; 61
     b6e:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char TEMP;
	TEMP=NRF_READ_REGISTER(NRF_CONFIG_ADDRESS);
     b70:	80 e0       	ldi	r24, 0x00	; 0
     b72:	0e 94 ee 04 	call	0x9dc	; 0x9dc <NRF_READ_REGISTER>
     b76:	89 83       	std	Y+1, r24	; 0x01
	setbit(TEMP,NRF_PRIM_RX_BIT);
     b78:	89 81       	ldd	r24, Y+1	; 0x01
     b7a:	81 60       	ori	r24, 0x01	; 1
     b7c:	89 83       	std	Y+1, r24	; 0x01
	NRF_WRITE_REGISTER(NRF_CONFIG_ADDRESS,TEMP);
     b7e:	69 81       	ldd	r22, Y+1	; 0x01
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
}
     b86:	0f 90       	pop	r0
     b88:	df 91       	pop	r29
     b8a:	cf 91       	pop	r28
     b8c:	08 95       	ret

00000b8e <NRF_UPDATE_PIPE_RX_ADDRESS>:




void NRF_UPDATE_PIPE_RX_ADDRESS(unsigned char NUMBER,volatile unsigned char *ADDRESS,unsigned char LENGTH)
{
     b8e:	ff 92       	push	r15
     b90:	0f 93       	push	r16
     b92:	1f 93       	push	r17
     b94:	cf 93       	push	r28
     b96:	df 93       	push	r29
     b98:	f6 2e       	mov	r15, r22
     b9a:	17 2f       	mov	r17, r23
     b9c:	04 2f       	mov	r16, r20
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
     b9e:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND((unsigned char)(NRF_RX_ADDR_P0_ADDRESS+NUMBER)));
     ba0:	86 5f       	subi	r24, 0xF6	; 246
     ba2:	80 62       	ori	r24, 0x20	; 32
     ba4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     ba8:	80 93 0f 02 	sts	0x020F, r24
		
	for(i=0;i<LENGTH;++i)
     bac:	00 23       	and	r16, r16
     bae:	49 f0       	breq	.+18     	; 0xbc2 <NRF_UPDATE_PIPE_RX_ADDRESS+0x34>
     bb0:	cf 2d       	mov	r28, r15
     bb2:	d1 2f       	mov	r29, r17
     bb4:	10 e0       	ldi	r17, 0x00	; 0
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
     bb6:	89 91       	ld	r24, Y+
     bb8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
{
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND((unsigned char)(NRF_RX_ADDR_P0_ADDRESS+NUMBER)));
		
	for(i=0;i<LENGTH;++i)
     bbc:	1f 5f       	subi	r17, 0xFF	; 255
     bbe:	10 13       	cpse	r17, r16
     bc0:	fa cf       	rjmp	.-12     	; 0xbb6 <NRF_UPDATE_PIPE_RX_ADDRESS+0x28>
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
	}
	NRF_SPI_SET_PIN();
     bc2:	c0 9a       	sbi	0x18, 0	; 24
}
     bc4:	df 91       	pop	r29
     bc6:	cf 91       	pop	r28
     bc8:	1f 91       	pop	r17
     bca:	0f 91       	pop	r16
     bcc:	ff 90       	pop	r15
     bce:	08 95       	ret

00000bd0 <NRF_UPDATE_TX_ADDRESS>:


void NRF_UPDATE_TX_ADDRESS(unsigned char *ADDRESS,unsigned char LENGTH)
{
     bd0:	ff 92       	push	r15
     bd2:	0f 93       	push	r16
     bd4:	1f 93       	push	r17
     bd6:	cf 93       	push	r28
     bd8:	df 93       	push	r29
     bda:	f8 2e       	mov	r15, r24
     bdc:	19 2f       	mov	r17, r25
     bde:	06 2f       	mov	r16, r22
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
     be0:	c0 98       	cbi	0x18, 0	; 24
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND(NRF_TX_ADDR_TX_ADDRESS));
     be2:	80 e3       	ldi	r24, 0x30	; 48
     be4:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
     be8:	80 93 0f 02 	sts	0x020F, r24
	for(i=0;i<LENGTH;++i)
     bec:	00 23       	and	r16, r16
     bee:	49 f0       	breq	.+18     	; 0xc02 <NRF_UPDATE_TX_ADDRESS+0x32>
     bf0:	cf 2d       	mov	r28, r15
     bf2:	d1 2f       	mov	r29, r17
     bf4:	10 e0       	ldi	r17, 0x00	; 0
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
     bf6:	89 91       	ld	r24, Y+
     bf8:	0e 94 d5 04 	call	0x9aa	; 0x9aa <NRF_SPI_EXCHANGE>
void NRF_UPDATE_TX_ADDRESS(unsigned char *ADDRESS,unsigned char LENGTH)
{
	unsigned char i=0;
	NRF_SPI_CLEAR_PIN();
	NRF_STATUS=NRF_SPI_EXCHANGE(WRITE_REGISTER_COMMAND(NRF_TX_ADDR_TX_ADDRESS));
	for(i=0;i<LENGTH;++i)
     bfc:	1f 5f       	subi	r17, 0xFF	; 255
     bfe:	10 13       	cpse	r17, r16
     c00:	fa cf       	rjmp	.-12     	; 0xbf6 <NRF_UPDATE_TX_ADDRESS+0x26>
	{
		NRF_SPI_EXCHANGE(ADDRESS[i]);
	}
	NRF_SPI_SET_PIN();
     c02:	c0 9a       	sbi	0x18, 0	; 24
}
     c04:	df 91       	pop	r29
     c06:	cf 91       	pop	r28
     c08:	1f 91       	pop	r17
     c0a:	0f 91       	pop	r16
     c0c:	ff 90       	pop	r15
     c0e:	08 95       	ret

00000c10 <NRF_UPDATE_USED_CHANNEL>:

void NRF_UPDATE_USED_CHANNEL(NRF_RF_CHANNEL_DT channel)
{
	NRF1.NRF_RF_CH=channel;
     c10:	80 93 ee 01 	sts	0x01EE, r24
	NRF_WRITE_REGISTER(NRF_RF_CH_ADDRESS,channel);
     c14:	68 2f       	mov	r22, r24
     c16:	85 e0       	ldi	r24, 0x05	; 5
     c18:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
     c1c:	08 95       	ret

00000c1e <NRF_IO_SETUP>:
	NRF1.NRF_SETUP_RETR|=RET;	
	NRF_WRITE_REGISTER(NRF_SETUP_RETR_ADDRESS,NRF1.NRF_SETUP_RETR);
}
void NRF_IO_SETUP()
{
	gpio_outputconfg(PORT_DDR_CE,PORT_OUTMOD_CE,OUTPASS,CE_PIN);
     c1e:	22 e0       	ldi	r18, 0x02	; 2
     c20:	40 e0       	ldi	r20, 0x00	; 0
     c22:	66 e3       	ldi	r22, 0x36	; 54
     c24:	70 e0       	ldi	r23, 0x00	; 0
     c26:	87 e3       	ldi	r24, 0x37	; 55
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_CSN,PORT_OUTMOD_CSN,OUTPASS,CSN_PIN);
     c2e:	20 e0       	ldi	r18, 0x00	; 0
     c30:	40 e0       	ldi	r20, 0x00	; 0
     c32:	66 e3       	ldi	r22, 0x36	; 54
     c34:	70 e0       	ldi	r23, 0x00	; 0
     c36:	87 e3       	ldi	r24, 0x37	; 55
     c38:	90 e0       	ldi	r25, 0x00	; 0
     c3a:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
	gpio_inputconfg(PORT_DDR_IRQ,PORT_INMOD_IRQ,PULLUP_mod,IRQ_PIN);
     c3e:	23 e0       	ldi	r18, 0x03	; 3
     c40:	41 e0       	ldi	r20, 0x01	; 1
     c42:	68 e3       	ldi	r22, 0x38	; 56
     c44:	70 e0       	ldi	r23, 0x00	; 0
     c46:	87 e3       	ldi	r24, 0x37	; 55
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	0e 94 9b 04 	call	0x936	; 0x936 <gpio_inputconfg>
     c4e:	08 95       	ret

00000c50 <NRF_SETUP_USED_CONFIG>:
}
void NRF_SETUP_USED_CONFIG()
{
     c50:	1f 93       	push	r17
     c52:	cf 93       	push	r28
     c54:	df 93       	push	r29
	NRF_SPI_SET_PIN(); 
     c56:	c0 9a       	sbi	0x18, 0	; 24
     c58:	2f ef       	ldi	r18, 0xFF	; 255
     c5a:	81 ee       	ldi	r24, 0xE1	; 225
     c5c:	94 e0       	ldi	r25, 0x04	; 4
     c5e:	21 50       	subi	r18, 0x01	; 1
     c60:	80 40       	sbci	r24, 0x00	; 0
     c62:	90 40       	sbci	r25, 0x00	; 0
     c64:	e1 f7       	brne	.-8      	; 0xc5e <NRF_SETUP_USED_CONFIG+0xe>
     c66:	00 c0       	rjmp	.+0      	; 0xc68 <NRF_SETUP_USED_CONFIG+0x18>
     c68:	00 00       	nop
	_delay_ms(100);
	
	NRF1.NRF_CONFIG=(NRF_USED_MASK_RX_DR<<NRF_MASK_RX_DR_BIT)|(NRF_USED_MASK_TX_DR<<NRF_MASK_TX_DS_BIT)|(NRF_USED_MASK_MAX_RT_DR<<NRF_MASK_MAX_RT_BIT)|(NRF_USED_CRC_STATE<<NRF_EN_CRC_BIT)|(NRF_USED_CRC<<NRF_CRCO_BIT)|(1<<NRF_PWR_UP_BIT);
     c6a:	e9 ee       	ldi	r30, 0xE9	; 233
     c6c:	f1 e0       	ldi	r31, 0x01	; 1
     c6e:	8a e0       	ldi	r24, 0x0A	; 10
     c70:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_CONFIG_ADDRESS,NRF1.NRF_CONFIG);
     c72:	60 81       	ld	r22, Z
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
     c7a:	8f e3       	ldi	r24, 0x3F	; 63
     c7c:	9f e1       	ldi	r25, 0x1F	; 31
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <NRF_SETUP_USED_CONFIG+0x2e>
     c82:	00 c0       	rjmp	.+0      	; 0xc84 <NRF_SETUP_USED_CONFIG+0x34>
     c84:	00 00       	nop
		
	
	_delay_ms(2);
	NRF1.NRF_ENABLE_AA=(NRF_USED_ENNAA_P0<<0)|(NRF_USED_ENNAA_P1<<1)|(NRF_USED_ENNAA_P2<<2)|(NRF_USED_ENNAA_P3<<3)|(NRF_USED_ENNAA_P4<<4)|(NRF_USED_ENNAA_P5<<5);
     c86:	ea ee       	ldi	r30, 0xEA	; 234
     c88:	f1 e0       	ldi	r31, 0x01	; 1
     c8a:	13 e0       	ldi	r17, 0x03	; 3
     c8c:	10 83       	st	Z, r17
	NRF_WRITE_REGISTER(NRF_ENABLE_AA_ADDRESS,NRF1.NRF_ENABLE_AA);
     c8e:	60 81       	ld	r22, Z
     c90:	81 e0       	ldi	r24, 0x01	; 1
     c92:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF1.NRF_ENABLE_RX_ADDRESS=(NRF_USED_ERX_P0<<0)|(NRF_USED_ERX_P1<<1)|(NRF_USED_ERX_P2<<2)|(NRF_USED_ERX_P3<<3)|(NRF_USED_ERX_P4<<4)|(NRF_USED_ERX_P5<<5);
     c96:	eb ee       	ldi	r30, 0xEB	; 235
     c98:	f1 e0       	ldi	r31, 0x01	; 1
     c9a:	c2 e0       	ldi	r28, 0x02	; 2
     c9c:	c0 83       	st	Z, r28
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,NRF1.NRF_ENABLE_RX_ADDRESS);
     c9e:	60 81       	ld	r22, Z
     ca0:	82 e0       	ldi	r24, 0x02	; 2
     ca2:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF1.NRF_SETUP_AW=2;
     ca6:	c0 93 ec 01 	sts	0x01EC, r28
	NRF1.NRF_SETUP_RETR=NRF_USED_WAIT_TIME|NRF_USED_RET_COUNT;
     caa:	ed ee       	ldi	r30, 0xED	; 237
     cac:	f1 e0       	ldi	r31, 0x01	; 1
     cae:	85 e3       	ldi	r24, 0x35	; 53
     cb0:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_SETUP_RETR_ADDRESS,NRF1.NRF_SETUP_RETR);
     cb2:	60 81       	ld	r22, Z
     cb4:	84 e0       	ldi	r24, 0x04	; 4
     cb6:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF1.NRF_RF_CH=NRF_USED_CH_1;
     cba:	ee ee       	ldi	r30, 0xEE	; 238
     cbc:	f1 e0       	ldi	r31, 0x01	; 1
     cbe:	c0 83       	st	Z, r28
	NRF_WRITE_REGISTER(NRF_RF_CH_ADDRESS,NRF1.NRF_RF_CH);
     cc0:	60 81       	ld	r22, Z
     cc2:	85 e0       	ldi	r24, 0x05	; 5
     cc4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF1.NRF_RF_SETUP=NRF_USED_RF_SPEED|NRF_USED_POWER;
     cc8:	ef ee       	ldi	r30, 0xEF	; 239
     cca:	f1 e0       	ldi	r31, 0x01	; 1
     ccc:	84 e2       	ldi	r24, 0x24	; 36
     cce:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_RF_SETUP_ADDRESS,NRF1.NRF_RF_SETUP);
     cd0:	60 81       	ld	r22, Z
     cd2:	86 e0       	ldi	r24, 0x06	; 6
     cd4:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>

	NRF1.NRF_RX_ADDR_P1[0]=NRF_USED_RX_ADDR_P1&0XFF;
     cd8:	80 e5       	ldi	r24, 0x50	; 80
     cda:	80 93 f8 01 	sts	0x01F8, r24
	NRF1.NRF_RX_ADDR_P1[1]=(NRF_USED_RX_ADDR_P1>>8)&0XFF;
     cde:	80 93 f9 01 	sts	0x01F9, r24
	NRF1.NRF_RX_ADDR_P1[2]=(NRF_USED_RX_ADDR_P1>>16)&0XFF;
     ce2:	80 93 fa 01 	sts	0x01FA, r24
	NRF1.NRF_RX_ADDR_P1[3]=(NRF_USED_RX_ADDR_P1>>24)&0XFF;
     ce6:	80 93 fb 01 	sts	0x01FB, r24
	NRF1.NRF_RX_ADDR_P1[4]=(NRF_USED_RX_ADDR_P1>>32)&0XFF;
     cea:	80 93 fc 01 	sts	0x01FC, r24
	NRF_UPDATE_PIPE_RX_ADDRESS(1,NRF1.NRF_RX_ADDR_P1,5);
     cee:	45 e0       	ldi	r20, 0x05	; 5
     cf0:	68 ef       	ldi	r22, 0xF8	; 248
     cf2:	71 e0       	ldi	r23, 0x01	; 1
     cf4:	81 e0       	ldi	r24, 0x01	; 1
     cf6:	0e 94 c7 05 	call	0xb8e	; 0xb8e <NRF_UPDATE_PIPE_RX_ADDRESS>

	NRF1.NRF_RX_PW_P1=32;
     cfa:	e7 e0       	ldi	r30, 0x07	; 7
     cfc:	f2 e0       	ldi	r31, 0x02	; 2
     cfe:	80 e2       	ldi	r24, 0x20	; 32
     d00:	80 83       	st	Z, r24
	NRF1.NRF_RX_PW_P0=32;
     d02:	c6 e0       	ldi	r28, 0x06	; 6
     d04:	d2 e0       	ldi	r29, 0x02	; 2
     d06:	88 83       	st	Y, r24
	NRF_WRITE_REGISTER(NRF_RX_PW_P1_ADDRESS,NRF1.NRF_RX_PW_P1);
     d08:	60 81       	ld	r22, Z
     d0a:	82 e1       	ldi	r24, 0x12	; 18
     d0c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(NRF_RX_PW_P0_ADDRESS,NRF1.NRF_RX_PW_P0);	
     d10:	68 81       	ld	r22, Y
     d12:	81 e1       	ldi	r24, 0x11	; 17
     d14:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF1.NRF_DYNPD=0b00000011;
     d18:	ed e0       	ldi	r30, 0x0D	; 13
     d1a:	f2 e0       	ldi	r31, 0x02	; 2
     d1c:	10 83       	st	Z, r17
	NRF_WRITE_REGISTER(NRF_DYNPD_ADDRESS,NRF1.NRF_DYNPD);
     d1e:	60 81       	ld	r22, Z
     d20:	8c e1       	ldi	r24, 0x1C	; 28
     d22:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF1.NRF_FEATURE=(NRF_USED_PL_WITH_ACK_STATE_AT_FIRST<<1)|(NRF_USED_EN_DPL<<2);
     d26:	ee e0       	ldi	r30, 0x0E	; 14
     d28:	f2 e0       	ldi	r31, 0x02	; 2
     d2a:	84 e0       	ldi	r24, 0x04	; 4
     d2c:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_FEATURE_ADDRESS,NRF1.NRF_FEATURE);
     d2e:	60 81       	ld	r22, Z
     d30:	8d e1       	ldi	r24, 0x1D	; 29
     d32:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	USART_SEND_str("state:");
     d36:	80 e5       	ldi	r24, 0x50	; 80
     d38:	91 e0       	ldi	r25, 0x01	; 1
     d3a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	TEST_UART_SEND_VALUE(NRF_STATUS);
     d3e:	20 91 0f 02 	lds	r18, 0x020F
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	40 e0       	ldi	r20, 0x00	; 0
     d46:	50 e0       	ldi	r21, 0x00	; 0
     d48:	60 e0       	ldi	r22, 0x00	; 0
     d4a:	70 e0       	ldi	r23, 0x00	; 0
     d4c:	80 e0       	ldi	r24, 0x00	; 0
     d4e:	90 e0       	ldi	r25, 0x00	; 0
     d50:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TEST_UART_SEND_VALUE>
}
     d54:	df 91       	pop	r29
     d56:	cf 91       	pop	r28
     d58:	1f 91       	pop	r17
     d5a:	08 95       	ret

00000d5c <NRF_SEND_DATA_WITH_ACK>:

unsigned char NRF_SEND_DATA_WITH_ACK(unsigned char *ADDRESS,unsigned char ADDRESS_LENGTH,unsigned char *DATA,unsigned char DATA_LENGTH)
{
     d5c:	ef 92       	push	r14
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
     d6a:	f6 2e       	mov	r15, r22
     d6c:	8a 01       	movw	r16, r20
     d6e:	e2 2e       	mov	r14, r18
	NRF_CLEAR_CE();
     d70:	c2 98       	cbi	0x18, 2	; 24
     d72:	8f e9       	ldi	r24, 0x9F	; 159
     d74:	9f e0       	ldi	r25, 0x0F	; 15
     d76:	01 97       	sbiw	r24, 0x01	; 1
     d78:	f1 f7       	brne	.-4      	; 0xd76 <NRF_SEND_DATA_WITH_ACK+0x1a>
     d7a:	00 c0       	rjmp	.+0      	; 0xd7c <NRF_SEND_DATA_WITH_ACK+0x20>
     d7c:	00 00       	nop
	_delay_ms(1);
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000011);
     d7e:	63 e0       	ldi	r22, 0x03	; 3
     d80:	82 e0       	ldi	r24, 0x02	; 2
     d82:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
     d86:	60 e7       	ldi	r22, 0x70	; 112
     d88:	87 e0       	ldi	r24, 0x07	; 7
     d8a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF_UPDATE_TX_ADDRESS(ADDRESS, ADDRESS_LENGTH);
     d8e:	6f 2d       	mov	r22, r15
     d90:	ce 01       	movw	r24, r28
     d92:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <NRF_UPDATE_TX_ADDRESS>
	NRF_UPDATE_PIPE_RX_ADDRESS(0,ADDRESS,ADDRESS_LENGTH);
     d96:	4f 2d       	mov	r20, r15
     d98:	be 01       	movw	r22, r28
     d9a:	80 e0       	ldi	r24, 0x00	; 0
     d9c:	0e 94 c7 05 	call	0xb8e	; 0xb8e <NRF_UPDATE_PIPE_RX_ADDRESS>
	NRF_FLUSH_TX_BUFFER();
     da0:	0e 94 3f 05 	call	0xa7e	; 0xa7e <NRF_FLUSH_TX_BUFFER>
	NRF_SET_TX_MODE();
     da4:	0e 94 9f 05 	call	0xb3e	; 0xb3e <NRF_SET_TX_MODE>
	NRF_W_TX_PAYLOAD_ACK(DATA,DATA_LENGTH);
     da8:	6e 2d       	mov	r22, r14
     daa:	c8 01       	movw	r24, r16
     dac:	0e 94 1f 05 	call	0xa3e	; 0xa3e <NRF_W_TX_PAYLOAD_ACK>
	NRF_SET_CE();
     db0:	c2 9a       	sbi	0x18, 2	; 24
     db2:	8f e3       	ldi	r24, 0x3F	; 63
     db4:	9f e1       	ldi	r25, 0x1F	; 31
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	f1 f7       	brne	.-4      	; 0xdb6 <NRF_SEND_DATA_WITH_ACK+0x5a>
     dba:	00 c0       	rjmp	.+0      	; 0xdbc <NRF_SEND_DATA_WITH_ACK+0x60>
     dbc:	00 00       	nop
	_delay_ms(2);
	while (NRF_IS_IRQ_SET());
     dbe:	b3 99       	sbic	0x16, 3	; 22
     dc0:	fe cf       	rjmp	.-4      	; 0xdbe <NRF_SEND_DATA_WITH_ACK+0x62>
	NRF_CLEAR_CE();
     dc2:	c2 98       	cbi	0x18, 2	; 24
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000010);
     dc4:	62 e0       	ldi	r22, 0x02	; 2
     dc6:	82 e0       	ldi	r24, 0x02	; 2
     dc8:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	if (NRF_READ_TX_DS_AND_CLEAR())
     dcc:	0e 94 71 05 	call	0xae2	; 0xae2 <NRF_READ_TX_DS_AND_CLEAR>
     dd0:	d8 2f       	mov	r29, r24
     dd2:	81 11       	cpse	r24, r1
     dd4:	10 c0       	rjmp	.+32     	; 0xdf6 <NRF_SEND_DATA_WITH_ACK+0x9a>
	{
		return 1;
	}
	if (NRF_READ_MAX_RT_AND_CLEAR())
     dd6:	0e 94 88 05 	call	0xb10	; 0xb10 <NRF_READ_MAX_RT_AND_CLEAR>
     dda:	c8 2f       	mov	r28, r24
     ddc:	88 23       	and	r24, r24
     dde:	31 f0       	breq	.+12     	; 0xdec <NRF_SEND_DATA_WITH_ACK+0x90>
	{
		USART_SEND_str("HERE FAIL10\n");
     de0:	87 e5       	ldi	r24, 0x57	; 87
     de2:	91 e0       	ldi	r25, 0x01	; 1
     de4:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
		return 0;
     de8:	cd 2f       	mov	r28, r29
     dea:	06 c0       	rjmp	.+12     	; 0xdf8 <NRF_SEND_DATA_WITH_ACK+0x9c>
	}
	USART_SEND_str("HERE FAIL11\n");
     dec:	84 e6       	ldi	r24, 0x64	; 100
     dee:	91 e0       	ldi	r25, 0x01	; 1
     df0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	return 0;
     df4:	01 c0       	rjmp	.+2      	; 0xdf8 <NRF_SEND_DATA_WITH_ACK+0x9c>
	while (NRF_IS_IRQ_SET());
	NRF_CLEAR_CE();
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000010);
	if (NRF_READ_TX_DS_AND_CLEAR())
	{
		return 1;
     df6:	c1 e0       	ldi	r28, 0x01	; 1
		USART_SEND_str("HERE FAIL10\n");
		return 0;
	}
	USART_SEND_str("HERE FAIL11\n");
	return 0;
}
     df8:	8c 2f       	mov	r24, r28
     dfa:	df 91       	pop	r29
     dfc:	cf 91       	pop	r28
     dfe:	1f 91       	pop	r17
     e00:	0f 91       	pop	r16
     e02:	ff 90       	pop	r15
     e04:	ef 90       	pop	r14
     e06:	08 95       	ret

00000e08 <NRF_START_RX_MODE>:

void NRF_START_RX_MODE()
{
	NRF_CLEAR_CE();
     e08:	c2 98       	cbi	0x18, 2	; 24
     e0a:	8f e9       	ldi	r24, 0x9F	; 159
     e0c:	9f e0       	ldi	r25, 0x0F	; 15
     e0e:	01 97       	sbiw	r24, 0x01	; 1
     e10:	f1 f7       	brne	.-4      	; 0xe0e <NRF_START_RX_MODE+0x6>
     e12:	00 c0       	rjmp	.+0      	; 0xe14 <NRF_START_RX_MODE+0xc>
     e14:	00 00       	nop
	_delay_ms(1);
	NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
     e16:	60 e7       	ldi	r22, 0x70	; 112
     e18:	87 e0       	ldi	r24, 0x07	; 7
     e1a:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
	NRF_FLUSH_RX_BUFFER();
     e1e:	0e 94 47 05 	call	0xa8e	; 0xa8e <NRF_FLUSH_RX_BUFFER>
	NRF_SET_RX_MODE();
     e22:	0e 94 b3 05 	call	0xb66	; 0xb66 <NRF_SET_RX_MODE>
	NRF_SET_CE();
     e26:	c2 9a       	sbi	0x18, 2	; 24
     e28:	08 95       	ret

00000e2a <NRF_STOP_RX_MODE>:
}

void NRF_STOP_RX_MODE()
{
		NRF_CLEAR_CE();
     e2a:	c2 98       	cbi	0x18, 2	; 24
     e2c:	8f e9       	ldi	r24, 0x9F	; 159
     e2e:	9f e0       	ldi	r25, 0x0F	; 15
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <NRF_STOP_RX_MODE+0x6>
     e34:	00 c0       	rjmp	.+0      	; 0xe36 <NRF_STOP_RX_MODE+0xc>
     e36:	00 00       	nop
		_delay_ms(1);
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
     e38:	60 e7       	ldi	r22, 0x70	; 112
     e3a:	87 e0       	ldi	r24, 0x07	; 7
     e3c:	0e 94 da 04 	call	0x9b4	; 0x9b4 <NRF_WRITE_REGISTER>
		NRF_FLUSH_RX_BUFFER();
     e40:	0e 94 47 05 	call	0xa8e	; 0xa8e <NRF_FLUSH_RX_BUFFER>
     e44:	08 95       	ret

00000e46 <NRF_CHECK_RX_PL>:
}

unsigned char NRF_CHECK_RX_PL(unsigned char *DATA,unsigned char* LENGTH)
{
     e46:	0f 93       	push	r16
     e48:	1f 93       	push	r17
     e4a:	cf 93       	push	r28
     e4c:	df 93       	push	r29
     e4e:	ec 01       	movw	r28, r24
     e50:	8b 01       	movw	r16, r22
	if (NRF_IS_IRQ_CLEAR())
     e52:	b3 99       	sbic	0x16, 3	; 22
     e54:	0f c0       	rjmp	.+30     	; 0xe74 <NRF_CHECK_RX_PL+0x2e>
	{
	
		if (NRF_READ_RX_DR_AND_CLEAR())
     e56:	0e 94 5a 05 	call	0xab4	; 0xab4 <NRF_READ_RX_DR_AND_CLEAR>
     e5a:	88 23       	and	r24, r24
     e5c:	61 f0       	breq	.+24     	; 0xe76 <NRF_CHECK_RX_PL+0x30>
		{
			NRF_CLEAR_CE();
     e5e:	c2 98       	cbi	0x18, 2	; 24
			*LENGTH=NRF_READ_LENGTH_RX_PL();
     e60:	0e 94 4f 05 	call	0xa9e	; 0xa9e <NRF_READ_LENGTH_RX_PL>
     e64:	f8 01       	movw	r30, r16
     e66:	80 83       	st	Z, r24
			NRF_R_RX_PAYLOAD_DYNAMIC(DATA,*LENGTH);	
     e68:	68 2f       	mov	r22, r24
     e6a:	ce 01       	movw	r24, r28
     e6c:	0e 94 fe 04 	call	0x9fc	; 0x9fc <NRF_R_RX_PAYLOAD_DYNAMIC>
			return 1;
     e70:	81 e0       	ldi	r24, 0x01	; 1
     e72:	01 c0       	rjmp	.+2      	; 0xe76 <NRF_CHECK_RX_PL+0x30>
		}
		return 0;
	}
	else
	{
		return 0;
     e74:	80 e0       	ldi	r24, 0x00	; 0
	}
}
     e76:	df 91       	pop	r29
     e78:	cf 91       	pop	r28
     e7a:	1f 91       	pop	r17
     e7c:	0f 91       	pop	r16
     e7e:	08 95       	ret

00000e80 <readeeprom>:
	while(isbitset(*EEPROM_CONTROL_ADD,1));
	}
}

uint8 readeeprom(uint16 ADD)
{while(isbitset(*EEPROM_CONTROL_ADD,1));  /*checking the last write is done*/
     e80:	e1 99       	sbic	0x1c, 1	; 28
     e82:	fe cf       	rjmp	.-4      	; 0xe80 <readeeprom>
	*EEPROM_ADDRESS_HIGH_ADD=ADD>>8;
     e84:	9f bb       	out	0x1f, r25	; 31
	*EEPROM_ADDRESS_LOW_ADD=ADD;
     e86:	8e bb       	out	0x1e, r24	; 30
    clearbit(*EEPROM_CONTROL_ADD,2);
     e88:	e2 98       	cbi	0x1c, 2	; 28
	setbit(*EEPROM_CONTROL_ADD,0);	
     e8a:	e0 9a       	sbi	0x1c, 0	; 28
	
	return *EEPROM_DATA_ADD;
     e8c:	8d b3       	in	r24, 0x1d	; 29
}
     e8e:	08 95       	ret

00000e90 <writeeeprom>:
 *  Author: ideapad510
 */ 
#include "eeprom.h"

void writeeeprom(uint16 ADD,uint8 Data)
{
     e90:	1f 93       	push	r17
     e92:	cf 93       	push	r28
     e94:	df 93       	push	r29
     e96:	d8 2f       	mov	r29, r24
     e98:	19 2f       	mov	r17, r25
     e9a:	c6 2f       	mov	r28, r22
	if (readeeprom(ADD)!=Data)
     e9c:	0e 94 40 07 	call	0xe80	; 0xe80 <readeeprom>
     ea0:	8c 17       	cp	r24, r28
     ea2:	51 f0       	breq	.+20     	; 0xeb8 <writeeeprom+0x28>
	{
	while(isbitset(*EEPROM_CONTROL_ADD,1));  /*checking the last write is done*/
     ea4:	e1 99       	sbic	0x1c, 1	; 28
     ea6:	fe cf       	rjmp	.-4      	; 0xea4 <writeeeprom+0x14>
	*EEPROM_ADDRESS_HIGH_ADD=ADD>>8;
     ea8:	1f bb       	out	0x1f, r17	; 31
	*EEPROM_ADDRESS_LOW_ADD=ADD;
     eaa:	de bb       	out	0x1e, r29	; 30
	*EEPROM_DATA_ADD=Data;
     eac:	cd bb       	out	0x1d, r28	; 29
	setbit(*EEPROM_CONTROL_ADD,2);
     eae:	e2 9a       	sbi	0x1c, 2	; 28
	clearbit(*EEPROM_CONTROL_ADD,0);
     eb0:	e0 98       	cbi	0x1c, 0	; 28
	setbit(*EEPROM_CONTROL_ADD,1);
     eb2:	e1 9a       	sbi	0x1c, 1	; 28
	while(isbitset(*EEPROM_CONTROL_ADD,1));
     eb4:	e1 99       	sbic	0x1c, 1	; 28
     eb6:	fe cf       	rjmp	.-4      	; 0xeb4 <writeeeprom+0x24>
	}
}
     eb8:	df 91       	pop	r29
     eba:	cf 91       	pop	r28
     ebc:	1f 91       	pop	r17
     ebe:	08 95       	ret

00000ec0 <SPI_INT>:
 */ 

#include "spi.h"
 volatile  SPI_DATA data;
void SPI_INT(SPI_OPMODE opmode, SPI_PRESCALE prescale,SPI_MODE mode, SPI_INTURUPT intupt,SPI_DATA_ORDER order)
{	switch (opmode)
     ec0:	ff 92       	push	r15
     ec2:	0f 93       	push	r16
     ec4:	1f 93       	push	r17
     ec6:	cf 93       	push	r28
     ec8:	df 93       	push	r29
     eca:	c6 2f       	mov	r28, r22
     ecc:	f7 2e       	mov	r15, r23
     ece:	d4 2f       	mov	r29, r20
     ed0:	12 2f       	mov	r17, r18
     ed2:	88 23       	and	r24, r24
     ed4:	29 f1       	breq	.+74     	; 0xf20 <SPI_INT+0x60>
     ed6:	80 31       	cpi	r24, 0x10	; 16
     ed8:	89 f5       	brne	.+98     	; 0xf3c <SPI_INT+0x7c>
	{
		case SPI_MASTER: gpio_outputconfg(DDR_MOSI_ADDRESS,PORT_OUTMOD_MOSI_ADDRESS,OUTPASS,MOSI_PIN);
     eda:	25 e0       	ldi	r18, 0x05	; 5
     edc:	40 e0       	ldi	r20, 0x00	; 0
     ede:	66 e3       	ldi	r22, 0x36	; 54
     ee0:	70 e0       	ldi	r23, 0x00	; 0
     ee2:	87 e3       	ldi	r24, 0x37	; 55
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
		                 gpio_outputconfg(DDR_SS_ADDRESS,PORT_OUTMOD_SS_ADDRESS,OUTPASS,SS_PIN);
     eea:	24 e0       	ldi	r18, 0x04	; 4
     eec:	40 e0       	ldi	r20, 0x00	; 0
     eee:	66 e3       	ldi	r22, 0x36	; 54
     ef0:	70 e0       	ldi	r23, 0x00	; 0
     ef2:	87 e3       	ldi	r24, 0x37	; 55
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
						 gpio_outputconfg(DDR_SCK_ADDRESS,PORT_OUTMOD_SCK_ADDRESS,OUTPASS,SCK_PIN);
     efa:	27 e0       	ldi	r18, 0x07	; 7
     efc:	40 e0       	ldi	r20, 0x00	; 0
     efe:	66 e3       	ldi	r22, 0x36	; 54
     f00:	70 e0       	ldi	r23, 0x00	; 0
     f02:	87 e3       	ldi	r24, 0x37	; 55
     f04:	90 e0       	ldi	r25, 0x00	; 0
     f06:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
                        clearbit(*PORT_OUT_SCK_ADDRESS,SCK_PIN);
     f0a:	c7 98       	cbi	0x18, 7	; 24
						SPSR_ACCESS &=0xFE;
     f0c:	70 98       	cbi	0x0e, 0	; 14
						SPSR_ACCESS |=(prescale>>8);
     f0e:	8e b1       	in	r24, 0x0e	; 14
     f10:	f8 2a       	or	r15, r24
     f12:	fe b8       	out	0x0e, r15	; 14
						SPCR_ACCESS=opmode|prescale|mode|intupt|order|0X40;
     f14:	00 65       	ori	r16, 0x50	; 80
     f16:	10 2b       	or	r17, r16
     f18:	d1 2b       	or	r29, r17
     f1a:	cd 2b       	or	r28, r29
     f1c:	cd b9       	out	0x0d, r28	; 13
						
						 break;	                 
     f1e:	0e c0       	rjmp	.+28     	; 0xf3c <SPI_INT+0x7c>
		
		case SPI_SLAVE: gpio_outputconfg(DDR_MISO_ADDRESS,PORT_OUTMOD_MISO_ADDRESS,OUTPASS,MISO_PIN);
     f20:	26 e0       	ldi	r18, 0x06	; 6
     f22:	40 e0       	ldi	r20, 0x00	; 0
     f24:	66 e3       	ldi	r22, 0x36	; 54
     f26:	70 e0       	ldi	r23, 0x00	; 0
     f28:	87 e3       	ldi	r24, 0x37	; 55
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
		              SPSR_ACCESS &=0xFE;
     f30:	70 98       	cbi	0x0e, 0	; 14
					  SPCR_ACCESS=opmode|prescale|mode|intupt|order|0X40;
     f32:	00 64       	ori	r16, 0x40	; 64
     f34:	10 2b       	or	r17, r16
     f36:	d1 2b       	or	r29, r17
     f38:	cd 2b       	or	r28, r29
     f3a:	cd b9       	out	0x0d, r28	; 13

	

/*	setbit(*PORT_OUT_SS_ADDRESS,SS_PIN);*/
/*	setbit(*PORT_OUT_SCK_ADDRESS,SCK_PIN);*/
}
     f3c:	df 91       	pop	r29
     f3e:	cf 91       	pop	r28
     f40:	1f 91       	pop	r17
     f42:	0f 91       	pop	r16
     f44:	ff 90       	pop	r15
     f46:	08 95       	ret

00000f48 <TIMER0_ENABLE>:
 
 }
 TIMER0_ENABLE(TIMER_1024,OVER_FLOW_INT_ENABLE);
 dont change TCNT0_ACCESS or clock_carry */
  void TIMER0_ENABLE(T0_clock fre,timer0_mode mode,TIMER0_COMPARE_OUTPUT_MOD cmpmode,TIMER0_INT intmode, unsigned char oc)
{     OCRO_ACCESS=oc;
     f48:	0f 93       	push	r16
     f4a:	0c bf       	out	0x3c, r16	; 60
	  TCCR0_ACCESS=0x00;
     f4c:	13 be       	out	0x33, r1	; 51
	  TIMSK_ACCESS&=0xfC;
     f4e:	99 b7       	in	r25, 0x39	; 57
     f50:	9c 7f       	andi	r25, 0xFC	; 252
     f52:	99 bf       	out	0x39, r25	; 57
	  TCCR0_ACCESS|=fre|mode|cmpmode;
     f54:	93 b7       	in	r25, 0x33	; 51
     f56:	49 2b       	or	r20, r25
     f58:	64 2b       	or	r22, r20
     f5a:	86 2b       	or	r24, r22
     f5c:	83 bf       	out	0x33, r24	; 51
	  TIMSK_ACCESS |=intmode;
     f5e:	89 b7       	in	r24, 0x39	; 57
     f60:	28 2b       	or	r18, r24
     f62:	29 bf       	out	0x39, r18	; 57
/*
	  if (intmode!=INT_DISABLE)
	  {global_interupt_enable();
	  }*/
   }
     f64:	0f 91       	pop	r16
     f66:	08 95       	ret

00000f68 <TIMER1_READ_COUNTER>:
	TIMER1_ENABLE(T1_OCA1_DISCONNECT,T1_OCB1_DISCONNECT,T1_NORMAL,clk_pre,0,0,overflowint,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT);
}

unsigned short TIMER1_READ_COUNTER()
{
	unsigned short x= TCNT1L_ACCESS;
     f68:	8c b5       	in	r24, 0x2c	; 44
	x|=TCNT1H_ACCESS<<8;
     f6a:	2d b5       	in	r18, 0x2d	; 45
     f6c:	90 e0       	ldi	r25, 0x00	; 0
	return x;
}
     f6e:	92 2b       	or	r25, r18
     f70:	08 95       	ret

00000f72 <TIMER1_ENABLE>:
				   unsigned short OCR1B_DATA, 
				   T1_INT_DATATYPE TOIE1_state, 
				   T1_INT_DATATYPE OCIE1B_state, 
				   T1_INT_DATATYPE OCIE1A_state, 
				   T1_INT_DATATYPE TICIE1_state)
{
     f72:	8f 92       	push	r8
     f74:	af 92       	push	r10
     f76:	cf 92       	push	r12
     f78:	df 92       	push	r13
     f7a:	ef 92       	push	r14
     f7c:	ff 92       	push	r15
     f7e:	0f 93       	push	r16
     f80:	1f 93       	push	r17
     f82:	cf 93       	push	r28
     f84:	df 93       	push	r29
     f86:	cd b7       	in	r28, 0x3d	; 61
     f88:	de b7       	in	r29, 0x3e	; 62
     f8a:	d6 2e       	mov	r13, r22
	TCCR1A_ACCESS=00;
     f8c:	1f bc       	out	0x2f, r1	; 47
	TCCR1B_ACCESS=00;
     f8e:	1e bc       	out	0x2e, r1	; 46
	TCCR1A_ACCESS|=COM1A<<6;
     f90:	9f b5       	in	r25, 0x2f	; 47
     f92:	30 e4       	ldi	r19, 0x40	; 64
     f94:	83 9f       	mul	r24, r19
     f96:	f0 01       	movw	r30, r0
     f98:	11 24       	eor	r1, r1
     f9a:	e9 2b       	or	r30, r25
     f9c:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=COM1B<<4;
     f9e:	9f b5       	in	r25, 0x2f	; 47
     fa0:	30 e1       	ldi	r19, 0x10	; 16
     fa2:	63 9f       	mul	r22, r19
     fa4:	f0 01       	movw	r30, r0
     fa6:	11 24       	eor	r1, r1
     fa8:	e9 2b       	or	r30, r25
     faa:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=WGM1&0x03;
     fac:	9f b5       	in	r25, 0x2f	; 47
     fae:	34 2f       	mov	r19, r20
     fb0:	33 70       	andi	r19, 0x03	; 3
     fb2:	93 2b       	or	r25, r19
     fb4:	9f bd       	out	0x2f, r25	; 47
	TCCR1B_ACCESS|=(WGM1&0x0c)<<1;
     fb6:	9e b5       	in	r25, 0x2e	; 46
     fb8:	4c 70       	andi	r20, 0x0C	; 12
     fba:	44 0f       	add	r20, r20
     fbc:	49 2b       	or	r20, r25
     fbe:	4e bd       	out	0x2e, r20	; 46
    OCR1AH_ACCESS=OCR1A_DATA>>8;
     fc0:	1b bd       	out	0x2b, r17	; 43
	OCR1AL_ACCESS=OCR1A_DATA;
     fc2:	0a bd       	out	0x2a, r16	; 42
	OCR1BH_ACCESS=OCR1B_DATA>>8;
     fc4:	f9 bc       	out	0x29, r15	; 41
	OCR1BL_ACCESS=OCR1B_DATA;
     fc6:	e8 bc       	out	0x28, r14	; 40
	TIMSK_ACCESS&=0xc3;
     fc8:	99 b7       	in	r25, 0x39	; 57
     fca:	93 7c       	andi	r25, 0xC3	; 195
     fcc:	99 bf       	out	0x39, r25	; 57
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
	TIMSK_ACCESS|=x<<2;
     fce:	99 b7       	in	r25, 0x39	; 57
    OCR1AH_ACCESS=OCR1A_DATA>>8;
	OCR1AL_ACCESS=OCR1A_DATA;
	OCR1BH_ACCESS=OCR1B_DATA>>8;
	OCR1BL_ACCESS=OCR1B_DATA;
	TIMSK_ACCESS&=0xc3;
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
     fd0:	3d 85       	ldd	r19, Y+13	; 0x0d
     fd2:	33 0f       	add	r19, r19
     fd4:	33 0f       	add	r19, r19
     fd6:	33 0f       	add	r19, r19
     fd8:	c3 2a       	or	r12, r19
     fda:	88 0c       	add	r8, r8
     fdc:	88 0c       	add	r8, r8
     fde:	c8 28       	or	r12, r8
     fe0:	aa 0c       	add	r10, r10
     fe2:	ac 28       	or	r10, r12
	TIMSK_ACCESS|=x<<2;
     fe4:	aa 0c       	add	r10, r10
     fe6:	aa 0c       	add	r10, r10
     fe8:	a9 2a       	or	r10, r25
     fea:	a9 be       	out	0x39, r10	; 57
	TCCR1B_ACCESS|=CS1;
     fec:	9e b5       	in	r25, 0x2e	; 46
     fee:	29 2b       	or	r18, r25
     ff0:	2e bd       	out	0x2e, r18	; 46
	if (COM1A!=T1_OCA1_DISCONNECT)
     ff2:	88 23       	and	r24, r24
     ff4:	41 f0       	breq	.+16     	; 0x1006 <TIMER1_ENABLE+0x94>
	{gpio_outputconfg(DDR_OC1A_ADDRESS,PORT_OUTMOD_OC1A_ADDRESS,OUTPASS,OC1A_PIN);
     ff6:	25 e0       	ldi	r18, 0x05	; 5
     ff8:	40 e0       	ldi	r20, 0x00	; 0
     ffa:	60 e3       	ldi	r22, 0x30	; 48
     ffc:	70 e0       	ldi	r23, 0x00	; 0
     ffe:	81 e3       	ldi	r24, 0x31	; 49
    1000:	90 e0       	ldi	r25, 0x00	; 0
    1002:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
	}
	if (COM1B!=T1_OCB1_DISCONNECT)
    1006:	dd 20       	and	r13, r13
    1008:	41 f0       	breq	.+16     	; 0x101a <TIMER1_ENABLE+0xa8>
	{gpio_outputconfg(DDR_OC1B_ADDRESS,PORT_OUTMOD_OC1B_ADDRESS,OUTPASS,OC1B_PIN);
    100a:	24 e0       	ldi	r18, 0x04	; 4
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	60 e3       	ldi	r22, 0x30	; 48
    1010:	70 e0       	ldi	r23, 0x00	; 0
    1012:	81 e3       	ldi	r24, 0x31	; 49
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
	}
	/**/
	TCCR1A_ACCESS|=0x08;
    101a:	8f b5       	in	r24, 0x2f	; 47
    101c:	88 60       	ori	r24, 0x08	; 8
    101e:	8f bd       	out	0x2f, r24	; 47
	/**/
}
    1020:	df 91       	pop	r29
    1022:	cf 91       	pop	r28
    1024:	1f 91       	pop	r17
    1026:	0f 91       	pop	r16
    1028:	ff 90       	pop	r15
    102a:	ef 90       	pop	r14
    102c:	df 90       	pop	r13
    102e:	cf 90       	pop	r12
    1030:	af 90       	pop	r10
    1032:	8f 90       	pop	r8
    1034:	08 95       	ret

00001036 <PROTOCOL_SETUP>:



void PROTOCOL_SETUP()
{
	 NRF_SETUP_USED_CONFIG();
    1036:	0e 94 28 06 	call	0xc50	; 0xc50 <NRF_SETUP_USED_CONFIG>
	 NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[0]);
    103a:	80 91 60 00 	lds	r24, 0x0060
    103e:	0e 94 08 06 	call	0xc10	; 0xc10 <NRF_UPDATE_USED_CHANNEL>
	 NRF_START_RX_MODE();
    1042:	0e 94 04 07 	call	0xe08	; 0xe08 <NRF_START_RX_MODE>
    1046:	08 95       	ret

00001048 <PROTOCOL_IO_SETUP>:
	 
}

void PROTOCOL_IO_SETUP()
{
	 NRF_IO_SETUP();
    1048:	0e 94 0f 06 	call	0xc1e	; 0xc1e <NRF_IO_SETUP>
    104c:	08 95       	ret

0000104e <PROTOCOL_CHECK_RECIVED_PACKET>:
}


unsigned char PROTOCOL_CHECK_RECIVED_PACKET(unsigned char *PACKET, unsigned char CHECK_ADDRESS, unsigned char *MASTER_ADDRESS,unsigned char LENGTH_LOCAL)
{
    104e:	ff 92       	push	r15
    1050:	0f 93       	push	r16
    1052:	1f 93       	push	r17
    1054:	cf 93       	push	r28
    1056:	df 93       	push	r29
    1058:	00 d0       	rcall	.+0      	; 0x105a <PROTOCOL_CHECK_RECIVED_PACKET+0xc>
    105a:	cd b7       	in	r28, 0x3d	; 61
    105c:	de b7       	in	r29, 0x3e	; 62
    105e:	8c 01       	movw	r16, r24
	if (LENGTH_LOCAL!=(0b01111111 & PACKET[0]))
    1060:	fc 01       	movw	r30, r24
    1062:	80 81       	ld	r24, Z
    1064:	f8 2f       	mov	r31, r24
    1066:	ff 77       	andi	r31, 0x7F	; 127
    1068:	ff 2e       	mov	r15, r31
    106a:	f2 13       	cpse	r31, r18
    106c:	42 c0       	rjmp	.+132    	; 0x10f2 <PROTOCOL_CHECK_RECIVED_PACKET+0xa4>
	{
		return 0;
	}
	if (PACKET[1]>PROTOCOL_CURRENT_VERSION)
    106e:	f8 01       	movw	r30, r16
    1070:	91 81       	ldd	r25, Z+1	; 0x01
    1072:	92 30       	cpi	r25, 0x02	; 2
    1074:	08 f0       	brcs	.+2      	; 0x1078 <PROTOCOL_CHECK_RECIVED_PACKET+0x2a>
    1076:	3f c0       	rjmp	.+126    	; 0x10f6 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>
	{
		return 0;
	}
	unsigned char i;
	if (CHECK_ADDRESS)
    1078:	66 23       	and	r22, r22
    107a:	79 f0       	breq	.+30     	; 0x109a <PROTOCOL_CHECK_RECIVED_PACKET+0x4c>
	{
		for(i=0;i<5;i++)
		{
		if (PACKET[2+i]!=MASTER_ADDRESS[i])
    107c:	22 81       	ldd	r18, Z+2	; 0x02
    107e:	fa 01       	movw	r30, r20
    1080:	90 81       	ld	r25, Z
    1082:	29 13       	cpse	r18, r25
    1084:	3a c0       	rjmp	.+116    	; 0x10fa <PROTOCOL_CHECK_RECIVED_PACKET+0xac>
    1086:	d8 01       	movw	r26, r16
    1088:	13 96       	adiw	r26, 0x03	; 3
    108a:	31 96       	adiw	r30, 0x01	; 1
    108c:	94 e0       	ldi	r25, 0x04	; 4
    108e:	3d 91       	ld	r19, X+
    1090:	21 91       	ld	r18, Z+
    1092:	32 13       	cpse	r19, r18
    1094:	34 c0       	rjmp	.+104    	; 0x10fe <PROTOCOL_CHECK_RECIVED_PACKET+0xb0>
    1096:	91 50       	subi	r25, 0x01	; 1
		return 0;
	}
	unsigned char i;
	if (CHECK_ADDRESS)
	{
		for(i=0;i<5;i++)
    1098:	d1 f7       	brne	.-12     	; 0x108e <PROTOCOL_CHECK_RECIVED_PACKET+0x40>
	
	
	
	
	volatile unsigned char HASH_VALUE[2];
	if (0b10000000&PACKET[0])
    109a:	88 23       	and	r24, r24
    109c:	5c f4       	brge	.+22     	; 0x10b4 <PROTOCOL_CHECK_RECIVED_PACKET+0x66>
	{
		HASH_PASWORD_KEY(PACKET,HASH_VALUE,LENGTH_LOCAL-2,SENSOR_PASSWORD);
    109e:	28 e6       	ldi	r18, 0x68	; 104
    10a0:	30 e0       	ldi	r19, 0x00	; 0
    10a2:	4e ef       	ldi	r20, 0xFE	; 254
    10a4:	4f 0d       	add	r20, r15
    10a6:	be 01       	movw	r22, r28
    10a8:	6f 5f       	subi	r22, 0xFF	; 255
    10aa:	7f 4f       	sbci	r23, 0xFF	; 255
    10ac:	c8 01       	movw	r24, r16
    10ae:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <HASH_PASWORD_KEY>
    10b2:	0a c0       	rjmp	.+20     	; 0x10c8 <PROTOCOL_CHECK_RECIVED_PACKET+0x7a>
	}
	else
	{
		HASH_SESSION_KEY(PACKET,HASH_VALUE,LENGTH_LOCAL-2,SENSOR_SESSION_KEY);
    10b4:	20 e1       	ldi	r18, 0x10	; 16
    10b6:	32 e0       	ldi	r19, 0x02	; 2
    10b8:	4e ef       	ldi	r20, 0xFE	; 254
    10ba:	4f 0d       	add	r20, r15
    10bc:	be 01       	movw	r22, r28
    10be:	6f 5f       	subi	r22, 0xFF	; 255
    10c0:	7f 4f       	sbci	r23, 0xFF	; 255
    10c2:	c8 01       	movw	r24, r16
    10c4:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <HASH_SESSION_KEY>
	}
	if ((HASH_VALUE[0]==PACKET[LENGTH_LOCAL-2])&&(HASH_VALUE[1]==PACKET[LENGTH_LOCAL-1]))
    10c8:	39 81       	ldd	r19, Y+1	; 0x01
    10ca:	8f 2d       	mov	r24, r15
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	f8 01       	movw	r30, r16
    10d0:	e8 0f       	add	r30, r24
    10d2:	f9 1f       	adc	r31, r25
    10d4:	32 97       	sbiw	r30, 0x02	; 2
    10d6:	20 81       	ld	r18, Z
    10d8:	32 13       	cpse	r19, r18
    10da:	13 c0       	rjmp	.+38     	; 0x1102 <PROTOCOL_CHECK_RECIVED_PACKET+0xb4>
    10dc:	2a 81       	ldd	r18, Y+2	; 0x02
    10de:	08 0f       	add	r16, r24
    10e0:	19 1f       	adc	r17, r25
    10e2:	f8 01       	movw	r30, r16
    10e4:	31 97       	sbiw	r30, 0x01	; 1
    10e6:	81 e0       	ldi	r24, 0x01	; 1
    10e8:	90 81       	ld	r25, Z
    10ea:	29 17       	cp	r18, r25
    10ec:	59 f0       	breq	.+22     	; 0x1104 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
    10ee:	80 e0       	ldi	r24, 0x00	; 0
    10f0:	09 c0       	rjmp	.+18     	; 0x1104 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>

unsigned char PROTOCOL_CHECK_RECIVED_PACKET(unsigned char *PACKET, unsigned char CHECK_ADDRESS, unsigned char *MASTER_ADDRESS,unsigned char LENGTH_LOCAL)
{
	if (LENGTH_LOCAL!=(0b01111111 & PACKET[0]))
	{
		return 0;
    10f2:	80 e0       	ldi	r24, 0x00	; 0
    10f4:	07 c0       	rjmp	.+14     	; 0x1104 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
	}
	if (PACKET[1]>PROTOCOL_CURRENT_VERSION)
	{
		return 0;
    10f6:	80 e0       	ldi	r24, 0x00	; 0
    10f8:	05 c0       	rjmp	.+10     	; 0x1104 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
	{
		for(i=0;i<5;i++)
		{
		if (PACKET[2+i]!=MASTER_ADDRESS[i])
		{
			return 0;
    10fa:	80 e0       	ldi	r24, 0x00	; 0
    10fc:	03 c0       	rjmp	.+6      	; 0x1104 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
    10fe:	80 e0       	ldi	r24, 0x00	; 0
    1100:	01 c0       	rjmp	.+2      	; 0x1104 <PROTOCOL_CHECK_RECIVED_PACKET+0xb6>
	}
	if ((HASH_VALUE[0]==PACKET[LENGTH_LOCAL-2])&&(HASH_VALUE[1]==PACKET[LENGTH_LOCAL-1]))
	{
		return 1;
	}
	return 0;
    1102:	80 e0       	ldi	r24, 0x00	; 0
	
}
    1104:	0f 90       	pop	r0
    1106:	0f 90       	pop	r0
    1108:	df 91       	pop	r29
    110a:	cf 91       	pop	r28
    110c:	1f 91       	pop	r17
    110e:	0f 91       	pop	r16
    1110:	ff 90       	pop	r15
    1112:	08 95       	ret

00001114 <PROTOCOL_BEACON>:

unsigned char PROTOCOL_BEACON()
{
    1114:	cf 93       	push	r28
    1116:	df 93       	push	r29
    1118:	00 d0       	rcall	.+0      	; 0x111a <PROTOCOL_BEACON+0x6>
    111a:	cd b7       	in	r28, 0x3d	; 61
    111c:	de b7       	in	r29, 0x3e	; 62
	 volatile unsigned char HASH_VALUE[2];
	 DATA_BUFFER[0]=10|0B00000000;
    111e:	8a e0       	ldi	r24, 0x0A	; 10
    1120:	80 93 17 02 	sts	0x0217, r24
	 DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    1124:	81 e0       	ldi	r24, 0x01	; 1
    1126:	80 93 18 02 	sts	0x0218, r24
	 DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    112a:	80 e5       	ldi	r24, 0x50	; 80
    112c:	80 93 19 02 	sts	0x0219, r24
	 DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    1130:	80 93 1a 02 	sts	0x021A, r24
	 DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    1134:	80 93 1b 02 	sts	0x021B, r24
	 DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1138:	80 93 1c 02 	sts	0x021C, r24
	 DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    113c:	80 93 1d 02 	sts	0x021D, r24
	 DATA_BUFFER[7]=BEACON_RECEIVED_CODE;
    1140:	86 e0       	ldi	r24, 0x06	; 6
    1142:	80 93 1e 02 	sts	0x021E, r24
	 HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,8,SENSOR_SESSION_KEY);
    1146:	20 e1       	ldi	r18, 0x10	; 16
    1148:	32 e0       	ldi	r19, 0x02	; 2
    114a:	48 e0       	ldi	r20, 0x08	; 8
    114c:	be 01       	movw	r22, r28
    114e:	6f 5f       	subi	r22, 0xFF	; 255
    1150:	7f 4f       	sbci	r23, 0xFF	; 255
    1152:	87 e1       	ldi	r24, 0x17	; 23
    1154:	92 e0       	ldi	r25, 0x02	; 2
    1156:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <HASH_SESSION_KEY>
	 DATA_BUFFER[8]=HASH_VALUE[0];
    115a:	89 81       	ldd	r24, Y+1	; 0x01
    115c:	80 93 1f 02 	sts	0x021F, r24
	 DATA_BUFFER[9]=HASH_VALUE[1];
    1160:	8a 81       	ldd	r24, Y+2	; 0x02
    1162:	80 93 20 02 	sts	0x0220, r24
	 if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,10))
    1166:	2a e0       	ldi	r18, 0x0A	; 10
    1168:	47 e1       	ldi	r20, 0x17	; 23
    116a:	52 e0       	ldi	r21, 0x02	; 2
    116c:	65 e0       	ldi	r22, 0x05	; 5
    116e:	8f ed       	ldi	r24, 0xDF	; 223
    1170:	91 e0       	ldi	r25, 0x01	; 1
    1172:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
    1176:	88 23       	and	r24, r24
    1178:	19 f0       	breq	.+6      	; 0x1180 <PROTOCOL_BEACON+0x6c>
	 {
		 return 0;
	 }
	 C_T_BEACON=0;
    117a:	10 92 e4 01 	sts	0x01E4, r1
	 return 1;
    117e:	81 e0       	ldi	r24, 0x01	; 1
}
    1180:	0f 90       	pop	r0
    1182:	0f 90       	pop	r0
    1184:	df 91       	pop	r29
    1186:	cf 91       	pop	r28
    1188:	08 95       	ret

0000118a <PROTOCOL_SESSION_KEY>:

unsigned char PROTOCOL_SESSION_KEY()
{
    118a:	cf 93       	push	r28
    118c:	df 93       	push	r29
    118e:	00 d0       	rcall	.+0      	; 0x1190 <PROTOCOL_SESSION_KEY+0x6>
    1190:	00 d0       	rcall	.+0      	; 0x1192 <PROTOCOL_SESSION_KEY+0x8>
    1192:	1f 92       	push	r1
    1194:	cd b7       	in	r28, 0x3d	; 61
    1196:	de b7       	in	r29, 0x3e	; 62
	
	unsigned char SESSION_KEY_LOCAL[2];	
	unsigned char TEMP_LOCAL=CHALLANGE_RESULT_SUCCESS;
    1198:	84 e4       	ldi	r24, 0x44	; 68
    119a:	8b 83       	std	Y+3, r24	; 0x03
	DECRYPT_ALGORISM_2_V1(SESSION_KEY_LOCAL,&DATA_BUFFER[8],2,SENSOR_PASSWORD);
    119c:	28 e6       	ldi	r18, 0x68	; 104
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	42 e0       	ldi	r20, 0x02	; 2
    11a2:	6f e1       	ldi	r22, 0x1F	; 31
    11a4:	72 e0       	ldi	r23, 0x02	; 2
    11a6:	ce 01       	movw	r24, r28
    11a8:	01 96       	adiw	r24, 0x01	; 1
    11aa:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <DECRYPT_ALGORISM_2_V1>
	volatile unsigned char HASH_VALUE[2];
	DATA_BUFFER[0]=11|0B10000000;
    11ae:	8b e8       	ldi	r24, 0x8B	; 139
    11b0:	80 93 17 02 	sts	0x0217, r24
	DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    11b4:	81 e0       	ldi	r24, 0x01	; 1
    11b6:	80 93 18 02 	sts	0x0218, r24
	DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    11ba:	80 e5       	ldi	r24, 0x50	; 80
    11bc:	80 93 19 02 	sts	0x0219, r24
	DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    11c0:	80 93 1a 02 	sts	0x021A, r24
	DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    11c4:	80 93 1b 02 	sts	0x021B, r24
	DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    11c8:	80 93 1c 02 	sts	0x021C, r24
	DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    11cc:	80 93 1d 02 	sts	0x021D, r24
	DATA_BUFFER[7]=NEW_SESSION_KEY_APPLIED_CODE;
    11d0:	88 e0       	ldi	r24, 0x08	; 8
    11d2:	80 93 1e 02 	sts	0x021E, r24
	ENCRYPT_ALGORISM_2_V1(&TEMP_LOCAL,&DATA_BUFFER[8],1,SENSOR_PASSWORD);
    11d6:	28 e6       	ldi	r18, 0x68	; 104
    11d8:	30 e0       	ldi	r19, 0x00	; 0
    11da:	41 e0       	ldi	r20, 0x01	; 1
    11dc:	6f e1       	ldi	r22, 0x1F	; 31
    11de:	72 e0       	ldi	r23, 0x02	; 2
    11e0:	ce 01       	movw	r24, r28
    11e2:	03 96       	adiw	r24, 0x03	; 3
    11e4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <ENCRYPT_ALGORISM_2_V1>
	HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_PASSWORD);
    11e8:	28 e6       	ldi	r18, 0x68	; 104
    11ea:	30 e0       	ldi	r19, 0x00	; 0
    11ec:	49 e0       	ldi	r20, 0x09	; 9
    11ee:	be 01       	movw	r22, r28
    11f0:	6c 5f       	subi	r22, 0xFC	; 252
    11f2:	7f 4f       	sbci	r23, 0xFF	; 255
    11f4:	87 e1       	ldi	r24, 0x17	; 23
    11f6:	92 e0       	ldi	r25, 0x02	; 2
    11f8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <HASH_PASWORD_KEY>
	DATA_BUFFER[9]=HASH_VALUE[0];
    11fc:	8c 81       	ldd	r24, Y+4	; 0x04
    11fe:	80 93 20 02 	sts	0x0220, r24
	DATA_BUFFER[10]=HASH_VALUE[1];
    1202:	8d 81       	ldd	r24, Y+5	; 0x05
    1204:	80 93 21 02 	sts	0x0221, r24
	if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,11))
    1208:	2b e0       	ldi	r18, 0x0B	; 11
    120a:	47 e1       	ldi	r20, 0x17	; 23
    120c:	52 e0       	ldi	r21, 0x02	; 2
    120e:	65 e0       	ldi	r22, 0x05	; 5
    1210:	8f ed       	ldi	r24, 0xDF	; 223
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
    1218:	81 11       	cpse	r24, r1
    121a:	07 c0       	rjmp	.+14     	; 0x122a <PROTOCOL_SESSION_KEY+0xa0>
	{
		/*REMOVE THIS IF IT DIDNOT WORK*/
		SENSOR_SESSION_KEY[0]=SESSION_KEY_LOCAL[0];
    121c:	99 81       	ldd	r25, Y+1	; 0x01
    121e:	90 93 10 02 	sts	0x0210, r25
		SENSOR_SESSION_KEY[1]=SESSION_KEY_LOCAL[1];
    1222:	9a 81       	ldd	r25, Y+2	; 0x02
    1224:	90 93 11 02 	sts	0x0211, r25
		/**/
		return 0;
    1228:	09 c0       	rjmp	.+18     	; 0x123c <PROTOCOL_SESSION_KEY+0xb2>
	}
	SENSOR_SESSION_KEY[0]=SESSION_KEY_LOCAL[0];
    122a:	89 81       	ldd	r24, Y+1	; 0x01
    122c:	80 93 10 02 	sts	0x0210, r24
	SENSOR_SESSION_KEY[1]=SESSION_KEY_LOCAL[1];	
    1230:	8a 81       	ldd	r24, Y+2	; 0x02
    1232:	80 93 11 02 	sts	0x0211, r24
	 C_T_BEACON=0;
    1236:	10 92 e4 01 	sts	0x01E4, r1
	
	
	
	return 1;
    123a:	81 e0       	ldi	r24, 0x01	; 1
}
    123c:	0f 90       	pop	r0
    123e:	0f 90       	pop	r0
    1240:	0f 90       	pop	r0
    1242:	0f 90       	pop	r0
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <PROTOCOL_CHANGE_CHANNEL>:

unsigned char PROTOCOL_CHANGE_CHANNEL()
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	00 d0       	rcall	.+0      	; 0x1252 <PROTOCOL_CHANGE_CHANNEL+0x6>
    1252:	00 d0       	rcall	.+0      	; 0x1254 <PROTOCOL_CHANGE_CHANNEL+0x8>
    1254:	cd b7       	in	r28, 0x3d	; 61
    1256:	de b7       	in	r29, 0x3e	; 62
		unsigned char TEMP_LOCAL=CHALLANGE_RESULT_SUCCESS;
    1258:	84 e4       	ldi	r24, 0x44	; 68
    125a:	89 83       	std	Y+1, r24	; 0x01
		unsigned char CHANNEL_LOCAL;
		DECRYPT_ALGORISM_1_V1(&CHANNEL_LOCAL,&DATA_BUFFER[8],1,SENSOR_SESSION_KEY);
    125c:	20 e1       	ldi	r18, 0x10	; 16
    125e:	32 e0       	ldi	r19, 0x02	; 2
    1260:	41 e0       	ldi	r20, 0x01	; 1
    1262:	6f e1       	ldi	r22, 0x1F	; 31
    1264:	72 e0       	ldi	r23, 0x02	; 2
    1266:	ce 01       	movw	r24, r28
    1268:	02 96       	adiw	r24, 0x02	; 2
    126a:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <DECRYPT_ALGORISM_1_V1>
		volatile unsigned char HASH_VALUE[2];
		DATA_BUFFER[0]=11|0B00000000;
    126e:	8b e0       	ldi	r24, 0x0B	; 11
    1270:	80 93 17 02 	sts	0x0217, r24
		DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    1274:	81 e0       	ldi	r24, 0x01	; 1
    1276:	80 93 18 02 	sts	0x0218, r24
		DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    127a:	80 e5       	ldi	r24, 0x50	; 80
    127c:	80 93 19 02 	sts	0x0219, r24
		DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    1280:	80 93 1a 02 	sts	0x021A, r24
		DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    1284:	80 93 1b 02 	sts	0x021B, r24
		DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1288:	80 93 1c 02 	sts	0x021C, r24
		DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    128c:	80 93 1d 02 	sts	0x021D, r24
		DATA_BUFFER[7]=CHANNEL_CHANGED_CODE;
    1290:	8a e0       	ldi	r24, 0x0A	; 10
    1292:	80 93 1e 02 	sts	0x021E, r24
		ENCRYPT_ALGORISM_1_V1(&TEMP_LOCAL,&DATA_BUFFER[8],1,SENSOR_SESSION_KEY);
    1296:	20 e1       	ldi	r18, 0x10	; 16
    1298:	32 e0       	ldi	r19, 0x02	; 2
    129a:	41 e0       	ldi	r20, 0x01	; 1
    129c:	6f e1       	ldi	r22, 0x1F	; 31
    129e:	72 e0       	ldi	r23, 0x02	; 2
    12a0:	ce 01       	movw	r24, r28
    12a2:	01 96       	adiw	r24, 0x01	; 1
    12a4:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <ENCRYPT_ALGORISM_1_V1>
		HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_SESSION_KEY);
    12a8:	20 e1       	ldi	r18, 0x10	; 16
    12aa:	32 e0       	ldi	r19, 0x02	; 2
    12ac:	49 e0       	ldi	r20, 0x09	; 9
    12ae:	be 01       	movw	r22, r28
    12b0:	6d 5f       	subi	r22, 0xFD	; 253
    12b2:	7f 4f       	sbci	r23, 0xFF	; 255
    12b4:	87 e1       	ldi	r24, 0x17	; 23
    12b6:	92 e0       	ldi	r25, 0x02	; 2
    12b8:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <HASH_SESSION_KEY>
		DATA_BUFFER[9]=HASH_VALUE[0];
    12bc:	8b 81       	ldd	r24, Y+3	; 0x03
    12be:	80 93 20 02 	sts	0x0220, r24
		DATA_BUFFER[10]=HASH_VALUE[1];
    12c2:	8c 81       	ldd	r24, Y+4	; 0x04
    12c4:	80 93 21 02 	sts	0x0221, r24
		if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,11))
    12c8:	2b e0       	ldi	r18, 0x0B	; 11
    12ca:	47 e1       	ldi	r20, 0x17	; 23
    12cc:	52 e0       	ldi	r21, 0x02	; 2
    12ce:	65 e0       	ldi	r22, 0x05	; 5
    12d0:	8f ed       	ldi	r24, 0xDF	; 223
    12d2:	91 e0       	ldi	r25, 0x01	; 1
    12d4:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
    12d8:	88 23       	and	r24, r24
    12da:	e1 f0       	breq	.+56     	; 0x1314 <PROTOCOL_CHANGE_CHANNEL+0xc8>
		{
			return 0;
		}
		NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[CHANNEL_LOCAL]);
    12dc:	ea 81       	ldd	r30, Y+2	; 0x02
    12de:	f0 e0       	ldi	r31, 0x00	; 0
    12e0:	e0 5a       	subi	r30, 0xA0	; 160
    12e2:	ff 4f       	sbci	r31, 0xFF	; 255
    12e4:	80 81       	ld	r24, Z
    12e6:	0e 94 08 06 	call	0xc10	; 0xc10 <NRF_UPDATE_USED_CHANNEL>
		 C_T_BEACON=0;
    12ea:	10 92 e4 01 	sts	0x01E4, r1
		
		
			USART_SEND_str("CHANNEL :");
    12ee:	81 e7       	ldi	r24, 0x71	; 113
    12f0:	91 e0       	ldi	r25, 0x01	; 1
    12f2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
				TEST_UART_SEND_VALUE(CHANNEL_LOCAL);
    12f6:	2a 81       	ldd	r18, Y+2	; 0x02
    12f8:	30 e0       	ldi	r19, 0x00	; 0
    12fa:	40 e0       	ldi	r20, 0x00	; 0
    12fc:	50 e0       	ldi	r21, 0x00	; 0
    12fe:	60 e0       	ldi	r22, 0x00	; 0
    1300:	70 e0       	ldi	r23, 0x00	; 0
    1302:	80 e0       	ldi	r24, 0x00	; 0
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TEST_UART_SEND_VALUE>
				USART_SEND_str("\n");
    130a:	8f ed       	ldi	r24, 0xDF	; 223
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
		
		
		
		
		return 1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
}
    1314:	0f 90       	pop	r0
    1316:	0f 90       	pop	r0
    1318:	0f 90       	pop	r0
    131a:	0f 90       	pop	r0
    131c:	df 91       	pop	r29
    131e:	cf 91       	pop	r28
    1320:	08 95       	ret

00001322 <PROTOCOL_CHANGE_DATA>:

unsigned char PROTOCOL_CHANGE_DATA()
{
    1322:	8f 92       	push	r8
    1324:	9f 92       	push	r9
    1326:	af 92       	push	r10
    1328:	bf 92       	push	r11
    132a:	cf 92       	push	r12
    132c:	df 92       	push	r13
    132e:	ef 92       	push	r14
    1330:	ff 92       	push	r15
    1332:	cf 93       	push	r28
    1334:	df 93       	push	r29
    1336:	cd b7       	in	r28, 0x3d	; 61
    1338:	de b7       	in	r29, 0x3e	; 62
    133a:	2a 97       	sbiw	r28, 0x0a	; 10
    133c:	0f b6       	in	r0, 0x3f	; 63
    133e:	f8 94       	cli
    1340:	de bf       	out	0x3e, r29	; 62
    1342:	0f be       	out	0x3f, r0	; 63
    1344:	cd bf       	out	0x3d, r28	; 61
	unsigned char LOCAL_DATA[4];
	DECRYPT_ALGORISM_1_V1(LOCAL_DATA,&DATA_BUFFER[8],4,SENSOR_SESSION_KEY);
    1346:	20 e1       	ldi	r18, 0x10	; 16
    1348:	32 e0       	ldi	r19, 0x02	; 2
    134a:	44 e0       	ldi	r20, 0x04	; 4
    134c:	6f e1       	ldi	r22, 0x1F	; 31
    134e:	72 e0       	ldi	r23, 0x02	; 2
    1350:	ce 01       	movw	r24, r28
    1352:	01 96       	adiw	r24, 0x01	; 1
    1354:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <DECRYPT_ALGORISM_1_V1>
	
	
	
	volatile unsigned char HASH_VALUE[2];
	DATA_BUFFER[0]=10|0B00000000;
    1358:	8a e0       	ldi	r24, 0x0A	; 10
    135a:	80 93 17 02 	sts	0x0217, r24
	DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    135e:	81 e0       	ldi	r24, 0x01	; 1
    1360:	80 93 18 02 	sts	0x0218, r24
	DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    1364:	80 e5       	ldi	r24, 0x50	; 80
    1366:	80 93 19 02 	sts	0x0219, r24
	DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    136a:	80 93 1a 02 	sts	0x021A, r24
	DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    136e:	80 93 1b 02 	sts	0x021B, r24
	DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1372:	80 93 1c 02 	sts	0x021C, r24
	DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    1376:	80 93 1d 02 	sts	0x021D, r24
	DATA_BUFFER[7]=DATA_CHANGED_CODE;
    137a:	81 e1       	ldi	r24, 0x11	; 17
    137c:	80 93 1e 02 	sts	0x021E, r24
	HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,8,SENSOR_SESSION_KEY);
    1380:	20 e1       	ldi	r18, 0x10	; 16
    1382:	32 e0       	ldi	r19, 0x02	; 2
    1384:	48 e0       	ldi	r20, 0x08	; 8
    1386:	be 01       	movw	r22, r28
    1388:	6b 5f       	subi	r22, 0xFB	; 251
    138a:	7f 4f       	sbci	r23, 0xFF	; 255
    138c:	87 e1       	ldi	r24, 0x17	; 23
    138e:	92 e0       	ldi	r25, 0x02	; 2
    1390:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <HASH_SESSION_KEY>
	DATA_BUFFER[8]=HASH_VALUE[0];
    1394:	8d 81       	ldd	r24, Y+5	; 0x05
    1396:	80 93 1f 02 	sts	0x021F, r24
	DATA_BUFFER[9]=HASH_VALUE[1];
    139a:	8e 81       	ldd	r24, Y+6	; 0x06
    139c:	80 93 20 02 	sts	0x0220, r24
	if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,10))
    13a0:	2a e0       	ldi	r18, 0x0A	; 10
    13a2:	47 e1       	ldi	r20, 0x17	; 23
    13a4:	52 e0       	ldi	r21, 0x02	; 2
    13a6:	65 e0       	ldi	r22, 0x05	; 5
    13a8:	8f ed       	ldi	r24, 0xDF	; 223
    13aa:	91 e0       	ldi	r25, 0x01	; 1
    13ac:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
    13b0:	88 23       	and	r24, r24
    13b2:	09 f4       	brne	.+2      	; 0x13b6 <PROTOCOL_CHANGE_DATA+0x94>
    13b4:	4f c0       	rjmp	.+158    	; 0x1454 <PROTOCOL_CHANGE_DATA+0x132>
	{
		return 0;
	}
	global_interupt_disable();
    13b6:	8f b7       	in	r24, 0x3f	; 63
    13b8:	8f 77       	andi	r24, 0x7F	; 127
    13ba:	8f bf       	out	0x3f, r24	; 63
	MAIN_REGISTERS[(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1])]=((LOCAL_DATA[2]<<8)|(LOCAL_DATA[3]));
    13bc:	e9 81       	ldd	r30, Y+1	; 0x01
    13be:	f0 e0       	ldi	r31, 0x00	; 0
    13c0:	fe 2f       	mov	r31, r30
    13c2:	ee 27       	eor	r30, r30
    13c4:	8a 81       	ldd	r24, Y+2	; 0x02
    13c6:	e8 2b       	or	r30, r24
    13c8:	8b 81       	ldd	r24, Y+3	; 0x03
    13ca:	90 e0       	ldi	r25, 0x00	; 0
    13cc:	98 2f       	mov	r25, r24
    13ce:	88 27       	eor	r24, r24
    13d0:	2c 81       	ldd	r18, Y+4	; 0x04
    13d2:	82 2b       	or	r24, r18
    13d4:	ee 0f       	add	r30, r30
    13d6:	ff 1f       	adc	r31, r31
    13d8:	e7 5d       	subi	r30, 0xD7	; 215
    13da:	fd 4f       	sbci	r31, 0xFD	; 253
    13dc:	91 83       	std	Z+1, r25	; 0x01
    13de:	80 83       	st	Z, r24
	global_interupt_enable();
    13e0:	8f b7       	in	r24, 0x3f	; 63
    13e2:	80 68       	ori	r24, 0x80	; 128
    13e4:	8f bf       	out	0x3f, r24	; 63
	 C_T_BEACON=0;
    13e6:	10 92 e4 01 	sts	0x01E4, r1
	 
	 
	 
	 volatile unsigned short ADDRESS=(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1]);
    13ea:	89 81       	ldd	r24, Y+1	; 0x01
    13ec:	90 e0       	ldi	r25, 0x00	; 0
    13ee:	98 2f       	mov	r25, r24
    13f0:	88 27       	eor	r24, r24
    13f2:	2a 81       	ldd	r18, Y+2	; 0x02
    13f4:	82 2b       	or	r24, r18
    13f6:	98 87       	std	Y+8, r25	; 0x08
    13f8:	8f 83       	std	Y+7, r24	; 0x07
	 volatile unsigned short VALUE=((LOCAL_DATA[2]<<8)|(LOCAL_DATA[3]));
    13fa:	8b 81       	ldd	r24, Y+3	; 0x03
    13fc:	90 e0       	ldi	r25, 0x00	; 0
    13fe:	98 2f       	mov	r25, r24
    1400:	88 27       	eor	r24, r24
    1402:	2c 81       	ldd	r18, Y+4	; 0x04
    1404:	82 2b       	or	r24, r18
    1406:	9a 87       	std	Y+10, r25	; 0x0a
    1408:	89 87       	std	Y+9, r24	; 0x09
	 USART_SEND_str("ADDRESS : ");
    140a:	8d e8       	ldi	r24, 0x8D	; 141
    140c:	91 e0       	ldi	r25, 0x01	; 1
    140e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(ADDRESS);
    1412:	8f 80       	ldd	r8, Y+7	; 0x07
    1414:	98 84       	ldd	r9, Y+8	; 0x08
    1416:	28 2d       	mov	r18, r8
    1418:	39 2d       	mov	r19, r9
    141a:	40 e0       	ldi	r20, 0x00	; 0
    141c:	50 e0       	ldi	r21, 0x00	; 0
    141e:	60 e0       	ldi	r22, 0x00	; 0
    1420:	70 e0       	ldi	r23, 0x00	; 0
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TEST_UART_SEND_VALUE>
	 USART_SEND_str("  DATA : ");
    142a:	8b e7       	ldi	r24, 0x7B	; 123
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(VALUE);
    1432:	89 84       	ldd	r8, Y+9	; 0x09
    1434:	9a 84       	ldd	r9, Y+10	; 0x0a
    1436:	28 2d       	mov	r18, r8
    1438:	39 2d       	mov	r19, r9
    143a:	40 e0       	ldi	r20, 0x00	; 0
    143c:	50 e0       	ldi	r21, 0x00	; 0
    143e:	60 e0       	ldi	r22, 0x00	; 0
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	80 e0       	ldi	r24, 0x00	; 0
    1444:	90 e0       	ldi	r25, 0x00	; 0
    1446:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TEST_UART_SEND_VALUE>
	 USART_SEND_str("\n");
    144a:	8f ed       	ldi	r24, 0xDF	; 223
    144c:	90 e0       	ldi	r25, 0x00	; 0
    144e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 
	 
	return 1;
    1452:	81 e0       	ldi	r24, 0x01	; 1
}
    1454:	2a 96       	adiw	r28, 0x0a	; 10
    1456:	0f b6       	in	r0, 0x3f	; 63
    1458:	f8 94       	cli
    145a:	de bf       	out	0x3e, r29	; 62
    145c:	0f be       	out	0x3f, r0	; 63
    145e:	cd bf       	out	0x3d, r28	; 61
    1460:	df 91       	pop	r29
    1462:	cf 91       	pop	r28
    1464:	ff 90       	pop	r15
    1466:	ef 90       	pop	r14
    1468:	df 90       	pop	r13
    146a:	cf 90       	pop	r12
    146c:	bf 90       	pop	r11
    146e:	af 90       	pop	r10
    1470:	9f 90       	pop	r9
    1472:	8f 90       	pop	r8
    1474:	08 95       	ret

00001476 <PROTOCOL_READ_DATA>:

unsigned char PROTOCOL_READ_DATA()
{
    1476:	8f 92       	push	r8
    1478:	9f 92       	push	r9
    147a:	af 92       	push	r10
    147c:	bf 92       	push	r11
    147e:	cf 92       	push	r12
    1480:	df 92       	push	r13
    1482:	ef 92       	push	r14
    1484:	ff 92       	push	r15
    1486:	cf 93       	push	r28
    1488:	df 93       	push	r29
    148a:	cd b7       	in	r28, 0x3d	; 61
    148c:	de b7       	in	r29, 0x3e	; 62
    148e:	2a 97       	sbiw	r28, 0x0a	; 10
    1490:	0f b6       	in	r0, 0x3f	; 63
    1492:	f8 94       	cli
    1494:	de bf       	out	0x3e, r29	; 62
    1496:	0f be       	out	0x3f, r0	; 63
    1498:	cd bf       	out	0x3d, r28	; 61
	unsigned char LOCAL_DATA[4];
	DECRYPT_ALGORISM_1_V1(LOCAL_DATA,&DATA_BUFFER[8],2,SENSOR_SESSION_KEY);
    149a:	20 e1       	ldi	r18, 0x10	; 16
    149c:	32 e0       	ldi	r19, 0x02	; 2
    149e:	42 e0       	ldi	r20, 0x02	; 2
    14a0:	6f e1       	ldi	r22, 0x1F	; 31
    14a2:	72 e0       	ldi	r23, 0x02	; 2
    14a4:	ce 01       	movw	r24, r28
    14a6:	01 96       	adiw	r24, 0x01	; 1
    14a8:	0e 94 0c 0d 	call	0x1a18	; 0x1a18 <DECRYPT_ALGORISM_1_V1>
	global_interupt_disable();
    14ac:	8f b7       	in	r24, 0x3f	; 63
    14ae:	8f 77       	andi	r24, 0x7F	; 127
    14b0:	8f bf       	out	0x3f, r24	; 63
	LOCAL_DATA[2]=MAIN_REGISTERS[(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1])]>>8;
    14b2:	e9 81       	ldd	r30, Y+1	; 0x01
    14b4:	f0 e0       	ldi	r31, 0x00	; 0
    14b6:	fe 2f       	mov	r31, r30
    14b8:	ee 27       	eor	r30, r30
    14ba:	8a 81       	ldd	r24, Y+2	; 0x02
    14bc:	e8 2b       	or	r30, r24
    14be:	ee 0f       	add	r30, r30
    14c0:	ff 1f       	adc	r31, r31
    14c2:	e7 5d       	subi	r30, 0xD7	; 215
    14c4:	fd 4f       	sbci	r31, 0xFD	; 253
    14c6:	80 81       	ld	r24, Z
    14c8:	91 81       	ldd	r25, Z+1	; 0x01
    14ca:	9b 83       	std	Y+3, r25	; 0x03
	LOCAL_DATA[3]=MAIN_REGISTERS[(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1])]&0XFF;
    14cc:	80 81       	ld	r24, Z
    14ce:	91 81       	ldd	r25, Z+1	; 0x01
    14d0:	8c 83       	std	Y+4, r24	; 0x04
	global_interupt_enable();
    14d2:	8f b7       	in	r24, 0x3f	; 63
    14d4:	80 68       	ori	r24, 0x80	; 128
    14d6:	8f bf       	out	0x3f, r24	; 63
	
	/*TESTING*/
	 volatile unsigned short ADDRESS=(LOCAL_DATA[0]<<8)|(LOCAL_DATA[1]);
    14d8:	89 81       	ldd	r24, Y+1	; 0x01
    14da:	90 e0       	ldi	r25, 0x00	; 0
    14dc:	98 2f       	mov	r25, r24
    14de:	88 27       	eor	r24, r24
    14e0:	2a 81       	ldd	r18, Y+2	; 0x02
    14e2:	82 2b       	or	r24, r18
    14e4:	9e 83       	std	Y+6, r25	; 0x06
    14e6:	8d 83       	std	Y+5, r24	; 0x05
	 volatile unsigned short VALUE=((LOCAL_DATA[2]<<8)|(LOCAL_DATA[3]));
    14e8:	8b 81       	ldd	r24, Y+3	; 0x03
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	98 2f       	mov	r25, r24
    14ee:	88 27       	eor	r24, r24
    14f0:	2c 81       	ldd	r18, Y+4	; 0x04
    14f2:	82 2b       	or	r24, r18
    14f4:	98 87       	std	Y+8, r25	; 0x08
    14f6:	8f 83       	std	Y+7, r24	; 0x07
	/************/
	
	
	volatile unsigned char HASH_VALUE[2];
	DATA_BUFFER[0]=12|0B00000000;
    14f8:	8c e0       	ldi	r24, 0x0C	; 12
    14fa:	80 93 17 02 	sts	0x0217, r24
	DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	80 93 18 02 	sts	0x0218, r24
	DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    1504:	80 e5       	ldi	r24, 0x50	; 80
    1506:	80 93 19 02 	sts	0x0219, r24
	DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    150a:	80 93 1a 02 	sts	0x021A, r24
	DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    150e:	80 93 1b 02 	sts	0x021B, r24
	DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1512:	80 93 1c 02 	sts	0x021C, r24
	DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    1516:	80 93 1d 02 	sts	0x021D, r24
	DATA_BUFFER[7]=DATA_READ_CODE;
    151a:	83 e1       	ldi	r24, 0x13	; 19
    151c:	80 93 1e 02 	sts	0x021E, r24
	/*ENCR FUNCTION PUTS 8 , 9*/
	ENCRYPT_ALGORISM_1_V1(&LOCAL_DATA[2],&DATA_BUFFER[8],2,SENSOR_SESSION_KEY);
    1520:	20 e1       	ldi	r18, 0x10	; 16
    1522:	32 e0       	ldi	r19, 0x02	; 2
    1524:	42 e0       	ldi	r20, 0x02	; 2
    1526:	6f e1       	ldi	r22, 0x1F	; 31
    1528:	72 e0       	ldi	r23, 0x02	; 2
    152a:	ce 01       	movw	r24, r28
    152c:	03 96       	adiw	r24, 0x03	; 3
    152e:	0e 94 ee 0c 	call	0x19dc	; 0x19dc <ENCRYPT_ALGORISM_1_V1>
	
	HASH_SESSION_KEY(DATA_BUFFER,HASH_VALUE,10,SENSOR_SESSION_KEY);
    1532:	20 e1       	ldi	r18, 0x10	; 16
    1534:	32 e0       	ldi	r19, 0x02	; 2
    1536:	4a e0       	ldi	r20, 0x0A	; 10
    1538:	be 01       	movw	r22, r28
    153a:	67 5f       	subi	r22, 0xF7	; 247
    153c:	7f 4f       	sbci	r23, 0xFF	; 255
    153e:	87 e1       	ldi	r24, 0x17	; 23
    1540:	92 e0       	ldi	r25, 0x02	; 2
    1542:	0e 94 60 0d 	call	0x1ac0	; 0x1ac0 <HASH_SESSION_KEY>
	DATA_BUFFER[10]=HASH_VALUE[0];
    1546:	89 85       	ldd	r24, Y+9	; 0x09
    1548:	80 93 21 02 	sts	0x0221, r24
	DATA_BUFFER[11]=HASH_VALUE[1];
    154c:	8a 85       	ldd	r24, Y+10	; 0x0a
    154e:	80 93 22 02 	sts	0x0222, r24
	if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS,5,DATA_BUFFER,12))
    1552:	2c e0       	ldi	r18, 0x0C	; 12
    1554:	47 e1       	ldi	r20, 0x17	; 23
    1556:	52 e0       	ldi	r21, 0x02	; 2
    1558:	65 e0       	ldi	r22, 0x05	; 5
    155a:	8f ed       	ldi	r24, 0xDF	; 223
    155c:	91 e0       	ldi	r25, 0x01	; 1
    155e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
    1562:	88 23       	and	r24, r24
    1564:	39 f1       	breq	.+78     	; 0x15b4 <PROTOCOL_READ_DATA+0x13e>
	{
		return 0;
	}
	 C_T_BEACON=0;
    1566:	10 92 e4 01 	sts	0x01E4, r1
	 
	/*************************/
	 USART_SEND_str("READING ADDRESS : ");
    156a:	85 e8       	ldi	r24, 0x85	; 133
    156c:	91 e0       	ldi	r25, 0x01	; 1
    156e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(ADDRESS);
    1572:	8d 80       	ldd	r8, Y+5	; 0x05
    1574:	9e 80       	ldd	r9, Y+6	; 0x06
    1576:	28 2d       	mov	r18, r8
    1578:	39 2d       	mov	r19, r9
    157a:	40 e0       	ldi	r20, 0x00	; 0
    157c:	50 e0       	ldi	r21, 0x00	; 0
    157e:	60 e0       	ldi	r22, 0x00	; 0
    1580:	70 e0       	ldi	r23, 0x00	; 0
    1582:	80 e0       	ldi	r24, 0x00	; 0
    1584:	90 e0       	ldi	r25, 0x00	; 0
    1586:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TEST_UART_SEND_VALUE>
	 USART_SEND_str("  DATA : ");
    158a:	8b e7       	ldi	r24, 0x7B	; 123
    158c:	91 e0       	ldi	r25, 0x01	; 1
    158e:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 TEST_UART_SEND_VALUE(VALUE);
    1592:	8f 80       	ldd	r8, Y+7	; 0x07
    1594:	98 84       	ldd	r9, Y+8	; 0x08
    1596:	28 2d       	mov	r18, r8
    1598:	39 2d       	mov	r19, r9
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	60 e0       	ldi	r22, 0x00	; 0
    15a0:	70 e0       	ldi	r23, 0x00	; 0
    15a2:	80 e0       	ldi	r24, 0x00	; 0
    15a4:	90 e0       	ldi	r25, 0x00	; 0
    15a6:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TEST_UART_SEND_VALUE>
	 USART_SEND_str("\n");
    15aa:	8f ed       	ldi	r24, 0xDF	; 223
    15ac:	90 e0       	ldi	r25, 0x00	; 0
    15ae:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 /************************/
	return 1;
    15b2:	81 e0       	ldi	r24, 0x01	; 1
}
    15b4:	2a 96       	adiw	r28, 0x0a	; 10
    15b6:	0f b6       	in	r0, 0x3f	; 63
    15b8:	f8 94       	cli
    15ba:	de bf       	out	0x3e, r29	; 62
    15bc:	0f be       	out	0x3f, r0	; 63
    15be:	cd bf       	out	0x3d, r28	; 61
    15c0:	df 91       	pop	r29
    15c2:	cf 91       	pop	r28
    15c4:	ff 90       	pop	r15
    15c6:	ef 90       	pop	r14
    15c8:	df 90       	pop	r13
    15ca:	cf 90       	pop	r12
    15cc:	bf 90       	pop	r11
    15ce:	af 90       	pop	r10
    15d0:	9f 90       	pop	r9
    15d2:	8f 90       	pop	r8
    15d4:	08 95       	ret

000015d6 <PROTOCOL_CONNECT>:
volatile unsigned char MASTER_ADDRESS_BUFFER[5];
unsigned char PROTOCOL_CONNECT()
{
    15d6:	cf 92       	push	r12
    15d8:	df 92       	push	r13
    15da:	ef 92       	push	r14
    15dc:	ff 92       	push	r15
    15de:	0f 93       	push	r16
    15e0:	1f 93       	push	r17
    15e2:	cf 93       	push	r28
    15e4:	df 93       	push	r29
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	27 97       	sbiw	r28, 0x07	; 7
    15ec:	0f b6       	in	r0, 0x3f	; 63
    15ee:	f8 94       	cli
    15f0:	de bf       	out	0x3e, r29	; 62
    15f2:	0f be       	out	0x3f, r0	; 63
    15f4:	cd bf       	out	0x3d, r28	; 61
	
	volatile unsigned short R_N=GENNERATE_RANDOM_NUMBER();
    15f6:	0e 94 82 0e 	call	0x1d04	; 0x1d04 <GENNERATE_RANDOM_NUMBER>
    15fa:	9a 83       	std	Y+2, r25	; 0x02
    15fc:	89 83       	std	Y+1, r24	; 0x01
	volatile unsigned char HASH_VALUE[2];
	unsigned long COUNT_TIMER=0;
	USART_SEND_str("connect request\n");
    15fe:	88 e9       	ldi	r24, 0x98	; 152
    1600:	91 e0       	ldi	r25, 0x01	; 1
    1602:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 MASTER_ADDRESS_BUFFER[0]=DATA_BUFFER[2];
    1606:	49 e1       	ldi	r20, 0x19	; 25
    1608:	52 e0       	ldi	r21, 0x02	; 2
    160a:	fa 01       	movw	r30, r20
    160c:	80 81       	ld	r24, Z
    160e:	80 93 12 02 	sts	0x0212, r24
	 MASTER_ADDRESS_BUFFER[1]=DATA_BUFFER[3];
    1612:	2a e1       	ldi	r18, 0x1A	; 26
    1614:	32 e0       	ldi	r19, 0x02	; 2
    1616:	f9 01       	movw	r30, r18
    1618:	80 81       	ld	r24, Z
    161a:	80 93 13 02 	sts	0x0213, r24
	 MASTER_ADDRESS_BUFFER[2]=DATA_BUFFER[4];
    161e:	8b e1       	ldi	r24, 0x1B	; 27
    1620:	92 e0       	ldi	r25, 0x02	; 2
    1622:	fc 01       	movw	r30, r24
    1624:	60 81       	ld	r22, Z
    1626:	60 93 14 02 	sts	0x0214, r22
	 MASTER_ADDRESS_BUFFER[3]=DATA_BUFFER[5];
    162a:	ac e1       	ldi	r26, 0x1C	; 28
    162c:	b2 e0       	ldi	r27, 0x02	; 2
    162e:	6c 91       	ld	r22, X
    1630:	60 93 15 02 	sts	0x0215, r22
	 MASTER_ADDRESS_BUFFER[4]=DATA_BUFFER[6];
    1634:	0d e1       	ldi	r16, 0x1D	; 29
    1636:	12 e0       	ldi	r17, 0x02	; 2
    1638:	f8 01       	movw	r30, r16
    163a:	60 81       	ld	r22, Z
    163c:	60 93 16 02 	sts	0x0216, r22
	 
	 
	 /*****************SEND CHALLANGE******************/
	 DATA_BUFFER[0]=12|0B10000000;
    1640:	6c e8       	ldi	r22, 0x8C	; 140
    1642:	60 93 17 02 	sts	0x0217, r22
	 DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    1646:	61 e0       	ldi	r22, 0x01	; 1
    1648:	60 93 18 02 	sts	0x0218, r22
	 DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    164c:	60 e5       	ldi	r22, 0x50	; 80
    164e:	fa 01       	movw	r30, r20
    1650:	60 83       	st	Z, r22
	 DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    1652:	f9 01       	movw	r30, r18
    1654:	60 83       	st	Z, r22
	 DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    1656:	fc 01       	movw	r30, r24
    1658:	60 83       	st	Z, r22
	 DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    165a:	6c 93       	st	X, r22
	 DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    165c:	f8 01       	movw	r30, r16
    165e:	60 83       	st	Z, r22
	 DATA_BUFFER[7]=SENSOR_CHALLENGE_CODE;
    1660:	82 e0       	ldi	r24, 0x02	; 2
    1662:	80 93 1e 02 	sts	0x021E, r24
	 DATA_BUFFER[8]=R_N>>8;
    1666:	89 81       	ldd	r24, Y+1	; 0x01
    1668:	9a 81       	ldd	r25, Y+2	; 0x02
    166a:	90 93 1f 02 	sts	0x021F, r25
	 DATA_BUFFER[9]=R_N; 
    166e:	89 81       	ldd	r24, Y+1	; 0x01
    1670:	9a 81       	ldd	r25, Y+2	; 0x02
    1672:	80 93 20 02 	sts	0x0220, r24
	 HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,10,SENSOR_PASSWORD);
    1676:	28 e6       	ldi	r18, 0x68	; 104
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	4a e0       	ldi	r20, 0x0A	; 10
    167c:	be 01       	movw	r22, r28
    167e:	6d 5f       	subi	r22, 0xFD	; 253
    1680:	7f 4f       	sbci	r23, 0xFF	; 255
    1682:	87 e1       	ldi	r24, 0x17	; 23
    1684:	92 e0       	ldi	r25, 0x02	; 2
    1686:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <HASH_PASWORD_KEY>
	 DATA_BUFFER[10]=HASH_VALUE[0];
    168a:	8b 81       	ldd	r24, Y+3	; 0x03
    168c:	80 93 21 02 	sts	0x0221, r24
	 DATA_BUFFER[11]=HASH_VALUE[1];
    1690:	8c 81       	ldd	r24, Y+4	; 0x04
    1692:	80 93 22 02 	sts	0x0222, r24
    1696:	8f e1       	ldi	r24, 0x1F	; 31
    1698:	9e e4       	ldi	r25, 0x4E	; 78
    169a:	01 97       	sbiw	r24, 0x01	; 1
    169c:	f1 f7       	brne	.-4      	; 0x169a <PROTOCOL_CONNECT+0xc4>
    169e:	00 c0       	rjmp	.+0      	; 0x16a0 <PROTOCOL_CONNECT+0xca>
    16a0:	00 00       	nop
	 _delay_ms(5);
	 

	 if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS_BUFFER,5,DATA_BUFFER,12))
    16a2:	2c e0       	ldi	r18, 0x0C	; 12
    16a4:	47 e1       	ldi	r20, 0x17	; 23
    16a6:	52 e0       	ldi	r21, 0x02	; 2
    16a8:	65 e0       	ldi	r22, 0x05	; 5
    16aa:	82 e1       	ldi	r24, 0x12	; 18
    16ac:	92 e0       	ldi	r25, 0x02	; 2
    16ae:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
    16b2:	18 2f       	mov	r17, r24
    16b4:	88 23       	and	r24, r24
    16b6:	09 f4       	brne	.+2      	; 0x16ba <PROTOCOL_CONNECT+0xe4>
    16b8:	fb c0       	rjmp	.+502    	; 0x18b0 <PROTOCOL_CONNECT+0x2da>
	 {
		 return 0;
	 }
	  USART_SEND_str("X\n");
    16ba:	89 ea       	ldi	r24, 0xA9	; 169
    16bc:	91 e0       	ldi	r25, 0x01	; 1
    16be:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 /****************************************************/
	 NRF_START_RX_MODE();
    16c2:	0e 94 04 07 	call	0xe08	; 0xe08 <NRF_START_RX_MODE>
	 
	 COUNT_TIMER=0;
	 while(!NRF_CHECK_RX_PL(DATA_BUFFER,&LENGTH))
    16c6:	0f 2e       	mov	r0, r31
    16c8:	cc 24       	eor	r12, r12
    16ca:	ca 94       	dec	r12
    16cc:	dc 2c       	mov	r13, r12
    16ce:	ff e0       	ldi	r31, 0x0F	; 15
    16d0:	ef 2e       	mov	r14, r31
    16d2:	f1 2c       	mov	r15, r1
    16d4:	f0 2d       	mov	r31, r0
    16d6:	11 c0       	rjmp	.+34     	; 0x16fa <PROTOCOL_CONNECT+0x124>
    16d8:	91 e0       	ldi	r25, 0x01	; 1
    16da:	c9 1a       	sub	r12, r25
    16dc:	d1 08       	sbc	r13, r1
    16de:	e1 08       	sbc	r14, r1
    16e0:	f1 08       	sbc	r15, r1
	 {
		 COUNT_TIMER++;
		 if(COUNT_TIMER==MAX_COUNT_WAIT)
    16e2:	c1 14       	cp	r12, r1
    16e4:	d1 04       	cpc	r13, r1
    16e6:	e1 04       	cpc	r14, r1
    16e8:	f1 04       	cpc	r15, r1
    16ea:	39 f4       	brne	.+14     	; 0x16fa <PROTOCOL_CONNECT+0x124>
		 {
			USART_SEND_str("XS\n");
    16ec:	8c ea       	ldi	r24, 0xAC	; 172
    16ee:	91 e0       	ldi	r25, 0x01	; 1
    16f0:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
			 NRF_STOP_RX_MODE();
    16f4:	0e 94 15 07 	call	0xe2a	; 0xe2a <NRF_STOP_RX_MODE>
			 return 0;
    16f8:	db c0       	rjmp	.+438    	; 0x18b0 <PROTOCOL_CONNECT+0x2da>
	  USART_SEND_str("X\n");
	 /****************************************************/
	 NRF_START_RX_MODE();
	 
	 COUNT_TIMER=0;
	 while(!NRF_CHECK_RX_PL(DATA_BUFFER,&LENGTH))
    16fa:	6d ed       	ldi	r22, 0xDD	; 221
    16fc:	71 e0       	ldi	r23, 0x01	; 1
    16fe:	87 e1       	ldi	r24, 0x17	; 23
    1700:	92 e0       	ldi	r25, 0x02	; 2
    1702:	0e 94 23 07 	call	0xe46	; 0xe46 <NRF_CHECK_RX_PL>
    1706:	18 2f       	mov	r17, r24
    1708:	88 23       	and	r24, r24
    170a:	31 f3       	breq	.-52     	; 0x16d8 <PROTOCOL_CONNECT+0x102>
			USART_SEND_str("XS\n");
			 NRF_STOP_RX_MODE();
			 return 0;
		 }
	 }
	 USART_SEND_str("H\n");
    170c:	80 eb       	ldi	r24, 0xB0	; 176
    170e:	91 e0       	ldi	r25, 0x01	; 1
    1710:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	 NRF_STOP_RX_MODE();
    1714:	0e 94 15 07 	call	0xe2a	; 0xe2a <NRF_STOP_RX_MODE>
	 if (!PROTOCOL_CHECK_RECIVED_PACKET(DATA_BUFFER,1,MASTER_ADDRESS_BUFFER,LENGTH))
    1718:	20 91 dd 01 	lds	r18, 0x01DD
    171c:	42 e1       	ldi	r20, 0x12	; 18
    171e:	52 e0       	ldi	r21, 0x02	; 2
    1720:	61 e0       	ldi	r22, 0x01	; 1
    1722:	87 e1       	ldi	r24, 0x17	; 23
    1724:	92 e0       	ldi	r25, 0x02	; 2
    1726:	0e 94 27 08 	call	0x104e	; 0x104e <PROTOCOL_CHECK_RECIVED_PACKET>
    172a:	18 2f       	mov	r17, r24
    172c:	88 23       	and	r24, r24
    172e:	09 f4       	brne	.+2      	; 0x1732 <PROTOCOL_CONNECT+0x15c>
    1730:	bf c0       	rjmp	.+382    	; 0x18b0 <PROTOCOL_CONNECT+0x2da>
	 {
		 return 0;
	 }
	 if(PROTOCOL_READ_PACKET_TYPE()!=CHALLENGE_ANSWER_CODE)
    1732:	80 91 1e 02 	lds	r24, 0x021E
    1736:	83 30       	cpi	r24, 0x03	; 3
    1738:	09 f0       	breq	.+2      	; 0x173c <PROTOCOL_CONNECT+0x166>
    173a:	b9 c0       	rjmp	.+370    	; 0x18ae <PROTOCOL_CONNECT+0x2d8>
	 {
		 return 0;
	 }
	 volatile unsigned char RECIVED_R_N[2];
	 DECRYPT_ALGORISM_2_V1(RECIVED_R_N,&DATA_BUFFER[8],2,SENSOR_PASSWORD);
    173c:	28 e6       	ldi	r18, 0x68	; 104
    173e:	30 e0       	ldi	r19, 0x00	; 0
    1740:	42 e0       	ldi	r20, 0x02	; 2
    1742:	6f e1       	ldi	r22, 0x1F	; 31
    1744:	72 e0       	ldi	r23, 0x02	; 2
    1746:	ce 01       	movw	r24, r28
    1748:	05 96       	adiw	r24, 0x05	; 5
    174a:	0e 94 45 0d 	call	0x1a8a	; 0x1a8a <DECRYPT_ALGORISM_2_V1>
	 unsigned char TEMP_1;
	 if ((RECIVED_R_N[0]!=(R_N>>8))||(RECIVED_R_N[1]!=(R_N&0xff)))
    174e:	2d 81       	ldd	r18, Y+5	; 0x05
    1750:	89 81       	ldd	r24, Y+1	; 0x01
    1752:	9a 81       	ldd	r25, Y+2	; 0x02
    1754:	30 e0       	ldi	r19, 0x00	; 0
    1756:	89 2f       	mov	r24, r25
    1758:	99 27       	eor	r25, r25
    175a:	28 17       	cp	r18, r24
    175c:	39 07       	cpc	r19, r25
    175e:	49 f4       	brne	.+18     	; 0x1772 <PROTOCOL_CONNECT+0x19c>
    1760:	2e 81       	ldd	r18, Y+6	; 0x06
    1762:	89 81       	ldd	r24, Y+1	; 0x01
    1764:	9a 81       	ldd	r25, Y+2	; 0x02
    1766:	30 e0       	ldi	r19, 0x00	; 0
    1768:	99 27       	eor	r25, r25
    176a:	28 17       	cp	r18, r24
    176c:	39 07       	cpc	r19, r25
    176e:	09 f4       	brne	.+2      	; 0x1772 <PROTOCOL_CONNECT+0x19c>
    1770:	43 c0       	rjmp	.+134    	; 0x17f8 <PROTOCOL_CONNECT+0x222>
	 {
		  USART_SEND_str("FAIL\n");
    1772:	83 eb       	ldi	r24, 0xB3	; 179
    1774:	91 e0       	ldi	r25, 0x01	; 1
    1776:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
		 /*FAILED*/
		  TEMP_1=CHALLANGE_RESULT_FAILED;
    177a:	85 e5       	ldi	r24, 0x55	; 85
    177c:	8f 83       	std	Y+7, r24	; 0x07
		  DATA_BUFFER[0]=11|0B10000000;
    177e:	8b e8       	ldi	r24, 0x8B	; 139
    1780:	80 93 17 02 	sts	0x0217, r24
		  DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    1784:	81 e0       	ldi	r24, 0x01	; 1
    1786:	80 93 18 02 	sts	0x0218, r24
		  DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    178a:	80 e5       	ldi	r24, 0x50	; 80
    178c:	80 93 19 02 	sts	0x0219, r24
		  DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    1790:	80 93 1a 02 	sts	0x021A, r24
		  DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    1794:	80 93 1b 02 	sts	0x021B, r24
		  DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1798:	80 93 1c 02 	sts	0x021C, r24
		  DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    179c:	80 93 1d 02 	sts	0x021D, r24
		  DATA_BUFFER[7]=CHALLENGE_RESULT_CODE;
    17a0:	84 e0       	ldi	r24, 0x04	; 4
    17a2:	80 93 1e 02 	sts	0x021E, r24
		  ENCRYPT_ALGORISM_2_V1(&TEMP_1,&DATA_BUFFER[8],1,SENSOR_PASSWORD);
    17a6:	28 e6       	ldi	r18, 0x68	; 104
    17a8:	30 e0       	ldi	r19, 0x00	; 0
    17aa:	41 e0       	ldi	r20, 0x01	; 1
    17ac:	6f e1       	ldi	r22, 0x1F	; 31
    17ae:	72 e0       	ldi	r23, 0x02	; 2
    17b0:	ce 01       	movw	r24, r28
    17b2:	07 96       	adiw	r24, 0x07	; 7
    17b4:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <ENCRYPT_ALGORISM_2_V1>
		  HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_PASSWORD);
    17b8:	28 e6       	ldi	r18, 0x68	; 104
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	49 e0       	ldi	r20, 0x09	; 9
    17be:	be 01       	movw	r22, r28
    17c0:	6d 5f       	subi	r22, 0xFD	; 253
    17c2:	7f 4f       	sbci	r23, 0xFF	; 255
    17c4:	87 e1       	ldi	r24, 0x17	; 23
    17c6:	92 e0       	ldi	r25, 0x02	; 2
    17c8:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <HASH_PASWORD_KEY>
		  DATA_BUFFER[9]=HASH_VALUE[0];
    17cc:	8b 81       	ldd	r24, Y+3	; 0x03
    17ce:	80 93 20 02 	sts	0x0220, r24
		  DATA_BUFFER[10]=HASH_VALUE[1];
    17d2:	8c 81       	ldd	r24, Y+4	; 0x04
    17d4:	80 93 21 02 	sts	0x0221, r24
    17d8:	ef e3       	ldi	r30, 0x3F	; 63
    17da:	ff e1       	ldi	r31, 0x1F	; 31
    17dc:	31 97       	sbiw	r30, 0x01	; 1
    17de:	f1 f7       	brne	.-4      	; 0x17dc <PROTOCOL_CONNECT+0x206>
    17e0:	00 c0       	rjmp	.+0      	; 0x17e2 <PROTOCOL_CONNECT+0x20c>
    17e2:	00 00       	nop
		  _delay_ms(2);
		  NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS_BUFFER,5,DATA_BUFFER,11);
    17e4:	2b e0       	ldi	r18, 0x0B	; 11
    17e6:	47 e1       	ldi	r20, 0x17	; 23
    17e8:	52 e0       	ldi	r21, 0x02	; 2
    17ea:	65 e0       	ldi	r22, 0x05	; 5
    17ec:	82 e1       	ldi	r24, 0x12	; 18
    17ee:	92 e0       	ldi	r25, 0x02	; 2
    17f0:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
		  return 0; 
    17f4:	10 e0       	ldi	r17, 0x00	; 0
    17f6:	5c c0       	rjmp	.+184    	; 0x18b0 <PROTOCOL_CONNECT+0x2da>
	 }
	 
	
	 /***********************************************************************************/
	  TEMP_1=CHALLANGE_RESULT_SUCCESS;
    17f8:	84 e4       	ldi	r24, 0x44	; 68
    17fa:	8f 83       	std	Y+7, r24	; 0x07
	  DATA_BUFFER[0]=11|0B10000000;
    17fc:	8b e8       	ldi	r24, 0x8B	; 139
    17fe:	80 93 17 02 	sts	0x0217, r24
	  DATA_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
    1802:	81 e0       	ldi	r24, 0x01	; 1
    1804:	80 93 18 02 	sts	0x0218, r24
	  DATA_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_0;
    1808:	80 e5       	ldi	r24, 0x50	; 80
    180a:	80 93 19 02 	sts	0x0219, r24
	  DATA_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_1;
    180e:	80 93 1a 02 	sts	0x021A, r24
	  DATA_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_2;
    1812:	80 93 1b 02 	sts	0x021B, r24
	  DATA_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_3;
    1816:	80 93 1c 02 	sts	0x021C, r24
	  DATA_BUFFER[6]=MY_PROTOCOL_ADDRESS_ARRAY_4;
    181a:	80 93 1d 02 	sts	0x021D, r24
	  DATA_BUFFER[7]=CHALLENGE_RESULT_CODE;
    181e:	84 e0       	ldi	r24, 0x04	; 4
    1820:	80 93 1e 02 	sts	0x021E, r24
	  ENCRYPT_ALGORISM_2_V1(&TEMP_1,&DATA_BUFFER[8],1,SENSOR_PASSWORD);
    1824:	28 e6       	ldi	r18, 0x68	; 104
    1826:	30 e0       	ldi	r19, 0x00	; 0
    1828:	41 e0       	ldi	r20, 0x01	; 1
    182a:	6f e1       	ldi	r22, 0x1F	; 31
    182c:	72 e0       	ldi	r23, 0x02	; 2
    182e:	ce 01       	movw	r24, r28
    1830:	07 96       	adiw	r24, 0x07	; 7
    1832:	0e 94 2a 0d 	call	0x1a54	; 0x1a54 <ENCRYPT_ALGORISM_2_V1>
	  HASH_PASWORD_KEY(DATA_BUFFER,HASH_VALUE,9,SENSOR_PASSWORD);
    1836:	28 e6       	ldi	r18, 0x68	; 104
    1838:	30 e0       	ldi	r19, 0x00	; 0
    183a:	49 e0       	ldi	r20, 0x09	; 9
    183c:	be 01       	movw	r22, r28
    183e:	6d 5f       	subi	r22, 0xFD	; 253
    1840:	7f 4f       	sbci	r23, 0xFF	; 255
    1842:	87 e1       	ldi	r24, 0x17	; 23
    1844:	92 e0       	ldi	r25, 0x02	; 2
    1846:	0e 94 ef 0d 	call	0x1bde	; 0x1bde <HASH_PASWORD_KEY>
	  DATA_BUFFER[9]=HASH_VALUE[0];
    184a:	8b 81       	ldd	r24, Y+3	; 0x03
    184c:	80 93 20 02 	sts	0x0220, r24
	  DATA_BUFFER[10]=HASH_VALUE[1];
    1850:	8c 81       	ldd	r24, Y+4	; 0x04
    1852:	80 93 21 02 	sts	0x0221, r24
    1856:	8f e3       	ldi	r24, 0x3F	; 63
    1858:	9f e1       	ldi	r25, 0x1F	; 31
    185a:	01 97       	sbiw	r24, 0x01	; 1
    185c:	f1 f7       	brne	.-4      	; 0x185a <PROTOCOL_CONNECT+0x284>
    185e:	00 c0       	rjmp	.+0      	; 0x1860 <PROTOCOL_CONNECT+0x28a>
    1860:	00 00       	nop
	  _delay_ms(2);
	  if (!NRF_SEND_DATA_WITH_ACK(MASTER_ADDRESS_BUFFER,5,DATA_BUFFER,11))
    1862:	2b e0       	ldi	r18, 0x0B	; 11
    1864:	47 e1       	ldi	r20, 0x17	; 23
    1866:	52 e0       	ldi	r21, 0x02	; 2
    1868:	65 e0       	ldi	r22, 0x05	; 5
    186a:	82 e1       	ldi	r24, 0x12	; 18
    186c:	92 e0       	ldi	r25, 0x02	; 2
    186e:	0e 94 ae 06 	call	0xd5c	; 0xd5c <NRF_SEND_DATA_WITH_ACK>
    1872:	18 2f       	mov	r17, r24
    1874:	88 23       	and	r24, r24
    1876:	e1 f0       	breq	.+56     	; 0x18b0 <PROTOCOL_CONNECT+0x2da>
	  {
		  return 0;
	  }
	     
	/*CONNECTED*/	
	MASTER_ADDRESS[0]=MASTER_ADDRESS_BUFFER[0];
    1878:	80 91 12 02 	lds	r24, 0x0212
    187c:	80 93 df 01 	sts	0x01DF, r24
	MASTER_ADDRESS[1]=MASTER_ADDRESS_BUFFER[1];
    1880:	80 91 13 02 	lds	r24, 0x0213
    1884:	80 93 e0 01 	sts	0x01E0, r24
	MASTER_ADDRESS[2]=MASTER_ADDRESS_BUFFER[2];
    1888:	80 91 14 02 	lds	r24, 0x0214
    188c:	80 93 e1 01 	sts	0x01E1, r24
	MASTER_ADDRESS[3]=MASTER_ADDRESS_BUFFER[3];
    1890:	80 91 15 02 	lds	r24, 0x0215
    1894:	80 93 e2 01 	sts	0x01E2, r24
	MASTER_ADDRESS[4]=MASTER_ADDRESS_BUFFER[4];
    1898:	80 91 16 02 	lds	r24, 0x0216
    189c:	80 93 e3 01 	sts	0x01E3, r24
	F_SENSOR_STATE=CONNECTED_STATE; 
    18a0:	81 e0       	ldi	r24, 0x01	; 1
    18a2:	80 93 de 01 	sts	0x01DE, r24
	C_T_BEACON=0;
    18a6:	10 92 e4 01 	sts	0x01E4, r1
	
				
	return 1;
    18aa:	11 e0       	ldi	r17, 0x01	; 1
    18ac:	01 c0       	rjmp	.+2      	; 0x18b0 <PROTOCOL_CONNECT+0x2da>
	 {
		 return 0;
	 }
	 if(PROTOCOL_READ_PACKET_TYPE()!=CHALLENGE_ANSWER_CODE)
	 {
		 return 0;
    18ae:	10 e0       	ldi	r17, 0x00	; 0
	C_T_BEACON=0;
	
				
	return 1;
	 
}
    18b0:	81 2f       	mov	r24, r17
    18b2:	27 96       	adiw	r28, 0x07	; 7
    18b4:	0f b6       	in	r0, 0x3f	; 63
    18b6:	f8 94       	cli
    18b8:	de bf       	out	0x3e, r29	; 62
    18ba:	0f be       	out	0x3f, r0	; 63
    18bc:	cd bf       	out	0x3d, r28	; 61
    18be:	df 91       	pop	r29
    18c0:	cf 91       	pop	r28
    18c2:	1f 91       	pop	r17
    18c4:	0f 91       	pop	r16
    18c6:	ff 90       	pop	r15
    18c8:	ef 90       	pop	r14
    18ca:	df 90       	pop	r13
    18cc:	cf 90       	pop	r12
    18ce:	08 95       	ret

000018d0 <PROTOCOL_SWITCH>:




void PROTOCOL_SWITCH()
{
    18d0:	8f 92       	push	r8
    18d2:	9f 92       	push	r9
    18d4:	af 92       	push	r10
    18d6:	bf 92       	push	r11
    18d8:	cf 92       	push	r12
    18da:	df 92       	push	r13
    18dc:	ef 92       	push	r14
    18de:	ff 92       	push	r15
    18e0:	cf 93       	push	r28
    18e2:	df 93       	push	r29
    18e4:	00 d0       	rcall	.+0      	; 0x18e6 <PROTOCOL_SWITCH+0x16>
    18e6:	cd b7       	in	r28, 0x3d	; 61
    18e8:	de b7       	in	r29, 0x3e	; 62
		if (F_SENSOR_STATE==NOTCONNECTED_STATE)
    18ea:	80 91 de 01 	lds	r24, 0x01DE
    18ee:	81 11       	cpse	r24, r1
    18f0:	10 c0       	rjmp	.+32     	; 0x1912 <PROTOCOL_SWITCH+0x42>
		{
			if (PROTOCOL_READ_PACKET_TYPE()==MASTER_REQUEST_CONNECT_CODE) /*master want to connect*/
    18f2:	80 91 1e 02 	lds	r24, 0x021E
    18f6:	81 30       	cpi	r24, 0x01	; 1
    18f8:	09 f0       	breq	.+2      	; 0x18fc <PROTOCOL_SWITCH+0x2c>
    18fa:	63 c0       	rjmp	.+198    	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
			{
				if (PROTOCOL_CONNECT())
    18fc:	0e 94 eb 0a 	call	0x15d6	; 0x15d6 <PROTOCOL_CONNECT>
    1900:	88 23       	and	r24, r24
    1902:	09 f4       	brne	.+2      	; 0x1906 <PROTOCOL_SWITCH+0x36>
    1904:	5e c0       	rjmp	.+188    	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
				{
					USART_SEND_str("CONNECTED\n");
    1906:	8f ec       	ldi	r24, 0xCF	; 207
    1908:	91 e0       	ldi	r25, 0x01	; 1
    190a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
					setbit(*PORT_OUT_CONNECTED_LED,CONNECTED_LED_PIN);
    190e:	96 9a       	sbi	0x12, 6	; 18
    1910:	58 c0       	rjmp	.+176    	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
				}
			}
		}
		else
		{
			switch (PROTOCOL_READ_PACKET_TYPE())
    1912:	80 91 1e 02 	lds	r24, 0x021E
    1916:	89 30       	cpi	r24, 0x09	; 9
    1918:	09 f4       	brne	.+2      	; 0x191c <PROTOCOL_SWITCH+0x4c>
    191a:	41 c0       	rjmp	.+130    	; 0x199e <PROTOCOL_SWITCH+0xce>
    191c:	28 f4       	brcc	.+10     	; 0x1928 <PROTOCOL_SWITCH+0x58>
    191e:	85 30       	cpi	r24, 0x05	; 5
    1920:	51 f0       	breq	.+20     	; 0x1936 <PROTOCOL_SWITCH+0x66>
    1922:	87 30       	cpi	r24, 0x07	; 7
    1924:	a9 f0       	breq	.+42     	; 0x1950 <PROTOCOL_SWITCH+0x80>
    1926:	4d c0       	rjmp	.+154    	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
    1928:	80 31       	cpi	r24, 0x10	; 16
    192a:	09 f4       	brne	.+2      	; 0x192e <PROTOCOL_SWITCH+0x5e>
    192c:	45 c0       	rjmp	.+138    	; 0x19b8 <PROTOCOL_SWITCH+0xe8>
    192e:	82 31       	cpi	r24, 0x12	; 18
    1930:	09 f4       	brne	.+2      	; 0x1934 <PROTOCOL_SWITCH+0x64>
    1932:	45 c0       	rjmp	.+138    	; 0x19be <PROTOCOL_SWITCH+0xee>
    1934:	46 c0       	rjmp	.+140    	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
			{
				case BEACON_CODE:USART_SEND_str("T B\n");
    1936:	89 eb       	ldi	r24, 0xB9	; 185
    1938:	91 e0       	ldi	r25, 0x01	; 1
    193a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
									if (PROTOCOL_BEACON())
    193e:	0e 94 8a 08 	call	0x1114	; 0x1114 <PROTOCOL_BEACON>
    1942:	88 23       	and	r24, r24
    1944:	f1 f1       	breq	.+124    	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
									{
										USART_SEND_str("B\n");
    1946:	8b eb       	ldi	r24, 0xBB	; 187
    1948:	91 e0       	ldi	r25, 0x01	; 1
    194a:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
    194e:	39 c0       	rjmp	.+114    	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
									}
									
								 break;
				
				case NEW_SESSION_KEY_CODE:	USART_SEND_str("T S\n");
    1950:	8e eb       	ldi	r24, 0xBE	; 190
    1952:	91 e0       	ldi	r25, 0x01	; 1
    1954:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
											if (PROTOCOL_SESSION_KEY())
    1958:	0e 94 c5 08 	call	0x118a	; 0x118a <PROTOCOL_SESSION_KEY>
    195c:	88 23       	and	r24, r24
    195e:	89 f1       	breq	.+98     	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
											{
												/*TEST*/
												USART_SEND_str("S: ");
    1960:	83 ec       	ldi	r24, 0xC3	; 195
    1962:	91 e0       	ldi	r25, 0x01	; 1
    1964:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
												volatile unsigned short SES_TEST=((SENSOR_SESSION_KEY[0]<<8)|SENSOR_SESSION_KEY[1]);	
    1968:	80 91 10 02 	lds	r24, 0x0210
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	98 2f       	mov	r25, r24
    1970:	88 27       	eor	r24, r24
    1972:	20 91 11 02 	lds	r18, 0x0211
    1976:	82 2b       	or	r24, r18
    1978:	9a 83       	std	Y+2, r25	; 0x02
    197a:	89 83       	std	Y+1, r24	; 0x01
												TEST_UART_SEND_VALUE(SES_TEST);
    197c:	89 80       	ldd	r8, Y+1	; 0x01
    197e:	9a 80       	ldd	r9, Y+2	; 0x02
    1980:	28 2d       	mov	r18, r8
    1982:	39 2d       	mov	r19, r9
    1984:	40 e0       	ldi	r20, 0x00	; 0
    1986:	50 e0       	ldi	r21, 0x00	; 0
    1988:	60 e0       	ldi	r22, 0x00	; 0
    198a:	70 e0       	ldi	r23, 0x00	; 0
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0e 94 e0 10 	call	0x21c0	; 0x21c0 <TEST_UART_SEND_VALUE>
												USART_SEND_str("\n");
    1994:	8f ed       	ldi	r24, 0xDF	; 223
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
    199c:	12 c0       	rjmp	.+36     	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
											}
											break;
				
				case MASTER_CHANGE_CHANNEL_CODE:USART_SEND_str("T C\n");
    199e:	87 ec       	ldi	r24, 0xC7	; 199
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
												if (PROTOCOL_CHANGE_CHANNEL())
    19a6:	0e 94 26 09 	call	0x124c	; 0x124c <PROTOCOL_CHANGE_CHANNEL>
    19aa:	88 23       	and	r24, r24
    19ac:	51 f0       	breq	.+20     	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
												{
													USART_SEND_str("C\n");
    19ae:	89 ec       	ldi	r24, 0xC9	; 201
    19b0:	91 e0       	ldi	r25, 0x01	; 1
    19b2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
    19b6:	05 c0       	rjmp	.+10     	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
												}
				
												break;
				
				case MASTER_CHANGE_DATA_CODE:PROTOCOL_CHANGE_DATA();
    19b8:	0e 94 91 09 	call	0x1322	; 0x1322 <PROTOCOL_CHANGE_DATA>
											break;
    19bc:	02 c0       	rjmp	.+4      	; 0x19c2 <PROTOCOL_SWITCH+0xf2>
				
				case MASTER_NEEDS_DATA_CODE:PROTOCOL_READ_DATA();
    19be:	0e 94 3b 0a 	call	0x1476	; 0x1476 <PROTOCOL_READ_DATA>
				
				
				
			}
		}
}
    19c2:	0f 90       	pop	r0
    19c4:	0f 90       	pop	r0
    19c6:	df 91       	pop	r29
    19c8:	cf 91       	pop	r28
    19ca:	ff 90       	pop	r15
    19cc:	ef 90       	pop	r14
    19ce:	df 90       	pop	r13
    19d0:	cf 90       	pop	r12
    19d2:	bf 90       	pop	r11
    19d4:	af 90       	pop	r10
    19d6:	9f 90       	pop	r9
    19d8:	8f 90       	pop	r8
    19da:	08 95       	ret

000019dc <ENCRYPT_ALGORISM_1_V1>:
 */ 
#include "SECURITY_DRIVER.h"


void ENCRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    19dc:	0f 93       	push	r16
    19de:	1f 93       	push	r17
    19e0:	cf 93       	push	r28
    19e2:	df 93       	push	r29
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    19e4:	44 23       	and	r20, r20
    19e6:	99 f0       	breq	.+38     	; 0x1a0e <ENCRYPT_ALGORISM_1_V1+0x32>
    19e8:	c8 2f       	mov	r28, r24
    19ea:	d9 2f       	mov	r29, r25
    19ec:	a6 2f       	mov	r26, r22
    19ee:	b7 2f       	mov	r27, r23
    19f0:	50 e0       	ldi	r21, 0x00	; 0
	{
		CIPHER_TEXT[i]=PLAIN_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
    19f2:	69 91       	ld	r22, Y+
    19f4:	05 2f       	mov	r16, r21
    19f6:	01 70       	andi	r16, 0x01	; 1
    19f8:	10 e0       	ldi	r17, 0x00	; 0
    19fa:	c9 01       	movw	r24, r18
    19fc:	80 0f       	add	r24, r16
    19fe:	91 1f       	adc	r25, r17
    1a00:	fc 01       	movw	r30, r24
    1a02:	80 81       	ld	r24, Z
    1a04:	86 27       	eor	r24, r22
    1a06:	8d 93       	st	X+, r24


void ENCRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1a08:	5f 5f       	subi	r21, 0xFF	; 255
    1a0a:	54 13       	cpse	r21, r20
    1a0c:	f2 cf       	rjmp	.-28     	; 0x19f2 <ENCRYPT_ALGORISM_1_V1+0x16>
	{
		CIPHER_TEXT[i]=PLAIN_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
	}
}
    1a0e:	df 91       	pop	r29
    1a10:	cf 91       	pop	r28
    1a12:	1f 91       	pop	r17
    1a14:	0f 91       	pop	r16
    1a16:	08 95       	ret

00001a18 <DECRYPT_ALGORISM_1_V1>:

void DECRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    1a18:	0f 93       	push	r16
    1a1a:	1f 93       	push	r17
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1a20:	44 23       	and	r20, r20
    1a22:	99 f0       	breq	.+38     	; 0x1a4a <DECRYPT_ALGORISM_1_V1+0x32>
    1a24:	c6 2f       	mov	r28, r22
    1a26:	d7 2f       	mov	r29, r23
    1a28:	a8 2f       	mov	r26, r24
    1a2a:	b9 2f       	mov	r27, r25
    1a2c:	50 e0       	ldi	r21, 0x00	; 0
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
    1a2e:	69 91       	ld	r22, Y+
    1a30:	05 2f       	mov	r16, r21
    1a32:	01 70       	andi	r16, 0x01	; 1
    1a34:	10 e0       	ldi	r17, 0x00	; 0
    1a36:	c9 01       	movw	r24, r18
    1a38:	80 0f       	add	r24, r16
    1a3a:	91 1f       	adc	r25, r17
    1a3c:	fc 01       	movw	r30, r24
    1a3e:	80 81       	ld	r24, Z
    1a40:	86 27       	eor	r24, r22
    1a42:	8d 93       	st	X+, r24
}

void DECRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1a44:	5f 5f       	subi	r21, 0xFF	; 255
    1a46:	54 13       	cpse	r21, r20
    1a48:	f2 cf       	rjmp	.-28     	; 0x1a2e <DECRYPT_ALGORISM_1_V1+0x16>
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
	}
}
    1a4a:	df 91       	pop	r29
    1a4c:	cf 91       	pop	r28
    1a4e:	1f 91       	pop	r17
    1a50:	0f 91       	pop	r16
    1a52:	08 95       	ret

00001a54 <ENCRYPT_ALGORISM_2_V1>:

void ENCRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    1a54:	cf 93       	push	r28
    1a56:	df 93       	push	r29
    1a58:	f9 01       	movw	r30, r18
		unsigned char i;
		for (i=0;i<LENGTH;i++)
    1a5a:	44 23       	and	r20, r20
    1a5c:	99 f0       	breq	.+38     	; 0x1a84 <ENCRYPT_ALGORISM_2_V1+0x30>
    1a5e:	38 2f       	mov	r19, r24
    1a60:	c6 2f       	mov	r28, r22
    1a62:	d7 2f       	mov	r29, r23
    1a64:	a8 2f       	mov	r26, r24
    1a66:	b9 2f       	mov	r27, r25
		{
			CIPHER_TEXT[i]=PLAIN_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
    1a68:	9d 91       	ld	r25, X+
    1a6a:	21 81       	ldd	r18, Z+1	; 0x01
    1a6c:	80 81       	ld	r24, Z
    1a6e:	82 27       	eor	r24, r18
    1a70:	22 81       	ldd	r18, Z+2	; 0x02
    1a72:	82 27       	eor	r24, r18
    1a74:	23 81       	ldd	r18, Z+3	; 0x03
    1a76:	82 27       	eor	r24, r18
    1a78:	89 27       	eor	r24, r25
    1a7a:	89 93       	st	Y+, r24
    1a7c:	8a 2f       	mov	r24, r26
    1a7e:	83 1b       	sub	r24, r19
}

void ENCRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
		unsigned char i;
		for (i=0;i<LENGTH;i++)
    1a80:	84 17       	cp	r24, r20
    1a82:	90 f3       	brcs	.-28     	; 0x1a68 <ENCRYPT_ALGORISM_2_V1+0x14>
		{
			CIPHER_TEXT[i]=PLAIN_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
		}
}
    1a84:	df 91       	pop	r29
    1a86:	cf 91       	pop	r28
    1a88:	08 95       	ret

00001a8a <DECRYPT_ALGORISM_2_V1>:

void DECRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    1a8a:	cf 93       	push	r28
    1a8c:	df 93       	push	r29
    1a8e:	f9 01       	movw	r30, r18
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1a90:	44 23       	and	r20, r20
    1a92:	99 f0       	breq	.+38     	; 0x1aba <DECRYPT_ALGORISM_2_V1+0x30>
    1a94:	36 2f       	mov	r19, r22
    1a96:	c8 2f       	mov	r28, r24
    1a98:	d9 2f       	mov	r29, r25
    1a9a:	a6 2f       	mov	r26, r22
    1a9c:	b7 2f       	mov	r27, r23
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
    1a9e:	9d 91       	ld	r25, X+
    1aa0:	21 81       	ldd	r18, Z+1	; 0x01
    1aa2:	80 81       	ld	r24, Z
    1aa4:	82 27       	eor	r24, r18
    1aa6:	22 81       	ldd	r18, Z+2	; 0x02
    1aa8:	82 27       	eor	r24, r18
    1aaa:	23 81       	ldd	r18, Z+3	; 0x03
    1aac:	82 27       	eor	r24, r18
    1aae:	89 27       	eor	r24, r25
    1ab0:	89 93       	st	Y+, r24
    1ab2:	8a 2f       	mov	r24, r26
    1ab4:	83 1b       	sub	r24, r19
}

void DECRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    1ab6:	84 17       	cp	r24, r20
    1ab8:	90 f3       	brcs	.-28     	; 0x1a9e <DECRYPT_ALGORISM_2_V1+0x14>
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
	}
}
    1aba:	df 91       	pop	r29
    1abc:	cf 91       	pop	r28
    1abe:	08 95       	ret

00001ac0 <HASH_SESSION_KEY>:

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    1ac0:	3f 92       	push	r3
    1ac2:	4f 92       	push	r4
    1ac4:	5f 92       	push	r5
    1ac6:	6f 92       	push	r6
    1ac8:	7f 92       	push	r7
    1aca:	8f 92       	push	r8
    1acc:	9f 92       	push	r9
    1ace:	af 92       	push	r10
    1ad0:	bf 92       	push	r11
    1ad2:	cf 92       	push	r12
    1ad4:	df 92       	push	r13
    1ad6:	ef 92       	push	r14
    1ad8:	ff 92       	push	r15
    1ada:	0f 93       	push	r16
    1adc:	1f 93       	push	r17
    1ade:	cf 93       	push	r28
    1ae0:	df 93       	push	r29
    1ae2:	8c 01       	movw	r16, r24
    1ae4:	7b 01       	movw	r14, r22
    1ae6:	34 2e       	mov	r3, r20
    1ae8:	69 01       	movw	r12, r18
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1aea:	44 23       	and	r20, r20
    1aec:	09 f4       	brne	.+2      	; 0x1af0 <HASH_SESSION_KEY+0x30>
    1aee:	44 c0       	rjmp	.+136    	; 0x1b78 <HASH_SESSION_KEY+0xb8>
    1af0:	c0 e0       	ldi	r28, 0x00	; 0
}

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    1af2:	81 2c       	mov	r8, r1
    1af4:	91 2c       	mov	r9, r1
    1af6:	54 01       	movw	r10, r8
    1af8:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
    1afa:	44 24       	eor	r4, r4
    1afc:	4a 94       	dec	r4
    1afe:	54 2c       	mov	r5, r4
    1b00:	61 2c       	mov	r6, r1
    1b02:	71 2c       	mov	r7, r1
    1b04:	f8 01       	movw	r30, r16
    1b06:	ec 0f       	add	r30, r28
    1b08:	f1 1d       	adc	r31, r1
    1b0a:	a0 81       	ld	r26, Z
    1b0c:	b0 e0       	ldi	r27, 0x00	; 0
    1b0e:	a5 01       	movw	r20, r10
    1b10:	94 01       	movw	r18, r8
    1b12:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__muluhisi3>
    1b16:	a3 01       	movw	r20, r6
    1b18:	92 01       	movw	r18, r4
    1b1a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    1b1e:	4b 01       	movw	r8, r22
    1b20:	5c 01       	movw	r10, r24
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1b22:	ce 5f       	subi	r28, 0xFE	; 254
    1b24:	c3 15       	cp	r28, r3
    1b26:	70 f3       	brcs	.-36     	; 0x1b04 <HASH_SESSION_KEY+0x44>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1b28:	81 e0       	ldi	r24, 0x01	; 1
    1b2a:	83 15       	cp	r24, r3
    1b2c:	70 f5       	brcc	.+92     	; 0x1b8a <HASH_SESSION_KEY+0xca>
    1b2e:	e8 01       	movw	r28, r16
    1b30:	21 96       	adiw	r28, 0x01	; 1
    1b32:	0d 5f       	subi	r16, 0xFD	; 253
    1b34:	1f 4f       	sbci	r17, 0xFF	; 255
    1b36:	3a 94       	dec	r3
    1b38:	3a 94       	dec	r3
    1b3a:	36 94       	lsr	r3
    1b3c:	83 2d       	mov	r24, r3
    1b3e:	90 e0       	ldi	r25, 0x00	; 0
    1b40:	88 0f       	add	r24, r24
    1b42:	99 1f       	adc	r25, r25
    1b44:	08 0f       	add	r16, r24
    1b46:	19 1f       	adc	r17, r25
    1b48:	61 e0       	ldi	r22, 0x01	; 1
    1b4a:	70 e0       	ldi	r23, 0x00	; 0
    1b4c:	80 e0       	ldi	r24, 0x00	; 0
    1b4e:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
    1b50:	44 24       	eor	r4, r4
    1b52:	4a 94       	dec	r4
    1b54:	54 2c       	mov	r5, r4
    1b56:	61 2c       	mov	r6, r1
    1b58:	71 2c       	mov	r7, r1
    1b5a:	a8 81       	ld	r26, Y
    1b5c:	b0 e0       	ldi	r27, 0x00	; 0
    1b5e:	9b 01       	movw	r18, r22
    1b60:	ac 01       	movw	r20, r24
    1b62:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__muluhisi3>
    1b66:	a3 01       	movw	r20, r6
    1b68:	92 01       	movw	r18, r4
    1b6a:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    1b6e:	22 96       	adiw	r28, 0x02	; 2
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1b70:	c0 17       	cp	r28, r16
    1b72:	d1 07       	cpc	r29, r17
    1b74:	91 f7       	brne	.-28     	; 0x1b5a <HASH_SESSION_KEY+0x9a>
    1b76:	0d c0       	rjmp	.+26     	; 0x1b92 <HASH_SESSION_KEY+0xd2>
}

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    1b78:	81 2c       	mov	r8, r1
    1b7a:	91 2c       	mov	r9, r1
    1b7c:	54 01       	movw	r10, r8
    1b7e:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1b80:	61 e0       	ldi	r22, 0x01	; 1
    1b82:	70 e0       	ldi	r23, 0x00	; 0
    1b84:	80 e0       	ldi	r24, 0x00	; 0
    1b86:	90 e0       	ldi	r25, 0x00	; 0
    1b88:	04 c0       	rjmp	.+8      	; 0x1b92 <HASH_SESSION_KEY+0xd2>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1b8a:	61 e0       	ldi	r22, 0x01	; 1
    1b8c:	70 e0       	ldi	r23, 0x00	; 0
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
			}
			TEMP_HASH_VALUE=(HASH_ODD^HASH_EVEN)%0xffff;
    1b92:	68 25       	eor	r22, r8
    1b94:	79 25       	eor	r23, r9
    1b96:	8a 25       	eor	r24, r10
    1b98:	9b 25       	eor	r25, r11
    1b9a:	2f ef       	ldi	r18, 0xFF	; 255
    1b9c:	3f ef       	ldi	r19, 0xFF	; 255
    1b9e:	40 e0       	ldi	r20, 0x00	; 0
    1ba0:	50 e0       	ldi	r21, 0x00	; 0
    1ba2:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
			HASH_VALUE[0]=(TEMP_HASH_VALUE>>8)^SESSION_KEY[0];
    1ba6:	f6 01       	movw	r30, r12
    1ba8:	80 81       	ld	r24, Z
    1baa:	78 27       	eor	r23, r24
    1bac:	f7 01       	movw	r30, r14
    1bae:	70 83       	st	Z, r23
			HASH_VALUE[1]=(TEMP_HASH_VALUE&0x00ff)^SESSION_KEY[1];
    1bb0:	f6 01       	movw	r30, r12
    1bb2:	81 81       	ldd	r24, Z+1	; 0x01
    1bb4:	68 27       	eor	r22, r24
    1bb6:	f7 01       	movw	r30, r14
    1bb8:	61 83       	std	Z+1, r22	; 0x01
				
}
    1bba:	df 91       	pop	r29
    1bbc:	cf 91       	pop	r28
    1bbe:	1f 91       	pop	r17
    1bc0:	0f 91       	pop	r16
    1bc2:	ff 90       	pop	r15
    1bc4:	ef 90       	pop	r14
    1bc6:	df 90       	pop	r13
    1bc8:	cf 90       	pop	r12
    1bca:	bf 90       	pop	r11
    1bcc:	af 90       	pop	r10
    1bce:	9f 90       	pop	r9
    1bd0:	8f 90       	pop	r8
    1bd2:	7f 90       	pop	r7
    1bd4:	6f 90       	pop	r6
    1bd6:	5f 90       	pop	r5
    1bd8:	4f 90       	pop	r4
    1bda:	3f 90       	pop	r3
    1bdc:	08 95       	ret

00001bde <HASH_PASWORD_KEY>:

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    1bde:	3f 92       	push	r3
    1be0:	4f 92       	push	r4
    1be2:	5f 92       	push	r5
    1be4:	6f 92       	push	r6
    1be6:	7f 92       	push	r7
    1be8:	8f 92       	push	r8
    1bea:	9f 92       	push	r9
    1bec:	af 92       	push	r10
    1bee:	bf 92       	push	r11
    1bf0:	cf 92       	push	r12
    1bf2:	df 92       	push	r13
    1bf4:	ef 92       	push	r14
    1bf6:	ff 92       	push	r15
    1bf8:	0f 93       	push	r16
    1bfa:	1f 93       	push	r17
    1bfc:	cf 93       	push	r28
    1bfe:	df 93       	push	r29
    1c00:	8c 01       	movw	r16, r24
    1c02:	6b 01       	movw	r12, r22
    1c04:	34 2e       	mov	r3, r20
    1c06:	79 01       	movw	r14, r18
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1c08:	44 23       	and	r20, r20
    1c0a:	09 f4       	brne	.+2      	; 0x1c0e <HASH_PASWORD_KEY+0x30>
    1c0c:	44 c0       	rjmp	.+136    	; 0x1c96 <HASH_PASWORD_KEY+0xb8>
    1c0e:	c0 e0       	ldi	r28, 0x00	; 0
}

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    1c10:	81 2c       	mov	r8, r1
    1c12:	91 2c       	mov	r9, r1
    1c14:	54 01       	movw	r10, r8
    1c16:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
    1c18:	44 24       	eor	r4, r4
    1c1a:	4a 94       	dec	r4
    1c1c:	54 2c       	mov	r5, r4
    1c1e:	61 2c       	mov	r6, r1
    1c20:	71 2c       	mov	r7, r1
    1c22:	f8 01       	movw	r30, r16
    1c24:	ec 0f       	add	r30, r28
    1c26:	f1 1d       	adc	r31, r1
    1c28:	a0 81       	ld	r26, Z
    1c2a:	b0 e0       	ldi	r27, 0x00	; 0
    1c2c:	a5 01       	movw	r20, r10
    1c2e:	94 01       	movw	r18, r8
    1c30:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__muluhisi3>
    1c34:	a3 01       	movw	r20, r6
    1c36:	92 01       	movw	r18, r4
    1c38:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    1c3c:	4b 01       	movw	r8, r22
    1c3e:	5c 01       	movw	r10, r24
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1c40:	ce 5f       	subi	r28, 0xFE	; 254
    1c42:	c3 15       	cp	r28, r3
    1c44:	70 f3       	brcs	.-36     	; 0x1c22 <HASH_PASWORD_KEY+0x44>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	83 15       	cp	r24, r3
    1c4a:	70 f5       	brcc	.+92     	; 0x1ca8 <HASH_PASWORD_KEY+0xca>
    1c4c:	e8 01       	movw	r28, r16
    1c4e:	21 96       	adiw	r28, 0x01	; 1
    1c50:	0d 5f       	subi	r16, 0xFD	; 253
    1c52:	1f 4f       	sbci	r17, 0xFF	; 255
    1c54:	3a 94       	dec	r3
    1c56:	3a 94       	dec	r3
    1c58:	36 94       	lsr	r3
    1c5a:	83 2d       	mov	r24, r3
    1c5c:	90 e0       	ldi	r25, 0x00	; 0
    1c5e:	88 0f       	add	r24, r24
    1c60:	99 1f       	adc	r25, r25
    1c62:	08 0f       	add	r16, r24
    1c64:	19 1f       	adc	r17, r25
    1c66:	61 e0       	ldi	r22, 0x01	; 1
    1c68:	70 e0       	ldi	r23, 0x00	; 0
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
    1c6e:	44 24       	eor	r4, r4
    1c70:	4a 94       	dec	r4
    1c72:	54 2c       	mov	r5, r4
    1c74:	61 2c       	mov	r6, r1
    1c76:	71 2c       	mov	r7, r1
    1c78:	a8 81       	ld	r26, Y
    1c7a:	b0 e0       	ldi	r27, 0x00	; 0
    1c7c:	9b 01       	movw	r18, r22
    1c7e:	ac 01       	movw	r20, r24
    1c80:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__muluhisi3>
    1c84:	a3 01       	movw	r20, r6
    1c86:	92 01       	movw	r18, r4
    1c88:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    1c8c:	22 96       	adiw	r28, 0x02	; 2
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1c8e:	c0 17       	cp	r28, r16
    1c90:	d1 07       	cpc	r29, r17
    1c92:	91 f7       	brne	.-28     	; 0x1c78 <HASH_PASWORD_KEY+0x9a>
    1c94:	0d c0       	rjmp	.+26     	; 0x1cb0 <HASH_PASWORD_KEY+0xd2>
}

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    1c96:	81 2c       	mov	r8, r1
    1c98:	91 2c       	mov	r9, r1
    1c9a:	54 01       	movw	r10, r8
    1c9c:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    1c9e:	61 e0       	ldi	r22, 0x01	; 1
    1ca0:	70 e0       	ldi	r23, 0x00	; 0
    1ca2:	80 e0       	ldi	r24, 0x00	; 0
    1ca4:	90 e0       	ldi	r25, 0x00	; 0
    1ca6:	04 c0       	rjmp	.+8      	; 0x1cb0 <HASH_PASWORD_KEY+0xd2>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    1ca8:	61 e0       	ldi	r22, 0x01	; 1
    1caa:	70 e0       	ldi	r23, 0x00	; 0
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
			}
			TEMP_HASH_VALUE=(HASH_ODD^HASH_EVEN)%0xffff;
    1cb0:	68 25       	eor	r22, r8
    1cb2:	79 25       	eor	r23, r9
    1cb4:	8a 25       	eor	r24, r10
    1cb6:	9b 25       	eor	r25, r11
    1cb8:	2f ef       	ldi	r18, 0xFF	; 255
    1cba:	3f ef       	ldi	r19, 0xFF	; 255
    1cbc:	40 e0       	ldi	r20, 0x00	; 0
    1cbe:	50 e0       	ldi	r21, 0x00	; 0
    1cc0:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
			HASH_VALUE[0]=(TEMP_HASH_VALUE>>8)^PASSWORD_KEY[0]^PASSWORD_KEY[1];
    1cc4:	f7 01       	movw	r30, r14
    1cc6:	91 81       	ldd	r25, Z+1	; 0x01
    1cc8:	80 81       	ld	r24, Z
    1cca:	89 27       	eor	r24, r25
    1ccc:	78 27       	eor	r23, r24
    1cce:	f6 01       	movw	r30, r12
    1cd0:	70 83       	st	Z, r23
			HASH_VALUE[1]=(TEMP_HASH_VALUE&0x00ff)^PASSWORD_KEY[2]^PASSWORD_KEY[3];
    1cd2:	f7 01       	movw	r30, r14
    1cd4:	93 81       	ldd	r25, Z+3	; 0x03
    1cd6:	82 81       	ldd	r24, Z+2	; 0x02
    1cd8:	89 27       	eor	r24, r25
    1cda:	68 27       	eor	r22, r24
    1cdc:	f6 01       	movw	r30, r12
    1cde:	61 83       	std	Z+1, r22	; 0x01
	
}
    1ce0:	df 91       	pop	r29
    1ce2:	cf 91       	pop	r28
    1ce4:	1f 91       	pop	r17
    1ce6:	0f 91       	pop	r16
    1ce8:	ff 90       	pop	r15
    1cea:	ef 90       	pop	r14
    1cec:	df 90       	pop	r13
    1cee:	cf 90       	pop	r12
    1cf0:	bf 90       	pop	r11
    1cf2:	af 90       	pop	r10
    1cf4:	9f 90       	pop	r9
    1cf6:	8f 90       	pop	r8
    1cf8:	7f 90       	pop	r7
    1cfa:	6f 90       	pop	r6
    1cfc:	5f 90       	pop	r5
    1cfe:	4f 90       	pop	r4
    1d00:	3f 90       	pop	r3
    1d02:	08 95       	ret

00001d04 <GENNERATE_RANDOM_NUMBER>:
 *  Author: Mina Medhat
 */ 
#include "RANDOM_NUM_GEN.h"
volatile unsigned long RANDOM_NUMBER=1; 
unsigned short GENNERATE_RANDOM_NUMBER()
{
    1d04:	cf 92       	push	r12
    1d06:	df 92       	push	r13
    1d08:	ef 92       	push	r14
    1d0a:	ff 92       	push	r15
	   RANDOM_NUMBER=(RANDOM_NUMBER+0x44444*((unsigned long)TIMER1_READ_COUNTER()+1))%(0xffff);
    1d0c:	0e 94 b4 07 	call	0xf68	; 0xf68 <TIMER1_READ_COUNTER>
    1d10:	c0 90 6c 00 	lds	r12, 0x006C
    1d14:	d0 90 6d 00 	lds	r13, 0x006D
    1d18:	e0 90 6e 00 	lds	r14, 0x006E
    1d1c:	f0 90 6f 00 	lds	r15, 0x006F
    1d20:	a0 e0       	ldi	r26, 0x00	; 0
    1d22:	b0 e0       	ldi	r27, 0x00	; 0
    1d24:	9c 01       	movw	r18, r24
    1d26:	ad 01       	movw	r20, r26
    1d28:	2f 5f       	subi	r18, 0xFF	; 255
    1d2a:	3f 4f       	sbci	r19, 0xFF	; 255
    1d2c:	4f 4f       	sbci	r20, 0xFF	; 255
    1d2e:	5f 4f       	sbci	r21, 0xFF	; 255
    1d30:	64 e4       	ldi	r22, 0x44	; 68
    1d32:	74 e4       	ldi	r23, 0x44	; 68
    1d34:	84 e0       	ldi	r24, 0x04	; 4
    1d36:	90 e0       	ldi	r25, 0x00	; 0
    1d38:	0e 94 c7 13 	call	0x278e	; 0x278e <__mulsi3>
    1d3c:	6c 0d       	add	r22, r12
    1d3e:	7d 1d       	adc	r23, r13
    1d40:	8e 1d       	adc	r24, r14
    1d42:	9f 1d       	adc	r25, r15
    1d44:	2f ef       	ldi	r18, 0xFF	; 255
    1d46:	3f ef       	ldi	r19, 0xFF	; 255
    1d48:	40 e0       	ldi	r20, 0x00	; 0
    1d4a:	50 e0       	ldi	r21, 0x00	; 0
    1d4c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    1d50:	60 93 6c 00 	sts	0x006C, r22
    1d54:	70 93 6d 00 	sts	0x006D, r23
    1d58:	80 93 6e 00 	sts	0x006E, r24
    1d5c:	90 93 6f 00 	sts	0x006F, r25
	   return (unsigned short)RANDOM_NUMBER;
    1d60:	80 91 6c 00 	lds	r24, 0x006C
    1d64:	90 91 6d 00 	lds	r25, 0x006D
    1d68:	a0 91 6e 00 	lds	r26, 0x006E
    1d6c:	b0 91 6f 00 	lds	r27, 0x006F
}
    1d70:	ff 90       	pop	r15
    1d72:	ef 90       	pop	r14
    1d74:	df 90       	pop	r13
    1d76:	cf 90       	pop	r12
    1d78:	08 95       	ret

00001d7a <SENSOR_MANAGE_LOOP>:

volatile unsigned short MAIN_REGISTERS[20];


void SENSOR_MANAGE_LOOP()
{	
    1d7a:	cf 93       	push	r28
    1d7c:	df 93       	push	r29
    1d7e:	1f 92       	push	r1
    1d80:	cd b7       	in	r28, 0x3d	; 61
    1d82:	de b7       	in	r29, 0x3e	; 62
	if (NRF_CHECK_RX_PL(DATA_BUFFER,&LENGTH))
    1d84:	6d ed       	ldi	r22, 0xDD	; 221
    1d86:	71 e0       	ldi	r23, 0x01	; 1
    1d88:	87 e1       	ldi	r24, 0x17	; 23
    1d8a:	92 e0       	ldi	r25, 0x02	; 2
    1d8c:	0e 94 23 07 	call	0xe46	; 0xe46 <NRF_CHECK_RX_PL>
    1d90:	88 23       	and	r24, r24
    1d92:	c1 f0       	breq	.+48     	; 0x1dc4 <SENSOR_MANAGE_LOOP+0x4a>
	{
		USART_SEND_str("R\n");
    1d94:	8e e3       	ldi	r24, 0x3E	; 62
    1d96:	91 e0       	ldi	r25, 0x01	; 1
    1d98:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
		volatile unsigned char TEMP=0;
    1d9c:	19 82       	std	Y+1, r1	; 0x01
		if (F_SENSOR_STATE==CONNECTED_STATE)
    1d9e:	80 91 de 01 	lds	r24, 0x01DE
    1da2:	81 30       	cpi	r24, 0x01	; 1
    1da4:	09 f4       	brne	.+2      	; 0x1da8 <SENSOR_MANAGE_LOOP+0x2e>
		{
			TEMP=1;	
    1da6:	89 83       	std	Y+1, r24	; 0x01
		}		
		if (PROTOCOL_CHECK_RECIVED_PACKET(DATA_BUFFER,TEMP,MASTER_ADDRESS, LENGTH))
    1da8:	20 91 dd 01 	lds	r18, 0x01DD
    1dac:	69 81       	ldd	r22, Y+1	; 0x01
    1dae:	4f ed       	ldi	r20, 0xDF	; 223
    1db0:	51 e0       	ldi	r21, 0x01	; 1
    1db2:	87 e1       	ldi	r24, 0x17	; 23
    1db4:	92 e0       	ldi	r25, 0x02	; 2
    1db6:	0e 94 27 08 	call	0x104e	; 0x104e <PROTOCOL_CHECK_RECIVED_PACKET>
    1dba:	81 11       	cpse	r24, r1
		{
		/*USART_SEND_str("checked1\n");*/
			PROTOCOL_SWITCH();
    1dbc:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <PROTOCOL_SWITCH>
		}		
		NRF_START_RX_MODE();
    1dc0:	0e 94 04 07 	call	0xe08	; 0xe08 <NRF_START_RX_MODE>
	}
	
	if (F_SENSOR_STATE==CONNECTED_STATE)
    1dc4:	80 91 de 01 	lds	r24, 0x01DE
    1dc8:	81 30       	cpi	r24, 0x01	; 1
    1dca:	a9 f4       	brne	.+42     	; 0x1df6 <SENSOR_MANAGE_LOOP+0x7c>
	{
		
		if (C_T_BEACON==MAX_C_T_BEACON)
    1dcc:	80 91 e4 01 	lds	r24, 0x01E4
    1dd0:	8a 30       	cpi	r24, 0x0A	; 10
    1dd2:	89 f4       	brne	.+34     	; 0x1df6 <SENSOR_MANAGE_LOOP+0x7c>
		{
			C_T_BEACON=0;
    1dd4:	10 92 e4 01 	sts	0x01E4, r1
			F_SENSOR_STATE=NOTCONNECTED_STATE;
    1dd8:	10 92 de 01 	sts	0x01DE, r1
			NRF_STOP_RX_MODE();
    1ddc:	0e 94 15 07 	call	0xe2a	; 0xe2a <NRF_STOP_RX_MODE>
			NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[0]);
    1de0:	80 91 60 00 	lds	r24, 0x0060
    1de4:	0e 94 08 06 	call	0xc10	; 0xc10 <NRF_UPDATE_USED_CHANNEL>
			NRF_START_RX_MODE();
    1de8:	0e 94 04 07 	call	0xe08	; 0xe08 <NRF_START_RX_MODE>
			clearbit(*PORT_OUT_CONNECTED_LED,CONNECTED_LED_PIN);
    1dec:	96 98       	cbi	0x12, 6	; 18
			USART_SEND_str("DISCONNECTED\n");
    1dee:	8c ec       	ldi	r24, 0xCC	; 204
    1df0:	91 e0       	ldi	r25, 0x01	; 1
    1df2:	0e 94 f2 11 	call	0x23e4	; 0x23e4 <USART_SEND_str>
	

			
		
	
}
    1df6:	0f 90       	pop	r0
    1df8:	df 91       	pop	r29
    1dfa:	cf 91       	pop	r28
    1dfc:	08 95       	ret

00001dfe <SENSOR_IO_SETUP>:

void SENSOR_IO_SETUP()
{
	PROTOCOL_IO_SETUP();
    1dfe:	0e 94 24 08 	call	0x1048	; 0x1048 <PROTOCOL_IO_SETUP>
	gpio_outputconfg(PORT_DDR_CONNECTED_LED,PORT_OUTMOD_CONNECTED_LED,OUTPASS,CONNECTED_LED_PIN);
    1e02:	26 e0       	ldi	r18, 0x06	; 6
    1e04:	40 e0       	ldi	r20, 0x00	; 0
    1e06:	60 e3       	ldi	r22, 0x30	; 48
    1e08:	70 e0       	ldi	r23, 0x00	; 0
    1e0a:	81 e3       	ldi	r24, 0x31	; 49
    1e0c:	90 e0       	ldi	r25, 0x00	; 0
    1e0e:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
    1e12:	08 95       	ret

00001e14 <SENSOR_SETUP>:
}

void SENSOR_SETUP()
{
	 PROTOCOL_SETUP();
    1e14:	0e 94 1b 08 	call	0x1036	; 0x1036 <PROTOCOL_SETUP>
    1e18:	08 95       	ret

00001e1a <SENSOR_TIMER1>:
	 
}

void SENSOR_TIMER1()
{
	if (C_T_BEACON!=MAX_C_T_BEACON)
    1e1a:	80 91 e4 01 	lds	r24, 0x01E4
    1e1e:	8a 30       	cpi	r24, 0x0A	; 10
    1e20:	29 f0       	breq	.+10     	; 0x1e2c <SENSOR_TIMER1+0x12>
	{
		C_T_BEACON++;
    1e22:	80 91 e4 01 	lds	r24, 0x01E4
    1e26:	8f 5f       	subi	r24, 0xFF	; 255
    1e28:	80 93 e4 01 	sts	0x01E4, r24
    1e2c:	08 95       	ret

00001e2e <inttostring>:
 * Created: 9/1/2020 12:42:54 PM
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long long thenumber)
{
    1e2e:	2f 92       	push	r2
    1e30:	3f 92       	push	r3
    1e32:	4f 92       	push	r4
    1e34:	5f 92       	push	r5
    1e36:	6f 92       	push	r6
    1e38:	7f 92       	push	r7
    1e3a:	8f 92       	push	r8
    1e3c:	9f 92       	push	r9
    1e3e:	af 92       	push	r10
    1e40:	bf 92       	push	r11
    1e42:	cf 92       	push	r12
    1e44:	df 92       	push	r13
    1e46:	ef 92       	push	r14
    1e48:	ff 92       	push	r15
    1e4a:	0f 93       	push	r16
    1e4c:	1f 93       	push	r17
    1e4e:	cf 93       	push	r28
    1e50:	df 93       	push	r29
    1e52:	cd b7       	in	r28, 0x3d	; 61
    1e54:	de b7       	in	r29, 0x3e	; 62
    1e56:	6a 97       	sbiw	r28, 0x1a	; 26
    1e58:	0f b6       	in	r0, 0x3f	; 63
    1e5a:	f8 94       	cli
    1e5c:	de bf       	out	0x3e, r29	; 62
    1e5e:	0f be       	out	0x3f, r0	; 63
    1e60:	cd bf       	out	0x3d, r28	; 61
    1e62:	1c 01       	movw	r2, r24
    1e64:	09 83       	std	Y+1, r16	; 0x01
    1e66:	19 87       	std	Y+9, r17	; 0x09
    1e68:	2a 8b       	std	Y+18, r18	; 0x12
    1e6a:	3b 8b       	std	Y+19, r19	; 0x13
    1e6c:	4d 8b       	std	Y+21, r20	; 0x15
    1e6e:	85 2e       	mov	r8, r21
    1e70:	69 8f       	std	Y+25, r22	; 0x19
    1e72:	7a 8f       	std	Y+26, r23	; 0x1a
	unsigned char counter=0;
	unsigned long the_scaler=1000000000;
	if (thenumber<0)
    1e74:	20 2f       	mov	r18, r16
    1e76:	31 2f       	mov	r19, r17
    1e78:	4a 89       	ldd	r20, Y+18	; 0x12
    1e7a:	5b 89       	ldd	r21, Y+19	; 0x13
    1e7c:	6d 89       	ldd	r22, Y+21	; 0x15
    1e7e:	78 2d       	mov	r23, r8
    1e80:	89 8d       	ldd	r24, Y+25	; 0x19
    1e82:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1e84:	a0 e0       	ldi	r26, 0x00	; 0
    1e86:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__cmpdi2_s8>
    1e8a:	8c f4       	brge	.+34     	; 0x1eae <inttostring+0x80>
	{
		the_return[0]='-';
    1e8c:	8d e2       	ldi	r24, 0x2D	; 45
    1e8e:	f1 01       	movw	r30, r2
    1e90:	80 83       	st	Z, r24
		thenumber=thenumber*(-1);
    1e92:	89 8d       	ldd	r24, Y+25	; 0x19
    1e94:	0e 94 94 14 	call	0x2928	; 0x2928 <__negdi2>
    1e98:	29 83       	std	Y+1, r18	; 0x01
    1e9a:	39 87       	std	Y+9, r19	; 0x09
    1e9c:	4a 8b       	std	Y+18, r20	; 0x12
    1e9e:	5b 8b       	std	Y+19, r21	; 0x13
    1ea0:	6d 8b       	std	Y+21, r22	; 0x15
    1ea2:	87 2e       	mov	r8, r23
    1ea4:	89 8f       	std	Y+25, r24	; 0x19
    1ea6:	9a 8f       	std	Y+26, r25	; 0x1a
		counter=1;
    1ea8:	99 24       	eor	r9, r9
    1eaa:	93 94       	inc	r9
    1eac:	01 c0       	rjmp	.+2      	; 0x1eb0 <inttostring+0x82>
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long long thenumber)
{
	unsigned char counter=0;
    1eae:	91 2c       	mov	r9, r1
	{
		the_return[0]='-';
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
    1eb0:	29 81       	ldd	r18, Y+1	; 0x01
    1eb2:	39 85       	ldd	r19, Y+9	; 0x09
    1eb4:	4a 89       	ldd	r20, Y+18	; 0x12
    1eb6:	5b 89       	ldd	r21, Y+19	; 0x13
    1eb8:	6d 89       	ldd	r22, Y+21	; 0x15
    1eba:	78 2d       	mov	r23, r8
    1ebc:	89 8d       	ldd	r24, Y+25	; 0x19
    1ebe:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1ec0:	a0 e0       	ldi	r26, 0x00	; 0
    1ec2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__cmpdi2_s8>
    1ec6:	c9 f0       	breq	.+50     	; 0x1efa <inttostring+0xcc>
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
    1ec8:	a1 2c       	mov	r10, r1
    1eca:	0f 2e       	mov	r0, r31
    1ecc:	fa ec       	ldi	r31, 0xCA	; 202
    1ece:	bf 2e       	mov	r11, r31
    1ed0:	f0 2d       	mov	r31, r0
    1ed2:	0f 2e       	mov	r0, r31
    1ed4:	fa e9       	ldi	r31, 0x9A	; 154
    1ed6:	cf 2e       	mov	r12, r31
    1ed8:	f0 2d       	mov	r31, r0
    1eda:	0f 2e       	mov	r0, r31
    1edc:	fb e3       	ldi	r31, 0x3B	; 59
    1ede:	df 2e       	mov	r13, r31
    1ee0:	f0 2d       	mov	r31, r0
    1ee2:	e1 2c       	mov	r14, r1
    1ee4:	f1 2c       	mov	r15, r1
    1ee6:	00 e0       	ldi	r16, 0x00	; 0
    1ee8:	10 e0       	ldi	r17, 0x00	; 0
    1eea:	0e 94 06 14 	call	0x280c	; 0x280c <__divdi3>
    1eee:	b2 2f       	mov	r27, r18
    1ef0:	a0 e0       	ldi	r26, 0x00	; 0
    1ef2:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__cmpdi2_s8>
    1ef6:	31 f0       	breq	.+12     	; 0x1f04 <inttostring+0xd6>
    1ef8:	cf c0       	rjmp	.+414    	; 0x2098 <inttostring+0x26a>
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
	{
		the_return[0]='0';
    1efa:	80 e3       	ldi	r24, 0x30	; 48
    1efc:	f1 01       	movw	r30, r2
    1efe:	80 83       	st	Z, r24
		return 1;
    1f00:	81 e0       	ldi	r24, 0x01	; 1
    1f02:	04 c1       	rjmp	.+520    	; 0x210c <inttostring+0x2de>
	}
	while (thenumber/the_scaler==0)
    1f04:	0f 2e       	mov	r0, r31
    1f06:	41 2c       	mov	r4, r1
    1f08:	fa ec       	ldi	r31, 0xCA	; 202
    1f0a:	5f 2e       	mov	r5, r31
    1f0c:	fa e9       	ldi	r31, 0x9A	; 154
    1f0e:	6f 2e       	mov	r6, r31
    1f10:	fb e3       	ldi	r31, 0x3B	; 59
    1f12:	7f 2e       	mov	r7, r31
    1f14:	f0 2d       	mov	r31, r0
	{
		the_scaler=the_scaler/10;
    1f16:	9a 86       	std	Y+10, r9	; 0x0a
    1f18:	38 8e       	std	Y+24, r3	; 0x18
    1f1a:	2f 8a       	std	Y+23, r2	; 0x17
    1f1c:	9a 88       	ldd	r9, Y+18	; 0x12
    1f1e:	3b 88       	ldd	r3, Y+19	; 0x13
    1f20:	2d 88       	ldd	r2, Y+21	; 0x15
    1f22:	c3 01       	movw	r24, r6
    1f24:	b2 01       	movw	r22, r4
    1f26:	2a e0       	ldi	r18, 0x0A	; 10
    1f28:	30 e0       	ldi	r19, 0x00	; 0
    1f2a:	40 e0       	ldi	r20, 0x00	; 0
    1f2c:	50 e0       	ldi	r21, 0x00	; 0
    1f2e:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    1f32:	29 01       	movw	r4, r18
    1f34:	3a 01       	movw	r6, r20
	if (thenumber==0)
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
    1f36:	89 01       	movw	r16, r18
    1f38:	9a 01       	movw	r18, r20
    1f3a:	a0 2e       	mov	r10, r16
    1f3c:	b1 2e       	mov	r11, r17
    1f3e:	c2 2e       	mov	r12, r18
    1f40:	d3 2e       	mov	r13, r19
    1f42:	e1 2c       	mov	r14, r1
    1f44:	f1 2c       	mov	r15, r1
    1f46:	00 e0       	ldi	r16, 0x00	; 0
    1f48:	10 e0       	ldi	r17, 0x00	; 0
    1f4a:	29 81       	ldd	r18, Y+1	; 0x01
    1f4c:	39 85       	ldd	r19, Y+9	; 0x09
    1f4e:	49 2d       	mov	r20, r9
    1f50:	53 2d       	mov	r21, r3
    1f52:	62 2d       	mov	r22, r2
    1f54:	78 2d       	mov	r23, r8
    1f56:	89 8d       	ldd	r24, Y+25	; 0x19
    1f58:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1f5a:	0e 94 06 14 	call	0x280c	; 0x280c <__divdi3>
    1f5e:	a0 e0       	ldi	r26, 0x00	; 0
    1f60:	0e 94 db 14 	call	0x29b6	; 0x29b6 <__cmpdi2_s8>
    1f64:	f1 f2       	breq	.-68     	; 0x1f22 <inttostring+0xf4>
    1f66:	9a 84       	ldd	r9, Y+10	; 0x0a
    1f68:	2f 88       	ldd	r2, Y+23	; 0x17
    1f6a:	38 8c       	ldd	r3, Y+24	; 0x18
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    1f6c:	93 01       	movw	r18, r6
    1f6e:	82 01       	movw	r16, r4
    1f70:	40 e0       	ldi	r20, 0x00	; 0
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	ba 01       	movw	r22, r20
    1f76:	71 01       	movw	r14, r2
    1f78:	e9 0c       	add	r14, r9
    1f7a:	f1 1c       	adc	r15, r1
    1f7c:	f8 8e       	std	Y+24, r15	; 0x18
    1f7e:	ef 8a       	std	Y+23, r14	; 0x17
    1f80:	4a 86       	std	Y+10, r4	; 0x0a
    1f82:	1b 87       	std	Y+11, r17	; 0x0b
    1f84:	2c 87       	std	Y+12, r18	; 0x0c
    1f86:	3d 87       	std	Y+13, r19	; 0x0d
    1f88:	4e 87       	std	Y+14, r20	; 0x0e
    1f8a:	5f 87       	std	Y+15, r21	; 0x0f
    1f8c:	68 8b       	std	Y+16, r22	; 0x10
    1f8e:	79 8b       	std	Y+17, r23	; 0x11
    1f90:	a4 2c       	mov	r10, r4
    1f92:	b1 2e       	mov	r11, r17
    1f94:	c2 2e       	mov	r12, r18
    1f96:	d3 2e       	mov	r13, r19
    1f98:	e1 2c       	mov	r14, r1
    1f9a:	f1 2c       	mov	r15, r1
    1f9c:	00 e0       	ldi	r16, 0x00	; 0
    1f9e:	10 e0       	ldi	r17, 0x00	; 0
    1fa0:	29 81       	ldd	r18, Y+1	; 0x01
    1fa2:	39 85       	ldd	r19, Y+9	; 0x09
    1fa4:	4a 89       	ldd	r20, Y+18	; 0x12
    1fa6:	5b 89       	ldd	r21, Y+19	; 0x13
    1fa8:	6d 89       	ldd	r22, Y+21	; 0x15
    1faa:	78 2d       	mov	r23, r8
    1fac:	89 8d       	ldd	r24, Y+25	; 0x19
    1fae:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fb0:	0e 94 06 14 	call	0x280c	; 0x280c <__divdi3>
    1fb4:	20 5d       	subi	r18, 0xD0	; 208
    1fb6:	ef 89       	ldd	r30, Y+23	; 0x17
    1fb8:	f8 8d       	ldd	r31, Y+24	; 0x18
    1fba:	20 83       	st	Z, r18
			counter++;
    1fbc:	93 94       	inc	r9
			thenumber=thenumber%the_scaler;
    1fbe:	29 81       	ldd	r18, Y+1	; 0x01
    1fc0:	39 85       	ldd	r19, Y+9	; 0x09
    1fc2:	4a 89       	ldd	r20, Y+18	; 0x12
    1fc4:	5b 89       	ldd	r21, Y+19	; 0x13
    1fc6:	6d 89       	ldd	r22, Y+21	; 0x15
    1fc8:	78 2d       	mov	r23, r8
    1fca:	89 8d       	ldd	r24, Y+25	; 0x19
    1fcc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1fce:	0e 94 04 14 	call	0x2808	; 0x2808 <__moddi3>
    1fd2:	82 2e       	mov	r8, r18
    1fd4:	39 87       	std	Y+9, r19	; 0x09
    1fd6:	4a 87       	std	Y+10, r20	; 0x0a
    1fd8:	e5 2e       	mov	r14, r21
    1fda:	16 2f       	mov	r17, r22
    1fdc:	07 2f       	mov	r16, r23
    1fde:	f8 2e       	mov	r15, r24
    1fe0:	9a 8b       	std	Y+18, r25	; 0x12
			if (the_scaler==1)
    1fe2:	f1 e0       	ldi	r31, 0x01	; 1
    1fe4:	4f 16       	cp	r4, r31
    1fe6:	51 04       	cpc	r5, r1
    1fe8:	61 04       	cpc	r6, r1
    1fea:	71 04       	cpc	r7, r1
    1fec:	09 f0       	breq	.+2      	; 0x1ff0 <inttostring+0x1c2>
    1fee:	86 c0       	rjmp	.+268    	; 0x20fc <inttostring+0x2ce>
    1ff0:	51 c0       	rjmp	.+162    	; 0x2094 <inttostring+0x266>
			{
				break;
			}
			the_scaler=the_scaler/10;
    1ff2:	c3 01       	movw	r24, r6
    1ff4:	b2 01       	movw	r22, r4
    1ff6:	2a e0       	ldi	r18, 0x0A	; 10
    1ff8:	30 e0       	ldi	r19, 0x00	; 0
    1ffa:	40 e0       	ldi	r20, 0x00	; 0
    1ffc:	50 e0       	ldi	r21, 0x00	; 0
    1ffe:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    2002:	29 01       	movw	r4, r18
    2004:	3a 01       	movw	r6, r20
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    2006:	59 01       	movw	r10, r18
    2008:	6a 01       	movw	r12, r20
    200a:	e1 2c       	mov	r14, r1
    200c:	f1 2c       	mov	r15, r1
    200e:	87 01       	movw	r16, r14
    2010:	29 83       	std	Y+1, r18	; 0x01
    2012:	ba 82       	std	Y+2, r11	; 0x02
    2014:	cb 82       	std	Y+3, r12	; 0x03
    2016:	dc 82       	std	Y+4, r13	; 0x04
    2018:	ed 82       	std	Y+5, r14	; 0x05
    201a:	fe 82       	std	Y+6, r15	; 0x06
    201c:	0f 83       	std	Y+7, r16	; 0x07
    201e:	18 87       	std	Y+8, r17	; 0x08
    2020:	cd 88       	ldd	r12, Y+21	; 0x15
    2022:	de 88       	ldd	r13, Y+22	; 0x16
    2024:	ea 8c       	ldd	r14, Y+26	; 0x1a
    2026:	ce 0c       	add	r12, r14
    2028:	d1 1c       	adc	r13, r1
    202a:	dc 8a       	std	Y+20, r13	; 0x14
    202c:	cb 8a       	std	Y+19, r12	; 0x13
    202e:	cb 80       	ldd	r12, Y+3	; 0x03
    2030:	dc 80       	ldd	r13, Y+4	; 0x04
    2032:	e1 2c       	mov	r14, r1
    2034:	f1 2c       	mov	r15, r1
    2036:	00 e0       	ldi	r16, 0x00	; 0
    2038:	10 e0       	ldi	r17, 0x00	; 0
    203a:	28 2d       	mov	r18, r8
    203c:	39 85       	ldd	r19, Y+9	; 0x09
    203e:	4a 85       	ldd	r20, Y+10	; 0x0a
    2040:	52 2d       	mov	r21, r2
    2042:	63 2d       	mov	r22, r3
    2044:	79 2d       	mov	r23, r9
    2046:	89 8d       	ldd	r24, Y+25	; 0x19
    2048:	9a 89       	ldd	r25, Y+18	; 0x12
    204a:	0e 94 06 14 	call	0x280c	; 0x280c <__divdi3>
    204e:	20 5d       	subi	r18, 0xD0	; 208
    2050:	eb 89       	ldd	r30, Y+19	; 0x13
    2052:	fc 89       	ldd	r31, Y+20	; 0x14
    2054:	20 83       	st	Z, r18
			counter++;
    2056:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2058:	ff 5f       	subi	r31, 0xFF	; 255
    205a:	fa 8f       	std	Y+26, r31	; 0x1a
			thenumber=thenumber%the_scaler;
    205c:	28 2d       	mov	r18, r8
    205e:	39 85       	ldd	r19, Y+9	; 0x09
    2060:	4a 85       	ldd	r20, Y+10	; 0x0a
    2062:	52 2d       	mov	r21, r2
    2064:	63 2d       	mov	r22, r3
    2066:	79 2d       	mov	r23, r9
    2068:	89 8d       	ldd	r24, Y+25	; 0x19
    206a:	9a 89       	ldd	r25, Y+18	; 0x12
    206c:	0e 94 04 14 	call	0x2808	; 0x2808 <__moddi3>
    2070:	82 2e       	mov	r8, r18
    2072:	39 87       	std	Y+9, r19	; 0x09
    2074:	4a 87       	std	Y+10, r20	; 0x0a
    2076:	25 2e       	mov	r2, r21
    2078:	36 2e       	mov	r3, r22
    207a:	97 2e       	mov	r9, r23
    207c:	89 8f       	std	Y+25, r24	; 0x19
    207e:	9a 8b       	std	Y+18, r25	; 0x12
			if (the_scaler==1)
    2080:	01 e0       	ldi	r16, 0x01	; 1
    2082:	40 16       	cp	r4, r16
    2084:	51 04       	cpc	r5, r1
    2086:	61 04       	cpc	r6, r1
    2088:	71 04       	cpc	r7, r1
    208a:	09 f0       	breq	.+2      	; 0x208e <inttostring+0x260>
    208c:	b2 cf       	rjmp	.-156    	; 0x1ff2 <inttostring+0x1c4>
    208e:	9a 8c       	ldd	r9, Y+26	; 0x1a
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
			counter++;
    2090:	89 2d       	mov	r24, r9
    2092:	3c c0       	rjmp	.+120    	; 0x210c <inttostring+0x2de>
    2094:	89 2d       	mov	r24, r9
    2096:	3a c0       	rjmp	.+116    	; 0x210c <inttostring+0x2de>
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    2098:	f1 01       	movw	r30, r2
    209a:	e9 0d       	add	r30, r9
    209c:	f1 1d       	adc	r31, r1
    209e:	b0 5d       	subi	r27, 0xD0	; 208
    20a0:	b0 83       	st	Z, r27
			counter++;
    20a2:	93 94       	inc	r9
			thenumber=thenumber%the_scaler;
    20a4:	a1 2c       	mov	r10, r1
    20a6:	0f 2e       	mov	r0, r31
    20a8:	fa ec       	ldi	r31, 0xCA	; 202
    20aa:	bf 2e       	mov	r11, r31
    20ac:	f0 2d       	mov	r31, r0
    20ae:	0f 2e       	mov	r0, r31
    20b0:	fa e9       	ldi	r31, 0x9A	; 154
    20b2:	cf 2e       	mov	r12, r31
    20b4:	f0 2d       	mov	r31, r0
    20b6:	0f 2e       	mov	r0, r31
    20b8:	fb e3       	ldi	r31, 0x3B	; 59
    20ba:	df 2e       	mov	r13, r31
    20bc:	f0 2d       	mov	r31, r0
    20be:	e1 2c       	mov	r14, r1
    20c0:	f1 2c       	mov	r15, r1
    20c2:	00 e0       	ldi	r16, 0x00	; 0
    20c4:	10 e0       	ldi	r17, 0x00	; 0
    20c6:	29 81       	ldd	r18, Y+1	; 0x01
    20c8:	39 85       	ldd	r19, Y+9	; 0x09
    20ca:	4a 89       	ldd	r20, Y+18	; 0x12
    20cc:	5b 89       	ldd	r21, Y+19	; 0x13
    20ce:	6d 89       	ldd	r22, Y+21	; 0x15
    20d0:	78 2d       	mov	r23, r8
    20d2:	89 8d       	ldd	r24, Y+25	; 0x19
    20d4:	9a 8d       	ldd	r25, Y+26	; 0x1a
    20d6:	0e 94 04 14 	call	0x2808	; 0x2808 <__moddi3>
    20da:	82 2e       	mov	r8, r18
    20dc:	39 87       	std	Y+9, r19	; 0x09
    20de:	4a 87       	std	Y+10, r20	; 0x0a
    20e0:	e5 2e       	mov	r14, r21
    20e2:	16 2f       	mov	r17, r22
    20e4:	07 2f       	mov	r16, r23
    20e6:	f8 2e       	mov	r15, r24
    20e8:	9a 8b       	std	Y+18, r25	; 0x12
    20ea:	0f 2e       	mov	r0, r31
    20ec:	41 2c       	mov	r4, r1
    20ee:	fa ec       	ldi	r31, 0xCA	; 202
    20f0:	5f 2e       	mov	r5, r31
    20f2:	fa e9       	ldi	r31, 0x9A	; 154
    20f4:	6f 2e       	mov	r6, r31
    20f6:	fb e3       	ldi	r31, 0x3B	; 59
    20f8:	7f 2e       	mov	r7, r31
    20fa:	f0 2d       	mov	r31, r0
    20fc:	9a 8e       	std	Y+26, r9	; 0x1a
    20fe:	3e 8a       	std	Y+22, r3	; 0x16
    2100:	2d 8a       	std	Y+21, r2	; 0x15
    2102:	2e 2c       	mov	r2, r14
    2104:	31 2e       	mov	r3, r17
    2106:	90 2e       	mov	r9, r16
    2108:	f9 8e       	std	Y+25, r15	; 0x19
    210a:	73 cf       	rjmp	.-282    	; 0x1ff2 <inttostring+0x1c4>
	
	
	
	
	return counter;
}
    210c:	6a 96       	adiw	r28, 0x1a	; 26
    210e:	0f b6       	in	r0, 0x3f	; 63
    2110:	f8 94       	cli
    2112:	de bf       	out	0x3e, r29	; 62
    2114:	0f be       	out	0x3f, r0	; 63
    2116:	cd bf       	out	0x3d, r28	; 61
    2118:	df 91       	pop	r29
    211a:	cf 91       	pop	r28
    211c:	1f 91       	pop	r17
    211e:	0f 91       	pop	r16
    2120:	ff 90       	pop	r15
    2122:	ef 90       	pop	r14
    2124:	df 90       	pop	r13
    2126:	cf 90       	pop	r12
    2128:	bf 90       	pop	r11
    212a:	af 90       	pop	r10
    212c:	9f 90       	pop	r9
    212e:	8f 90       	pop	r8
    2130:	7f 90       	pop	r7
    2132:	6f 90       	pop	r6
    2134:	5f 90       	pop	r5
    2136:	4f 90       	pop	r4
    2138:	3f 90       	pop	r3
    213a:	2f 90       	pop	r2
    213c:	08 95       	ret

0000213e <TEST_IO_SETUP>:
#include "TEST.h"
#include "minohelper.h"
extern volatile unsigned short MAIN_REGISTERS[20];
void TEST_IO_SETUP()
{
	gpio_outputconfg(PORT_DDR_TEST_1,PORT_OUTMOD_TEST_1,OUTPASS,TEST_1_PIN);
    213e:	22 e0       	ldi	r18, 0x02	; 2
    2140:	40 e0       	ldi	r20, 0x00	; 0
    2142:	69 e3       	ldi	r22, 0x39	; 57
    2144:	70 e0       	ldi	r23, 0x00	; 0
    2146:	8a e3       	ldi	r24, 0x3A	; 58
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_TEST_2,PORT_OUTMOD_TEST_2,OUTPASS,TEST_2_PIN);
    214e:	23 e0       	ldi	r18, 0x03	; 3
    2150:	40 e0       	ldi	r20, 0x00	; 0
    2152:	69 e3       	ldi	r22, 0x39	; 57
    2154:	70 e0       	ldi	r23, 0x00	; 0
    2156:	8a e3       	ldi	r24, 0x3A	; 58
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_TEST_3,PORT_OUTMOD_TEST_3,OUTPASS,TEST_3_PIN);
    215e:	24 e0       	ldi	r18, 0x04	; 4
    2160:	40 e0       	ldi	r20, 0x00	; 0
    2162:	69 e3       	ldi	r22, 0x39	; 57
    2164:	70 e0       	ldi	r23, 0x00	; 0
    2166:	8a e3       	ldi	r24, 0x3A	; 58
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
    216e:	08 95       	ret

00002170 <TEST_SETUP>:
}

void TEST_SETUP()
{
    2170:	cf 92       	push	r12
    2172:	df 92       	push	r13
    2174:	ef 92       	push	r14
    2176:	ff 92       	push	r15
    2178:	0f 93       	push	r16
    217a:	1f 93       	push	r17
	USART_INIT(ASYNCHRONOUS_NORMAL,INT_disable,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,9600);
    217c:	0f 2e       	mov	r0, r31
    217e:	f0 e8       	ldi	r31, 0x80	; 128
    2180:	cf 2e       	mov	r12, r31
    2182:	f5 e2       	ldi	r31, 0x25	; 37
    2184:	df 2e       	mov	r13, r31
    2186:	e1 2c       	mov	r14, r1
    2188:	f1 2c       	mov	r15, r1
    218a:	f0 2d       	mov	r31, r0
    218c:	06 e0       	ldi	r16, 0x06	; 6
    218e:	10 e0       	ldi	r17, 0x00	; 0
    2190:	20 e0       	ldi	r18, 0x00	; 0
    2192:	48 e1       	ldi	r20, 0x18	; 24
    2194:	60 e0       	ldi	r22, 0x00	; 0
    2196:	80 e0       	ldi	r24, 0x00	; 0
    2198:	90 e0       	ldi	r25, 0x00	; 0
    219a:	0e 94 08 11 	call	0x2210	; 0x2210 <USART_INIT>
	MAIN_REGISTERS[7]=0;
    219e:	10 92 38 02 	sts	0x0238, r1
    21a2:	10 92 37 02 	sts	0x0237, r1
	MAIN_REGISTERS[8]=1;
    21a6:	81 e0       	ldi	r24, 0x01	; 1
    21a8:	90 e0       	ldi	r25, 0x00	; 0
    21aa:	90 93 3a 02 	sts	0x023A, r25
    21ae:	80 93 39 02 	sts	0x0239, r24
}
    21b2:	1f 91       	pop	r17
    21b4:	0f 91       	pop	r16
    21b6:	ff 90       	pop	r15
    21b8:	ef 90       	pop	r14
    21ba:	df 90       	pop	r13
    21bc:	cf 90       	pop	r12
    21be:	08 95       	ret

000021c0 <TEST_UART_SEND_VALUE>:

void TEST_UART_SEND_VALUE(long long X)
{
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	cd b7       	in	r28, 0x3d	; 61
    21ca:	de b7       	in	r29, 0x3e	; 62
    21cc:	2f 97       	sbiw	r28, 0x0f	; 15
    21ce:	0f b6       	in	r0, 0x3f	; 63
    21d0:	f8 94       	cli
    21d2:	de bf       	out	0x3e, r29	; 62
    21d4:	0f be       	out	0x3f, r0	; 63
    21d6:	cd bf       	out	0x3d, r28	; 61
	unsigned char VALUE[15];
	USART_SEND_ARRAY(VALUE,inttostring(VALUE,X));
    21d8:	02 2f       	mov	r16, r18
    21da:	13 2f       	mov	r17, r19
    21dc:	24 2f       	mov	r18, r20
    21de:	35 2f       	mov	r19, r21
    21e0:	46 2f       	mov	r20, r22
    21e2:	57 2f       	mov	r21, r23
    21e4:	68 2f       	mov	r22, r24
    21e6:	79 2f       	mov	r23, r25
    21e8:	ce 01       	movw	r24, r28
    21ea:	01 96       	adiw	r24, 0x01	; 1
    21ec:	0e 94 17 0f 	call	0x1e2e	; 0x1e2e <inttostring>
    21f0:	68 2f       	mov	r22, r24
    21f2:	ce 01       	movw	r24, r28
    21f4:	01 96       	adiw	r24, 0x01	; 1
    21f6:	0e 94 dd 11 	call	0x23ba	; 0x23ba <USART_SEND_ARRAY>
}
    21fa:	2f 96       	adiw	r28, 0x0f	; 15
    21fc:	0f b6       	in	r0, 0x3f	; 63
    21fe:	f8 94       	cli
    2200:	de bf       	out	0x3e, r29	; 62
    2202:	0f be       	out	0x3f, r0	; 63
    2204:	cd bf       	out	0x3d, r28	; 61
    2206:	df 91       	pop	r29
    2208:	cf 91       	pop	r28
    220a:	1f 91       	pop	r17
    220c:	0f 91       	pop	r16
    220e:	08 95       	ret

00002210 <USART_INIT>:
#include "uart.h"
volatile unsigned long uart_waiting=0;

/*USART_INIT(ASYNCHRONOUS_NORMAL,INT_disable,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,USART_BAUD_38400);*/
	void USART_INIT(usart_mode mode_of_sync,usart_int intrupts,USART_ENABLE usarttype_TX_RX,USART_CONTORL_FRAME controlframe,USART_DATA_FRAME dataframe,USART_BAUDE_RATES buade_rate)
	{  
    2210:	9f 92       	push	r9
    2212:	af 92       	push	r10
    2214:	bf 92       	push	r11
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	ec 01       	movw	r28, r24
    2228:	b6 2e       	mov	r11, r22
    222a:	a4 2e       	mov	r10, r20
    222c:	92 2e       	mov	r9, r18
		uint16 ubrr_=0;
		 gpio_outputconfg(PORTD_DDRA_ADDRESS,PORTD_OUTMOD_ADDRESS,OUTPASS,1);
    222e:	21 e0       	ldi	r18, 0x01	; 1
    2230:	40 e0       	ldi	r20, 0x00	; 0
    2232:	60 e3       	ldi	r22, 0x30	; 48
    2234:	70 e0       	ldi	r23, 0x00	; 0
    2236:	81 e3       	ldi	r24, 0x31	; 49
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
		  gpio_inputconfg(PORTD_DDRA_ADDRESS,PORTD_INMOD_ADDRESS,FLOAT_mod,0);
    223e:	20 e0       	ldi	r18, 0x00	; 0
    2240:	40 e0       	ldi	r20, 0x00	; 0
    2242:	62 e3       	ldi	r22, 0x32	; 50
    2244:	70 e0       	ldi	r23, 0x00	; 0
    2246:	81 e3       	ldi	r24, 0x31	; 49
    2248:	90 e0       	ldi	r25, 0x00	; 0
    224a:	0e 94 9b 04 	call	0x936	; 0x936 <gpio_inputconfg>




      
         UCSRB_Access=0;
    224e:	1a b8       	out	0x0a, r1	; 10

	  
		UCSRC_Access=0x80|mode_of_sync|controlframe|dataframe;
    2250:	89 2d       	mov	r24, r9
    2252:	80 2b       	or	r24, r16
    2254:	80 68       	ori	r24, 0x80	; 128
    2256:	9c 2e       	mov	r9, r28
    2258:	98 2a       	or	r9, r24
    225a:	90 bc       	out	0x20, r9	; 32
	  UCSRB_Access |= intrupts|usarttype_TX_RX;
    225c:	8a b1       	in	r24, 0x0a	; 10
    225e:	a8 2a       	or	r10, r24
    2260:	ba 28       	or	r11, r10
    2262:	ba b8       	out	0x0a, r11	; 10
	   UCSRB_Access|=dataframe>>8;
    2264:	8a b1       	in	r24, 0x0a	; 10
    2266:	18 2b       	or	r17, r24
    2268:	1a b9       	out	0x0a, r17	; 10
	
	  
	  
	  UCSRA_Access|=(mode_of_sync>>8)|mult_mcus_comm_mode;
    226a:	8b b1       	in	r24, 0x0b	; 11
    226c:	8d 2b       	or	r24, r29
    226e:	8b b9       	out	0x0b, r24	; 11
		if ((mode_of_sync==SYNC_sample_FALLING) ||(mode_of_sync==SYNC_sample_RISING))
    2270:	ce 01       	movw	r24, r28
    2272:	80 54       	subi	r24, 0x40	; 64
    2274:	91 09       	sbc	r25, r1
    2276:	02 97       	sbiw	r24, 0x02	; 2
    2278:	40 f4       	brcc	.+16     	; 0x228a <USART_INIT+0x7a>
		{
	     #if _MASTER_ ==1  
		 gpio_outputconfg(PORTB_DDRA_ADDRESS,PORTB_OUTMOD_ADDRESS,OUTPASS,0);
    227a:	20 e0       	ldi	r18, 0x00	; 0
    227c:	40 e0       	ldi	r20, 0x00	; 0
    227e:	66 e3       	ldi	r22, 0x36	; 54
    2280:	70 e0       	ldi	r23, 0x00	; 0
    2282:	87 e3       	ldi	r24, 0x37	; 55
    2284:	90 e0       	ldi	r25, 0x00	; 0
    2286:	0e 94 b8 04 	call	0x970	; 0x970 <gpio_outputconfg>
		 gpio_inputconfg(PORTB_DDRA_ADDRESS,PORTB_INMOD_ADDRESS,FLOAT_mod,0);
         #endif
		 ;
		}
	
		  switch (mode_of_sync)
    228a:	c2 34       	cpi	r28, 0x42	; 66
    228c:	d1 05       	cpc	r29, r1
    228e:	30 f4       	brcc	.+12     	; 0x229c <USART_INIT+0x8c>
    2290:	c0 34       	cpi	r28, 0x40	; 64
    2292:	d1 05       	cpc	r29, r1
    2294:	c8 f5       	brcc	.+114    	; 0x2308 <USART_INIT+0xf8>
    2296:	cd 2b       	or	r28, r29
    2298:	29 f0       	breq	.+10     	; 0x22a4 <USART_INIT+0x94>
    229a:	50 c0       	rjmp	.+160    	; 0x233c <USART_INIT+0x12c>
    229c:	c1 15       	cp	r28, r1
    229e:	d2 40       	sbci	r29, 0x02	; 2
    22a0:	e1 f0       	breq	.+56     	; 0x22da <USART_INIT+0xca>
    22a2:	4c c0       	rjmp	.+152    	; 0x233c <USART_INIT+0x12c>
		{case ASYNCHRONOUS_NORMAL:ubrr_= (F_CPU/(16UL*buade_rate)-1);
    22a4:	cc 0c       	add	r12, r12
    22a6:	dd 1c       	adc	r13, r13
    22a8:	ee 1c       	adc	r14, r14
    22aa:	ff 1c       	adc	r15, r15
    22ac:	cc 0c       	add	r12, r12
    22ae:	dd 1c       	adc	r13, r13
    22b0:	ee 1c       	adc	r14, r14
    22b2:	ff 1c       	adc	r15, r15
    22b4:	a7 01       	movw	r20, r14
    22b6:	96 01       	movw	r18, r12
    22b8:	22 0f       	add	r18, r18
    22ba:	33 1f       	adc	r19, r19
    22bc:	44 1f       	adc	r20, r20
    22be:	55 1f       	adc	r21, r21
    22c0:	22 0f       	add	r18, r18
    22c2:	33 1f       	adc	r19, r19
    22c4:	44 1f       	adc	r20, r20
    22c6:	55 1f       	adc	r21, r21
    22c8:	60 e0       	ldi	r22, 0x00	; 0
    22ca:	74 e2       	ldi	r23, 0x24	; 36
    22cc:	84 ef       	ldi	r24, 0xF4	; 244
    22ce:	90 e0       	ldi	r25, 0x00	; 0
    22d0:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    22d4:	21 50       	subi	r18, 0x01	; 1
    22d6:	31 09       	sbc	r19, r1
			                       break;
    22d8:	33 c0       	rjmp	.+102    	; 0x2340 <USART_INIT+0x130>
			case ASYNCHRONOUS_DOUBLE:ubrr_= (F_CPU/(8UL*buade_rate)-1);
    22da:	cc 0c       	add	r12, r12
    22dc:	dd 1c       	adc	r13, r13
    22de:	ee 1c       	adc	r14, r14
    22e0:	ff 1c       	adc	r15, r15
    22e2:	cc 0c       	add	r12, r12
    22e4:	dd 1c       	adc	r13, r13
    22e6:	ee 1c       	adc	r14, r14
    22e8:	ff 1c       	adc	r15, r15
    22ea:	a7 01       	movw	r20, r14
    22ec:	96 01       	movw	r18, r12
    22ee:	22 0f       	add	r18, r18
    22f0:	33 1f       	adc	r19, r19
    22f2:	44 1f       	adc	r20, r20
    22f4:	55 1f       	adc	r21, r21
    22f6:	60 e0       	ldi	r22, 0x00	; 0
    22f8:	74 e2       	ldi	r23, 0x24	; 36
    22fa:	84 ef       	ldi	r24, 0xF4	; 244
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 d7 13 	call	0x27ae	; 0x27ae <__udivmodsi4>
    2302:	21 50       	subi	r18, 0x01	; 1
    2304:	31 09       	sbc	r19, r1
			                       break;
    2306:	1c c0       	rjmp	.+56     	; 0x2340 <USART_INIT+0x130>
			
			case SYNC_sample_RISING:
			case SYNC_sample_FALLING:
			                        ubrr_= (F_CPU/(2.0*buade_rate)-1);
    2308:	c7 01       	movw	r24, r14
    230a:	b6 01       	movw	r22, r12
    230c:	0e 94 39 13 	call	0x2672	; 0x2672 <__floatunsisf>
    2310:	9b 01       	movw	r18, r22
    2312:	ac 01       	movw	r20, r24
    2314:	0e 94 41 12 	call	0x2482	; 0x2482 <__addsf3>
    2318:	9b 01       	movw	r18, r22
    231a:	ac 01       	movw	r20, r24
    231c:	60 e0       	ldi	r22, 0x00	; 0
    231e:	74 e2       	ldi	r23, 0x24	; 36
    2320:	84 e7       	ldi	r24, 0x74	; 116
    2322:	9b e4       	ldi	r25, 0x4B	; 75
    2324:	0e 94 a5 12 	call	0x254a	; 0x254a <__divsf3>
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 40 12 	call	0x2480	; 0x2480 <__subsf3>
    2334:	0e 94 0d 13 	call	0x261a	; 0x261a <__fixunssfsi>
    2338:	9b 01       	movw	r18, r22
			                        break;
    233a:	02 c0       	rjmp	.+4      	; 0x2340 <USART_INIT+0x130>
volatile unsigned long uart_waiting=0;

/*USART_INIT(ASYNCHRONOUS_NORMAL,INT_disable,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,USART_BAUD_38400);*/
	void USART_INIT(usart_mode mode_of_sync,usart_int intrupts,USART_ENABLE usarttype_TX_RX,USART_CONTORL_FRAME controlframe,USART_DATA_FRAME dataframe,USART_BAUDE_RATES buade_rate)
	{  
		uint16 ubrr_=0;
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
									
		}
		
		
		
		 UBRRL_Access=0xff & ubrr_;
    2340:	29 b9       	out	0x09, r18	; 9
		  UBRRH_Access=0x0f & (ubrr_>>8);
    2342:	83 2f       	mov	r24, r19
    2344:	8f 70       	andi	r24, 0x0F	; 15
    2346:	80 bd       	out	0x20, r24	; 32
		 
		 
	}
    2348:	df 91       	pop	r29
    234a:	cf 91       	pop	r28
    234c:	1f 91       	pop	r17
    234e:	0f 91       	pop	r16
    2350:	ff 90       	pop	r15
    2352:	ef 90       	pop	r14
    2354:	df 90       	pop	r13
    2356:	cf 90       	pop	r12
    2358:	bf 90       	pop	r11
    235a:	af 90       	pop	r10
    235c:	9f 90       	pop	r9
    235e:	08 95       	ret

00002360 <USART_SEND_BYTE>:
	void USART_SEND_BYTE(uint8 data)
	{
		uart_waiting=0;
    2360:	10 92 e5 01 	sts	0x01E5, r1
    2364:	10 92 e6 01 	sts	0x01E6, r1
    2368:	10 92 e7 01 	sts	0x01E7, r1
    236c:	10 92 e8 01 	sts	0x01E8, r1
		
		UDR_Access=data;
    2370:	8c b9       	out	0x0c, r24	; 12
		
		while(isbitclear(UCSRA_Access,UDRE_))
    2372:	20 c0       	rjmp	.+64     	; 0x23b4 <USART_SEND_BYTE+0x54>
		{
			uart_waiting++;
    2374:	80 91 e5 01 	lds	r24, 0x01E5
    2378:	90 91 e6 01 	lds	r25, 0x01E6
    237c:	a0 91 e7 01 	lds	r26, 0x01E7
    2380:	b0 91 e8 01 	lds	r27, 0x01E8
    2384:	01 96       	adiw	r24, 0x01	; 1
    2386:	a1 1d       	adc	r26, r1
    2388:	b1 1d       	adc	r27, r1
    238a:	80 93 e5 01 	sts	0x01E5, r24
    238e:	90 93 e6 01 	sts	0x01E6, r25
    2392:	a0 93 e7 01 	sts	0x01E7, r26
    2396:	b0 93 e8 01 	sts	0x01E8, r27
		if (uart_waiting>uart_max_count)
    239a:	80 91 e5 01 	lds	r24, 0x01E5
    239e:	90 91 e6 01 	lds	r25, 0x01E6
    23a2:	a0 91 e7 01 	lds	r26, 0x01E7
    23a6:	b0 91 e8 01 	lds	r27, 0x01E8
    23aa:	81 35       	cpi	r24, 0x51	; 81
    23ac:	93 4c       	sbci	r25, 0xC3	; 195
    23ae:	a1 05       	cpc	r26, r1
    23b0:	b1 05       	cpc	r27, r1
    23b2:	10 f4       	brcc	.+4      	; 0x23b8 <USART_SEND_BYTE+0x58>
	{
		uart_waiting=0;
		
		UDR_Access=data;
		
		while(isbitclear(UCSRA_Access,UDRE_))
    23b4:	5d 9b       	sbis	0x0b, 5	; 11
    23b6:	de cf       	rjmp	.-68     	; 0x2374 <USART_SEND_BYTE+0x14>
    23b8:	08 95       	ret

000023ba <USART_SEND_ARRAY>:
			*vaildity=1;
		return UDR_Access;
		
	}
	void USART_SEND_ARRAY(uint8* ptr,uint8 size)
	{uint8 i=0;
    23ba:	0f 93       	push	r16
    23bc:	1f 93       	push	r17
    23be:	cf 93       	push	r28
    23c0:	df 93       	push	r29
    23c2:	06 2f       	mov	r16, r22
		for(i=0;i<size;i++)
    23c4:	66 23       	and	r22, r22
    23c6:	49 f0       	breq	.+18     	; 0x23da <USART_SEND_ARRAY+0x20>
    23c8:	c8 2f       	mov	r28, r24
    23ca:	d9 2f       	mov	r29, r25
    23cc:	10 e0       	ldi	r17, 0x00	; 0
		{
			USART_SEND_BYTE(ptr[i]);	
    23ce:	89 91       	ld	r24, Y+
    23d0:	0e 94 b0 11 	call	0x2360	; 0x2360 <USART_SEND_BYTE>
		return UDR_Access;
		
	}
	void USART_SEND_ARRAY(uint8* ptr,uint8 size)
	{uint8 i=0;
		for(i=0;i<size;i++)
    23d4:	1f 5f       	subi	r17, 0xFF	; 255
    23d6:	10 13       	cpse	r17, r16
    23d8:	fa cf       	rjmp	.-12     	; 0x23ce <USART_SEND_ARRAY+0x14>
		{
			USART_SEND_BYTE(ptr[i]);	
		}
		
	}
    23da:	df 91       	pop	r29
    23dc:	cf 91       	pop	r28
    23de:	1f 91       	pop	r17
    23e0:	0f 91       	pop	r16
    23e2:	08 95       	ret

000023e4 <USART_SEND_str>:
	
	void USART_SEND_str(char* ptr)
{  uint8 i=0;
    23e4:	1f 93       	push	r17
    23e6:	cf 93       	push	r28
    23e8:	df 93       	push	r29
    23ea:	ec 01       	movw	r28, r24
		while(ptr[i]!='\0')
    23ec:	88 81       	ld	r24, Y
    23ee:	88 23       	and	r24, r24
    23f0:	81 f0       	breq	.+32     	; 0x2412 <USART_SEND_str+0x2e>
		}
		
	}
	
	void USART_SEND_str(char* ptr)
{  uint8 i=0;
    23f2:	10 e0       	ldi	r17, 0x00	; 0
		while(ptr[i]!='\0')
		{
			USART_SEND_BYTE(ptr[i]);
    23f4:	0e 94 b0 11 	call	0x2360	; 0x2360 <USART_SEND_BYTE>
    23f8:	8f e9       	ldi	r24, 0x9F	; 159
    23fa:	9f e0       	ldi	r25, 0x0F	; 15
    23fc:	01 97       	sbiw	r24, 0x01	; 1
    23fe:	f1 f7       	brne	.-4      	; 0x23fc <USART_SEND_str+0x18>
    2400:	00 c0       	rjmp	.+0      	; 0x2402 <USART_SEND_str+0x1e>
    2402:	00 00       	nop
			_delay_ms(1);
			++i;
    2404:	1f 5f       	subi	r17, 0xFF	; 255
		
	}
	
	void USART_SEND_str(char* ptr)
{  uint8 i=0;
		while(ptr[i]!='\0')
    2406:	fe 01       	movw	r30, r28
    2408:	e1 0f       	add	r30, r17
    240a:	f1 1d       	adc	r31, r1
    240c:	80 81       	ld	r24, Z
    240e:	81 11       	cpse	r24, r1
    2410:	f1 cf       	rjmp	.-30     	; 0x23f4 <USART_SEND_str+0x10>
		{
			USART_SEND_BYTE(ptr[i]);
			_delay_ms(1);
			++i;
		}
		USART_SEND_BYTE('\0');
    2412:	80 e0       	ldi	r24, 0x00	; 0
    2414:	0e 94 b0 11 	call	0x2360	; 0x2360 <USART_SEND_BYTE>
		}
    2418:	df 91       	pop	r29
    241a:	cf 91       	pop	r28
    241c:	1f 91       	pop	r17
    241e:	08 95       	ret

00002420 <TIMERS_SETUP>:
#include "TIMER.h"



void TIMERS_SETUP()
{
    2420:	8f 92       	push	r8
    2422:	af 92       	push	r10
    2424:	cf 92       	push	r12
    2426:	ef 92       	push	r14
    2428:	ff 92       	push	r15
    242a:	0f 93       	push	r16
    242c:	1f 93       	push	r17
	
	TIMER1_ENABLE(T1_OCA1_DISCONNECT,T1_OCB1_DISCONNECT,T1_NORMAL,T1_TIMER_256,0,0,ENABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT);
    242e:	1f 92       	push	r1
    2430:	81 2c       	mov	r8, r1
    2432:	a1 2c       	mov	r10, r1
    2434:	cc 24       	eor	r12, r12
    2436:	c3 94       	inc	r12
    2438:	e1 2c       	mov	r14, r1
    243a:	f1 2c       	mov	r15, r1
    243c:	00 e0       	ldi	r16, 0x00	; 0
    243e:	10 e0       	ldi	r17, 0x00	; 0
    2440:	24 e0       	ldi	r18, 0x04	; 4
    2442:	40 e0       	ldi	r20, 0x00	; 0
    2444:	60 e0       	ldi	r22, 0x00	; 0
    2446:	80 e0       	ldi	r24, 0x00	; 0
    2448:	0e 94 b9 07 	call	0xf72	; 0xf72 <TIMER1_ENABLE>
	TIMER0_ENABLE(TIMER_64,NORMAL_MOD,OC0_DISCONNECTED,OVER_FLOW_INT_ENABLE,0);
    244c:	21 e0       	ldi	r18, 0x01	; 1
    244e:	40 e0       	ldi	r20, 0x00	; 0
    2450:	60 e0       	ldi	r22, 0x00	; 0
    2452:	83 e0       	ldi	r24, 0x03	; 3
    2454:	0e 94 a4 07 	call	0xf48	; 0xf48 <TIMER0_ENABLE>
	global_interupt_enable();
    2458:	8f b7       	in	r24, 0x3f	; 63
    245a:	80 68       	ori	r24, 0x80	; 128
    245c:	8f bf       	out	0x3f, r24	; 63
    245e:	0f 90       	pop	r0
}
    2460:	1f 91       	pop	r17
    2462:	0f 91       	pop	r16
    2464:	ff 90       	pop	r15
    2466:	ef 90       	pop	r14
    2468:	cf 90       	pop	r12
    246a:	af 90       	pop	r10
    246c:	8f 90       	pop	r8
    246e:	08 95       	ret

00002470 <TIMER0_INT_EVENT>:

void TIMER0_INT_EVENT()
{
	APP_TIMER0();
    2470:	0e 94 5d 01 	call	0x2ba	; 0x2ba <APP_TIMER0>
    2474:	08 95       	ret

00002476 <TIMER1_INT_EVENT>:
	
}

void TIMER1_INT_EVENT()
{
	SENSOR_TIMER1();
    2476:	0e 94 0d 0f 	call	0x1e1a	; 0x1e1a <SENSOR_TIMER1>
	APP_TIMER1();
    247a:	0e 94 33 01 	call	0x266	; 0x266 <APP_TIMER1>
    247e:	08 95       	ret

00002480 <__subsf3>:
    2480:	50 58       	subi	r21, 0x80	; 128

00002482 <__addsf3>:
    2482:	bb 27       	eor	r27, r27
    2484:	aa 27       	eor	r26, r26
    2486:	0e d0       	rcall	.+28     	; 0x24a4 <__addsf3x>
    2488:	48 c1       	rjmp	.+656    	; 0x271a <__fp_round>
    248a:	39 d1       	rcall	.+626    	; 0x26fe <__fp_pscA>
    248c:	30 f0       	brcs	.+12     	; 0x249a <__addsf3+0x18>
    248e:	3e d1       	rcall	.+636    	; 0x270c <__fp_pscB>
    2490:	20 f0       	brcs	.+8      	; 0x249a <__addsf3+0x18>
    2492:	31 f4       	brne	.+12     	; 0x24a0 <__addsf3+0x1e>
    2494:	9f 3f       	cpi	r25, 0xFF	; 255
    2496:	11 f4       	brne	.+4      	; 0x249c <__addsf3+0x1a>
    2498:	1e f4       	brtc	.+6      	; 0x24a0 <__addsf3+0x1e>
    249a:	2e c1       	rjmp	.+604    	; 0x26f8 <__fp_nan>
    249c:	0e f4       	brtc	.+2      	; 0x24a0 <__addsf3+0x1e>
    249e:	e0 95       	com	r30
    24a0:	e7 fb       	bst	r30, 7
    24a2:	24 c1       	rjmp	.+584    	; 0x26ec <__fp_inf>

000024a4 <__addsf3x>:
    24a4:	e9 2f       	mov	r30, r25
    24a6:	4a d1       	rcall	.+660    	; 0x273c <__fp_split3>
    24a8:	80 f3       	brcs	.-32     	; 0x248a <__addsf3+0x8>
    24aa:	ba 17       	cp	r27, r26
    24ac:	62 07       	cpc	r22, r18
    24ae:	73 07       	cpc	r23, r19
    24b0:	84 07       	cpc	r24, r20
    24b2:	95 07       	cpc	r25, r21
    24b4:	18 f0       	brcs	.+6      	; 0x24bc <__addsf3x+0x18>
    24b6:	71 f4       	brne	.+28     	; 0x24d4 <__addsf3x+0x30>
    24b8:	9e f5       	brtc	.+102    	; 0x2520 <__addsf3x+0x7c>
    24ba:	62 c1       	rjmp	.+708    	; 0x2780 <__fp_zero>
    24bc:	0e f4       	brtc	.+2      	; 0x24c0 <__addsf3x+0x1c>
    24be:	e0 95       	com	r30
    24c0:	0b 2e       	mov	r0, r27
    24c2:	ba 2f       	mov	r27, r26
    24c4:	a0 2d       	mov	r26, r0
    24c6:	0b 01       	movw	r0, r22
    24c8:	b9 01       	movw	r22, r18
    24ca:	90 01       	movw	r18, r0
    24cc:	0c 01       	movw	r0, r24
    24ce:	ca 01       	movw	r24, r20
    24d0:	a0 01       	movw	r20, r0
    24d2:	11 24       	eor	r1, r1
    24d4:	ff 27       	eor	r31, r31
    24d6:	59 1b       	sub	r21, r25
    24d8:	99 f0       	breq	.+38     	; 0x2500 <__addsf3x+0x5c>
    24da:	59 3f       	cpi	r21, 0xF9	; 249
    24dc:	50 f4       	brcc	.+20     	; 0x24f2 <__addsf3x+0x4e>
    24de:	50 3e       	cpi	r21, 0xE0	; 224
    24e0:	68 f1       	brcs	.+90     	; 0x253c <__addsf3x+0x98>
    24e2:	1a 16       	cp	r1, r26
    24e4:	f0 40       	sbci	r31, 0x00	; 0
    24e6:	a2 2f       	mov	r26, r18
    24e8:	23 2f       	mov	r18, r19
    24ea:	34 2f       	mov	r19, r20
    24ec:	44 27       	eor	r20, r20
    24ee:	58 5f       	subi	r21, 0xF8	; 248
    24f0:	f3 cf       	rjmp	.-26     	; 0x24d8 <__addsf3x+0x34>
    24f2:	46 95       	lsr	r20
    24f4:	37 95       	ror	r19
    24f6:	27 95       	ror	r18
    24f8:	a7 95       	ror	r26
    24fa:	f0 40       	sbci	r31, 0x00	; 0
    24fc:	53 95       	inc	r21
    24fe:	c9 f7       	brne	.-14     	; 0x24f2 <__addsf3x+0x4e>
    2500:	7e f4       	brtc	.+30     	; 0x2520 <__addsf3x+0x7c>
    2502:	1f 16       	cp	r1, r31
    2504:	ba 0b       	sbc	r27, r26
    2506:	62 0b       	sbc	r22, r18
    2508:	73 0b       	sbc	r23, r19
    250a:	84 0b       	sbc	r24, r20
    250c:	ba f0       	brmi	.+46     	; 0x253c <__addsf3x+0x98>
    250e:	91 50       	subi	r25, 0x01	; 1
    2510:	a1 f0       	breq	.+40     	; 0x253a <__addsf3x+0x96>
    2512:	ff 0f       	add	r31, r31
    2514:	bb 1f       	adc	r27, r27
    2516:	66 1f       	adc	r22, r22
    2518:	77 1f       	adc	r23, r23
    251a:	88 1f       	adc	r24, r24
    251c:	c2 f7       	brpl	.-16     	; 0x250e <__addsf3x+0x6a>
    251e:	0e c0       	rjmp	.+28     	; 0x253c <__addsf3x+0x98>
    2520:	ba 0f       	add	r27, r26
    2522:	62 1f       	adc	r22, r18
    2524:	73 1f       	adc	r23, r19
    2526:	84 1f       	adc	r24, r20
    2528:	48 f4       	brcc	.+18     	; 0x253c <__addsf3x+0x98>
    252a:	87 95       	ror	r24
    252c:	77 95       	ror	r23
    252e:	67 95       	ror	r22
    2530:	b7 95       	ror	r27
    2532:	f7 95       	ror	r31
    2534:	9e 3f       	cpi	r25, 0xFE	; 254
    2536:	08 f0       	brcs	.+2      	; 0x253a <__addsf3x+0x96>
    2538:	b3 cf       	rjmp	.-154    	; 0x24a0 <__addsf3+0x1e>
    253a:	93 95       	inc	r25
    253c:	88 0f       	add	r24, r24
    253e:	08 f0       	brcs	.+2      	; 0x2542 <__addsf3x+0x9e>
    2540:	99 27       	eor	r25, r25
    2542:	ee 0f       	add	r30, r30
    2544:	97 95       	ror	r25
    2546:	87 95       	ror	r24
    2548:	08 95       	ret

0000254a <__divsf3>:
    254a:	0c d0       	rcall	.+24     	; 0x2564 <__divsf3x>
    254c:	e6 c0       	rjmp	.+460    	; 0x271a <__fp_round>
    254e:	de d0       	rcall	.+444    	; 0x270c <__fp_pscB>
    2550:	40 f0       	brcs	.+16     	; 0x2562 <__divsf3+0x18>
    2552:	d5 d0       	rcall	.+426    	; 0x26fe <__fp_pscA>
    2554:	30 f0       	brcs	.+12     	; 0x2562 <__divsf3+0x18>
    2556:	21 f4       	brne	.+8      	; 0x2560 <__divsf3+0x16>
    2558:	5f 3f       	cpi	r21, 0xFF	; 255
    255a:	19 f0       	breq	.+6      	; 0x2562 <__divsf3+0x18>
    255c:	c7 c0       	rjmp	.+398    	; 0x26ec <__fp_inf>
    255e:	51 11       	cpse	r21, r1
    2560:	10 c1       	rjmp	.+544    	; 0x2782 <__fp_szero>
    2562:	ca c0       	rjmp	.+404    	; 0x26f8 <__fp_nan>

00002564 <__divsf3x>:
    2564:	eb d0       	rcall	.+470    	; 0x273c <__fp_split3>
    2566:	98 f3       	brcs	.-26     	; 0x254e <__divsf3+0x4>

00002568 <__divsf3_pse>:
    2568:	99 23       	and	r25, r25
    256a:	c9 f3       	breq	.-14     	; 0x255e <__divsf3+0x14>
    256c:	55 23       	and	r21, r21
    256e:	b1 f3       	breq	.-20     	; 0x255c <__divsf3+0x12>
    2570:	95 1b       	sub	r25, r21
    2572:	55 0b       	sbc	r21, r21
    2574:	bb 27       	eor	r27, r27
    2576:	aa 27       	eor	r26, r26
    2578:	62 17       	cp	r22, r18
    257a:	73 07       	cpc	r23, r19
    257c:	84 07       	cpc	r24, r20
    257e:	38 f0       	brcs	.+14     	; 0x258e <__divsf3_pse+0x26>
    2580:	9f 5f       	subi	r25, 0xFF	; 255
    2582:	5f 4f       	sbci	r21, 0xFF	; 255
    2584:	22 0f       	add	r18, r18
    2586:	33 1f       	adc	r19, r19
    2588:	44 1f       	adc	r20, r20
    258a:	aa 1f       	adc	r26, r26
    258c:	a9 f3       	breq	.-22     	; 0x2578 <__divsf3_pse+0x10>
    258e:	33 d0       	rcall	.+102    	; 0x25f6 <__divsf3_pse+0x8e>
    2590:	0e 2e       	mov	r0, r30
    2592:	3a f0       	brmi	.+14     	; 0x25a2 <__divsf3_pse+0x3a>
    2594:	e0 e8       	ldi	r30, 0x80	; 128
    2596:	30 d0       	rcall	.+96     	; 0x25f8 <__divsf3_pse+0x90>
    2598:	91 50       	subi	r25, 0x01	; 1
    259a:	50 40       	sbci	r21, 0x00	; 0
    259c:	e6 95       	lsr	r30
    259e:	00 1c       	adc	r0, r0
    25a0:	ca f7       	brpl	.-14     	; 0x2594 <__divsf3_pse+0x2c>
    25a2:	29 d0       	rcall	.+82     	; 0x25f6 <__divsf3_pse+0x8e>
    25a4:	fe 2f       	mov	r31, r30
    25a6:	27 d0       	rcall	.+78     	; 0x25f6 <__divsf3_pse+0x8e>
    25a8:	66 0f       	add	r22, r22
    25aa:	77 1f       	adc	r23, r23
    25ac:	88 1f       	adc	r24, r24
    25ae:	bb 1f       	adc	r27, r27
    25b0:	26 17       	cp	r18, r22
    25b2:	37 07       	cpc	r19, r23
    25b4:	48 07       	cpc	r20, r24
    25b6:	ab 07       	cpc	r26, r27
    25b8:	b0 e8       	ldi	r27, 0x80	; 128
    25ba:	09 f0       	breq	.+2      	; 0x25be <__divsf3_pse+0x56>
    25bc:	bb 0b       	sbc	r27, r27
    25be:	80 2d       	mov	r24, r0
    25c0:	bf 01       	movw	r22, r30
    25c2:	ff 27       	eor	r31, r31
    25c4:	93 58       	subi	r25, 0x83	; 131
    25c6:	5f 4f       	sbci	r21, 0xFF	; 255
    25c8:	2a f0       	brmi	.+10     	; 0x25d4 <__divsf3_pse+0x6c>
    25ca:	9e 3f       	cpi	r25, 0xFE	; 254
    25cc:	51 05       	cpc	r21, r1
    25ce:	68 f0       	brcs	.+26     	; 0x25ea <__divsf3_pse+0x82>
    25d0:	8d c0       	rjmp	.+282    	; 0x26ec <__fp_inf>
    25d2:	d7 c0       	rjmp	.+430    	; 0x2782 <__fp_szero>
    25d4:	5f 3f       	cpi	r21, 0xFF	; 255
    25d6:	ec f3       	brlt	.-6      	; 0x25d2 <__divsf3_pse+0x6a>
    25d8:	98 3e       	cpi	r25, 0xE8	; 232
    25da:	dc f3       	brlt	.-10     	; 0x25d2 <__divsf3_pse+0x6a>
    25dc:	86 95       	lsr	r24
    25de:	77 95       	ror	r23
    25e0:	67 95       	ror	r22
    25e2:	b7 95       	ror	r27
    25e4:	f7 95       	ror	r31
    25e6:	9f 5f       	subi	r25, 0xFF	; 255
    25e8:	c9 f7       	brne	.-14     	; 0x25dc <__divsf3_pse+0x74>
    25ea:	88 0f       	add	r24, r24
    25ec:	91 1d       	adc	r25, r1
    25ee:	96 95       	lsr	r25
    25f0:	87 95       	ror	r24
    25f2:	97 f9       	bld	r25, 7
    25f4:	08 95       	ret
    25f6:	e1 e0       	ldi	r30, 0x01	; 1
    25f8:	66 0f       	add	r22, r22
    25fa:	77 1f       	adc	r23, r23
    25fc:	88 1f       	adc	r24, r24
    25fe:	bb 1f       	adc	r27, r27
    2600:	62 17       	cp	r22, r18
    2602:	73 07       	cpc	r23, r19
    2604:	84 07       	cpc	r24, r20
    2606:	ba 07       	cpc	r27, r26
    2608:	20 f0       	brcs	.+8      	; 0x2612 <__divsf3_pse+0xaa>
    260a:	62 1b       	sub	r22, r18
    260c:	73 0b       	sbc	r23, r19
    260e:	84 0b       	sbc	r24, r20
    2610:	ba 0b       	sbc	r27, r26
    2612:	ee 1f       	adc	r30, r30
    2614:	88 f7       	brcc	.-30     	; 0x25f8 <__divsf3_pse+0x90>
    2616:	e0 95       	com	r30
    2618:	08 95       	ret

0000261a <__fixunssfsi>:
    261a:	98 d0       	rcall	.+304    	; 0x274c <__fp_splitA>
    261c:	88 f0       	brcs	.+34     	; 0x2640 <__fixunssfsi+0x26>
    261e:	9f 57       	subi	r25, 0x7F	; 127
    2620:	90 f0       	brcs	.+36     	; 0x2646 <__fixunssfsi+0x2c>
    2622:	b9 2f       	mov	r27, r25
    2624:	99 27       	eor	r25, r25
    2626:	b7 51       	subi	r27, 0x17	; 23
    2628:	a0 f0       	brcs	.+40     	; 0x2652 <__fixunssfsi+0x38>
    262a:	d1 f0       	breq	.+52     	; 0x2660 <__fixunssfsi+0x46>
    262c:	66 0f       	add	r22, r22
    262e:	77 1f       	adc	r23, r23
    2630:	88 1f       	adc	r24, r24
    2632:	99 1f       	adc	r25, r25
    2634:	1a f0       	brmi	.+6      	; 0x263c <__fixunssfsi+0x22>
    2636:	ba 95       	dec	r27
    2638:	c9 f7       	brne	.-14     	; 0x262c <__fixunssfsi+0x12>
    263a:	12 c0       	rjmp	.+36     	; 0x2660 <__fixunssfsi+0x46>
    263c:	b1 30       	cpi	r27, 0x01	; 1
    263e:	81 f0       	breq	.+32     	; 0x2660 <__fixunssfsi+0x46>
    2640:	9f d0       	rcall	.+318    	; 0x2780 <__fp_zero>
    2642:	b1 e0       	ldi	r27, 0x01	; 1
    2644:	08 95       	ret
    2646:	9c c0       	rjmp	.+312    	; 0x2780 <__fp_zero>
    2648:	67 2f       	mov	r22, r23
    264a:	78 2f       	mov	r23, r24
    264c:	88 27       	eor	r24, r24
    264e:	b8 5f       	subi	r27, 0xF8	; 248
    2650:	39 f0       	breq	.+14     	; 0x2660 <__fixunssfsi+0x46>
    2652:	b9 3f       	cpi	r27, 0xF9	; 249
    2654:	cc f3       	brlt	.-14     	; 0x2648 <__fixunssfsi+0x2e>
    2656:	86 95       	lsr	r24
    2658:	77 95       	ror	r23
    265a:	67 95       	ror	r22
    265c:	b3 95       	inc	r27
    265e:	d9 f7       	brne	.-10     	; 0x2656 <__fixunssfsi+0x3c>
    2660:	3e f4       	brtc	.+14     	; 0x2670 <__fixunssfsi+0x56>
    2662:	90 95       	com	r25
    2664:	80 95       	com	r24
    2666:	70 95       	com	r23
    2668:	61 95       	neg	r22
    266a:	7f 4f       	sbci	r23, 0xFF	; 255
    266c:	8f 4f       	sbci	r24, 0xFF	; 255
    266e:	9f 4f       	sbci	r25, 0xFF	; 255
    2670:	08 95       	ret

00002672 <__floatunsisf>:
    2672:	e8 94       	clt
    2674:	09 c0       	rjmp	.+18     	; 0x2688 <__floatsisf+0x12>

00002676 <__floatsisf>:
    2676:	97 fb       	bst	r25, 7
    2678:	3e f4       	brtc	.+14     	; 0x2688 <__floatsisf+0x12>
    267a:	90 95       	com	r25
    267c:	80 95       	com	r24
    267e:	70 95       	com	r23
    2680:	61 95       	neg	r22
    2682:	7f 4f       	sbci	r23, 0xFF	; 255
    2684:	8f 4f       	sbci	r24, 0xFF	; 255
    2686:	9f 4f       	sbci	r25, 0xFF	; 255
    2688:	99 23       	and	r25, r25
    268a:	a9 f0       	breq	.+42     	; 0x26b6 <__floatsisf+0x40>
    268c:	f9 2f       	mov	r31, r25
    268e:	96 e9       	ldi	r25, 0x96	; 150
    2690:	bb 27       	eor	r27, r27
    2692:	93 95       	inc	r25
    2694:	f6 95       	lsr	r31
    2696:	87 95       	ror	r24
    2698:	77 95       	ror	r23
    269a:	67 95       	ror	r22
    269c:	b7 95       	ror	r27
    269e:	f1 11       	cpse	r31, r1
    26a0:	f8 cf       	rjmp	.-16     	; 0x2692 <__floatsisf+0x1c>
    26a2:	fa f4       	brpl	.+62     	; 0x26e2 <__floatsisf+0x6c>
    26a4:	bb 0f       	add	r27, r27
    26a6:	11 f4       	brne	.+4      	; 0x26ac <__floatsisf+0x36>
    26a8:	60 ff       	sbrs	r22, 0
    26aa:	1b c0       	rjmp	.+54     	; 0x26e2 <__floatsisf+0x6c>
    26ac:	6f 5f       	subi	r22, 0xFF	; 255
    26ae:	7f 4f       	sbci	r23, 0xFF	; 255
    26b0:	8f 4f       	sbci	r24, 0xFF	; 255
    26b2:	9f 4f       	sbci	r25, 0xFF	; 255
    26b4:	16 c0       	rjmp	.+44     	; 0x26e2 <__floatsisf+0x6c>
    26b6:	88 23       	and	r24, r24
    26b8:	11 f0       	breq	.+4      	; 0x26be <__floatsisf+0x48>
    26ba:	96 e9       	ldi	r25, 0x96	; 150
    26bc:	11 c0       	rjmp	.+34     	; 0x26e0 <__floatsisf+0x6a>
    26be:	77 23       	and	r23, r23
    26c0:	21 f0       	breq	.+8      	; 0x26ca <__floatsisf+0x54>
    26c2:	9e e8       	ldi	r25, 0x8E	; 142
    26c4:	87 2f       	mov	r24, r23
    26c6:	76 2f       	mov	r23, r22
    26c8:	05 c0       	rjmp	.+10     	; 0x26d4 <__floatsisf+0x5e>
    26ca:	66 23       	and	r22, r22
    26cc:	71 f0       	breq	.+28     	; 0x26ea <__floatsisf+0x74>
    26ce:	96 e8       	ldi	r25, 0x86	; 134
    26d0:	86 2f       	mov	r24, r22
    26d2:	70 e0       	ldi	r23, 0x00	; 0
    26d4:	60 e0       	ldi	r22, 0x00	; 0
    26d6:	2a f0       	brmi	.+10     	; 0x26e2 <__floatsisf+0x6c>
    26d8:	9a 95       	dec	r25
    26da:	66 0f       	add	r22, r22
    26dc:	77 1f       	adc	r23, r23
    26de:	88 1f       	adc	r24, r24
    26e0:	da f7       	brpl	.-10     	; 0x26d8 <__floatsisf+0x62>
    26e2:	88 0f       	add	r24, r24
    26e4:	96 95       	lsr	r25
    26e6:	87 95       	ror	r24
    26e8:	97 f9       	bld	r25, 7
    26ea:	08 95       	ret

000026ec <__fp_inf>:
    26ec:	97 f9       	bld	r25, 7
    26ee:	9f 67       	ori	r25, 0x7F	; 127
    26f0:	80 e8       	ldi	r24, 0x80	; 128
    26f2:	70 e0       	ldi	r23, 0x00	; 0
    26f4:	60 e0       	ldi	r22, 0x00	; 0
    26f6:	08 95       	ret

000026f8 <__fp_nan>:
    26f8:	9f ef       	ldi	r25, 0xFF	; 255
    26fa:	80 ec       	ldi	r24, 0xC0	; 192
    26fc:	08 95       	ret

000026fe <__fp_pscA>:
    26fe:	00 24       	eor	r0, r0
    2700:	0a 94       	dec	r0
    2702:	16 16       	cp	r1, r22
    2704:	17 06       	cpc	r1, r23
    2706:	18 06       	cpc	r1, r24
    2708:	09 06       	cpc	r0, r25
    270a:	08 95       	ret

0000270c <__fp_pscB>:
    270c:	00 24       	eor	r0, r0
    270e:	0a 94       	dec	r0
    2710:	12 16       	cp	r1, r18
    2712:	13 06       	cpc	r1, r19
    2714:	14 06       	cpc	r1, r20
    2716:	05 06       	cpc	r0, r21
    2718:	08 95       	ret

0000271a <__fp_round>:
    271a:	09 2e       	mov	r0, r25
    271c:	03 94       	inc	r0
    271e:	00 0c       	add	r0, r0
    2720:	11 f4       	brne	.+4      	; 0x2726 <__fp_round+0xc>
    2722:	88 23       	and	r24, r24
    2724:	52 f0       	brmi	.+20     	; 0x273a <__fp_round+0x20>
    2726:	bb 0f       	add	r27, r27
    2728:	40 f4       	brcc	.+16     	; 0x273a <__fp_round+0x20>
    272a:	bf 2b       	or	r27, r31
    272c:	11 f4       	brne	.+4      	; 0x2732 <__fp_round+0x18>
    272e:	60 ff       	sbrs	r22, 0
    2730:	04 c0       	rjmp	.+8      	; 0x273a <__fp_round+0x20>
    2732:	6f 5f       	subi	r22, 0xFF	; 255
    2734:	7f 4f       	sbci	r23, 0xFF	; 255
    2736:	8f 4f       	sbci	r24, 0xFF	; 255
    2738:	9f 4f       	sbci	r25, 0xFF	; 255
    273a:	08 95       	ret

0000273c <__fp_split3>:
    273c:	57 fd       	sbrc	r21, 7
    273e:	90 58       	subi	r25, 0x80	; 128
    2740:	44 0f       	add	r20, r20
    2742:	55 1f       	adc	r21, r21
    2744:	59 f0       	breq	.+22     	; 0x275c <__fp_splitA+0x10>
    2746:	5f 3f       	cpi	r21, 0xFF	; 255
    2748:	71 f0       	breq	.+28     	; 0x2766 <__fp_splitA+0x1a>
    274a:	47 95       	ror	r20

0000274c <__fp_splitA>:
    274c:	88 0f       	add	r24, r24
    274e:	97 fb       	bst	r25, 7
    2750:	99 1f       	adc	r25, r25
    2752:	61 f0       	breq	.+24     	; 0x276c <__fp_splitA+0x20>
    2754:	9f 3f       	cpi	r25, 0xFF	; 255
    2756:	79 f0       	breq	.+30     	; 0x2776 <__fp_splitA+0x2a>
    2758:	87 95       	ror	r24
    275a:	08 95       	ret
    275c:	12 16       	cp	r1, r18
    275e:	13 06       	cpc	r1, r19
    2760:	14 06       	cpc	r1, r20
    2762:	55 1f       	adc	r21, r21
    2764:	f2 cf       	rjmp	.-28     	; 0x274a <__fp_split3+0xe>
    2766:	46 95       	lsr	r20
    2768:	f1 df       	rcall	.-30     	; 0x274c <__fp_splitA>
    276a:	08 c0       	rjmp	.+16     	; 0x277c <__fp_splitA+0x30>
    276c:	16 16       	cp	r1, r22
    276e:	17 06       	cpc	r1, r23
    2770:	18 06       	cpc	r1, r24
    2772:	99 1f       	adc	r25, r25
    2774:	f1 cf       	rjmp	.-30     	; 0x2758 <__fp_splitA+0xc>
    2776:	86 95       	lsr	r24
    2778:	71 05       	cpc	r23, r1
    277a:	61 05       	cpc	r22, r1
    277c:	08 94       	sec
    277e:	08 95       	ret

00002780 <__fp_zero>:
    2780:	e8 94       	clt

00002782 <__fp_szero>:
    2782:	bb 27       	eor	r27, r27
    2784:	66 27       	eor	r22, r22
    2786:	77 27       	eor	r23, r23
    2788:	cb 01       	movw	r24, r22
    278a:	97 f9       	bld	r25, 7
    278c:	08 95       	ret

0000278e <__mulsi3>:
    278e:	db 01       	movw	r26, r22
    2790:	8f 93       	push	r24
    2792:	9f 93       	push	r25
    2794:	0e 94 f9 13 	call	0x27f2	; 0x27f2 <__muluhisi3>
    2798:	bf 91       	pop	r27
    279a:	af 91       	pop	r26
    279c:	a2 9f       	mul	r26, r18
    279e:	80 0d       	add	r24, r0
    27a0:	91 1d       	adc	r25, r1
    27a2:	a3 9f       	mul	r26, r19
    27a4:	90 0d       	add	r25, r0
    27a6:	b2 9f       	mul	r27, r18
    27a8:	90 0d       	add	r25, r0
    27aa:	11 24       	eor	r1, r1
    27ac:	08 95       	ret

000027ae <__udivmodsi4>:
    27ae:	a1 e2       	ldi	r26, 0x21	; 33
    27b0:	1a 2e       	mov	r1, r26
    27b2:	aa 1b       	sub	r26, r26
    27b4:	bb 1b       	sub	r27, r27
    27b6:	fd 01       	movw	r30, r26
    27b8:	0d c0       	rjmp	.+26     	; 0x27d4 <__udivmodsi4_ep>

000027ba <__udivmodsi4_loop>:
    27ba:	aa 1f       	adc	r26, r26
    27bc:	bb 1f       	adc	r27, r27
    27be:	ee 1f       	adc	r30, r30
    27c0:	ff 1f       	adc	r31, r31
    27c2:	a2 17       	cp	r26, r18
    27c4:	b3 07       	cpc	r27, r19
    27c6:	e4 07       	cpc	r30, r20
    27c8:	f5 07       	cpc	r31, r21
    27ca:	20 f0       	brcs	.+8      	; 0x27d4 <__udivmodsi4_ep>
    27cc:	a2 1b       	sub	r26, r18
    27ce:	b3 0b       	sbc	r27, r19
    27d0:	e4 0b       	sbc	r30, r20
    27d2:	f5 0b       	sbc	r31, r21

000027d4 <__udivmodsi4_ep>:
    27d4:	66 1f       	adc	r22, r22
    27d6:	77 1f       	adc	r23, r23
    27d8:	88 1f       	adc	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	1a 94       	dec	r1
    27de:	69 f7       	brne	.-38     	; 0x27ba <__udivmodsi4_loop>
    27e0:	60 95       	com	r22
    27e2:	70 95       	com	r23
    27e4:	80 95       	com	r24
    27e6:	90 95       	com	r25
    27e8:	9b 01       	movw	r18, r22
    27ea:	ac 01       	movw	r20, r24
    27ec:	bd 01       	movw	r22, r26
    27ee:	cf 01       	movw	r24, r30
    27f0:	08 95       	ret

000027f2 <__muluhisi3>:
    27f2:	0e 94 e7 14 	call	0x29ce	; 0x29ce <__umulhisi3>
    27f6:	a5 9f       	mul	r26, r21
    27f8:	90 0d       	add	r25, r0
    27fa:	b4 9f       	mul	r27, r20
    27fc:	90 0d       	add	r25, r0
    27fe:	a4 9f       	mul	r26, r20
    2800:	80 0d       	add	r24, r0
    2802:	91 1d       	adc	r25, r1
    2804:	11 24       	eor	r1, r1
    2806:	08 95       	ret

00002808 <__moddi3>:
    2808:	68 94       	set
    280a:	01 c0       	rjmp	.+2      	; 0x280e <__divdi3_moddi3>

0000280c <__divdi3>:
    280c:	e8 94       	clt

0000280e <__divdi3_moddi3>:
    280e:	f9 2f       	mov	r31, r25
    2810:	f1 2b       	or	r31, r17
    2812:	12 f0       	brmi	.+4      	; 0x2818 <__divdi3_moddi3+0xa>
    2814:	0c 94 38 14 	jmp	0x2870	; 0x2870 <__udivdi3_umoddi3>
    2818:	a0 e0       	ldi	r26, 0x00	; 0
    281a:	b0 e0       	ldi	r27, 0x00	; 0
    281c:	e2 e1       	ldi	r30, 0x12	; 18
    281e:	f4 e1       	ldi	r31, 0x14	; 20
    2820:	0c 94 aa 14 	jmp	0x2954	; 0x2954 <__prologue_saves__+0xc>
    2824:	09 2e       	mov	r0, r25
    2826:	05 94       	asr	r0
    2828:	22 f4       	brpl	.+8      	; 0x2832 <__divdi3_moddi3+0x24>
    282a:	0e 94 94 14 	call	0x2928	; 0x2928 <__negdi2>
    282e:	11 23       	and	r17, r17
    2830:	92 f4       	brpl	.+36     	; 0x2856 <__divdi3_moddi3+0x48>
    2832:	f0 e8       	ldi	r31, 0x80	; 128
    2834:	0f 26       	eor	r0, r31
    2836:	ff ef       	ldi	r31, 0xFF	; 255
    2838:	e0 94       	com	r14
    283a:	f0 94       	com	r15
    283c:	00 95       	com	r16
    283e:	10 95       	com	r17
    2840:	b0 94       	com	r11
    2842:	c0 94       	com	r12
    2844:	d0 94       	com	r13
    2846:	a1 94       	neg	r10
    2848:	bf 0a       	sbc	r11, r31
    284a:	cf 0a       	sbc	r12, r31
    284c:	df 0a       	sbc	r13, r31
    284e:	ef 0a       	sbc	r14, r31
    2850:	ff 0a       	sbc	r15, r31
    2852:	0f 0b       	sbc	r16, r31
    2854:	1f 0b       	sbc	r17, r31
    2856:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmod64>
    285a:	07 fc       	sbrc	r0, 7
    285c:	0e 94 94 14 	call	0x2928	; 0x2928 <__negdi2>
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	ec e0       	ldi	r30, 0x0C	; 12
    2866:	0c 94 c6 14 	jmp	0x298c	; 0x298c <__epilogue_restores__+0xc>

0000286a <__umoddi3>:
    286a:	68 94       	set
    286c:	01 c0       	rjmp	.+2      	; 0x2870 <__udivdi3_umoddi3>

0000286e <__udivdi3>:
    286e:	e8 94       	clt

00002870 <__udivdi3_umoddi3>:
    2870:	8f 92       	push	r8
    2872:	9f 92       	push	r9
    2874:	cf 93       	push	r28
    2876:	df 93       	push	r29
    2878:	0e 94 43 14 	call	0x2886	; 0x2886 <__udivmod64>
    287c:	df 91       	pop	r29
    287e:	cf 91       	pop	r28
    2880:	9f 90       	pop	r9
    2882:	8f 90       	pop	r8
    2884:	08 95       	ret

00002886 <__udivmod64>:
    2886:	88 24       	eor	r8, r8
    2888:	99 24       	eor	r9, r9
    288a:	f4 01       	movw	r30, r8
    288c:	e4 01       	movw	r28, r8
    288e:	b0 e4       	ldi	r27, 0x40	; 64
    2890:	9f 93       	push	r25
    2892:	aa 27       	eor	r26, r26
    2894:	9a 15       	cp	r25, r10
    2896:	8b 04       	cpc	r8, r11
    2898:	9c 04       	cpc	r9, r12
    289a:	ed 05       	cpc	r30, r13
    289c:	fe 05       	cpc	r31, r14
    289e:	cf 05       	cpc	r28, r15
    28a0:	d0 07       	cpc	r29, r16
    28a2:	a1 07       	cpc	r26, r17
    28a4:	98 f4       	brcc	.+38     	; 0x28cc <__udivmod64+0x46>
    28a6:	ad 2f       	mov	r26, r29
    28a8:	dc 2f       	mov	r29, r28
    28aa:	cf 2f       	mov	r28, r31
    28ac:	fe 2f       	mov	r31, r30
    28ae:	e9 2d       	mov	r30, r9
    28b0:	98 2c       	mov	r9, r8
    28b2:	89 2e       	mov	r8, r25
    28b4:	98 2f       	mov	r25, r24
    28b6:	87 2f       	mov	r24, r23
    28b8:	76 2f       	mov	r23, r22
    28ba:	65 2f       	mov	r22, r21
    28bc:	54 2f       	mov	r21, r20
    28be:	43 2f       	mov	r20, r19
    28c0:	32 2f       	mov	r19, r18
    28c2:	22 27       	eor	r18, r18
    28c4:	b8 50       	subi	r27, 0x08	; 8
    28c6:	31 f7       	brne	.-52     	; 0x2894 <__udivmod64+0xe>
    28c8:	bf 91       	pop	r27
    28ca:	27 c0       	rjmp	.+78     	; 0x291a <__udivmod64+0x94>
    28cc:	1b 2e       	mov	r1, r27
    28ce:	bf 91       	pop	r27
    28d0:	bb 27       	eor	r27, r27
    28d2:	22 0f       	add	r18, r18
    28d4:	33 1f       	adc	r19, r19
    28d6:	44 1f       	adc	r20, r20
    28d8:	55 1f       	adc	r21, r21
    28da:	66 1f       	adc	r22, r22
    28dc:	77 1f       	adc	r23, r23
    28de:	88 1f       	adc	r24, r24
    28e0:	99 1f       	adc	r25, r25
    28e2:	88 1c       	adc	r8, r8
    28e4:	99 1c       	adc	r9, r9
    28e6:	ee 1f       	adc	r30, r30
    28e8:	ff 1f       	adc	r31, r31
    28ea:	cc 1f       	adc	r28, r28
    28ec:	dd 1f       	adc	r29, r29
    28ee:	aa 1f       	adc	r26, r26
    28f0:	bb 1f       	adc	r27, r27
    28f2:	8a 14       	cp	r8, r10
    28f4:	9b 04       	cpc	r9, r11
    28f6:	ec 05       	cpc	r30, r12
    28f8:	fd 05       	cpc	r31, r13
    28fa:	ce 05       	cpc	r28, r14
    28fc:	df 05       	cpc	r29, r15
    28fe:	a0 07       	cpc	r26, r16
    2900:	b1 07       	cpc	r27, r17
    2902:	48 f0       	brcs	.+18     	; 0x2916 <__udivmod64+0x90>
    2904:	8a 18       	sub	r8, r10
    2906:	9b 08       	sbc	r9, r11
    2908:	ec 09       	sbc	r30, r12
    290a:	fd 09       	sbc	r31, r13
    290c:	ce 09       	sbc	r28, r14
    290e:	df 09       	sbc	r29, r15
    2910:	a0 0b       	sbc	r26, r16
    2912:	b1 0b       	sbc	r27, r17
    2914:	21 60       	ori	r18, 0x01	; 1
    2916:	1a 94       	dec	r1
    2918:	e1 f6       	brne	.-72     	; 0x28d2 <__udivmod64+0x4c>
    291a:	2e f4       	brtc	.+10     	; 0x2926 <__udivmod64+0xa0>
    291c:	94 01       	movw	r18, r8
    291e:	af 01       	movw	r20, r30
    2920:	be 01       	movw	r22, r28
    2922:	cd 01       	movw	r24, r26
    2924:	00 0c       	add	r0, r0
    2926:	08 95       	ret

00002928 <__negdi2>:
    2928:	60 95       	com	r22
    292a:	70 95       	com	r23
    292c:	80 95       	com	r24
    292e:	90 95       	com	r25
    2930:	30 95       	com	r19
    2932:	40 95       	com	r20
    2934:	50 95       	com	r21
    2936:	21 95       	neg	r18
    2938:	3f 4f       	sbci	r19, 0xFF	; 255
    293a:	4f 4f       	sbci	r20, 0xFF	; 255
    293c:	5f 4f       	sbci	r21, 0xFF	; 255
    293e:	6f 4f       	sbci	r22, 0xFF	; 255
    2940:	7f 4f       	sbci	r23, 0xFF	; 255
    2942:	8f 4f       	sbci	r24, 0xFF	; 255
    2944:	9f 4f       	sbci	r25, 0xFF	; 255
    2946:	08 95       	ret

00002948 <__prologue_saves__>:
    2948:	2f 92       	push	r2
    294a:	3f 92       	push	r3
    294c:	4f 92       	push	r4
    294e:	5f 92       	push	r5
    2950:	6f 92       	push	r6
    2952:	7f 92       	push	r7
    2954:	8f 92       	push	r8
    2956:	9f 92       	push	r9
    2958:	af 92       	push	r10
    295a:	bf 92       	push	r11
    295c:	cf 92       	push	r12
    295e:	df 92       	push	r13
    2960:	ef 92       	push	r14
    2962:	ff 92       	push	r15
    2964:	0f 93       	push	r16
    2966:	1f 93       	push	r17
    2968:	cf 93       	push	r28
    296a:	df 93       	push	r29
    296c:	cd b7       	in	r28, 0x3d	; 61
    296e:	de b7       	in	r29, 0x3e	; 62
    2970:	ca 1b       	sub	r28, r26
    2972:	db 0b       	sbc	r29, r27
    2974:	0f b6       	in	r0, 0x3f	; 63
    2976:	f8 94       	cli
    2978:	de bf       	out	0x3e, r29	; 62
    297a:	0f be       	out	0x3f, r0	; 63
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	09 94       	ijmp

00002980 <__epilogue_restores__>:
    2980:	2a 88       	ldd	r2, Y+18	; 0x12
    2982:	39 88       	ldd	r3, Y+17	; 0x11
    2984:	48 88       	ldd	r4, Y+16	; 0x10
    2986:	5f 84       	ldd	r5, Y+15	; 0x0f
    2988:	6e 84       	ldd	r6, Y+14	; 0x0e
    298a:	7d 84       	ldd	r7, Y+13	; 0x0d
    298c:	8c 84       	ldd	r8, Y+12	; 0x0c
    298e:	9b 84       	ldd	r9, Y+11	; 0x0b
    2990:	aa 84       	ldd	r10, Y+10	; 0x0a
    2992:	b9 84       	ldd	r11, Y+9	; 0x09
    2994:	c8 84       	ldd	r12, Y+8	; 0x08
    2996:	df 80       	ldd	r13, Y+7	; 0x07
    2998:	ee 80       	ldd	r14, Y+6	; 0x06
    299a:	fd 80       	ldd	r15, Y+5	; 0x05
    299c:	0c 81       	ldd	r16, Y+4	; 0x04
    299e:	1b 81       	ldd	r17, Y+3	; 0x03
    29a0:	aa 81       	ldd	r26, Y+2	; 0x02
    29a2:	b9 81       	ldd	r27, Y+1	; 0x01
    29a4:	ce 0f       	add	r28, r30
    29a6:	d1 1d       	adc	r29, r1
    29a8:	0f b6       	in	r0, 0x3f	; 63
    29aa:	f8 94       	cli
    29ac:	de bf       	out	0x3e, r29	; 62
    29ae:	0f be       	out	0x3f, r0	; 63
    29b0:	cd bf       	out	0x3d, r28	; 61
    29b2:	ed 01       	movw	r28, r26
    29b4:	08 95       	ret

000029b6 <__cmpdi2_s8>:
    29b6:	00 24       	eor	r0, r0
    29b8:	a7 fd       	sbrc	r26, 7
    29ba:	00 94       	com	r0
    29bc:	2a 17       	cp	r18, r26
    29be:	30 05       	cpc	r19, r0
    29c0:	40 05       	cpc	r20, r0
    29c2:	50 05       	cpc	r21, r0
    29c4:	60 05       	cpc	r22, r0
    29c6:	70 05       	cpc	r23, r0
    29c8:	80 05       	cpc	r24, r0
    29ca:	90 05       	cpc	r25, r0
    29cc:	08 95       	ret

000029ce <__umulhisi3>:
    29ce:	a2 9f       	mul	r26, r18
    29d0:	b0 01       	movw	r22, r0
    29d2:	b3 9f       	mul	r27, r19
    29d4:	c0 01       	movw	r24, r0
    29d6:	a3 9f       	mul	r26, r19
    29d8:	70 0d       	add	r23, r0
    29da:	81 1d       	adc	r24, r1
    29dc:	11 24       	eor	r1, r1
    29de:	91 1d       	adc	r25, r1
    29e0:	b2 9f       	mul	r27, r18
    29e2:	70 0d       	add	r23, r0
    29e4:	81 1d       	adc	r24, r1
    29e6:	11 24       	eor	r1, r1
    29e8:	91 1d       	adc	r25, r1
    29ea:	08 95       	ret

000029ec <_exit>:
    29ec:	f8 94       	cli

000029ee <__stop_program>:
    29ee:	ff cf       	rjmp	.-2      	; 0x29ee <__stop_program>
