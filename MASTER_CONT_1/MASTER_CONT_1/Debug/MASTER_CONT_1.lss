
MASTER_CONT_1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000021c  00800100  00006856  000068ea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006856  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000491  0080031c  0080031c  00006b06  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00006b06  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000900  00000000  00000000  00006b36  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000ba17  00000000  00000000  00007436  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002145  00000000  00000000  00012e4d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00005d9e  00000000  00000000  00014f92  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00001fc0  00000000  00000000  0001ad30  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00003d7f  00000000  00000000  0001ccf0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00008726  00000000  00000000  00020a6f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000808  00000000  00000000  00029195  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	61 c0       	rjmp	.+194    	; 0xc4 <__ctors_end>
       2:	00 00       	nop
       4:	7d c0       	rjmp	.+250    	; 0x100 <__bad_interrupt>
       6:	00 00       	nop
       8:	7b c0       	rjmp	.+246    	; 0x100 <__bad_interrupt>
       a:	00 00       	nop
       c:	79 c0       	rjmp	.+242    	; 0x100 <__bad_interrupt>
       e:	00 00       	nop
      10:	77 c0       	rjmp	.+238    	; 0x100 <__bad_interrupt>
      12:	00 00       	nop
      14:	75 c0       	rjmp	.+234    	; 0x100 <__bad_interrupt>
      16:	00 00       	nop
      18:	73 c0       	rjmp	.+230    	; 0x100 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	5a c7       	rjmp	.+3764   	; 0xed2 <__vector_7>
      1e:	00 00       	nop
      20:	6f c0       	rjmp	.+222    	; 0x100 <__bad_interrupt>
      22:	00 00       	nop
      24:	6d c0       	rjmp	.+218    	; 0x100 <__bad_interrupt>
      26:	00 00       	nop
      28:	2d c7       	rjmp	.+3674   	; 0xe84 <__vector_10>
      2a:	00 00       	nop
      2c:	69 c0       	rjmp	.+210    	; 0x100 <__bad_interrupt>
      2e:	00 00       	nop
      30:	67 c0       	rjmp	.+206    	; 0x100 <__bad_interrupt>
      32:	00 00       	nop
      34:	65 c0       	rjmp	.+202    	; 0x100 <__bad_interrupt>
      36:	00 00       	nop
      38:	aa c6       	rjmp	.+3412   	; 0xd8e <__vector_14>
      3a:	00 00       	nop
      3c:	61 c0       	rjmp	.+194    	; 0x100 <__bad_interrupt>
      3e:	00 00       	nop
      40:	d2 c6       	rjmp	.+3492   	; 0xde6 <__vector_16>
      42:	00 00       	nop
      44:	5d c0       	rjmp	.+186    	; 0x100 <__bad_interrupt>
      46:	00 00       	nop
      48:	f6 c6       	rjmp	.+3564   	; 0xe36 <__vector_18>
      4a:	00 00       	nop
      4c:	59 c0       	rjmp	.+178    	; 0x100 <__bad_interrupt>
      4e:	00 00       	nop
      50:	68 c7       	rjmp	.+3792   	; 0xf22 <__vector_20>
      52:	00 00       	nop
      54:	55 c0       	rjmp	.+170    	; 0x100 <__bad_interrupt>
      56:	00 00       	nop
      58:	53 c0       	rjmp	.+166    	; 0x100 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	51 c0       	rjmp	.+162    	; 0x100 <__bad_interrupt>
      5e:	00 00       	nop
      60:	4f c0       	rjmp	.+158    	; 0x100 <__bad_interrupt>
      62:	00 00       	nop
      64:	4d c0       	rjmp	.+154    	; 0x100 <__bad_interrupt>
      66:	00 00       	nop
      68:	4b c0       	rjmp	.+150    	; 0x100 <__bad_interrupt>
      6a:	00 00       	nop
      6c:	49 c0       	rjmp	.+146    	; 0x100 <__bad_interrupt>
      6e:	00 00       	nop
      70:	47 c0       	rjmp	.+142    	; 0x100 <__bad_interrupt>
      72:	00 00       	nop
      74:	45 c0       	rjmp	.+138    	; 0x100 <__bad_interrupt>
      76:	00 00       	nop
      78:	43 c0       	rjmp	.+134    	; 0x100 <__bad_interrupt>
      7a:	00 00       	nop
      7c:	41 c0       	rjmp	.+130    	; 0x100 <__bad_interrupt>
      7e:	00 00       	nop
      80:	3f c0       	rjmp	.+126    	; 0x100 <__bad_interrupt>
      82:	00 00       	nop
      84:	3d c0       	rjmp	.+122    	; 0x100 <__bad_interrupt>
      86:	00 00       	nop
      88:	3b c0       	rjmp	.+118    	; 0x100 <__bad_interrupt>
      8a:	00 00       	nop
      8c:	f3 01       	movw	r30, r6
      8e:	f5 01       	movw	r30, r10
      90:	f7 01       	movw	r30, r14
      92:	f9 01       	movw	r30, r18
      94:	fb 01       	movw	r30, r22
      96:	fd 01       	movw	r30, r26
      98:	ff 01       	movw	r30, r30
      9a:	e7 01       	movw	r28, r14
      9c:	e9 01       	movw	r28, r18
      9e:	eb 01       	movw	r28, r22
      a0:	ed 01       	movw	r28, r26
      a2:	ef 01       	movw	r28, r30
      a4:	f1 01       	movw	r30, r2
      a6:	e3 01       	movw	r28, r6
      a8:	e5 01       	movw	r28, r10
      aa:	1a 05       	cpc	r17, r10
      ac:	20 05       	cpc	r18, r0
      ae:	1d 05       	cpc	r17, r13
      b0:	23 05       	cpc	r18, r3
      b2:	26 05       	cpc	r18, r6
      b4:	29 05       	cpc	r18, r9
      b6:	2c 05       	cpc	r18, r12
      b8:	2f 05       	cpc	r18, r15
      ba:	32 05       	cpc	r19, r2
      bc:	35 05       	cpc	r19, r5
      be:	38 05       	cpc	r19, r8
      c0:	3b 05       	cpc	r19, r11
      c2:	3e 05       	cpc	r19, r14

000000c4 <__ctors_end>:
      c4:	11 24       	eor	r1, r1
      c6:	1f be       	out	0x3f, r1	; 63
      c8:	cf ef       	ldi	r28, 0xFF	; 255
      ca:	d0 e1       	ldi	r29, 0x10	; 16
      cc:	de bf       	out	0x3e, r29	; 62
      ce:	cd bf       	out	0x3d, r28	; 61

000000d0 <__do_copy_data>:
      d0:	13 e0       	ldi	r17, 0x03	; 3
      d2:	a0 e0       	ldi	r26, 0x00	; 0
      d4:	b1 e0       	ldi	r27, 0x01	; 1
      d6:	e6 e5       	ldi	r30, 0x56	; 86
      d8:	f8 e6       	ldi	r31, 0x68	; 104
      da:	00 e0       	ldi	r16, 0x00	; 0
      dc:	0b bf       	out	0x3b, r16	; 59
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x14>
      e0:	07 90       	elpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 31       	cpi	r26, 0x1C	; 28
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0x10>

000000ea <__do_clear_bss>:
      ea:	27 e0       	ldi	r18, 0x07	; 7
      ec:	ac e1       	ldi	r26, 0x1C	; 28
      ee:	b3 e0       	ldi	r27, 0x03	; 3
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	ad 3a       	cpi	r26, 0xAD	; 173
      f6:	b2 07       	cpc	r27, r18
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>
      fa:	44 d7       	rcall	.+3720   	; 0xf84 <main>
      fc:	0c 94 29 34 	jmp	0x6852	; 0x6852 <_exit>

00000100 <__bad_interrupt>:
     100:	37 c7       	rjmp	.+3694   	; 0xf70 <__vector_default>

00000102 <BLUETOOTH_SETUP>:
	volatile unsigned char RX_BUFFER_SIZE=0;
	volatile unsigned char TIMER2_COUNTER=0;
	volatile unsigned char TIMER2_WORKING_FLAG=0;
	
void BLUETOOTH_SETUP()
{
     102:	8f 92       	push	r8
     104:	9f 92       	push	r9
     106:	af 92       	push	r10
     108:	bf 92       	push	r11
     10a:	cf 92       	push	r12
     10c:	df 92       	push	r13
     10e:	ef 92       	push	r14
     110:	0f 93       	push	r16
	/*FOR TESTING*/
	USART0_INIT(ASYNCHRONOUS_DOUBLE,UART_INT_ENABLE,UART_INT_ENABLE,UART_INT_DISABLE,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,UART0_BAUD_RATE);
     112:	0f 2e       	mov	r0, r31
     114:	81 2c       	mov	r8, r1
     116:	f2 ec       	ldi	r31, 0xC2	; 194
     118:	9f 2e       	mov	r9, r31
     11a:	aa 24       	eor	r10, r10
     11c:	a3 94       	inc	r10
     11e:	b1 2c       	mov	r11, r1
     120:	f0 2d       	mov	r31, r0
     122:	0f 2e       	mov	r0, r31
     124:	f6 e0       	ldi	r31, 0x06	; 6
     126:	cf 2e       	mov	r12, r31
     128:	d1 2c       	mov	r13, r1
     12a:	f0 2d       	mov	r31, r0
     12c:	e1 2c       	mov	r14, r1
     12e:	08 e1       	ldi	r16, 0x18	; 24
     130:	20 e0       	ldi	r18, 0x00	; 0
     132:	41 e0       	ldi	r20, 0x01	; 1
     134:	61 e0       	ldi	r22, 0x01	; 1
     136:	80 e0       	ldi	r24, 0x00	; 0
     138:	92 e0       	ldi	r25, 0x02	; 2
     13a:	0e 94 45 13 	call	0x268a	; 0x268a <USART0_INIT>
}
     13e:	0f 91       	pop	r16
     140:	ef 90       	pop	r14
     142:	df 90       	pop	r13
     144:	cf 90       	pop	r12
     146:	bf 90       	pop	r11
     148:	af 90       	pop	r10
     14a:	9f 90       	pop	r9
     14c:	8f 90       	pop	r8
     14e:	08 95       	ret

00000150 <TX0_ISR>:


void TX0_ISR()
{
	if (isbitset(*CHECK_CONNECTED_IN_ADDRESS,CHECK_CONNECTED_PIN))
     150:	0a 9b       	sbis	0x01, 2	; 1
     152:	18 c0       	rjmp	.+48     	; 0x184 <TX0_ISR+0x34>
	{
		if (COUNER_TX_BUFFER==TX_BUFFER_SIZE)
     154:	90 91 21 03 	lds	r25, 0x0321
     158:	80 91 20 03 	lds	r24, 0x0320
     15c:	98 13       	cpse	r25, r24
     15e:	05 c0       	rjmp	.+10     	; 0x16a <TX0_ISR+0x1a>
		{
			COUNER_TX_BUFFER=0;
     160:	10 92 21 03 	sts	0x0321, r1
			TX_BUFFER_SIZE=0;
     164:	10 92 20 03 	sts	0x0320, r1
     168:	08 95       	ret
		}
		else
		{
			UDR0=TX_BUFFER[COUNER_TX_BUFFER];
     16a:	e0 91 21 03 	lds	r30, 0x0321
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	ed 5c       	subi	r30, 0xCD	; 205
     172:	fc 4f       	sbci	r31, 0xFC	; 252
     174:	80 81       	ld	r24, Z
     176:	8c b9       	out	0x0c, r24	; 12
			COUNER_TX_BUFFER++;
     178:	80 91 21 03 	lds	r24, 0x0321
     17c:	8f 5f       	subi	r24, 0xFF	; 255
     17e:	80 93 21 03 	sts	0x0321, r24
     182:	08 95       	ret
		}
	}
	else
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     184:	10 92 22 03 	sts	0x0322, r1
     188:	08 95       	ret

0000018a <RESET_ALL_COMMAND_RX>:



void RESET_ALL_COMMAND_RX()
{
	COUNER_RX_BUFFER=0;
     18a:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=1;
     18e:	81 e0       	ldi	r24, 0x01	; 1
     190:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_RESET_ALL;
     194:	82 e0       	ldi	r24, 0x02	; 2
     196:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     19a:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     19e:	10 92 20 03 	sts	0x0320, r1
	
	#if ROBUST_ACK_MODE
	UDR0=RESET_ALL_COMMAND;
     1a2:	8f e0       	ldi	r24, 0x0F	; 15
     1a4:	8c b9       	out	0x0c, r24	; 12
     1a6:	08 95       	ret

000001a8 <DELETE_ALL_SENSORS_COMMAND_RX>:
	#endif
}

void DELETE_ALL_SENSORS_COMMAND_RX()
{
	COUNER_RX_BUFFER=0;
     1a8:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=1;
     1ac:	81 e0       	ldi	r24, 0x01	; 1
     1ae:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_DELETE_ALL_SESNORS;
     1b2:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     1b6:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     1ba:	10 92 20 03 	sts	0x0320, r1
	
	#if ROBUST_ACK_MODE
	UDR0=DELETE_ALL_SENSORS_COMMAND;
     1be:	8e e0       	ldi	r24, 0x0E	; 14
     1c0:	8c b9       	out	0x0c, r24	; 12
     1c2:	08 95       	ret

000001c4 <READ_STATE_OF_SENSOR_COMMAND_RX>:

/*READING DATA*/
void  READ_STATE_OF_SENSOR_COMMAND_RX()
{
	
	COUNER_RX_BUFFER=0;
     1c4:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=5;
     1c8:	85 e0       	ldi	r24, 0x05	; 5
     1ca:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_READING_STATE_SENSOR;
     1ce:	8a e0       	ldi	r24, 0x0A	; 10
     1d0:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     1d4:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     1d8:	10 92 20 03 	sts	0x0320, r1
	
	#if ROBUST_ACK_MODE
	UDR0=READ_STATE_OF_SENSOR_COMMAND;
     1dc:	88 e0       	ldi	r24, 0x08	; 8
     1de:	8c b9       	out	0x0c, r24	; 12
     1e0:	08 95       	ret

000001e2 <READ_CONNECTION_OF_SENSOR_COMMAND_RX>:
	
	
}
void  READ_CONNECTION_OF_SENSOR_COMMAND_RX()
{
	COUNER_RX_BUFFER=0;
     1e2:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=5;
     1e6:	85 e0       	ldi	r24, 0x05	; 5
     1e8:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_READING_CONNECT_SENSOR;
     1ec:	8b e0       	ldi	r24, 0x0B	; 11
     1ee:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     1f2:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     1f6:	10 92 20 03 	sts	0x0320, r1
	#if ROBUST_ACK_MODE
	UDR0=READ_CONNECTION_OF_SENSOR_COMMAND;
     1fa:	89 e0       	ldi	r24, 0x09	; 9
     1fc:	8c b9       	out	0x0c, r24	; 12
     1fe:	08 95       	ret

00000200 <READ_NUM_OF_SENSORS_COMMAND_RX>:
	#endif
}

void READ_NUM_OF_SENSORS_COMMAND_RX() 
{
	TX_BUFFER[1]=NUMBER_OF_SENSORS;
     200:	80 91 2e 03 	lds	r24, 0x032E
     204:	80 93 34 03 	sts	0x0334, r24
	COUNER_TX_BUFFER=1;
     208:	81 e0       	ldi	r24, 0x01	; 1
     20a:	80 93 21 03 	sts	0x0321, r24
	TX_BUFFER_SIZE=2;
     20e:	82 e0       	ldi	r24, 0x02	; 2
     210:	80 93 20 03 	sts	0x0320, r24
	BLUETOOTH_STATE=BLUETOOTH_IDLE;
     214:	10 92 22 03 	sts	0x0322, r1
	#if ROBUST_ACK_MODE
	UDR0=READ_NUM_OF_SENSORS_COMMAND;
     218:	8a e0       	ldi	r24, 0x0A	; 10
     21a:	8c b9       	out	0x0c, r24	; 12
     21c:	08 95       	ret

0000021e <READ_MASTER_VER_COMMAND_RX>:
	#endif
}

void READ_MASTER_VER_COMMAND_RX()
{
	TX_BUFFER[1]=PROTOCOL_CURRENT_VERSION;
     21e:	81 e0       	ldi	r24, 0x01	; 1
     220:	80 93 34 03 	sts	0x0334, r24
	COUNER_TX_BUFFER=1;
     224:	80 93 21 03 	sts	0x0321, r24
	TX_BUFFER_SIZE=2;
     228:	82 e0       	ldi	r24, 0x02	; 2
     22a:	80 93 20 03 	sts	0x0320, r24
	BLUETOOTH_STATE=BLUETOOTH_IDLE;
     22e:	10 92 22 03 	sts	0x0322, r1
	#if ROBUST_ACK_MODE
	UDR0=READ_MASTER_VER_COMMAND;
     232:	8b e0       	ldi	r24, 0x0B	; 11
     234:	8c b9       	out	0x0c, r24	; 12
     236:	08 95       	ret

00000238 <READ_MASTER_ADDRESS_COMMAND_RX>:

void READ_MASTER_ADDRESS_COMMAND_RX()
{
	
	
	TX_BUFFER[1]=MY_PROTOCOL_ADDRESS_ARRAY_0;
     238:	80 e1       	ldi	r24, 0x10	; 16
     23a:	80 93 34 03 	sts	0x0334, r24
	TX_BUFFER[2]=MY_PROTOCOL_ADDRESS_ARRAY_1;
     23e:	80 e2       	ldi	r24, 0x20	; 32
     240:	80 93 35 03 	sts	0x0335, r24
	TX_BUFFER[3]=MY_PROTOCOL_ADDRESS_ARRAY_2;
     244:	80 e3       	ldi	r24, 0x30	; 48
     246:	80 93 36 03 	sts	0x0336, r24
	TX_BUFFER[4]=MY_PROTOCOL_ADDRESS_ARRAY_3;
     24a:	80 e4       	ldi	r24, 0x40	; 64
     24c:	80 93 37 03 	sts	0x0337, r24
	TX_BUFFER[5]=MY_PROTOCOL_ADDRESS_ARRAY_4;
     250:	80 e5       	ldi	r24, 0x50	; 80
     252:	80 93 38 03 	sts	0x0338, r24
	
	COUNER_TX_BUFFER=1;
     256:	81 e0       	ldi	r24, 0x01	; 1
     258:	80 93 21 03 	sts	0x0321, r24
	TX_BUFFER_SIZE=6;
     25c:	86 e0       	ldi	r24, 0x06	; 6
     25e:	80 93 20 03 	sts	0x0320, r24
	BLUETOOTH_STATE=BLUETOOTH_IDLE;
     262:	10 92 22 03 	sts	0x0322, r1
	#if ROBUST_ACK_MODE
	UDR0=READ_MASTER_ADDRESS_COMMAND;
     266:	8c e0       	ldi	r24, 0x0C	; 12
     268:	8c b9       	out	0x0c, r24	; 12
     26a:	08 95       	ret

0000026c <READ_SENSOR_INFO_COMMAND_RX>:


void  READ_SENSOR_INFO_COMMAND_RX()
{
	
	COUNER_RX_BUFFER=0;
     26c:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=1;
     270:	81 e0       	ldi	r24, 0x01	; 1
     272:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_READING_SENSOR_INFO;
     276:	8c e0       	ldi	r24, 0x0C	; 12
     278:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     27c:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     280:	10 92 20 03 	sts	0x0320, r1
	#if ROBUST_ACK_MODE
	UDR0=READ_SENSOR_INFO_COMMAND;
     284:	8d e0       	ldi	r24, 0x0D	; 13
     286:	8c b9       	out	0x0c, r24	; 12
     288:	08 95       	ret

0000028a <RECIVE_USER_PASS_COMMAND_RX>:

/*RECIVE DATA*/

void RECIVE_USER_PASS_COMMAND_RX()
{
	COUNER_RX_BUFFER=0;
     28a:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=30;
     28e:	8e e1       	ldi	r24, 0x1E	; 30
     290:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_RECIVING_USER_PASS;
     294:	83 e0       	ldi	r24, 0x03	; 3
     296:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     29a:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     29e:	10 92 20 03 	sts	0x0320, r1
	#if ROBUST_ACK_MODE
	UDR0=RECIVE_USER_PASS_COMMAND;
     2a2:	81 e0       	ldi	r24, 0x01	; 1
     2a4:	8c b9       	out	0x0c, r24	; 12
     2a6:	08 95       	ret

000002a8 <RECIVE_IOT_PAR_COMMAND_RX>:
	#endif
}

void RECIVE_IOT_PAR_COMMAND_RX()
{
	COUNER_RX_BUFFER=0;
     2a8:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=38;
     2ac:	86 e2       	ldi	r24, 0x26	; 38
     2ae:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_RECIVING_IOT_PAR;
     2b2:	84 e0       	ldi	r24, 0x04	; 4
     2b4:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     2b8:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     2bc:	10 92 20 03 	sts	0x0320, r1
	#if ROBUST_ACK_MODE
	UDR0=RECIVE_IOT_PAR_COMMAND;
     2c0:	82 e0       	ldi	r24, 0x02	; 2
     2c2:	8c b9       	out	0x0c, r24	; 12
     2c4:	08 95       	ret

000002c6 <RECIVE_ADD_NEW_SENSOR_COMMAND_RX>:
}


void RECIVE_ADD_NEW_SENSOR_COMMAND_RX()
{
	if (F_B_ADD_NEW_SENSOR)
     2c6:	80 91 e0 03 	lds	r24, 0x03E0
     2ca:	88 23       	and	r24, r24
     2cc:	39 f0       	breq	.+14     	; 0x2dc <RECIVE_ADD_NEW_SENSOR_COMMAND_RX+0x16>
	{
		COUNER_TX_BUFFER=0;
     2ce:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     2d2:	10 92 20 03 	sts	0x0320, r1
		UDR0=NACK_COMMAND;
     2d6:	8d ed       	ldi	r24, 0xDD	; 221
     2d8:	8c b9       	out	0x0c, r24	; 12
     2da:	08 95       	ret
	}
	else
	{
		COUNER_RX_BUFFER=0;
     2dc:	10 92 1f 03 	sts	0x031F, r1
		RX_BUFFER_SIZE=11;
     2e0:	8b e0       	ldi	r24, 0x0B	; 11
     2e2:	80 93 1e 03 	sts	0x031E, r24
		BLUETOOTH_STATE=BLUETOOTH_RECIVING_ADD_SENSOR;
     2e6:	85 e0       	ldi	r24, 0x05	; 5
     2e8:	80 93 22 03 	sts	0x0322, r24
		COUNER_TX_BUFFER=0;
     2ec:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     2f0:	10 92 20 03 	sts	0x0320, r1
		#if ROBUST_ACK_MODE
		UDR0=RECIVE_ADD_NEW_SENSOR_COMMAND;
     2f4:	83 e0       	ldi	r24, 0x03	; 3
     2f6:	8c b9       	out	0x0c, r24	; 12
     2f8:	08 95       	ret

000002fa <RECIVE_ENABLE_SENSOR_COMMAND_RX>:
	

void RECIVE_ENABLE_SENSOR_COMMAND_RX()
{
	
	if (F_B_ENABLE_SENSOR)
     2fa:	80 91 ff 04 	lds	r24, 0x04FF
     2fe:	88 23       	and	r24, r24
     300:	39 f0       	breq	.+14     	; 0x310 <RECIVE_ENABLE_SENSOR_COMMAND_RX+0x16>
	{
		COUNER_TX_BUFFER=0;
     302:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     306:	10 92 20 03 	sts	0x0320, r1
		UDR0=NACK_COMMAND;
     30a:	8d ed       	ldi	r24, 0xDD	; 221
     30c:	8c b9       	out	0x0c, r24	; 12
     30e:	08 95       	ret
	}
	else
	{
		COUNER_RX_BUFFER=0;
     310:	10 92 1f 03 	sts	0x031F, r1
		RX_BUFFER_SIZE=5;
     314:	85 e0       	ldi	r24, 0x05	; 5
     316:	80 93 1e 03 	sts	0x031E, r24
		BLUETOOTH_STATE=BLUETOOTH_RECIVING_ENABLE_SENSOR;
     31a:	86 e0       	ldi	r24, 0x06	; 6
     31c:	80 93 22 03 	sts	0x0322, r24
		COUNER_TX_BUFFER=0;
     320:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     324:	10 92 20 03 	sts	0x0320, r1
		#if ROBUST_ACK_MODE
		UDR0=RECIVE_ENABLE_SENSOR_COMMAND;
     328:	84 e0       	ldi	r24, 0x04	; 4
     32a:	8c b9       	out	0x0c, r24	; 12
     32c:	08 95       	ret

0000032e <RECIVE_DISABLE_SENSOR_COMMAND_RX>:


void RECIVE_DISABLE_SENSOR_COMMAND_RX()
{
	
	if (F_B_DISABLE_SENSOR)
     32e:	80 91 3e 05 	lds	r24, 0x053E
     332:	88 23       	and	r24, r24
     334:	39 f0       	breq	.+14     	; 0x344 <RECIVE_DISABLE_SENSOR_COMMAND_RX+0x16>
	{
		COUNER_TX_BUFFER=0;
     336:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     33a:	10 92 20 03 	sts	0x0320, r1
		UDR0=NACK_COMMAND;
     33e:	8d ed       	ldi	r24, 0xDD	; 221
     340:	8c b9       	out	0x0c, r24	; 12
     342:	08 95       	ret
	}
	else
	{
		COUNER_RX_BUFFER=0;
     344:	10 92 1f 03 	sts	0x031F, r1
		RX_BUFFER_SIZE=5;
     348:	85 e0       	ldi	r24, 0x05	; 5
     34a:	80 93 1e 03 	sts	0x031E, r24
		BLUETOOTH_STATE=BLUETOOTH_RECIVING_DISABLE_SENSOR;
     34e:	97 e0       	ldi	r25, 0x07	; 7
     350:	90 93 22 03 	sts	0x0322, r25
		COUNER_TX_BUFFER=0;
     354:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     358:	10 92 20 03 	sts	0x0320, r1
		#if ROBUST_ACK_MODE
		UDR0=RECIVE_DISABLE_SENSOR_COMMAND;
     35c:	8c b9       	out	0x0c, r24	; 12
     35e:	08 95       	ret

00000360 <RECIVE_DELETE_SENSOR_COMMAND_RX>:
	}
}

void RECIVE_DELETE_SENSOR_COMMAND_RX()
{
	if (F_B_DELETE_SENSOR)
     360:	80 91 e1 04 	lds	r24, 0x04E1
     364:	88 23       	and	r24, r24
     366:	39 f0       	breq	.+14     	; 0x376 <RECIVE_DELETE_SENSOR_COMMAND_RX+0x16>
	{
		COUNER_TX_BUFFER=0;
     368:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     36c:	10 92 20 03 	sts	0x0320, r1
		UDR0=NACK_COMMAND;
     370:	8d ed       	ldi	r24, 0xDD	; 221
     372:	8c b9       	out	0x0c, r24	; 12
     374:	08 95       	ret
	}
	else
	{
		COUNER_RX_BUFFER=0;
     376:	10 92 1f 03 	sts	0x031F, r1
		RX_BUFFER_SIZE=5;
     37a:	85 e0       	ldi	r24, 0x05	; 5
     37c:	80 93 1e 03 	sts	0x031E, r24
		BLUETOOTH_STATE=BLUETOOTH_RECIVING_DELETE_SENSOR;
     380:	88 e0       	ldi	r24, 0x08	; 8
     382:	80 93 22 03 	sts	0x0322, r24
		COUNER_TX_BUFFER=0;
     386:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     38a:	10 92 20 03 	sts	0x0320, r1
		#if ROBUST_ACK_MODE
		UDR0=RECIVE_DELETE_SENSOR_COMMAND;
     38e:	86 e0       	ldi	r24, 0x06	; 6
     390:	8c b9       	out	0x0c, r24	; 12
     392:	08 95       	ret

00000394 <RECIVE_ADJUST_LED_COMMAND_RX>:

void RECIVE_ADJUST_LED_COMMAND_RX()
{
	
	
	COUNER_RX_BUFFER=0;
     394:	10 92 1f 03 	sts	0x031F, r1
	RX_BUFFER_SIZE=8;
     398:	88 e0       	ldi	r24, 0x08	; 8
     39a:	80 93 1e 03 	sts	0x031E, r24
	BLUETOOTH_STATE=BLUETOOTH_RECIVING_ADJUST_LED;
     39e:	89 e0       	ldi	r24, 0x09	; 9
     3a0:	80 93 22 03 	sts	0x0322, r24
	COUNER_TX_BUFFER=0;
     3a4:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     3a8:	10 92 20 03 	sts	0x0320, r1
	#if ROBUST_ACK_MODE
	UDR0=RECIVE_ADJUST_LED_COMMAND;
     3ac:	87 e0       	ldi	r24, 0x07	; 7
     3ae:	8c b9       	out	0x0c, r24	; 12
     3b0:	08 95       	ret

000003b2 <BLUETOOTH_IDLE_RX>:
}


void BLUETOOTH_IDLE_RX(unsigned char RECIVED)
{
	switch(RECIVED)
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	fc 01       	movw	r30, r24
     3b6:	31 97       	sbiw	r30, 0x01	; 1
     3b8:	ef 30       	cpi	r30, 0x0F	; 15
     3ba:	f1 05       	cpc	r31, r1
     3bc:	08 f5       	brcc	.+66     	; 0x400 <BLUETOOTH_IDLE_RX+0x4e>
     3be:	ea 5b       	subi	r30, 0xBA	; 186
     3c0:	ff 4f       	sbci	r31, 0xFF	; 255
     3c2:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__tablejump2__>
	{
		
		
		case DELETE_ALL_SENSORS_COMMAND:DELETE_ALL_SENSORS_COMMAND_RX();
     3c6:	f0 ce       	rjmp	.-544    	; 0x1a8 <DELETE_ALL_SENSORS_COMMAND_RX>
		break;
     3c8:	08 95       	ret
		case RESET_ALL_COMMAND:RESET_ALL_COMMAND_RX();
     3ca:	df ce       	rjmp	.-578    	; 0x18a <RESET_ALL_COMMAND_RX>
		break;
     3cc:	08 95       	ret
		
		/*READING DATA*/
		case READ_STATE_OF_SENSOR_COMMAND: READ_STATE_OF_SENSOR_COMMAND_RX();
     3ce:	fa ce       	rjmp	.-524    	; 0x1c4 <READ_STATE_OF_SENSOR_COMMAND_RX>
		break;
     3d0:	08 95       	ret
		
		case READ_CONNECTION_OF_SENSOR_COMMAND: READ_CONNECTION_OF_SENSOR_COMMAND_RX();
     3d2:	07 cf       	rjmp	.-498    	; 0x1e2 <READ_CONNECTION_OF_SENSOR_COMMAND_RX>
		break;
     3d4:	08 95       	ret
		
		case READ_NUM_OF_SENSORS_COMMAND: READ_NUM_OF_SENSORS_COMMAND_RX();
     3d6:	14 cf       	rjmp	.-472    	; 0x200 <READ_NUM_OF_SENSORS_COMMAND_RX>
		break;
     3d8:	08 95       	ret
		case READ_MASTER_VER_COMMAND: READ_MASTER_VER_COMMAND_RX();
     3da:	21 cf       	rjmp	.-446    	; 0x21e <READ_MASTER_VER_COMMAND_RX>
		break;
     3dc:	08 95       	ret
		case READ_MASTER_ADDRESS_COMMAND: READ_MASTER_ADDRESS_COMMAND_RX();
     3de:	2c cf       	rjmp	.-424    	; 0x238 <READ_MASTER_ADDRESS_COMMAND_RX>
		break;
     3e0:	08 95       	ret
		case READ_SENSOR_INFO_COMMAND: READ_SENSOR_INFO_COMMAND_RX();
     3e2:	44 cf       	rjmp	.-376    	; 0x26c <READ_SENSOR_INFO_COMMAND_RX>
		break;
     3e4:	08 95       	ret
		/*EVENTS*/
	/*	case EVENT_START_COMMAND:EVENT_START_COMMAND_RX();
		break;*/
		
		/*RECIVE DATA*/
		case RECIVE_USER_PASS_COMMAND:RECIVE_USER_PASS_COMMAND_RX();
     3e6:	51 cf       	rjmp	.-350    	; 0x28a <RECIVE_USER_PASS_COMMAND_RX>
		break;	
     3e8:	08 95       	ret
		case RECIVE_IOT_PAR_COMMAND:RECIVE_IOT_PAR_COMMAND_RX();
     3ea:	5e cf       	rjmp	.-324    	; 0x2a8 <RECIVE_IOT_PAR_COMMAND_RX>
		break;
     3ec:	08 95       	ret
		case RECIVE_ADD_NEW_SENSOR_COMMAND:RECIVE_ADD_NEW_SENSOR_COMMAND_RX();
     3ee:	6b cf       	rjmp	.-298    	; 0x2c6 <RECIVE_ADD_NEW_SENSOR_COMMAND_RX>
		break;
     3f0:	08 95       	ret
		case RECIVE_ENABLE_SENSOR_COMMAND:RECIVE_ENABLE_SENSOR_COMMAND_RX();
     3f2:	83 cf       	rjmp	.-250    	; 0x2fa <RECIVE_ENABLE_SENSOR_COMMAND_RX>
		break;
     3f4:	08 95       	ret
		case RECIVE_DISABLE_SENSOR_COMMAND:RECIVE_DISABLE_SENSOR_COMMAND_RX();
     3f6:	9b cf       	rjmp	.-202    	; 0x32e <RECIVE_DISABLE_SENSOR_COMMAND_RX>
		break;
     3f8:	08 95       	ret
		case RECIVE_DELETE_SENSOR_COMMAND:RECIVE_DELETE_SENSOR_COMMAND_RX();
     3fa:	b2 cf       	rjmp	.-156    	; 0x360 <RECIVE_DELETE_SENSOR_COMMAND_RX>
		break;
     3fc:	08 95       	ret
		case RECIVE_ADJUST_LED_COMMAND:RECIVE_ADJUST_LED_COMMAND_RX();
     3fe:	ca cf       	rjmp	.-108    	; 0x394 <RECIVE_ADJUST_LED_COMMAND_RX>
     400:	08 95       	ret

00000402 <BLUETOOTH_RESET_ALL_SURE>:
/***************************************************************/

void BLUETOOTH_RESET_ALL_SURE(unsigned char RECIVED)
{
	
	BLUETOOTH_STATE=BLUETOOTH_IDLE;
     402:	10 92 22 03 	sts	0x0322, r1
	COUNER_TX_BUFFER=0;
     406:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     40a:	10 92 20 03 	sts	0x0320, r1
	
	if (RECIVED==RESET_SURE_FLAG)
     40e:	8d 32       	cpi	r24, 0x2D	; 45
     410:	31 f4       	brne	.+12     	; 0x41e <BLUETOOTH_RESET_ALL_SURE+0x1c>
	{
		F_B_RESET_ALL=1;
     412:	81 e0       	ldi	r24, 0x01	; 1
     414:	80 93 25 03 	sts	0x0325, r24
		UDR0=ACK_COMMAND;
     418:	8a ea       	ldi	r24, 0xAA	; 170
     41a:	8c b9       	out	0x0c, r24	; 12
     41c:	08 95       	ret
	}
	else
	{
		UDR0=NACK_COMMAND;
     41e:	8d ed       	ldi	r24, 0xDD	; 221
     420:	8c b9       	out	0x0c, r24	; 12
     422:	08 95       	ret

00000424 <BLUETOOTH_RECIVING_RESET_SURE>:
}

void BLUETOOTH_RECIVING_RESET_SURE(unsigned char RECIVED)
{
	
	BLUETOOTH_STATE=BLUETOOTH_IDLE;
     424:	10 92 22 03 	sts	0x0322, r1
	COUNER_TX_BUFFER=0;
     428:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     42c:	10 92 20 03 	sts	0x0320, r1
	
	if (RECIVED==RESET_SURE_FLAG)
     430:	8d 32       	cpi	r24, 0x2D	; 45
     432:	31 f4       	brne	.+12     	; 0x440 <BLUETOOTH_RECIVING_RESET_SURE+0x1c>
	{
		F_B_RESET_SENSORS=1;
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	80 93 26 03 	sts	0x0326, r24
		UDR0=ACK_COMMAND;
     43a:	8a ea       	ldi	r24, 0xAA	; 170
     43c:	8c b9       	out	0x0c, r24	; 12
     43e:	08 95       	ret
	}
	else
	{
		UDR0=NACK_COMMAND;
     440:	8d ed       	ldi	r24, 0xDD	; 221
     442:	8c b9       	out	0x0c, r24	; 12
     444:	08 95       	ret

00000446 <BLUETOOTH_RECIVING_USER_PASS_RX>:
	
	
}
/*BLUETOOTH RECIVING DATA*/
void BLUETOOTH_RECIVING_USER_PASS_RX(unsigned char RECIVED)
{
     446:	cf 93       	push	r28
     448:	df 93       	push	r29
     44a:	1f 92       	push	r1
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     450:	e0 91 1f 03 	lds	r30, 0x031F
     454:	f0 e0       	ldi	r31, 0x00	; 0
     456:	e5 5a       	subi	r30, 0xA5	; 165
     458:	fc 4f       	sbci	r31, 0xFC	; 252
     45a:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     45c:	80 91 1f 03 	lds	r24, 0x031F
     460:	8f 5f       	subi	r24, 0xFF	; 255
     462:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     466:	90 91 1f 03 	lds	r25, 0x031F
     46a:	80 91 1e 03 	lds	r24, 0x031E
     46e:	98 13       	cpse	r25, r24
     470:	2d c0       	rjmp	.+90     	; 0x4cc <BLUETOOTH_RECIVING_USER_PASS_RX+0x86>
	{
		volatile unsigned char i;
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     472:	10 92 22 03 	sts	0x0322, r1
		for (i=0;i<15;++i)
     476:	19 82       	std	Y+1, r1	; 0x01
     478:	89 81       	ldd	r24, Y+1	; 0x01
     47a:	8f 30       	cpi	r24, 0x0F	; 15
     47c:	80 f4       	brcc	.+32     	; 0x49e <BLUETOOTH_RECIVING_USER_PASS_RX+0x58>
		{
			F_B_USER_NAME[i]=RX_BUFFER[i];
     47e:	e9 81       	ldd	r30, Y+1	; 0x01
     480:	f0 e0       	ldi	r31, 0x00	; 0
     482:	a9 81       	ldd	r26, Y+1	; 0x01
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	a5 5a       	subi	r26, 0xA5	; 165
     488:	bc 4f       	sbci	r27, 0xFC	; 252
     48a:	8c 91       	ld	r24, X
     48c:	eb 5b       	subi	r30, 0xBB	; 187
     48e:	f8 4f       	sbci	r31, 0xF8	; 248
     490:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
	{
		volatile unsigned char i;
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
		for (i=0;i<15;++i)
     492:	89 81       	ldd	r24, Y+1	; 0x01
     494:	8f 5f       	subi	r24, 0xFF	; 255
     496:	89 83       	std	Y+1, r24	; 0x01
     498:	89 81       	ldd	r24, Y+1	; 0x01
     49a:	8f 30       	cpi	r24, 0x0F	; 15
     49c:	80 f3       	brcs	.-32     	; 0x47e <BLUETOOTH_RECIVING_USER_PASS_RX+0x38>
		{
			F_B_USER_NAME[i]=RX_BUFFER[i];
		}
		for (i=0;i<15;++i)
     49e:	19 82       	std	Y+1, r1	; 0x01
     4a0:	89 81       	ldd	r24, Y+1	; 0x01
     4a2:	8f 30       	cpi	r24, 0x0F	; 15
     4a4:	80 f4       	brcc	.+32     	; 0x4c6 <BLUETOOTH_RECIVING_USER_PASS_RX+0x80>
		{
			F_B_PASSWORD[i]=RX_BUFFER[i+15];
     4a6:	e9 81       	ldd	r30, Y+1	; 0x01
     4a8:	f0 e0       	ldi	r31, 0x00	; 0
     4aa:	a9 81       	ldd	r26, Y+1	; 0x01
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	a6 59       	subi	r26, 0x96	; 150
     4b0:	bc 4f       	sbci	r27, 0xFC	; 252
     4b2:	8c 91       	ld	r24, X
     4b4:	e3 59       	subi	r30, 0x93	; 147
     4b6:	f8 4f       	sbci	r31, 0xF8	; 248
     4b8:	80 83       	st	Z, r24
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
		for (i=0;i<15;++i)
		{
			F_B_USER_NAME[i]=RX_BUFFER[i];
		}
		for (i=0;i<15;++i)
     4ba:	89 81       	ldd	r24, Y+1	; 0x01
     4bc:	8f 5f       	subi	r24, 0xFF	; 255
     4be:	89 83       	std	Y+1, r24	; 0x01
     4c0:	89 81       	ldd	r24, Y+1	; 0x01
     4c2:	8f 30       	cpi	r24, 0x0F	; 15
     4c4:	80 f3       	brcs	.-32     	; 0x4a6 <BLUETOOTH_RECIVING_USER_PASS_RX+0x60>
		{
			F_B_PASSWORD[i]=RX_BUFFER[i+15];
		}
		F_B_NEW_USER_PASS=1;
     4c6:	81 e0       	ldi	r24, 0x01	; 1
     4c8:	80 93 31 03 	sts	0x0331, r24
	}
	COUNER_TX_BUFFER=0;
     4cc:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     4d0:	10 92 20 03 	sts	0x0320, r1
	UDR0=ACK_COMMAND;
     4d4:	8a ea       	ldi	r24, 0xAA	; 170
     4d6:	8c b9       	out	0x0c, r24	; 12
}
     4d8:	0f 90       	pop	r0
     4da:	df 91       	pop	r29
     4dc:	cf 91       	pop	r28
     4de:	08 95       	ret

000004e0 <BLUETOOTH_RECIVING_IOT_PAR_RX>:

void BLUETOOTH_RECIVING_IOT_PAR_RX(unsigned char RECIVED)
{
     4e0:	cf 93       	push	r28
     4e2:	df 93       	push	r29
     4e4:	1f 92       	push	r1
     4e6:	cd b7       	in	r28, 0x3d	; 61
     4e8:	de b7       	in	r29, 0x3e	; 62
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     4ea:	e0 91 1f 03 	lds	r30, 0x031F
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	e5 5a       	subi	r30, 0xA5	; 165
     4f2:	fc 4f       	sbci	r31, 0xFC	; 252
     4f4:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     4f6:	80 91 1f 03 	lds	r24, 0x031F
     4fa:	8f 5f       	subi	r24, 0xFF	; 255
     4fc:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     500:	90 91 1f 03 	lds	r25, 0x031F
     504:	80 91 1e 03 	lds	r24, 0x031E
     508:	98 13       	cpse	r25, r24
     50a:	39 c0       	rjmp	.+114    	; 0x57e <BLUETOOTH_RECIVING_IOT_PAR_RX+0x9e>
	{
		volatile unsigned char i;
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     50c:	10 92 22 03 	sts	0x0322, r1
		F_B_CH_ID_LENGTH=RX_BUFFER[0];
     510:	80 91 5b 03 	lds	r24, 0x035B
     514:	80 93 ab 07 	sts	0x07AB, r24
		for (i=0;i<10;++i)
     518:	19 82       	std	Y+1, r1	; 0x01
     51a:	89 81       	ldd	r24, Y+1	; 0x01
     51c:	8a 30       	cpi	r24, 0x0A	; 10
     51e:	80 f4       	brcc	.+32     	; 0x540 <BLUETOOTH_RECIVING_IOT_PAR_RX+0x60>
		{
			F_B_CH_ID[i]=RX_BUFFER[i+1];
     520:	e9 81       	ldd	r30, Y+1	; 0x01
     522:	f0 e0       	ldi	r31, 0x00	; 0
     524:	a9 81       	ldd	r26, Y+1	; 0x01
     526:	b0 e0       	ldi	r27, 0x00	; 0
     528:	a4 5a       	subi	r26, 0xA4	; 164
     52a:	bc 4f       	sbci	r27, 0xFC	; 252
     52c:	8c 91       	ld	r24, X
     52e:	e7 51       	subi	r30, 0x17	; 23
     530:	fa 4f       	sbci	r31, 0xFA	; 250
     532:	80 83       	st	Z, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
	{
		volatile unsigned char i;
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
		F_B_CH_ID_LENGTH=RX_BUFFER[0];
		for (i=0;i<10;++i)
     534:	89 81       	ldd	r24, Y+1	; 0x01
     536:	8f 5f       	subi	r24, 0xFF	; 255
     538:	89 83       	std	Y+1, r24	; 0x01
     53a:	89 81       	ldd	r24, Y+1	; 0x01
     53c:	8a 30       	cpi	r24, 0x0A	; 10
     53e:	80 f3       	brcs	.-32     	; 0x520 <BLUETOOTH_RECIVING_IOT_PAR_RX+0x40>
		{
			F_B_CH_ID[i]=RX_BUFFER[i+1];
		}
		F_B_WRITE_KEY_LENGTH=RX_BUFFER[11];
     540:	80 91 66 03 	lds	r24, 0x0366
     544:	80 93 8a 07 	sts	0x078A, r24
		for (i=0;i<25;++i)
     548:	19 82       	std	Y+1, r1	; 0x01
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	89 31       	cpi	r24, 0x19	; 25
     54e:	80 f4       	brcc	.+32     	; 0x570 <BLUETOOTH_RECIVING_IOT_PAR_RX+0x90>
		{
			F_B_WRITE_KEY[i]=RX_BUFFER[i+12];
     550:	e9 81       	ldd	r30, Y+1	; 0x01
     552:	f0 e0       	ldi	r31, 0x00	; 0
     554:	a9 81       	ldd	r26, Y+1	; 0x01
     556:	b0 e0       	ldi	r27, 0x00	; 0
     558:	a9 59       	subi	r26, 0x99	; 153
     55a:	bc 4f       	sbci	r27, 0xFC	; 252
     55c:	8c 91       	ld	r24, X
     55e:	ec 5a       	subi	r30, 0xAC	; 172
     560:	f8 4f       	sbci	r31, 0xF8	; 248
     562:	80 83       	st	Z, r24
		for (i=0;i<10;++i)
		{
			F_B_CH_ID[i]=RX_BUFFER[i+1];
		}
		F_B_WRITE_KEY_LENGTH=RX_BUFFER[11];
		for (i=0;i<25;++i)
     564:	89 81       	ldd	r24, Y+1	; 0x01
     566:	8f 5f       	subi	r24, 0xFF	; 255
     568:	89 83       	std	Y+1, r24	; 0x01
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	89 31       	cpi	r24, 0x19	; 25
     56e:	80 f3       	brcs	.-32     	; 0x550 <BLUETOOTH_RECIVING_IOT_PAR_RX+0x70>
		{
			F_B_WRITE_KEY[i]=RX_BUFFER[i+12];
		}
		F_B_FIELD_NUM=RX_BUFFER[37];
     570:	80 91 80 03 	lds	r24, 0x0380
     574:	80 93 87 07 	sts	0x0787, r24
		F_B_NEW_IOT_PAR=1;
     578:	81 e0       	ldi	r24, 0x01	; 1
     57a:	80 93 30 03 	sts	0x0330, r24
	}
	COUNER_TX_BUFFER=0;
     57e:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     582:	10 92 20 03 	sts	0x0320, r1
	UDR0=ACK_COMMAND;
     586:	8a ea       	ldi	r24, 0xAA	; 170
     588:	8c b9       	out	0x0c, r24	; 12
}
     58a:	0f 90       	pop	r0
     58c:	df 91       	pop	r29
     58e:	cf 91       	pop	r28
     590:	08 95       	ret

00000592 <BLUETOOTH_RECIVING_ADD_SENSOR_RX>:
void BLUETOOTH_RECIVING_ADD_SENSOR_RX(unsigned char RECIVED)
{
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     592:	e0 91 1f 03 	lds	r30, 0x031F
     596:	f0 e0       	ldi	r31, 0x00	; 0
     598:	e5 5a       	subi	r30, 0xA5	; 165
     59a:	fc 4f       	sbci	r31, 0xFC	; 252
     59c:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     59e:	80 91 1f 03 	lds	r24, 0x031F
     5a2:	8f 5f       	subi	r24, 0xFF	; 255
     5a4:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     5a8:	90 91 1f 03 	lds	r25, 0x031F
     5ac:	80 91 1e 03 	lds	r24, 0x031E
     5b0:	98 13       	cpse	r25, r24
     5b2:	31 c0       	rjmp	.+98     	; 0x616 <BLUETOOTH_RECIVING_ADD_SENSOR_RX+0x84>
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     5b4:	10 92 22 03 	sts	0x0322, r1
		B_NEW_SENSOR_BUFFER.SENSOR_ADDRESS[0]=RX_BUFFER[4];/*LEAST*/
     5b8:	80 91 5f 03 	lds	r24, 0x035F
     5bc:	80 93 e3 04 	sts	0x04E3, r24
		B_NEW_SENSOR_BUFFER.SENSOR_ADDRESS[1]=RX_BUFFER[3];
     5c0:	80 91 5e 03 	lds	r24, 0x035E
     5c4:	80 93 e4 04 	sts	0x04E4, r24
		B_NEW_SENSOR_BUFFER.SENSOR_ADDRESS[2]=RX_BUFFER[2];
     5c8:	80 91 5d 03 	lds	r24, 0x035D
     5cc:	80 93 e5 04 	sts	0x04E5, r24
		B_NEW_SENSOR_BUFFER.SENSOR_ADDRESS[3]=RX_BUFFER[1];
     5d0:	80 91 5c 03 	lds	r24, 0x035C
     5d4:	80 93 e6 04 	sts	0x04E6, r24
		B_NEW_SENSOR_BUFFER.SENSOR_ADDRESS[4]=RX_BUFFER[0];/*MOST*/
     5d8:	80 91 5b 03 	lds	r24, 0x035B
     5dc:	80 93 e7 04 	sts	0x04E7, r24
		B_NEW_SENSOR_BUFFER.SENSOR_PASSWORD[0]=RX_BUFFER[5];
     5e0:	80 91 60 03 	lds	r24, 0x0360
     5e4:	80 93 e8 04 	sts	0x04E8, r24
		B_NEW_SENSOR_BUFFER.SENSOR_PASSWORD[1]=RX_BUFFER[6];
     5e8:	80 91 61 03 	lds	r24, 0x0361
     5ec:	80 93 e9 04 	sts	0x04E9, r24
		B_NEW_SENSOR_BUFFER.SENSOR_PASSWORD[2]=RX_BUFFER[7];
     5f0:	80 91 62 03 	lds	r24, 0x0362
     5f4:	80 93 ea 04 	sts	0x04EA, r24
		B_NEW_SENSOR_BUFFER.SENSOR_PASSWORD[3]=RX_BUFFER[8];
     5f8:	80 91 63 03 	lds	r24, 0x0363
     5fc:	80 93 eb 04 	sts	0x04EB, r24
		B_NEW_SENSOR_BUFFER.SENSOR_VERSION=RX_BUFFER[9];
     600:	80 91 64 03 	lds	r24, 0x0364
     604:	80 93 ec 04 	sts	0x04EC, r24
		B_NEW_SENSOR_BUFFER.SENSOR_TYPE=RX_BUFFER[10];
     608:	80 91 65 03 	lds	r24, 0x0365
     60c:	80 93 ed 04 	sts	0x04ED, r24
		F_B_ADD_NEW_SENSOR=1;
     610:	81 e0       	ldi	r24, 0x01	; 1
     612:	80 93 e0 03 	sts	0x03E0, r24
	}
	COUNER_TX_BUFFER=0;
     616:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     61a:	10 92 20 03 	sts	0x0320, r1
	UDR0=ACK_COMMAND;
     61e:	8a ea       	ldi	r24, 0xAA	; 170
     620:	8c b9       	out	0x0c, r24	; 12
     622:	08 95       	ret

00000624 <BLUETOOTH_RECIVING_ENABLE_SENSOR_RX>:
}

void BLUETOOTH_RECIVING_ENABLE_SENSOR_RX(unsigned char RECIVED)
{
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     624:	e0 91 1f 03 	lds	r30, 0x031F
     628:	f0 e0       	ldi	r31, 0x00	; 0
     62a:	e5 5a       	subi	r30, 0xA5	; 165
     62c:	fc 4f       	sbci	r31, 0xFC	; 252
     62e:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     630:	80 91 1f 03 	lds	r24, 0x031F
     634:	8f 5f       	subi	r24, 0xFF	; 255
     636:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     63a:	90 91 1f 03 	lds	r25, 0x031F
     63e:	80 91 1e 03 	lds	r24, 0x031E
     642:	98 13       	cpse	r25, r24
     644:	19 c0       	rjmp	.+50     	; 0x678 <BLUETOOTH_RECIVING_ENABLE_SENSOR_RX+0x54>
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     646:	10 92 22 03 	sts	0x0322, r1
		B_SENSOR_ADDRESS_ENABLE[0]=RX_BUFFER[4];
     64a:	80 91 5f 03 	lds	r24, 0x035F
     64e:	80 93 33 05 	sts	0x0533, r24
		B_SENSOR_ADDRESS_ENABLE[1]=RX_BUFFER[3];
     652:	80 91 5e 03 	lds	r24, 0x035E
     656:	80 93 34 05 	sts	0x0534, r24
		B_SENSOR_ADDRESS_ENABLE[2]=RX_BUFFER[2];
     65a:	80 91 5d 03 	lds	r24, 0x035D
     65e:	80 93 35 05 	sts	0x0535, r24
		B_SENSOR_ADDRESS_ENABLE[3]=RX_BUFFER[1];
     662:	80 91 5c 03 	lds	r24, 0x035C
     666:	80 93 36 05 	sts	0x0536, r24
		B_SENSOR_ADDRESS_ENABLE[4]=RX_BUFFER[0];
     66a:	80 91 5b 03 	lds	r24, 0x035B
     66e:	80 93 37 05 	sts	0x0537, r24
		/*B_SENSOR_ADDRESS_L_ENABLE=5;*/
		F_B_ENABLE_SENSOR=1;
     672:	81 e0       	ldi	r24, 0x01	; 1
     674:	80 93 ff 04 	sts	0x04FF, r24
	}
	COUNER_TX_BUFFER=0;
     678:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     67c:	10 92 20 03 	sts	0x0320, r1
	UDR0=ACK_COMMAND;
     680:	8a ea       	ldi	r24, 0xAA	; 170
     682:	8c b9       	out	0x0c, r24	; 12
     684:	08 95       	ret

00000686 <BLUETOOTH_RECIVING_DISABLE_SENSOR_RX>:
}

void BLUETOOTH_RECIVING_DISABLE_SENSOR_RX(unsigned char RECIVED)
{
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     686:	e0 91 1f 03 	lds	r30, 0x031F
     68a:	f0 e0       	ldi	r31, 0x00	; 0
     68c:	e5 5a       	subi	r30, 0xA5	; 165
     68e:	fc 4f       	sbci	r31, 0xFC	; 252
     690:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     692:	80 91 1f 03 	lds	r24, 0x031F
     696:	8f 5f       	subi	r24, 0xFF	; 255
     698:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     69c:	90 91 1f 03 	lds	r25, 0x031F
     6a0:	80 91 1e 03 	lds	r24, 0x031E
     6a4:	98 13       	cpse	r25, r24
     6a6:	19 c0       	rjmp	.+50     	; 0x6da <BLUETOOTH_RECIVING_DISABLE_SENSOR_RX+0x54>
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     6a8:	10 92 22 03 	sts	0x0322, r1
		B_SENSOR_ADDRESS_DISABLE[0]=RX_BUFFER[4];
     6ac:	80 91 5f 03 	lds	r24, 0x035F
     6b0:	80 93 38 05 	sts	0x0538, r24
		B_SENSOR_ADDRESS_DISABLE[1]=RX_BUFFER[3];
     6b4:	80 91 5e 03 	lds	r24, 0x035E
     6b8:	80 93 39 05 	sts	0x0539, r24
		B_SENSOR_ADDRESS_DISABLE[2]=RX_BUFFER[2];
     6bc:	80 91 5d 03 	lds	r24, 0x035D
     6c0:	80 93 3a 05 	sts	0x053A, r24
		B_SENSOR_ADDRESS_DISABLE[3]=RX_BUFFER[1];
     6c4:	80 91 5c 03 	lds	r24, 0x035C
     6c8:	80 93 3b 05 	sts	0x053B, r24
		B_SENSOR_ADDRESS_DISABLE[4]=RX_BUFFER[0];
     6cc:	80 91 5b 03 	lds	r24, 0x035B
     6d0:	80 93 3c 05 	sts	0x053C, r24
		/*B_SENSOR_ADDRESS_L_ENABLE=5;*/
		F_B_DISABLE_SENSOR=1;
     6d4:	81 e0       	ldi	r24, 0x01	; 1
     6d6:	80 93 3e 05 	sts	0x053E, r24
	}
	COUNER_TX_BUFFER=0;
     6da:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     6de:	10 92 20 03 	sts	0x0320, r1
	UDR0=ACK_COMMAND;
     6e2:	8a ea       	ldi	r24, 0xAA	; 170
     6e4:	8c b9       	out	0x0c, r24	; 12
     6e6:	08 95       	ret

000006e8 <BLUETOOTH_RECIVING_DELETE_SENSOR_RX>:
}

void BLUETOOTH_RECIVING_DELETE_SENSOR_RX(unsigned char RECIVED)
{
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     6e8:	e0 91 1f 03 	lds	r30, 0x031F
     6ec:	f0 e0       	ldi	r31, 0x00	; 0
     6ee:	e5 5a       	subi	r30, 0xA5	; 165
     6f0:	fc 4f       	sbci	r31, 0xFC	; 252
     6f2:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     6f4:	80 91 1f 03 	lds	r24, 0x031F
     6f8:	8f 5f       	subi	r24, 0xFF	; 255
     6fa:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     6fe:	90 91 1f 03 	lds	r25, 0x031F
     702:	80 91 1e 03 	lds	r24, 0x031E
     706:	98 13       	cpse	r25, r24
     708:	19 c0       	rjmp	.+50     	; 0x73c <BLUETOOTH_RECIVING_DELETE_SENSOR_RX+0x54>
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     70a:	10 92 22 03 	sts	0x0322, r1
		B_SENSOR_ADDRESS_DELETE[0]=RX_BUFFER[4];
     70e:	80 91 5f 03 	lds	r24, 0x035F
     712:	80 93 dc 04 	sts	0x04DC, r24
		B_SENSOR_ADDRESS_DELETE[1]=RX_BUFFER[3];
     716:	80 91 5e 03 	lds	r24, 0x035E
     71a:	80 93 dd 04 	sts	0x04DD, r24
		B_SENSOR_ADDRESS_DELETE[2]=RX_BUFFER[2];
     71e:	80 91 5d 03 	lds	r24, 0x035D
     722:	80 93 de 04 	sts	0x04DE, r24
		B_SENSOR_ADDRESS_DELETE[3]=RX_BUFFER[1];
     726:	80 91 5c 03 	lds	r24, 0x035C
     72a:	80 93 df 04 	sts	0x04DF, r24
		B_SENSOR_ADDRESS_DELETE[4]=RX_BUFFER[0];
     72e:	80 91 5b 03 	lds	r24, 0x035B
     732:	80 93 e0 04 	sts	0x04E0, r24
		/*B_SENSOR_ADDRESS_L_ENABLE=5;*/
		F_B_DELETE_SENSOR=1;
     736:	81 e0       	ldi	r24, 0x01	; 1
     738:	80 93 e1 04 	sts	0x04E1, r24
	}
	COUNER_TX_BUFFER=0;
     73c:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     740:	10 92 20 03 	sts	0x0320, r1
	UDR0=ACK_COMMAND;
     744:	8a ea       	ldi	r24, 0xAA	; 170
     746:	8c b9       	out	0x0c, r24	; 12
     748:	08 95       	ret

0000074a <BLUETOOTH_RECIVING_ADJUST_LED_RX>:

#define  INVERTED_LED_GRID 1

void BLUETOOTH_RECIVING_ADJUST_LED_RX(unsigned char RECIVED)
{
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     74a:	e0 91 1f 03 	lds	r30, 0x031F
     74e:	f0 e0       	ldi	r31, 0x00	; 0
     750:	e5 5a       	subi	r30, 0xA5	; 165
     752:	fc 4f       	sbci	r31, 0xFC	; 252
     754:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     756:	80 91 1f 03 	lds	r24, 0x031F
     75a:	8f 5f       	subi	r24, 0xFF	; 255
     75c:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     760:	90 91 1f 03 	lds	r25, 0x031F
     764:	80 91 1e 03 	lds	r24, 0x031E
     768:	98 13       	cpse	r25, r24
     76a:	25 c0       	rjmp	.+74     	; 0x7b6 <BLUETOOTH_RECIVING_ADJUST_LED_RX+0x6c>
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     76c:	10 92 22 03 	sts	0x0322, r1
		#if INVERTED_LED_GRID
		CHANGE_LED_GRID(RX_BUFFER[0],7);
     770:	80 91 5b 03 	lds	r24, 0x035B
     774:	80 93 07 01 	sts	0x0107, r24
		CHANGE_LED_GRID(RX_BUFFER[1],6);
     778:	80 91 5c 03 	lds	r24, 0x035C
     77c:	80 93 06 01 	sts	0x0106, r24
		CHANGE_LED_GRID(RX_BUFFER[2],5);
     780:	80 91 5d 03 	lds	r24, 0x035D
     784:	80 93 05 01 	sts	0x0105, r24
		CHANGE_LED_GRID(RX_BUFFER[3],4);
     788:	80 91 5e 03 	lds	r24, 0x035E
     78c:	80 93 04 01 	sts	0x0104, r24
		CHANGE_LED_GRID(RX_BUFFER[4],3);
     790:	80 91 5f 03 	lds	r24, 0x035F
     794:	80 93 03 01 	sts	0x0103, r24
		CHANGE_LED_GRID(RX_BUFFER[5],2);
     798:	80 91 60 03 	lds	r24, 0x0360
     79c:	80 93 02 01 	sts	0x0102, r24
		CHANGE_LED_GRID(RX_BUFFER[6],1);
     7a0:	80 91 61 03 	lds	r24, 0x0361
     7a4:	80 93 01 01 	sts	0x0101, r24
		CHANGE_LED_GRID(RX_BUFFER[7],0);
     7a8:	80 91 62 03 	lds	r24, 0x0362
     7ac:	80 93 00 01 	sts	0x0100, r24
		CHANGE_LED_GRID(RX_BUFFER[6],6);
		CHANGE_LED_GRID(RX_BUFFER[7],7);
		#endif
		
		
		F_B_NEW_LED_GRID=1;
     7b0:	81 e0       	ldi	r24, 0x01	; 1
     7b2:	80 93 23 03 	sts	0x0323, r24
	}
	COUNER_TX_BUFFER=0;
     7b6:	10 92 21 03 	sts	0x0321, r1
	TX_BUFFER_SIZE=0;
     7ba:	10 92 20 03 	sts	0x0320, r1
	UDR0=ACK_COMMAND;
     7be:	8a ea       	ldi	r24, 0xAA	; 170
     7c0:	8c b9       	out	0x0c, r24	; 12
     7c2:	08 95       	ret

000007c4 <BLUETOOTH_READING_STATE_SENSOR_RX>:

/*READING*/


void BLUETOOTH_READING_STATE_SENSOR_RX(unsigned char RECIVED)
{
     7c4:	cf 93       	push	r28
     7c6:	df 93       	push	r29
     7c8:	1f 92       	push	r1
     7ca:	cd b7       	in	r28, 0x3d	; 61
     7cc:	de b7       	in	r29, 0x3e	; 62
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     7ce:	e0 91 1f 03 	lds	r30, 0x031F
     7d2:	f0 e0       	ldi	r31, 0x00	; 0
     7d4:	e5 5a       	subi	r30, 0xA5	; 165
     7d6:	fc 4f       	sbci	r31, 0xFC	; 252
     7d8:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     7da:	80 91 1f 03 	lds	r24, 0x031F
     7de:	8f 5f       	subi	r24, 0xFF	; 255
     7e0:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     7e4:	90 91 1f 03 	lds	r25, 0x031F
     7e8:	80 91 1e 03 	lds	r24, 0x031E
     7ec:	98 13       	cpse	r25, r24
     7ee:	1c c0       	rjmp	.+56     	; 0x828 <BLUETOOTH_READING_STATE_SENSOR_RX+0x64>
	{	
		volatile char INDEX;
		INDEX=FIND_SENSOR(RX_BUFFER,5);
     7f0:	65 e0       	ldi	r22, 0x05	; 5
     7f2:	8b e5       	ldi	r24, 0x5B	; 91
     7f4:	93 e0       	ldi	r25, 0x03	; 3
     7f6:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <FIND_SENSOR>
     7fa:	89 83       	std	Y+1, r24	; 0x01
		if (INDEX==-1)
     7fc:	89 81       	ldd	r24, Y+1	; 0x01
		{
			TX_BUFFER[1]=0;
		}
		else
		{
			TX_BUFFER[1]=MY_SENSORS[INDEX].SENSOR_STATE;
     7fe:	e9 81       	ldd	r30, Y+1	; 0x01
     800:	89 e1       	ldi	r24, 0x19	; 25
     802:	e8 9f       	mul	r30, r24
     804:	f0 01       	movw	r30, r0
     806:	11 24       	eor	r1, r1
     808:	ef 51       	subi	r30, 0x1F	; 31
     80a:	fc 4f       	sbci	r31, 0xFC	; 252
     80c:	84 85       	ldd	r24, Z+12	; 0x0c
     80e:	80 93 34 03 	sts	0x0334, r24
		}
		COUNER_TX_BUFFER=1;
     812:	81 e0       	ldi	r24, 0x01	; 1
     814:	80 93 21 03 	sts	0x0321, r24
		TX_BUFFER_SIZE=2;
     818:	82 e0       	ldi	r24, 0x02	; 2
     81a:	80 93 20 03 	sts	0x0320, r24
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     81e:	10 92 22 03 	sts	0x0322, r1
		UDR0=ACK_COMMAND;	
     822:	8a ea       	ldi	r24, 0xAA	; 170
     824:	8c b9       	out	0x0c, r24	; 12
     826:	06 c0       	rjmp	.+12     	; 0x834 <BLUETOOTH_READING_STATE_SENSOR_RX+0x70>
	}
	else
	{
			COUNER_TX_BUFFER=0;
     828:	10 92 21 03 	sts	0x0321, r1
			TX_BUFFER_SIZE=0;
     82c:	10 92 20 03 	sts	0x0320, r1
			UDR0=ACK_COMMAND;
     830:	8a ea       	ldi	r24, 0xAA	; 170
     832:	8c b9       	out	0x0c, r24	; 12
	}

}
     834:	0f 90       	pop	r0
     836:	df 91       	pop	r29
     838:	cf 91       	pop	r28
     83a:	08 95       	ret

0000083c <BLUETOOTH_READING_CONNECTED_SENSOR_RX>:



void BLUETOOTH_READING_CONNECTED_SENSOR_RX(unsigned char RECIVED)
{
     83c:	cf 93       	push	r28
     83e:	df 93       	push	r29
     840:	1f 92       	push	r1
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     846:	e0 91 1f 03 	lds	r30, 0x031F
     84a:	f0 e0       	ldi	r31, 0x00	; 0
     84c:	e5 5a       	subi	r30, 0xA5	; 165
     84e:	fc 4f       	sbci	r31, 0xFC	; 252
     850:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     852:	80 91 1f 03 	lds	r24, 0x031F
     856:	8f 5f       	subi	r24, 0xFF	; 255
     858:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     85c:	90 91 1f 03 	lds	r25, 0x031F
     860:	80 91 1e 03 	lds	r24, 0x031E
     864:	98 13       	cpse	r25, r24
     866:	1c c0       	rjmp	.+56     	; 0x8a0 <BLUETOOTH_READING_CONNECTED_SENSOR_RX+0x64>
	{
		volatile  char INDEX;
		INDEX=FIND_SENSOR(RX_BUFFER,5);
     868:	65 e0       	ldi	r22, 0x05	; 5
     86a:	8b e5       	ldi	r24, 0x5B	; 91
     86c:	93 e0       	ldi	r25, 0x03	; 3
     86e:	0e 94 61 1e 	call	0x3cc2	; 0x3cc2 <FIND_SENSOR>
     872:	89 83       	std	Y+1, r24	; 0x01
		if (INDEX==-1)
     874:	89 81       	ldd	r24, Y+1	; 0x01
		{
			TX_BUFFER[1]=0;
		}
		else
		{
			TX_BUFFER[1]=MY_SENSORS[INDEX].F_CONNECTED;
     876:	e9 81       	ldd	r30, Y+1	; 0x01
     878:	89 e1       	ldi	r24, 0x19	; 25
     87a:	e8 9f       	mul	r30, r24
     87c:	f0 01       	movw	r30, r0
     87e:	11 24       	eor	r1, r1
     880:	ef 51       	subi	r30, 0x1F	; 31
     882:	fc 4f       	sbci	r31, 0xFC	; 252
     884:	86 85       	ldd	r24, Z+14	; 0x0e
     886:	80 93 34 03 	sts	0x0334, r24
		}
		
		COUNER_TX_BUFFER=1;
     88a:	81 e0       	ldi	r24, 0x01	; 1
     88c:	80 93 21 03 	sts	0x0321, r24
		TX_BUFFER_SIZE=2;
     890:	82 e0       	ldi	r24, 0x02	; 2
     892:	80 93 20 03 	sts	0x0320, r24
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     896:	10 92 22 03 	sts	0x0322, r1
		UDR0=ACK_COMMAND;
     89a:	8a ea       	ldi	r24, 0xAA	; 170
     89c:	8c b9       	out	0x0c, r24	; 12
     89e:	06 c0       	rjmp	.+12     	; 0x8ac <BLUETOOTH_READING_CONNECTED_SENSOR_RX+0x70>
	}
	else
	{
		COUNER_TX_BUFFER=0;
     8a0:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     8a4:	10 92 20 03 	sts	0x0320, r1
		UDR0=ACK_COMMAND;
     8a8:	8a ea       	ldi	r24, 0xAA	; 170
     8aa:	8c b9       	out	0x0c, r24	; 12
	}

}
     8ac:	0f 90       	pop	r0
     8ae:	df 91       	pop	r29
     8b0:	cf 91       	pop	r28
     8b2:	08 95       	ret

000008b4 <BLUETOOTH_READING_SENSOR_INFO_RX>:

void BLUETOOTH_READING_SENSOR_INFO_RX(unsigned char RECIVED)
{
	RX_BUFFER[COUNER_RX_BUFFER]=RECIVED;
     8b4:	e0 91 1f 03 	lds	r30, 0x031F
     8b8:	f0 e0       	ldi	r31, 0x00	; 0
     8ba:	e5 5a       	subi	r30, 0xA5	; 165
     8bc:	fc 4f       	sbci	r31, 0xFC	; 252
     8be:	80 83       	st	Z, r24
	COUNER_RX_BUFFER++;
     8c0:	80 91 1f 03 	lds	r24, 0x031F
     8c4:	8f 5f       	subi	r24, 0xFF	; 255
     8c6:	80 93 1f 03 	sts	0x031F, r24
	if (COUNER_RX_BUFFER==RX_BUFFER_SIZE)
     8ca:	90 91 1f 03 	lds	r25, 0x031F
     8ce:	80 91 1e 03 	lds	r24, 0x031E
     8d2:	98 13       	cpse	r25, r24
     8d4:	85 c0       	rjmp	.+266    	; 0x9e0 <BLUETOOTH_READING_SENSOR_INFO_RX+0x12c>
	{
		
		
		TX_BUFFER[1]=MY_SENSORS[RX_BUFFER[0]].SENSOR_ADDRESS[4];
     8d6:	eb e5       	ldi	r30, 0x5B	; 91
     8d8:	f3 e0       	ldi	r31, 0x03	; 3
     8da:	a0 81       	ld	r26, Z
     8dc:	89 e1       	ldi	r24, 0x19	; 25
     8de:	8a 9f       	mul	r24, r26
     8e0:	d0 01       	movw	r26, r0
     8e2:	11 24       	eor	r1, r1
     8e4:	af 51       	subi	r26, 0x1F	; 31
     8e6:	bc 4f       	sbci	r27, 0xFC	; 252
     8e8:	15 96       	adiw	r26, 0x05	; 5
     8ea:	9c 91       	ld	r25, X
     8ec:	90 93 34 03 	sts	0x0334, r25
		TX_BUFFER[2]=MY_SENSORS[RX_BUFFER[0]].SENSOR_ADDRESS[3];
     8f0:	a0 81       	ld	r26, Z
     8f2:	8a 9f       	mul	r24, r26
     8f4:	d0 01       	movw	r26, r0
     8f6:	11 24       	eor	r1, r1
     8f8:	af 51       	subi	r26, 0x1F	; 31
     8fa:	bc 4f       	sbci	r27, 0xFC	; 252
     8fc:	14 96       	adiw	r26, 0x04	; 4
     8fe:	9c 91       	ld	r25, X
     900:	90 93 35 03 	sts	0x0335, r25
		TX_BUFFER[3]=MY_SENSORS[RX_BUFFER[0]].SENSOR_ADDRESS[2];
     904:	a0 81       	ld	r26, Z
     906:	8a 9f       	mul	r24, r26
     908:	d0 01       	movw	r26, r0
     90a:	11 24       	eor	r1, r1
     90c:	af 51       	subi	r26, 0x1F	; 31
     90e:	bc 4f       	sbci	r27, 0xFC	; 252
     910:	13 96       	adiw	r26, 0x03	; 3
     912:	9c 91       	ld	r25, X
     914:	90 93 36 03 	sts	0x0336, r25
		TX_BUFFER[4]=MY_SENSORS[RX_BUFFER[0]].SENSOR_ADDRESS[1];
     918:	a0 81       	ld	r26, Z
     91a:	8a 9f       	mul	r24, r26
     91c:	d0 01       	movw	r26, r0
     91e:	11 24       	eor	r1, r1
     920:	af 51       	subi	r26, 0x1F	; 31
     922:	bc 4f       	sbci	r27, 0xFC	; 252
     924:	12 96       	adiw	r26, 0x02	; 2
     926:	9c 91       	ld	r25, X
     928:	90 93 37 03 	sts	0x0337, r25
		TX_BUFFER[5]=MY_SENSORS[RX_BUFFER[0]].SENSOR_ADDRESS[0];
     92c:	a0 81       	ld	r26, Z
     92e:	8a 9f       	mul	r24, r26
     930:	d0 01       	movw	r26, r0
     932:	11 24       	eor	r1, r1
     934:	af 51       	subi	r26, 0x1F	; 31
     936:	bc 4f       	sbci	r27, 0xFC	; 252
     938:	11 96       	adiw	r26, 0x01	; 1
     93a:	9c 91       	ld	r25, X
     93c:	90 93 38 03 	sts	0x0338, r25
	
		TX_BUFFER[6]=MY_SENSORS[RX_BUFFER[0]].SENSOR_PASSWORD[0];
     940:	a0 81       	ld	r26, Z
     942:	8a 9f       	mul	r24, r26
     944:	d0 01       	movw	r26, r0
     946:	11 24       	eor	r1, r1
     948:	af 51       	subi	r26, 0x1F	; 31
     94a:	bc 4f       	sbci	r27, 0xFC	; 252
     94c:	16 96       	adiw	r26, 0x06	; 6
     94e:	9c 91       	ld	r25, X
     950:	90 93 39 03 	sts	0x0339, r25
		TX_BUFFER[7]=MY_SENSORS[RX_BUFFER[0]].SENSOR_PASSWORD[1];
     954:	a0 81       	ld	r26, Z
     956:	8a 9f       	mul	r24, r26
     958:	d0 01       	movw	r26, r0
     95a:	11 24       	eor	r1, r1
     95c:	af 51       	subi	r26, 0x1F	; 31
     95e:	bc 4f       	sbci	r27, 0xFC	; 252
     960:	17 96       	adiw	r26, 0x07	; 7
     962:	9c 91       	ld	r25, X
     964:	90 93 3a 03 	sts	0x033A, r25
		TX_BUFFER[8]=MY_SENSORS[RX_BUFFER[0]].SENSOR_PASSWORD[2];
     968:	a0 81       	ld	r26, Z
     96a:	8a 9f       	mul	r24, r26
     96c:	d0 01       	movw	r26, r0
     96e:	11 24       	eor	r1, r1
     970:	af 51       	subi	r26, 0x1F	; 31
     972:	bc 4f       	sbci	r27, 0xFC	; 252
     974:	18 96       	adiw	r26, 0x08	; 8
     976:	9c 91       	ld	r25, X
     978:	90 93 3b 03 	sts	0x033B, r25
		TX_BUFFER[9]=MY_SENSORS[RX_BUFFER[0]].SENSOR_PASSWORD[3];
     97c:	a0 81       	ld	r26, Z
     97e:	8a 9f       	mul	r24, r26
     980:	d0 01       	movw	r26, r0
     982:	11 24       	eor	r1, r1
     984:	af 51       	subi	r26, 0x1F	; 31
     986:	bc 4f       	sbci	r27, 0xFC	; 252
     988:	19 96       	adiw	r26, 0x09	; 9
     98a:	9c 91       	ld	r25, X
     98c:	90 93 3c 03 	sts	0x033C, r25
		TX_BUFFER[10]=MY_SENSORS[RX_BUFFER[0]].SENSOR_VERSION;
     990:	a0 81       	ld	r26, Z
     992:	8a 9f       	mul	r24, r26
     994:	d0 01       	movw	r26, r0
     996:	11 24       	eor	r1, r1
     998:	af 51       	subi	r26, 0x1F	; 31
     99a:	bc 4f       	sbci	r27, 0xFC	; 252
     99c:	1a 96       	adiw	r26, 0x0a	; 10
     99e:	9c 91       	ld	r25, X
     9a0:	90 93 3d 03 	sts	0x033D, r25
		TX_BUFFER[11]=MY_SENSORS[RX_BUFFER[0]].SENSOR_TYPE;
     9a4:	a0 81       	ld	r26, Z
     9a6:	8a 9f       	mul	r24, r26
     9a8:	d0 01       	movw	r26, r0
     9aa:	11 24       	eor	r1, r1
     9ac:	af 51       	subi	r26, 0x1F	; 31
     9ae:	bc 4f       	sbci	r27, 0xFC	; 252
     9b0:	1b 96       	adiw	r26, 0x0b	; 11
     9b2:	9c 91       	ld	r25, X
     9b4:	90 93 3e 03 	sts	0x033E, r25
		TX_BUFFER[12]=MY_SENSORS[RX_BUFFER[0]].SENSOR_STATE;
     9b8:	e0 81       	ld	r30, Z
     9ba:	8e 9f       	mul	r24, r30
     9bc:	f0 01       	movw	r30, r0
     9be:	11 24       	eor	r1, r1
     9c0:	ef 51       	subi	r30, 0x1F	; 31
     9c2:	fc 4f       	sbci	r31, 0xFC	; 252
     9c4:	84 85       	ldd	r24, Z+12	; 0x0c
     9c6:	80 93 3f 03 	sts	0x033F, r24
		
		
		COUNER_TX_BUFFER=1;
     9ca:	81 e0       	ldi	r24, 0x01	; 1
     9cc:	80 93 21 03 	sts	0x0321, r24
		TX_BUFFER_SIZE=13;
     9d0:	8d e0       	ldi	r24, 0x0D	; 13
     9d2:	80 93 20 03 	sts	0x0320, r24
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     9d6:	10 92 22 03 	sts	0x0322, r1
		UDR0=ACK_COMMAND;
     9da:	8a ea       	ldi	r24, 0xAA	; 170
     9dc:	8c b9       	out	0x0c, r24	; 12
     9de:	08 95       	ret
	}
	else
	{
		COUNER_TX_BUFFER=0;
     9e0:	10 92 21 03 	sts	0x0321, r1
		TX_BUFFER_SIZE=0;
     9e4:	10 92 20 03 	sts	0x0320, r1
		UDR0=ACK_COMMAND;
     9e8:	8a ea       	ldi	r24, 0xAA	; 170
     9ea:	8c b9       	out	0x0c, r24	; 12
     9ec:	08 95       	ret

000009ee <RX0_ISR>:
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
	}
}

void RX0_ISR()
{
     9ee:	cf 92       	push	r12
     9f0:	ef 92       	push	r14
     9f2:	0f 93       	push	r16
	if (isbitset(*CHECK_CONNECTED_IN_ADDRESS,CHECK_CONNECTED_PIN))
     9f4:	0a 9b       	sbis	0x01, 2	; 1
     9f6:	45 c0       	rjmp	.+138    	; 0xa82 <RX0_ISR+0x94>
	{
			if (TIMER2_WORKING_FLAG==0)
     9f8:	80 91 1c 03 	lds	r24, 0x031C
     9fc:	81 11       	cpse	r24, r1
     9fe:	0d c0       	rjmp	.+26     	; 0xa1a <RX0_ISR+0x2c>
			{
				TIMER2_WORKING_FLAG=1;
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	80 93 1c 03 	sts	0x031C, r24
				TIMER2_ENABLE(T2_NORMAL,T2_OC2_DISCONNECT,T2_TIMER_1024,0,DISABLE_TIMER2_INT,ENABLE_TIMER2_INT,0);
     a06:	c1 2c       	mov	r12, r1
     a08:	ee 24       	eor	r14, r14
     a0a:	e3 94       	inc	r14
     a0c:	00 e0       	ldi	r16, 0x00	; 0
     a0e:	20 e0       	ldi	r18, 0x00	; 0
     a10:	45 e0       	ldi	r20, 0x05	; 5
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	80 e0       	ldi	r24, 0x00	; 0
     a16:	0e 94 9d 12 	call	0x253a	; 0x253a <TIMER2_ENABLE>
			}
			TIMER2_COUNTER=0;
     a1a:	10 92 1d 03 	sts	0x031D, r1
			/*THIS PART IS TO RESTART TIMER FOR IDILING THE STATE OF RX WHEN PASSED 1.22 SEC*/
		switch(BLUETOOTH_STATE)
     a1e:	80 91 22 03 	lds	r24, 0x0322
     a22:	90 e0       	ldi	r25, 0x00	; 0
     a24:	8d 30       	cpi	r24, 0x0D	; 13
     a26:	91 05       	cpc	r25, r1
     a28:	70 f5       	brcc	.+92     	; 0xa86 <RX0_ISR+0x98>
     a2a:	fc 01       	movw	r30, r24
     a2c:	eb 5a       	subi	r30, 0xAB	; 171
     a2e:	ff 4f       	sbci	r31, 0xFF	; 255
     a30:	0c 94 44 33 	jmp	0x6688	; 0x6688 <__tablejump2__>
		{
			case BLUETOOTH_IDLE:BLUETOOTH_IDLE_RX(UDR0);
     a34:	8c b1       	in	r24, 0x0c	; 12
     a36:	bd dc       	rcall	.-1670   	; 0x3b2 <BLUETOOTH_IDLE_RX>
			break;
     a38:	26 c0       	rjmp	.+76     	; 0xa86 <RX0_ISR+0x98>
			
			
			case BLUETOOTH_RESET_ALL:BLUETOOTH_RESET_ALL_SURE(UDR0);
     a3a:	8c b1       	in	r24, 0x0c	; 12
     a3c:	e2 dc       	rcall	.-1596   	; 0x402 <BLUETOOTH_RESET_ALL_SURE>
			break;
     a3e:	23 c0       	rjmp	.+70     	; 0xa86 <RX0_ISR+0x98>
			
			case BLUETOOTH_DELETE_ALL_SESNORS:BLUETOOTH_RECIVING_RESET_SURE(UDR0);
     a40:	8c b1       	in	r24, 0x0c	; 12
     a42:	f0 dc       	rcall	.-1568   	; 0x424 <BLUETOOTH_RECIVING_RESET_SURE>
			break;
     a44:	20 c0       	rjmp	.+64     	; 0xa86 <RX0_ISR+0x98>
			
			case BLUETOOTH_RECIVING_USER_PASS:BLUETOOTH_RECIVING_USER_PASS_RX(UDR0);
     a46:	8c b1       	in	r24, 0x0c	; 12
     a48:	fe dc       	rcall	.-1540   	; 0x446 <BLUETOOTH_RECIVING_USER_PASS_RX>
			break;
     a4a:	1d c0       	rjmp	.+58     	; 0xa86 <RX0_ISR+0x98>
			case BLUETOOTH_RECIVING_IOT_PAR:BLUETOOTH_RECIVING_IOT_PAR_RX(UDR0);
     a4c:	8c b1       	in	r24, 0x0c	; 12
     a4e:	48 dd       	rcall	.-1392   	; 0x4e0 <BLUETOOTH_RECIVING_IOT_PAR_RX>
			break;
     a50:	1a c0       	rjmp	.+52     	; 0xa86 <RX0_ISR+0x98>
			case BLUETOOTH_RECIVING_ADD_SENSOR:BLUETOOTH_RECIVING_ADD_SENSOR_RX(UDR0);
     a52:	8c b1       	in	r24, 0x0c	; 12
     a54:	9e dd       	rcall	.-1220   	; 0x592 <BLUETOOTH_RECIVING_ADD_SENSOR_RX>
			break;
     a56:	17 c0       	rjmp	.+46     	; 0xa86 <RX0_ISR+0x98>
			case BLUETOOTH_RECIVING_ENABLE_SENSOR:BLUETOOTH_RECIVING_ENABLE_SENSOR_RX(UDR0);
     a58:	8c b1       	in	r24, 0x0c	; 12
     a5a:	e4 dd       	rcall	.-1080   	; 0x624 <BLUETOOTH_RECIVING_ENABLE_SENSOR_RX>
			break;
     a5c:	14 c0       	rjmp	.+40     	; 0xa86 <RX0_ISR+0x98>
			case BLUETOOTH_RECIVING_DISABLE_SENSOR:BLUETOOTH_RECIVING_DISABLE_SENSOR_RX(UDR0);
     a5e:	8c b1       	in	r24, 0x0c	; 12
     a60:	12 de       	rcall	.-988    	; 0x686 <BLUETOOTH_RECIVING_DISABLE_SENSOR_RX>
			break;
     a62:	11 c0       	rjmp	.+34     	; 0xa86 <RX0_ISR+0x98>
			case BLUETOOTH_RECIVING_DELETE_SENSOR:BLUETOOTH_RECIVING_DELETE_SENSOR_RX(UDR0);
     a64:	8c b1       	in	r24, 0x0c	; 12
     a66:	40 de       	rcall	.-896    	; 0x6e8 <BLUETOOTH_RECIVING_DELETE_SENSOR_RX>
			break;
     a68:	0e c0       	rjmp	.+28     	; 0xa86 <RX0_ISR+0x98>
			case BLUETOOTH_RECIVING_ADJUST_LED:BLUETOOTH_RECIVING_ADJUST_LED_RX(UDR0);
     a6a:	8c b1       	in	r24, 0x0c	; 12
     a6c:	6e de       	rcall	.-804    	; 0x74a <BLUETOOTH_RECIVING_ADJUST_LED_RX>
			break;
     a6e:	0b c0       	rjmp	.+22     	; 0xa86 <RX0_ISR+0x98>
			
			
			
			
			/*READING PREPARE THE RECIVED DATA*/
			case BLUETOOTH_READING_STATE_SENSOR:BLUETOOTH_READING_STATE_SENSOR_RX(UDR0);
     a70:	8c b1       	in	r24, 0x0c	; 12
     a72:	a8 de       	rcall	.-688    	; 0x7c4 <BLUETOOTH_READING_STATE_SENSOR_RX>
			break;
     a74:	08 c0       	rjmp	.+16     	; 0xa86 <RX0_ISR+0x98>
			
			case BLUETOOTH_READING_CONNECT_SENSOR:BLUETOOTH_READING_CONNECTED_SENSOR_RX(UDR0);
     a76:	8c b1       	in	r24, 0x0c	; 12
     a78:	e1 de       	rcall	.-574    	; 0x83c <BLUETOOTH_READING_CONNECTED_SENSOR_RX>
			break; 
     a7a:	05 c0       	rjmp	.+10     	; 0xa86 <RX0_ISR+0x98>
			
			case BLUETOOTH_READING_SENSOR_INFO:BLUETOOTH_READING_SENSOR_INFO_RX(UDR0);
     a7c:	8c b1       	in	r24, 0x0c	; 12
     a7e:	1a df       	rcall	.-460    	; 0x8b4 <BLUETOOTH_READING_SENSOR_INFO_RX>
			break;
     a80:	02 c0       	rjmp	.+4      	; 0xa86 <RX0_ISR+0x98>
		}
			
	}
	else
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     a82:	10 92 22 03 	sts	0x0322, r1
	}
}
     a86:	0f 91       	pop	r16
     a88:	ef 90       	pop	r14
     a8a:	cf 90       	pop	r12
     a8c:	08 95       	ret

00000a8e <BLUETOOTH_IO_SETUP>:



void BLUETOOTH_IO_SETUP()
{
	gpio_inputconfg(CHECK_CONNECTED_DDR_ADDRESS,CHECK_CONNECTED_INMOD_ADDRESS,FLOAT_mod,CHECK_CONNECTED_PIN);
     a8e:	22 e0       	ldi	r18, 0x02	; 2
     a90:	40 e0       	ldi	r20, 0x00	; 0
     a92:	63 e2       	ldi	r22, 0x23	; 35
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	82 e2       	ldi	r24, 0x22	; 34
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	77 d2       	rcall	.+1262   	; 0xf8a <gpio_inputconfg>
	gpio_outputconfg(FEED_BACK_DDR_ADDRESS,FEED_BACK_OUTMOD_ADDRESS,OUTPASS,FEED_BACK_PIN);
     a9c:	23 e0       	ldi	r18, 0x03	; 3
     a9e:	40 e0       	ldi	r20, 0x00	; 0
     aa0:	61 e2       	ldi	r22, 0x21	; 33
     aa2:	70 e0       	ldi	r23, 0x00	; 0
     aa4:	82 e2       	ldi	r24, 0x22	; 34
     aa6:	90 e0       	ldi	r25, 0x00	; 0
     aa8:	8d c2       	rjmp	.+1306   	; 0xfc4 <gpio_outputconfg>
     aaa:	08 95       	ret

00000aac <BLUETOOTH_LOOP>:
}

void BLUETOOTH_LOOP()
{
	
	if (isbitset(*CHECK_CONNECTED_IN_ADDRESS,CHECK_CONNECTED_PIN))
     aac:	0a 9b       	sbis	0x01, 2	; 1
     aae:	02 c0       	rjmp	.+4      	; 0xab4 <BLUETOOTH_LOOP+0x8>
	{
		setbit(*FEED_BACK_OUT_ADDRESS,FEED_BACK_PIN);
     ab0:	1b 9a       	sbi	0x03, 3	; 3
     ab2:	08 95       	ret
	}
	else
	{
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     ab4:	10 92 22 03 	sts	0x0322, r1
		clearbit(*FEED_BACK_OUT_ADDRESS,FEED_BACK_PIN);
     ab8:	1b 98       	cbi	0x03, 3	; 3
     aba:	08 95       	ret

00000abc <TIMER2_ISR>:

}

void TIMER2_ISR()
{
	TIMER2_COUNTER++;
     abc:	80 91 1d 03 	lds	r24, 0x031D
     ac0:	8f 5f       	subi	r24, 0xFF	; 255
     ac2:	80 93 1d 03 	sts	0x031D, r24
	if (TIMER2_COUNTER==30)
     ac6:	80 91 1d 03 	lds	r24, 0x031D
     aca:	8e 31       	cpi	r24, 0x1E	; 30
     acc:	41 f4       	brne	.+16     	; 0xade <TIMER2_ISR+0x22>
	{
		TIMER2_DISABLE();
     ace:	0e 94 9a 12 	call	0x2534	; 0x2534 <TIMER2_DISABLE>
		TIMER2_COUNTER=0;
     ad2:	10 92 1d 03 	sts	0x031D, r1
		TIMER2_WORKING_FLAG=0;
     ad6:	10 92 1c 03 	sts	0x031C, r1
		BLUETOOTH_STATE=BLUETOOTH_IDLE;
     ada:	10 92 22 03 	sts	0x0322, r1
     ade:	08 95       	ret

00000ae0 <QUEUE_INTILIZE_ARRAY_U8>:
		
		
		return MY_QUEUE->THE_QUEUE[MY_QUEUE->REAR];
	}
	return 0;
}
     ae0:	fc 01       	movw	r30, r24
     ae2:	12 82       	std	Z+2, r1	; 0x02
     ae4:	10 82       	st	Z, r1
     ae6:	87 e0       	ldi	r24, 0x07	; 7
     ae8:	81 83       	std	Z+1, r24	; 0x01
     aea:	08 95       	ret

00000aec <QUEUE_ADD_ARRAY_U8>:
     aec:	dc 01       	movw	r26, r24
     aee:	12 96       	adiw	r26, 0x02	; 2
     af0:	8c 91       	ld	r24, X
     af2:	12 97       	sbiw	r26, 0x02	; 2
     af4:	88 30       	cpi	r24, 0x08	; 8
     af6:	29 f1       	breq	.+74     	; 0xb42 <QUEUE_ADD_ARRAY_U8+0x56>
     af8:	8f 5f       	subi	r24, 0xFF	; 255
     afa:	12 96       	adiw	r26, 0x02	; 2
     afc:	8c 93       	st	X, r24
     afe:	12 97       	sbiw	r26, 0x02	; 2
     b00:	11 96       	adiw	r26, 0x01	; 1
     b02:	8c 91       	ld	r24, X
     b04:	11 97       	sbiw	r26, 0x01	; 1
     b06:	90 e0       	ldi	r25, 0x00	; 0
     b08:	01 96       	adiw	r24, 0x01	; 1
     b0a:	87 70       	andi	r24, 0x07	; 7
     b0c:	90 78       	andi	r25, 0x80	; 128
     b0e:	11 96       	adiw	r26, 0x01	; 1
     b10:	8c 93       	st	X, r24
     b12:	11 97       	sbiw	r26, 0x01	; 1
     b14:	44 23       	and	r20, r20
     b16:	a9 f0       	breq	.+42     	; 0xb42 <QUEUE_ADD_ARRAY_U8+0x56>
     b18:	e6 2f       	mov	r30, r22
     b1a:	f7 2f       	mov	r31, r23
     b1c:	20 e0       	ldi	r18, 0x00	; 0
     b1e:	30 e0       	ldi	r19, 0x00	; 0
     b20:	bd 01       	movw	r22, r26
     b22:	58 e2       	ldi	r21, 0x28	; 40
     b24:	85 9f       	mul	r24, r21
     b26:	60 0d       	add	r22, r0
     b28:	71 1d       	adc	r23, r1
     b2a:	11 24       	eor	r1, r1
     b2c:	cb 01       	movw	r24, r22
     b2e:	51 91       	ld	r21, Z+
     b30:	dc 01       	movw	r26, r24
     b32:	a2 0f       	add	r26, r18
     b34:	b3 1f       	adc	r27, r19
     b36:	13 96       	adiw	r26, 0x03	; 3
     b38:	5c 93       	st	X, r21
     b3a:	2f 5f       	subi	r18, 0xFF	; 255
     b3c:	3f 4f       	sbci	r19, 0xFF	; 255
     b3e:	24 17       	cp	r18, r20
     b40:	b0 f3       	brcs	.-20     	; 0xb2e <QUEUE_ADD_ARRAY_U8+0x42>
     b42:	08 95       	ret

00000b44 <QUEUE_GET_FRONT_ARRAY_U8>:
     b44:	fc 01       	movw	r30, r24
     b46:	22 81       	ldd	r18, Z+2	; 0x02
     b48:	22 23       	and	r18, r18
     b4a:	41 f0       	breq	.+16     	; 0xb5c <QUEUE_GET_FRONT_ARRAY_U8+0x18>
     b4c:	20 81       	ld	r18, Z
     b4e:	f8 e2       	ldi	r31, 0x28	; 40
     b50:	2f 9f       	mul	r18, r31
     b52:	80 0d       	add	r24, r0
     b54:	91 1d       	adc	r25, r1
     b56:	11 24       	eor	r1, r1
     b58:	03 96       	adiw	r24, 0x03	; 3
     b5a:	08 95       	ret
     b5c:	80 e0       	ldi	r24, 0x00	; 0
     b5e:	90 e0       	ldi	r25, 0x00	; 0
     b60:	08 95       	ret

00000b62 <QUEUE_DELETE_FRONT_ARRAY_U8>:

void QUEUE_DELETE_FRONT_ARRAY_U8(QUEUE_ARRAY_UINT8*MY_QUEUE)
{
     b62:	fc 01       	movw	r30, r24
	if (MY_QUEUE->COUNT!=0)
     b64:	22 81       	ldd	r18, Z+2	; 0x02
     b66:	22 23       	and	r18, r18
     b68:	41 f0       	breq	.+16     	; 0xb7a <QUEUE_DELETE_FRONT_ARRAY_U8+0x18>
	{
		MY_QUEUE->FRONT=(MY_QUEUE->FRONT+1)%max_Queue;
     b6a:	80 81       	ld	r24, Z
     b6c:	90 e0       	ldi	r25, 0x00	; 0
     b6e:	01 96       	adiw	r24, 0x01	; 1
     b70:	87 70       	andi	r24, 0x07	; 7
     b72:	90 78       	andi	r25, 0x80	; 128
     b74:	80 83       	st	Z, r24
		(MY_QUEUE->COUNT)--;
     b76:	21 50       	subi	r18, 0x01	; 1
     b78:	22 83       	std	Z+2, r18	; 0x02
     b7a:	08 95       	ret

00000b7c <LED_GRID_IO_SETUP>:
volatile unsigned char F_B_NEW_LED_GRID=0;


void LED_GRID_IO_SETUP()
{
	*PORT_DDR_LED_GRID=0XFF;
     b7c:	8f ef       	ldi	r24, 0xFF	; 255
     b7e:	80 93 61 00 	sts	0x0061, r24
	*PORT_OUTMOD_LED_GRID=0X00;
     b82:	10 b8       	out	0x00, r1	; 0
	*PORT_OUT_LED_GRID=0X00;
     b84:	10 92 62 00 	sts	0x0062, r1
	gpio_outputconfg(PORT_DDR_LED_GRID_CONTROL,PORT_OUTMOD_LED_GRID_CONTROL,OUTPASS,0);
     b88:	20 e0       	ldi	r18, 0x00	; 0
     b8a:	40 e0       	ldi	r20, 0x00	; 0
     b8c:	69 e3       	ldi	r22, 0x39	; 57
     b8e:	70 e0       	ldi	r23, 0x00	; 0
     b90:	8a e3       	ldi	r24, 0x3A	; 58
     b92:	90 e0       	ldi	r25, 0x00	; 0
     b94:	17 d2       	rcall	.+1070   	; 0xfc4 <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_LED_GRID_CONTROL,PORT_OUTMOD_LED_GRID_CONTROL,OUTPASS,1);
     b96:	21 e0       	ldi	r18, 0x01	; 1
     b98:	40 e0       	ldi	r20, 0x00	; 0
     b9a:	69 e3       	ldi	r22, 0x39	; 57
     b9c:	70 e0       	ldi	r23, 0x00	; 0
     b9e:	8a e3       	ldi	r24, 0x3A	; 58
     ba0:	90 e0       	ldi	r25, 0x00	; 0
     ba2:	10 d2       	rcall	.+1056   	; 0xfc4 <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_LED_GRID_CONTROL,PORT_OUTMOD_LED_GRID_CONTROL,OUTPASS,2);
     ba4:	22 e0       	ldi	r18, 0x02	; 2
     ba6:	40 e0       	ldi	r20, 0x00	; 0
     ba8:	69 e3       	ldi	r22, 0x39	; 57
     baa:	70 e0       	ldi	r23, 0x00	; 0
     bac:	8a e3       	ldi	r24, 0x3A	; 58
     bae:	90 e0       	ldi	r25, 0x00	; 0
     bb0:	09 c2       	rjmp	.+1042   	; 0xfc4 <gpio_outputconfg>
     bb2:	08 95       	ret

00000bb4 <LED_GRID_LOAD>:
{
	LED_GRID_LOAD();
}

void LED_GRID_LOAD()
{
     bb4:	cf 93       	push	r28
     bb6:	df 93       	push	r29
	if (readeeprom(MY_EEPROM_LED_GRID_FIRST_USE)==LED_GRID_FIRST_USE_VALUE)
     bb8:	84 ef       	ldi	r24, 0xF4	; 244
     bba:	91 e0       	ldi	r25, 0x01	; 1
     bbc:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
     bc0:	84 34       	cpi	r24, 0x44	; 68
     bc2:	81 f4       	brne	.+32     	; 0xbe4 <LED_GRID_LOAD+0x30>
     bc4:	c0 e0       	ldi	r28, 0x00	; 0
     bc6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		unsigned char i=0;
		for (i=0;i<LED_GRID_SIZE;i++)
		{
			LED_GRID_ARRAY[i]=readeeprom(MY_EEPROM_FIRST_LED_GRID+i);
     bc8:	ce 01       	movw	r24, r28
     bca:	8b 50       	subi	r24, 0x0B	; 11
     bcc:	9e 4f       	sbci	r25, 0xFE	; 254
     bce:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
     bd2:	fe 01       	movw	r30, r28
     bd4:	e0 50       	subi	r30, 0x00	; 0
     bd6:	ff 4f       	sbci	r31, 0xFF	; 255
     bd8:	80 83       	st	Z, r24
     bda:	21 96       	adiw	r28, 0x01	; 1
void LED_GRID_LOAD()
{
	if (readeeprom(MY_EEPROM_LED_GRID_FIRST_USE)==LED_GRID_FIRST_USE_VALUE)
	{
		unsigned char i=0;
		for (i=0;i<LED_GRID_SIZE;i++)
     bdc:	c8 30       	cpi	r28, 0x08	; 8
     bde:	d1 05       	cpc	r29, r1
     be0:	99 f7       	brne	.-26     	; 0xbc8 <LED_GRID_LOAD+0x14>
     be2:	14 c0       	rjmp	.+40     	; 0xc0c <LED_GRID_LOAD+0x58>
	LED_GRID_LOAD();
}

void LED_GRID_LOAD()
{
	if (readeeprom(MY_EEPROM_LED_GRID_FIRST_USE)==LED_GRID_FIRST_USE_VALUE)
     be4:	c0 e0       	ldi	r28, 0x00	; 0
     be6:	d0 e0       	ldi	r29, 0x00	; 0
	{
		unsigned char i=0;
		/*set the sensor array to zeros*/
		for (i=0;i<LED_GRID_SIZE;++i)
		{
			writeeeprom(MY_EEPROM_FIRST_LED_GRID+i,LED_GRID_ARRAY[i]);
     be8:	fe 01       	movw	r30, r28
     bea:	e0 50       	subi	r30, 0x00	; 0
     bec:	ff 4f       	sbci	r31, 0xFF	; 255
     bee:	60 81       	ld	r22, Z
     bf0:	ce 01       	movw	r24, r28
     bf2:	8b 50       	subi	r24, 0x0B	; 11
     bf4:	9e 4f       	sbci	r25, 0xFE	; 254
     bf6:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
     bfa:	21 96       	adiw	r28, 0x01	; 1
	}
	else
	{
		unsigned char i=0;
		/*set the sensor array to zeros*/
		for (i=0;i<LED_GRID_SIZE;++i)
     bfc:	c8 30       	cpi	r28, 0x08	; 8
     bfe:	d1 05       	cpc	r29, r1
     c00:	99 f7       	brne	.-26     	; 0xbe8 <LED_GRID_LOAD+0x34>
		{
			writeeeprom(MY_EEPROM_FIRST_LED_GRID+i,LED_GRID_ARRAY[i]);
		}
		/*set the value of checkfirst use to its value*/
		writeeeprom(MY_EEPROM_LED_GRID_FIRST_USE,LED_GRID_FIRST_USE_VALUE);
     c02:	64 e4       	ldi	r22, 0x44	; 68
     c04:	84 ef       	ldi	r24, 0xF4	; 244
     c06:	91 e0       	ldi	r25, 0x01	; 1
     c08:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	}
}
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <LED_GRID_SETUP>:
	
}

void LED_GRID_SETUP()
{
	LED_GRID_LOAD();
     c12:	d0 cf       	rjmp	.-96     	; 0xbb4 <LED_GRID_LOAD>
     c14:	08 95       	ret

00000c16 <LOOP_LED_GRID>:
		writeeeprom(MY_EEPROM_LED_GRID_FIRST_USE,LED_GRID_FIRST_USE_VALUE);
	}
}

void LOOP_LED_GRID()
{
     c16:	cf 93       	push	r28
     c18:	df 93       	push	r29
	if(F_B_NEW_LED_GRID)
     c1a:	80 91 23 03 	lds	r24, 0x0323
     c1e:	88 23       	and	r24, r24
     c20:	89 f0       	breq	.+34     	; 0xc44 <LOOP_LED_GRID+0x2e>
	{
		F_B_NEW_LED_GRID=0;
     c22:	10 92 23 03 	sts	0x0323, r1
     c26:	c0 e0       	ldi	r28, 0x00	; 0
     c28:	d0 e0       	ldi	r29, 0x00	; 0
		unsigned char i=0;
		for (i=0;i<LED_GRID_SIZE;++i)
		{
			writeeeprom(MY_EEPROM_FIRST_LED_GRID+i,LED_GRID_ARRAY[i]);
     c2a:	fe 01       	movw	r30, r28
     c2c:	e0 50       	subi	r30, 0x00	; 0
     c2e:	ff 4f       	sbci	r31, 0xFF	; 255
     c30:	60 81       	ld	r22, Z
     c32:	ce 01       	movw	r24, r28
     c34:	8b 50       	subi	r24, 0x0B	; 11
     c36:	9e 4f       	sbci	r25, 0xFE	; 254
     c38:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
     c3c:	21 96       	adiw	r28, 0x01	; 1
{
	if(F_B_NEW_LED_GRID)
	{
		F_B_NEW_LED_GRID=0;
		unsigned char i=0;
		for (i=0;i<LED_GRID_SIZE;++i)
     c3e:	c8 30       	cpi	r28, 0x08	; 8
     c40:	d1 05       	cpc	r29, r1
     c42:	99 f7       	brne	.-26     	; 0xc2a <LOOP_LED_GRID+0x14>
		{
			writeeeprom(MY_EEPROM_FIRST_LED_GRID+i,LED_GRID_ARRAY[i]);
		}
	}
	
}
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	08 95       	ret

00000c4a <LED_GRID_TIMER_INT>:

void LED_GRID_TIMER_INT()
{
	
	
	LED_GRID_COUNTER=(LED_GRID_COUNTER+1)%LED_GRID_SIZE;
     c4a:	80 91 24 03 	lds	r24, 0x0324
     c4e:	90 e0       	ldi	r25, 0x00	; 0
     c50:	01 96       	adiw	r24, 0x01	; 1
     c52:	87 70       	andi	r24, 0x07	; 7
     c54:	90 78       	andi	r25, 0x80	; 128
     c56:	80 93 24 03 	sts	0x0324, r24
	*PORT_OUT_LED_GRID=LED_GRID_ARRAY[LED_GRID_COUNTER];
     c5a:	e0 91 24 03 	lds	r30, 0x0324
     c5e:	f0 e0       	ldi	r31, 0x00	; 0
     c60:	e0 50       	subi	r30, 0x00	; 0
     c62:	ff 4f       	sbci	r31, 0xFF	; 255
     c64:	80 81       	ld	r24, Z
     c66:	80 93 62 00 	sts	0x0062, r24
	*PORT_OUT_LED_GRID_CONTROL=(((*PORT_OUT_LED_GRID_CONTROL)&0B11111000)|LED_GRID_COUNTER);
     c6a:	8b b3       	in	r24, 0x1b	; 27
     c6c:	90 91 24 03 	lds	r25, 0x0324
     c70:	88 7f       	andi	r24, 0xF8	; 248
     c72:	89 2b       	or	r24, r25
     c74:	8b bb       	out	0x1b, r24	; 27
     c76:	08 95       	ret

00000c78 <OTHER_SETUPS_IO>:
	 toggybit(*PORT_OUT_TOGGLE_LED,TOGGLE_LED_PIN);
}

void OTHER_SETUPS_IO()
{
	gpio_outputconfg(PORT_DDR_READY_LED,PORT_OUTMOD_READY_LED,OUTPASS,READY_LED_PIN);
     c78:	20 e0       	ldi	r18, 0x00	; 0
     c7a:	40 e0       	ldi	r20, 0x00	; 0
     c7c:	63 e6       	ldi	r22, 0x63	; 99
     c7e:	70 e0       	ldi	r23, 0x00	; 0
     c80:	84 e6       	ldi	r24, 0x64	; 100
     c82:	90 e0       	ldi	r25, 0x00	; 0
     c84:	9f d1       	rcall	.+830    	; 0xfc4 <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_TOGGLE_LED,PORT_OUTMOD_TOGGLE_LED,OUTPASS,TOGGLE_LED_PIN);
     c86:	25 e0       	ldi	r18, 0x05	; 5
     c88:	40 e0       	ldi	r20, 0x00	; 0
     c8a:	61 e2       	ldi	r22, 0x21	; 33
     c8c:	70 e0       	ldi	r23, 0x00	; 0
     c8e:	82 e2       	ldi	r24, 0x22	; 34
     c90:	90 e0       	ldi	r25, 0x00	; 0
     c92:	98 c1       	rjmp	.+816    	; 0xfc4 <gpio_outputconfg>
     c94:	08 95       	ret

00000c96 <SETUP>:

volatile unsigned char F_B_RESET_SENSORS=0;
volatile unsigned char F_B_RESET_ALL=0;

void SETUP()
{
     c96:	8f 92       	push	r8
     c98:	9f 92       	push	r9
     c9a:	af 92       	push	r10
     c9c:	bf 92       	push	r11
     c9e:	cf 92       	push	r12
     ca0:	df 92       	push	r13
     ca2:	ef 92       	push	r14
     ca4:	0f 93       	push	r16
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     ca6:	2f ef       	ldi	r18, 0xFF	; 255
     ca8:	83 ed       	ldi	r24, 0xD3	; 211
     caa:	90 e3       	ldi	r25, 0x30	; 48
     cac:	21 50       	subi	r18, 0x01	; 1
     cae:	80 40       	sbci	r24, 0x00	; 0
     cb0:	90 40       	sbci	r25, 0x00	; 0
     cb2:	e1 f7       	brne	.-8      	; 0xcac <SETUP+0x16>
     cb4:	00 c0       	rjmp	.+0      	; 0xcb6 <SETUP+0x20>
     cb6:	00 00       	nop
	_delay_ms(1000);
	SPI_INT(SPI_MASTER,SPI_SCALE_16,SPI_MODE_0,SPI_INT_DISABLE,SPI_MSF);
     cb8:	00 e0       	ldi	r16, 0x00	; 0
     cba:	20 e0       	ldi	r18, 0x00	; 0
     cbc:	40 e0       	ldi	r20, 0x00	; 0
     cbe:	61 e0       	ldi	r22, 0x01	; 1
     cc0:	70 e0       	ldi	r23, 0x00	; 0
     cc2:	80 e1       	ldi	r24, 0x10	; 16
     cc4:	0e 94 c4 11 	call	0x2388	; 0x2388 <SPI_INT>
	BLUETOOTH_IO_SETUP();
     cc8:	e2 de       	rcall	.-572    	; 0xa8e <BLUETOOTH_IO_SETUP>
	LED_GRID_IO_SETUP();
     cca:	58 df       	rcall	.-336    	; 0xb7c <LED_GRID_IO_SETUP>
	PROTOCOL_IO_SETUP();
     ccc:	0e 94 d3 14 	call	0x29a6	; 0x29a6 <PROTOCOL_IO_SETUP>
	SENSORS_IO_SETUP();
     cd0:	0e 94 99 1c 	call	0x3932	; 0x3932 <SENSORS_IO_SETUP>
	WIFI_SETUP_IO();
     cd4:	0e 94 4a 2f 	call	0x5e94	; 0x5e94 <WIFI_SETUP_IO>
	OTHER_SETUPS_IO();
     cd8:	cf df       	rcall	.-98     	; 0xc78 <OTHER_SETUPS_IO>
	TEST_IO_SETUP();
     cda:	0e 94 ed 2e 	call	0x5dda	; 0x5dda <TEST_IO_SETUP>
	
	
	BLUETOOTH_SETUP();
     cde:	11 da       	rcall	.-3038   	; 0x102 <BLUETOOTH_SETUP>
	
	
	
	
	/*WIFI*/
	USART1_INIT(ASYNCHRONOUS_NORMAL,UART_INT_DISABLE,UART_INT_DISABLE,UART_INT_DISABLE,TX_RX_ENABLE,PARITY_DISABLE_1STOP,DATA_8,UART1_BAUD_RATE);
     ce0:	0f 2e       	mov	r0, r31
     ce2:	f0 e8       	ldi	r31, 0x80	; 128
     ce4:	8f 2e       	mov	r8, r31
     ce6:	f5 e2       	ldi	r31, 0x25	; 37
     ce8:	9f 2e       	mov	r9, r31
     cea:	a1 2c       	mov	r10, r1
     cec:	b1 2c       	mov	r11, r1
     cee:	f0 2d       	mov	r31, r0
     cf0:	0f 2e       	mov	r0, r31
     cf2:	f6 e0       	ldi	r31, 0x06	; 6
     cf4:	cf 2e       	mov	r12, r31
     cf6:	d1 2c       	mov	r13, r1
     cf8:	f0 2d       	mov	r31, r0
     cfa:	e1 2c       	mov	r14, r1
     cfc:	08 e1       	ldi	r16, 0x18	; 24
     cfe:	20 e0       	ldi	r18, 0x00	; 0
     d00:	40 e0       	ldi	r20, 0x00	; 0
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	80 e0       	ldi	r24, 0x00	; 0
     d06:	90 e0       	ldi	r25, 0x00	; 0
     d08:	0e 94 fb 13 	call	0x27f6	; 0x27f6 <USART1_INIT>
	/**************/
	
	
	
	TEST3_SET();
     d0c:	aa 9a       	sbi	0x15, 2	; 21
	LED_GRID_SETUP();
     d0e:	81 df       	rcall	.-254    	; 0xc12 <LED_GRID_SETUP>
	TIMERS_SETUP();
     d10:	0e 94 12 2f 	call	0x5e24	; 0x5e24 <TIMERS_SETUP>
	SENSORS_SETUP();
     d14:	0e 94 d0 1d 	call	0x3ba0	; 0x3ba0 <SENSORS_SETUP>
	TEST_UART_SEND_str("READY1\n");
     d18:	8a e1       	ldi	r24, 0x1A	; 26
     d1a:	91 e0       	ldi	r25, 0x01	; 1
     d1c:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	PROTOCOL_SETUP();
     d20:	0e 94 d1 14 	call	0x29a2	; 0x29a2 <PROTOCOL_SETUP>
	WIFI_SETUP();
     d24:	0e 94 d6 2f 	call	0x5fac	; 0x5fac <WIFI_SETUP>
	setbit(*PORT_OUT_READY_LED,READY_LED_PIN);
     d28:	e5 e6       	ldi	r30, 0x65	; 101
     d2a:	f0 e0       	ldi	r31, 0x00	; 0
     d2c:	80 81       	ld	r24, Z
     d2e:	81 60       	ori	r24, 0x01	; 1
     d30:	80 83       	st	Z, r24
	
	 
	/* TEST_ADD_USER_PASS();
	 TEST_ADD_IOT_PARAMETERS();*/
	TEST_UART_SEND_str("READY2\n");
     d32:	82 e2       	ldi	r24, 0x22	; 34
     d34:	91 e0       	ldi	r25, 0x01	; 1
     d36:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
}
     d3a:	0f 91       	pop	r16
     d3c:	ef 90       	pop	r14
     d3e:	df 90       	pop	r13
     d40:	cf 90       	pop	r12
     d42:	bf 90       	pop	r11
     d44:	af 90       	pop	r10
     d46:	9f 90       	pop	r9
     d48:	8f 90       	pop	r8
     d4a:	08 95       	ret

00000d4c <SENSORS_RESET_LOOP>:
	
}

void SENSORS_RESET_LOOP()
{
	if (F_B_RESET_SENSORS)
     d4c:	80 91 26 03 	lds	r24, 0x0326
     d50:	88 23       	and	r24, r24
     d52:	21 f0       	breq	.+8      	; 0xd5c <SENSORS_RESET_LOOP+0x10>
	{
		F_B_RESET_SENSORS=0;
     d54:	10 92 26 03 	sts	0x0326, r1
		DELETE_ALL_SENSOR();
     d58:	0c 94 39 1f 	jmp	0x3e72	; 0x3e72 <DELETE_ALL_SENSOR>
     d5c:	08 95       	ret

00000d5e <RESET_ALL_LOOP>:
}


void RESET_ALL_LOOP()
{
	if (F_B_RESET_ALL)
     d5e:	80 91 25 03 	lds	r24, 0x0325
     d62:	88 23       	and	r24, r24
     d64:	31 f0       	breq	.+12     	; 0xd72 <RESET_ALL_LOOP+0x14>
	{
		F_B_RESET_ALL=0;
     d66:	10 92 25 03 	sts	0x0325, r1
		DELETE_ALL_SENSOR();
     d6a:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <DELETE_ALL_SENSOR>
		WIFI_RESET();
     d6e:	0c 94 8a 31 	jmp	0x6314	; 0x6314 <WIFI_RESET>
     d72:	08 95       	ret

00000d74 <LOOP>:
}

void LOOP()
{
	/* TEST_ADD_SENSOR();*/
	 LOOP_LED_GRID();
     d74:	50 df       	rcall	.-352    	; 0xc16 <LOOP_LED_GRID>
	 WIFI_LOOP();
     d76:	0e 94 b2 30 	call	0x6164	; 0x6164 <WIFI_LOOP>
	 LOOP_SENSORS_MANAGE();
     d7a:	0e 94 8a 2e 	call	0x5d14	; 0x5d14 <LOOP_SENSORS_MANAGE>
	 BLUETOOTH_LOOP();
     d7e:	96 de       	rcall	.-724    	; 0xaac <BLUETOOTH_LOOP>
	 SENSORS_RESET_LOOP();
     d80:	e5 df       	rcall	.-54     	; 0xd4c <SENSORS_RESET_LOOP>
	  RESET_ALL_LOOP();
     d82:	ed df       	rcall	.-38     	; 0xd5e <RESET_ALL_LOOP>
	 toggybit(*PORT_OUT_TOGGLE_LED,TOGGLE_LED_PIN);
     d84:	93 b1       	in	r25, 0x03	; 3
     d86:	80 e2       	ldi	r24, 0x20	; 32
     d88:	89 27       	eor	r24, r25
     d8a:	83 b9       	out	0x03, r24	; 3
     d8c:	08 95       	ret

00000d8e <__vector_14>:
#include "MAIN_DRIVER.h"
#include <avr/interrupt.h>
#include <avr/io.h>

ISR(TIMER1_OVF_vect)
{TEST3_TOGGLE();
     d8e:	1f 92       	push	r1
     d90:	0f 92       	push	r0
     d92:	0f b6       	in	r0, 0x3f	; 63
     d94:	0f 92       	push	r0
     d96:	11 24       	eor	r1, r1
     d98:	0b b6       	in	r0, 0x3b	; 59
     d9a:	0f 92       	push	r0
     d9c:	2f 93       	push	r18
     d9e:	3f 93       	push	r19
     da0:	4f 93       	push	r20
     da2:	5f 93       	push	r21
     da4:	6f 93       	push	r22
     da6:	7f 93       	push	r23
     da8:	8f 93       	push	r24
     daa:	9f 93       	push	r25
     dac:	af 93       	push	r26
     dae:	bf 93       	push	r27
     db0:	ef 93       	push	r30
     db2:	ff 93       	push	r31
     db4:	95 b3       	in	r25, 0x15	; 21
     db6:	84 e0       	ldi	r24, 0x04	; 4
     db8:	89 27       	eor	r24, r25
     dba:	85 bb       	out	0x15, r24	; 21
	TIMER1_INT_EVENT();
     dbc:	0e 94 46 2f 	call	0x5e8c	; 0x5e8c <TIMER1_INT_EVENT>
}
     dc0:	ff 91       	pop	r31
     dc2:	ef 91       	pop	r30
     dc4:	bf 91       	pop	r27
     dc6:	af 91       	pop	r26
     dc8:	9f 91       	pop	r25
     dca:	8f 91       	pop	r24
     dcc:	7f 91       	pop	r23
     dce:	6f 91       	pop	r22
     dd0:	5f 91       	pop	r21
     dd2:	4f 91       	pop	r20
     dd4:	3f 91       	pop	r19
     dd6:	2f 91       	pop	r18
     dd8:	0f 90       	pop	r0
     dda:	0b be       	out	0x3b, r0	; 59
     ddc:	0f 90       	pop	r0
     dde:	0f be       	out	0x3f, r0	; 63
     de0:	0f 90       	pop	r0
     de2:	1f 90       	pop	r1
     de4:	18 95       	reti

00000de6 <__vector_16>:
ISR(TIMER0_OVF_vect)
{
     de6:	1f 92       	push	r1
     de8:	0f 92       	push	r0
     dea:	0f b6       	in	r0, 0x3f	; 63
     dec:	0f 92       	push	r0
     dee:	11 24       	eor	r1, r1
     df0:	0b b6       	in	r0, 0x3b	; 59
     df2:	0f 92       	push	r0
     df4:	2f 93       	push	r18
     df6:	3f 93       	push	r19
     df8:	4f 93       	push	r20
     dfa:	5f 93       	push	r21
     dfc:	6f 93       	push	r22
     dfe:	7f 93       	push	r23
     e00:	8f 93       	push	r24
     e02:	9f 93       	push	r25
     e04:	af 93       	push	r26
     e06:	bf 93       	push	r27
     e08:	ef 93       	push	r30
     e0a:	ff 93       	push	r31
	 TIMER0_INT_EVENT();
     e0c:	0e 94 43 2f 	call	0x5e86	; 0x5e86 <TIMER0_INT_EVENT>
}
     e10:	ff 91       	pop	r31
     e12:	ef 91       	pop	r30
     e14:	bf 91       	pop	r27
     e16:	af 91       	pop	r26
     e18:	9f 91       	pop	r25
     e1a:	8f 91       	pop	r24
     e1c:	7f 91       	pop	r23
     e1e:	6f 91       	pop	r22
     e20:	5f 91       	pop	r21
     e22:	4f 91       	pop	r20
     e24:	3f 91       	pop	r19
     e26:	2f 91       	pop	r18
     e28:	0f 90       	pop	r0
     e2a:	0b be       	out	0x3b, r0	; 59
     e2c:	0f 90       	pop	r0
     e2e:	0f be       	out	0x3f, r0	; 63
     e30:	0f 90       	pop	r0
     e32:	1f 90       	pop	r1
     e34:	18 95       	reti

00000e36 <__vector_18>:
ISR(USART0_RX_vect)
{
     e36:	1f 92       	push	r1
     e38:	0f 92       	push	r0
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	0f 92       	push	r0
     e3e:	11 24       	eor	r1, r1
     e40:	0b b6       	in	r0, 0x3b	; 59
     e42:	0f 92       	push	r0
     e44:	2f 93       	push	r18
     e46:	3f 93       	push	r19
     e48:	4f 93       	push	r20
     e4a:	5f 93       	push	r21
     e4c:	6f 93       	push	r22
     e4e:	7f 93       	push	r23
     e50:	8f 93       	push	r24
     e52:	9f 93       	push	r25
     e54:	af 93       	push	r26
     e56:	bf 93       	push	r27
     e58:	ef 93       	push	r30
     e5a:	ff 93       	push	r31

	RX0_ISR();
     e5c:	c8 dd       	rcall	.-1136   	; 0x9ee <RX0_ISR>
}
     e5e:	ff 91       	pop	r31
     e60:	ef 91       	pop	r30
     e62:	bf 91       	pop	r27
     e64:	af 91       	pop	r26
     e66:	9f 91       	pop	r25
     e68:	8f 91       	pop	r24
     e6a:	7f 91       	pop	r23
     e6c:	6f 91       	pop	r22
     e6e:	5f 91       	pop	r21
     e70:	4f 91       	pop	r20
     e72:	3f 91       	pop	r19
     e74:	2f 91       	pop	r18
     e76:	0f 90       	pop	r0
     e78:	0b be       	out	0x3b, r0	; 59
     e7a:	0f 90       	pop	r0
     e7c:	0f be       	out	0x3f, r0	; 63
     e7e:	0f 90       	pop	r0
     e80:	1f 90       	pop	r1
     e82:	18 95       	reti

00000e84 <__vector_10>:

ISR(TIMER2_OVF_vect)
{
     e84:	1f 92       	push	r1
     e86:	0f 92       	push	r0
     e88:	0f b6       	in	r0, 0x3f	; 63
     e8a:	0f 92       	push	r0
     e8c:	11 24       	eor	r1, r1
     e8e:	0b b6       	in	r0, 0x3b	; 59
     e90:	0f 92       	push	r0
     e92:	2f 93       	push	r18
     e94:	3f 93       	push	r19
     e96:	4f 93       	push	r20
     e98:	5f 93       	push	r21
     e9a:	6f 93       	push	r22
     e9c:	7f 93       	push	r23
     e9e:	8f 93       	push	r24
     ea0:	9f 93       	push	r25
     ea2:	af 93       	push	r26
     ea4:	bf 93       	push	r27
     ea6:	ef 93       	push	r30
     ea8:	ff 93       	push	r31
	TIMER2_ISR();
     eaa:	08 de       	rcall	.-1008   	; 0xabc <TIMER2_ISR>
}
     eac:	ff 91       	pop	r31
     eae:	ef 91       	pop	r30
     eb0:	bf 91       	pop	r27
     eb2:	af 91       	pop	r26
     eb4:	9f 91       	pop	r25
     eb6:	8f 91       	pop	r24
     eb8:	7f 91       	pop	r23
     eba:	6f 91       	pop	r22
     ebc:	5f 91       	pop	r21
     ebe:	4f 91       	pop	r20
     ec0:	3f 91       	pop	r19
     ec2:	2f 91       	pop	r18
     ec4:	0f 90       	pop	r0
     ec6:	0b be       	out	0x3b, r0	; 59
     ec8:	0f 90       	pop	r0
     eca:	0f be       	out	0x3f, r0	; 63
     ecc:	0f 90       	pop	r0
     ece:	1f 90       	pop	r1
     ed0:	18 95       	reti

00000ed2 <__vector_7>:

ISR(INT6_vect)
{
     ed2:	1f 92       	push	r1
     ed4:	0f 92       	push	r0
     ed6:	0f b6       	in	r0, 0x3f	; 63
     ed8:	0f 92       	push	r0
     eda:	11 24       	eor	r1, r1
     edc:	0b b6       	in	r0, 0x3b	; 59
     ede:	0f 92       	push	r0
     ee0:	2f 93       	push	r18
     ee2:	3f 93       	push	r19
     ee4:	4f 93       	push	r20
     ee6:	5f 93       	push	r21
     ee8:	6f 93       	push	r22
     eea:	7f 93       	push	r23
     eec:	8f 93       	push	r24
     eee:	9f 93       	push	r25
     ef0:	af 93       	push	r26
     ef2:	bf 93       	push	r27
     ef4:	ef 93       	push	r30
     ef6:	ff 93       	push	r31
	INT6_ISR();
     ef8:	0e 94 e7 2e 	call	0x5dce	; 0x5dce <INT6_ISR>
}
     efc:	ff 91       	pop	r31
     efe:	ef 91       	pop	r30
     f00:	bf 91       	pop	r27
     f02:	af 91       	pop	r26
     f04:	9f 91       	pop	r25
     f06:	8f 91       	pop	r24
     f08:	7f 91       	pop	r23
     f0a:	6f 91       	pop	r22
     f0c:	5f 91       	pop	r21
     f0e:	4f 91       	pop	r20
     f10:	3f 91       	pop	r19
     f12:	2f 91       	pop	r18
     f14:	0f 90       	pop	r0
     f16:	0b be       	out	0x3b, r0	; 59
     f18:	0f 90       	pop	r0
     f1a:	0f be       	out	0x3f, r0	; 63
     f1c:	0f 90       	pop	r0
     f1e:	1f 90       	pop	r1
     f20:	18 95       	reti

00000f22 <__vector_20>:

ISR(USART0_TX_vect)
{
     f22:	1f 92       	push	r1
     f24:	0f 92       	push	r0
     f26:	0f b6       	in	r0, 0x3f	; 63
     f28:	0f 92       	push	r0
     f2a:	11 24       	eor	r1, r1
     f2c:	0b b6       	in	r0, 0x3b	; 59
     f2e:	0f 92       	push	r0
     f30:	2f 93       	push	r18
     f32:	3f 93       	push	r19
     f34:	4f 93       	push	r20
     f36:	5f 93       	push	r21
     f38:	6f 93       	push	r22
     f3a:	7f 93       	push	r23
     f3c:	8f 93       	push	r24
     f3e:	9f 93       	push	r25
     f40:	af 93       	push	r26
     f42:	bf 93       	push	r27
     f44:	ef 93       	push	r30
     f46:	ff 93       	push	r31
	TX0_ISR();
     f48:	03 d9       	rcall	.-3578   	; 0x150 <TX0_ISR>
}
     f4a:	ff 91       	pop	r31
     f4c:	ef 91       	pop	r30
     f4e:	bf 91       	pop	r27
     f50:	af 91       	pop	r26
     f52:	9f 91       	pop	r25
     f54:	8f 91       	pop	r24
     f56:	7f 91       	pop	r23
     f58:	6f 91       	pop	r22
     f5a:	5f 91       	pop	r21
     f5c:	4f 91       	pop	r20
     f5e:	3f 91       	pop	r19
     f60:	2f 91       	pop	r18
     f62:	0f 90       	pop	r0
     f64:	0b be       	out	0x3b, r0	; 59
     f66:	0f 90       	pop	r0
     f68:	0f be       	out	0x3f, r0	; 63
     f6a:	0f 90       	pop	r0
     f6c:	1f 90       	pop	r1
     f6e:	18 95       	reti

00000f70 <__vector_default>:

ISR(BADISR_vect)
{
     f70:	1f 92       	push	r1
     f72:	0f 92       	push	r0
     f74:	0f b6       	in	r0, 0x3f	; 63
     f76:	0f 92       	push	r0
     f78:	11 24       	eor	r1, r1
	
}
     f7a:	0f 90       	pop	r0
     f7c:	0f be       	out	0x3f, r0	; 63
     f7e:	0f 90       	pop	r0
     f80:	1f 90       	pop	r1
     f82:	18 95       	reti

00000f84 <main>:

int main(void)
{
	
	SETUP();
     f84:	88 de       	rcall	.-752    	; 0xc96 <SETUP>
	while(1)
	{
		LOOP();
     f86:	f6 de       	rcall	.-532    	; 0xd74 <LOOP>
     f88:	fe cf       	rjmp	.-4      	; 0xf86 <main+0x2>

00000f8a <gpio_inputconfg>:
 * Created: 04/09/2018 01:28:50 م
 *  Author: ideapad510
 */ 
#include "microconfigrations.h"
	void gpio_inputconfg(volatile uint8 * DiR_address,volatile uint8 * inputmodreg_address,INPUT_MOD mod,uint8 pin)
	{
     f8a:	fb 01       	movw	r30, r22
		clearbit(*DiR_address,pin);
     f8c:	dc 01       	movw	r26, r24
     f8e:	3c 91       	ld	r19, X
     f90:	61 e0       	ldi	r22, 0x01	; 1
     f92:	70 e0       	ldi	r23, 0x00	; 0
     f94:	02 2e       	mov	r0, r18
     f96:	02 c0       	rjmp	.+4      	; 0xf9c <gpio_inputconfg+0x12>
     f98:	66 0f       	add	r22, r22
     f9a:	77 1f       	adc	r23, r23
     f9c:	0a 94       	dec	r0
     f9e:	e2 f7       	brpl	.-8      	; 0xf98 <gpio_inputconfg+0xe>
     fa0:	60 95       	com	r22
     fa2:	36 23       	and	r19, r22
     fa4:	3c 93       	st	X, r19
		clearbit(*inputmodreg_address,pin);
     fa6:	80 81       	ld	r24, Z
     fa8:	68 23       	and	r22, r24
     faa:	60 83       	st	Z, r22
				*inputmodreg_address|=mod<<pin;
     fac:	80 81       	ld	r24, Z
     fae:	50 e0       	ldi	r21, 0x00	; 0
     fb0:	ba 01       	movw	r22, r20
     fb2:	02 c0       	rjmp	.+4      	; 0xfb8 <gpio_inputconfg+0x2e>
     fb4:	66 0f       	add	r22, r22
     fb6:	77 1f       	adc	r23, r23
     fb8:	2a 95       	dec	r18
     fba:	e2 f7       	brpl	.-8      	; 0xfb4 <gpio_inputconfg+0x2a>
     fbc:	9b 01       	movw	r18, r22
     fbe:	28 2b       	or	r18, r24
     fc0:	20 83       	st	Z, r18
     fc2:	08 95       	ret

00000fc4 <gpio_outputconfg>:
	
	
	
	
	void gpio_outputconfg(volatile uint8 * DiR_address,volatile uint8 * outputmodreg_address,OUTPUTMOD mod,uint8 pin)
	{
     fc4:	fb 01       	movw	r30, r22
		
		setbit(*DiR_address,pin);
     fc6:	dc 01       	movw	r26, r24
     fc8:	3c 91       	ld	r19, X
     fca:	61 e0       	ldi	r22, 0x01	; 1
     fcc:	70 e0       	ldi	r23, 0x00	; 0
     fce:	02 2e       	mov	r0, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <gpio_outputconfg+0x12>
     fd2:	66 0f       	add	r22, r22
     fd4:	77 1f       	adc	r23, r23
     fd6:	0a 94       	dec	r0
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <gpio_outputconfg+0xe>
     fda:	36 2b       	or	r19, r22
     fdc:	3c 93       	st	X, r19
		clearbit(*outputmodreg_address,pin);
     fde:	80 81       	ld	r24, Z
     fe0:	60 95       	com	r22
     fe2:	68 23       	and	r22, r24
     fe4:	60 83       	st	Z, r22
		*outputmodreg_address|=mod<<pin;
     fe6:	80 81       	ld	r24, Z
     fe8:	50 e0       	ldi	r21, 0x00	; 0
     fea:	ba 01       	movw	r22, r20
     fec:	02 c0       	rjmp	.+4      	; 0xff2 <gpio_outputconfg+0x2e>
     fee:	66 0f       	add	r22, r22
     ff0:	77 1f       	adc	r23, r23
     ff2:	2a 95       	dec	r18
     ff4:	e2 f7       	brpl	.-8      	; 0xfee <gpio_outputconfg+0x2a>
     ff6:	9b 01       	movw	r18, r22
     ff8:	28 2b       	or	r18, r24
     ffa:	20 83       	st	Z, r18
     ffc:	08 95       	ret

00000ffe <ESP_READ_CHAR_AND_CHECK>:

volatile unsigned long NEW_LAST_ENTRY; 
volatile unsigned char F_WIFI_CONNECT_STAGE_COUNTER=0;
volatile unsigned char WIFI_CONNECT_STAGE=0;
unsigned char ESP_READ_CHAR_AND_CHECK(unsigned char X)
{
     ffe:	1f 93       	push	r17
    1000:	cf 93       	push	r28
    1002:	df 93       	push	r29
    1004:	1f 92       	push	r1
    1006:	cd b7       	in	r28, 0x3d	; 61
    1008:	de b7       	in	r29, 0x3e	; 62
    100a:	18 2f       	mov	r17, r24
	unsigned char RECIVE_TEMP_DATA;
	unsigned char V;
	RECIVE_TEMP_DATA=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	5c e6       	ldi	r21, 0x6C	; 108
    1010:	6c ed       	ldi	r22, 0xDC	; 220
    1012:	72 e0       	ldi	r23, 0x02	; 2
    1014:	ce 01       	movw	r24, r28
    1016:	01 96       	adiw	r24, 0x01	; 1
    1018:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
	if (V==0)
    101c:	99 81       	ldd	r25, Y+1	; 0x01
    101e:	99 23       	and	r25, r25
    1020:	21 f0       	breq	.+8      	; 0x102a <ESP_READ_CHAR_AND_CHECK+0x2c>
	{
		return 1;//WIFI MODULE NOT CONNECTED
	}
	if (RECIVE_TEMP_DATA!=X)
    1022:	81 17       	cp	r24, r17
    1024:	21 f0       	breq	.+8      	; 0x102e <ESP_READ_CHAR_AND_CHECK+0x30>
	{
		return 2;//wrong data
    1026:	82 e0       	ldi	r24, 0x02	; 2
    1028:	03 c0       	rjmp	.+6      	; 0x1030 <ESP_READ_CHAR_AND_CHECK+0x32>
	unsigned char RECIVE_TEMP_DATA;
	unsigned char V;
	RECIVE_TEMP_DATA=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
	if (V==0)
	{
		return 1;//WIFI MODULE NOT CONNECTED
    102a:	81 e0       	ldi	r24, 0x01	; 1
    102c:	01 c0       	rjmp	.+2      	; 0x1030 <ESP_READ_CHAR_AND_CHECK+0x32>
	}
	if (RECIVE_TEMP_DATA!=X)
	{
		return 2;//wrong data
	}
	return 0;
    102e:	80 e0       	ldi	r24, 0x00	; 0
}
    1030:	0f 90       	pop	r0
    1032:	df 91       	pop	r29
    1034:	cf 91       	pop	r28
    1036:	1f 91       	pop	r17
    1038:	08 95       	ret

0000103a <ESP_CHECK_OK_RESP>:

unsigned char ESP_CHECK_OK_RESP()
{
    103a:	cf 93       	push	r28
    103c:	df 93       	push	r29
    103e:	1f 92       	push	r1
    1040:	cd b7       	in	r28, 0x3d	; 61
    1042:	de b7       	in	r29, 0x3e	; 62
		volatile unsigned char TEST;
		TEST=ESP_READ_CHAR_AND_CHECK('\r');
    1044:	8d e0       	ldi	r24, 0x0D	; 13
    1046:	db df       	rcall	.-74     	; 0xffe <ESP_READ_CHAR_AND_CHECK>
    1048:	89 83       	std	Y+1, r24	; 0x01
		if (TEST)
    104a:	89 81       	ldd	r24, Y+1	; 0x01
    104c:	88 23       	and	r24, r24
    104e:	11 f0       	breq	.+4      	; 0x1054 <ESP_CHECK_OK_RESP+0x1a>
		{
			return TEST;
    1050:	89 81       	ldd	r24, Y+1	; 0x01
    1052:	29 c0       	rjmp	.+82     	; 0x10a6 <ESP_CHECK_OK_RESP+0x6c>
		}
		TEST=ESP_READ_CHAR_AND_CHECK('\n');
    1054:	8a e0       	ldi	r24, 0x0A	; 10
    1056:	d3 df       	rcall	.-90     	; 0xffe <ESP_READ_CHAR_AND_CHECK>
    1058:	89 83       	std	Y+1, r24	; 0x01
		if (TEST)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	88 23       	and	r24, r24
    105e:	11 f0       	breq	.+4      	; 0x1064 <ESP_CHECK_OK_RESP+0x2a>
		{
			return TEST;
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	21 c0       	rjmp	.+66     	; 0x10a6 <ESP_CHECK_OK_RESP+0x6c>
		}	
		TEST=ESP_READ_CHAR_AND_CHECK('O');
    1064:	8f e4       	ldi	r24, 0x4F	; 79
    1066:	cb df       	rcall	.-106    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
    1068:	89 83       	std	Y+1, r24	; 0x01
		if (TEST)
    106a:	89 81       	ldd	r24, Y+1	; 0x01
    106c:	88 23       	and	r24, r24
    106e:	11 f0       	breq	.+4      	; 0x1074 <ESP_CHECK_OK_RESP+0x3a>
		{
			return TEST;
    1070:	89 81       	ldd	r24, Y+1	; 0x01
    1072:	19 c0       	rjmp	.+50     	; 0x10a6 <ESP_CHECK_OK_RESP+0x6c>
		}
		TEST=ESP_READ_CHAR_AND_CHECK('K');
    1074:	8b e4       	ldi	r24, 0x4B	; 75
    1076:	c3 df       	rcall	.-122    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
    1078:	89 83       	std	Y+1, r24	; 0x01
		if (TEST)
    107a:	89 81       	ldd	r24, Y+1	; 0x01
    107c:	88 23       	and	r24, r24
    107e:	11 f0       	breq	.+4      	; 0x1084 <ESP_CHECK_OK_RESP+0x4a>
		{
			return TEST;
    1080:	89 81       	ldd	r24, Y+1	; 0x01
    1082:	11 c0       	rjmp	.+34     	; 0x10a6 <ESP_CHECK_OK_RESP+0x6c>
		}	
		TEST=ESP_READ_CHAR_AND_CHECK('\r');
    1084:	8d e0       	ldi	r24, 0x0D	; 13
    1086:	bb df       	rcall	.-138    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
    1088:	89 83       	std	Y+1, r24	; 0x01
		if (TEST)
    108a:	89 81       	ldd	r24, Y+1	; 0x01
    108c:	88 23       	and	r24, r24
    108e:	11 f0       	breq	.+4      	; 0x1094 <ESP_CHECK_OK_RESP+0x5a>
		{
			return TEST;
    1090:	89 81       	ldd	r24, Y+1	; 0x01
    1092:	09 c0       	rjmp	.+18     	; 0x10a6 <ESP_CHECK_OK_RESP+0x6c>
		}
		TEST=ESP_READ_CHAR_AND_CHECK('\n');
    1094:	8a e0       	ldi	r24, 0x0A	; 10
    1096:	b3 df       	rcall	.-154    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
    1098:	89 83       	std	Y+1, r24	; 0x01
		if (TEST)
    109a:	89 81       	ldd	r24, Y+1	; 0x01
    109c:	88 23       	and	r24, r24
    109e:	11 f0       	breq	.+4      	; 0x10a4 <ESP_CHECK_OK_RESP+0x6a>
		{
			return TEST;
    10a0:	89 81       	ldd	r24, Y+1	; 0x01
    10a2:	01 c0       	rjmp	.+2      	; 0x10a6 <ESP_CHECK_OK_RESP+0x6c>
		}
		return 0; /*done*/
    10a4:	80 e0       	ldi	r24, 0x00	; 0
}
    10a6:	0f 90       	pop	r0
    10a8:	df 91       	pop	r29
    10aa:	cf 91       	pop	r28
    10ac:	08 95       	ret

000010ae <ESP_AT_COMMAND>:
unsigned char ESP_AT_COMMAND()
{
    10ae:	cf 93       	push	r28
    10b0:	df 93       	push	r29
    10b2:	1f 92       	push	r1
    10b4:	cd b7       	in	r28, 0x3d	; 61
    10b6:	de b7       	in	r29, 0x3e	; 62
	unsigned char RECIVE_TEMP_DATA;
	volatile unsigned char V;
	unsigned char TEST;
	ESP_UART_EMPTY_BUFFER();
    10b8:	45 e0       	ldi	r20, 0x05	; 5
    10ba:	50 e0       	ldi	r21, 0x00	; 0
    10bc:	60 e0       	ldi	r22, 0x00	; 0
    10be:	70 e0       	ldi	r23, 0x00	; 0
    10c0:	ce 01       	movw	r24, r28
    10c2:	01 96       	adiw	r24, 0x01	; 1
    10c4:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    10c8:	89 81       	ldd	r24, Y+1	; 0x01
    10ca:	81 30       	cpi	r24, 0x01	; 1
    10cc:	a9 f3       	breq	.-22     	; 0x10b8 <ESP_AT_COMMAND+0xa>
	ESP_UART_SEND_ARRAY("AT\r\n",4);
    10ce:	64 e0       	ldi	r22, 0x04	; 4
    10d0:	70 e0       	ldi	r23, 0x00	; 0
    10d2:	8a e2       	ldi	r24, 0x2A	; 42
    10d4:	91 e0       	ldi	r25, 0x01	; 1
    10d6:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	RECIVE_TEMP_DATA=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    10da:	40 e0       	ldi	r20, 0x00	; 0
    10dc:	5c e6       	ldi	r21, 0x6C	; 108
    10de:	6c ed       	ldi	r22, 0xDC	; 220
    10e0:	72 e0       	ldi	r23, 0x02	; 2
    10e2:	ce 01       	movw	r24, r28
    10e4:	01 96       	adiw	r24, 0x01	; 1
    10e6:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
	if (V==0)
    10ea:	99 81       	ldd	r25, Y+1	; 0x01
    10ec:	99 23       	and	r25, r25
    10ee:	59 f1       	breq	.+86     	; 0x1146 <__stack+0x47>
	{
		return 1;//WIFI MODULE NOT CONNECTED
	}
	
	if (RECIVE_TEMP_DATA=='b')
    10f0:	82 36       	cpi	r24, 0x62	; 98
    10f2:	59 f1       	breq	.+86     	; 0x114a <__stack+0x4b>
	{
		return 3;//busy
	}
	
	if (RECIVE_TEMP_DATA=='A')
    10f4:	81 34       	cpi	r24, 0x41	; 65
    10f6:	a1 f4       	brne	.+40     	; 0x1120 <__stack+0x21>
	{
		/*
		WAITING AT/r/r/n 
		*/
		
		TEST=ESP_READ_CHAR_AND_CHECK('T');
    10f8:	84 e5       	ldi	r24, 0x54	; 84
    10fa:	81 df       	rcall	.-254    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    10fc:	81 11       	cpse	r24, r1
    10fe:	26 c0       	rjmp	.+76     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		TEST=ESP_READ_CHAR_AND_CHECK('\r');
    1100:	8d e0       	ldi	r24, 0x0D	; 13
    1102:	7d df       	rcall	.-262    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    1104:	81 11       	cpse	r24, r1
    1106:	22 c0       	rjmp	.+68     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		
		TEST=ESP_READ_CHAR_AND_CHECK('\r');
    1108:	8d e0       	ldi	r24, 0x0D	; 13
    110a:	79 df       	rcall	.-270    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    110c:	81 11       	cpse	r24, r1
    110e:	1e c0       	rjmp	.+60     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		TEST=ESP_READ_CHAR_AND_CHECK('\n');
    1110:	8a e0       	ldi	r24, 0x0A	; 10
    1112:	75 df       	rcall	.-278    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    1114:	81 11       	cpse	r24, r1
    1116:	1a c0       	rjmp	.+52     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		TEST=ESP_READ_CHAR_AND_CHECK('\r');
    1118:	8d e0       	ldi	r24, 0x0D	; 13
    111a:	71 df       	rcall	.-286    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    111c:	81 11       	cpse	r24, r1
    111e:	16 c0       	rjmp	.+44     	; 0x114c <__stack+0x4d>
	}
		/*   /r/nOK/r/n	  */
		
		
		
		TEST=ESP_READ_CHAR_AND_CHECK('\n');
    1120:	8a e0       	ldi	r24, 0x0A	; 10
    1122:	6d df       	rcall	.-294    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    1124:	81 11       	cpse	r24, r1
    1126:	12 c0       	rjmp	.+36     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		TEST=ESP_READ_CHAR_AND_CHECK('O');
    1128:	8f e4       	ldi	r24, 0x4F	; 79
    112a:	69 df       	rcall	.-302    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    112c:	81 11       	cpse	r24, r1
    112e:	0e c0       	rjmp	.+28     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		TEST=ESP_READ_CHAR_AND_CHECK('K');
    1130:	8b e4       	ldi	r24, 0x4B	; 75
    1132:	65 df       	rcall	.-310    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    1134:	81 11       	cpse	r24, r1
    1136:	0a c0       	rjmp	.+20     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		TEST=ESP_READ_CHAR_AND_CHECK('\r');
    1138:	8d e0       	ldi	r24, 0x0D	; 13
    113a:	61 df       	rcall	.-318    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
		if (TEST)
    113c:	81 11       	cpse	r24, r1
    113e:	06 c0       	rjmp	.+12     	; 0x114c <__stack+0x4d>
		{
			return TEST;
		}
		TEST=ESP_READ_CHAR_AND_CHECK('\n');
    1140:	8a e0       	ldi	r24, 0x0A	; 10
    1142:	5d df       	rcall	.-326    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
    1144:	03 c0       	rjmp	.+6      	; 0x114c <__stack+0x4d>
	ESP_UART_EMPTY_BUFFER();
	ESP_UART_SEND_ARRAY("AT\r\n",4);
	RECIVE_TEMP_DATA=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
	if (V==0)
	{
		return 1;//WIFI MODULE NOT CONNECTED
    1146:	81 e0       	ldi	r24, 0x01	; 1
    1148:	01 c0       	rjmp	.+2      	; 0x114c <__stack+0x4d>
	}
	
	if (RECIVE_TEMP_DATA=='b')
	{
		return 3;//busy
    114a:	83 e0       	ldi	r24, 0x03	; 3
		if (TEST)
		{
			return TEST;
		}
		return 0; /*done*/
}
    114c:	0f 90       	pop	r0
    114e:	df 91       	pop	r29
    1150:	cf 91       	pop	r28
    1152:	08 95       	ret

00001154 <ESP_ATE_COMMAND>:
unsigned char ESP_ATE_COMMAND()
{
    1154:	cf 93       	push	r28
    1156:	df 93       	push	r29
    1158:	1f 92       	push	r1
    115a:	cd b7       	in	r28, 0x3d	; 61
    115c:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char V;
	/*unsigned char i=0;*/
	ESP_UART_EMPTY_BUFFER();
    115e:	45 e0       	ldi	r20, 0x05	; 5
    1160:	50 e0       	ldi	r21, 0x00	; 0
    1162:	60 e0       	ldi	r22, 0x00	; 0
    1164:	70 e0       	ldi	r23, 0x00	; 0
    1166:	ce 01       	movw	r24, r28
    1168:	01 96       	adiw	r24, 0x01	; 1
    116a:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    116e:	89 81       	ldd	r24, Y+1	; 0x01
    1170:	81 30       	cpi	r24, 0x01	; 1
    1172:	a9 f3       	breq	.-22     	; 0x115e <ESP_ATE_COMMAND+0xa>
	ESP_UART_SEND_ARRAY("ATE0\r\n",6);
    1174:	66 e0       	ldi	r22, 0x06	; 6
    1176:	70 e0       	ldi	r23, 0x00	; 0
    1178:	8f e2       	ldi	r24, 0x2F	; 47
    117a:	91 e0       	ldi	r25, 0x01	; 1
    117c:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
    1180:	2f ef       	ldi	r18, 0xFF	; 255
    1182:	83 ed       	ldi	r24, 0xD3	; 211
    1184:	90 e3       	ldi	r25, 0x30	; 48
    1186:	21 50       	subi	r18, 0x01	; 1
    1188:	80 40       	sbci	r24, 0x00	; 0
    118a:	90 40       	sbci	r25, 0x00	; 0
    118c:	e1 f7       	brne	.-8      	; 0x1186 <ESP_ATE_COMMAND+0x32>
    118e:	00 c0       	rjmp	.+0      	; 0x1190 <ESP_ATE_COMMAND+0x3c>
    1190:	00 00       	nop
	else
	{
		return 1;//WIFI MODULE NOT CONNECTED
	}*/
	/**/
}
    1192:	80 e0       	ldi	r24, 0x00	; 0
    1194:	0f 90       	pop	r0
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	08 95       	ret

0000119c <ESP_CWMODE_1>:
unsigned char ESP_CWMODE_1()
{
    119c:	cf 93       	push	r28
    119e:	df 93       	push	r29
    11a0:	1f 92       	push	r1
    11a2:	cd b7       	in	r28, 0x3d	; 61
    11a4:	de b7       	in	r29, 0x3e	; 62
	unsigned char test;
	volatile unsigned char V;
	ESP_UART_EMPTY_BUFFER();
    11a6:	45 e0       	ldi	r20, 0x05	; 5
    11a8:	50 e0       	ldi	r21, 0x00	; 0
    11aa:	60 e0       	ldi	r22, 0x00	; 0
    11ac:	70 e0       	ldi	r23, 0x00	; 0
    11ae:	ce 01       	movw	r24, r28
    11b0:	01 96       	adiw	r24, 0x01	; 1
    11b2:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    11b6:	89 81       	ldd	r24, Y+1	; 0x01
    11b8:	81 30       	cpi	r24, 0x01	; 1
    11ba:	a9 f3       	breq	.-22     	; 0x11a6 <ESP_CWMODE_1+0xa>
	ESP_UART_SEND_ARRAY("AT+CWMODE_CUR=1\r\n",17);
    11bc:	61 e1       	ldi	r22, 0x11	; 17
    11be:	70 e0       	ldi	r23, 0x00	; 0
    11c0:	86 e3       	ldi	r24, 0x36	; 54
    11c2:	91 e0       	ldi	r25, 0x01	; 1
    11c4:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	test=ESP_CHECK_OK_RESP();
    11c8:	38 df       	rcall	.-400    	; 0x103a <ESP_CHECK_OK_RESP>
	if (test)
	{
		return test;
	}
	return 0; /*done*/
}
    11ca:	0f 90       	pop	r0
    11cc:	df 91       	pop	r29
    11ce:	cf 91       	pop	r28
    11d0:	08 95       	ret

000011d2 <ESP_CWLAPOPT_1>:
unsigned char ESP_CWLAPOPT_1()
{
    11d2:	cf 93       	push	r28
    11d4:	df 93       	push	r29
    11d6:	1f 92       	push	r1
    11d8:	cd b7       	in	r28, 0x3d	; 61
    11da:	de b7       	in	r29, 0x3e	; 62
	unsigned char test;
	volatile unsigned char V;
	ESP_UART_EMPTY_BUFFER();
    11dc:	45 e0       	ldi	r20, 0x05	; 5
    11de:	50 e0       	ldi	r21, 0x00	; 0
    11e0:	60 e0       	ldi	r22, 0x00	; 0
    11e2:	70 e0       	ldi	r23, 0x00	; 0
    11e4:	ce 01       	movw	r24, r28
    11e6:	01 96       	adiw	r24, 0x01	; 1
    11e8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    11ec:	89 81       	ldd	r24, Y+1	; 0x01
    11ee:	81 30       	cpi	r24, 0x01	; 1
    11f0:	a9 f3       	breq	.-22     	; 0x11dc <ESP_CWLAPOPT_1+0xa>
	ESP_UART_SEND_ARRAY("AT+CWLAPOPT=1,2\r\n",17);
    11f2:	61 e1       	ldi	r22, 0x11	; 17
    11f4:	70 e0       	ldi	r23, 0x00	; 0
    11f6:	88 e4       	ldi	r24, 0x48	; 72
    11f8:	91 e0       	ldi	r25, 0x01	; 1
    11fa:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	test=ESP_CHECK_OK_RESP();
    11fe:	1d df       	rcall	.-454    	; 0x103a <ESP_CHECK_OK_RESP>
	if (test)
	{
		return test;
	}
	return 0; /*done*/
}
    1200:	0f 90       	pop	r0
    1202:	df 91       	pop	r29
    1204:	cf 91       	pop	r28
    1206:	08 95       	ret

00001208 <ESP_CIPSTATUS>:
unsigned char ESP_CIPSTATUS(unsigned char *RETURN_VALUE)
{
    1208:	0f 93       	push	r16
    120a:	1f 93       	push	r17
    120c:	cf 93       	push	r28
    120e:	df 93       	push	r29
    1210:	1f 92       	push	r1
    1212:	cd b7       	in	r28, 0x3d	; 61
    1214:	de b7       	in	r29, 0x3e	; 62
    1216:	8c 01       	movw	r16, r24
	unsigned char RECIVE_TEMP_DATA[1];
	unsigned char V;
	unsigned char TEST;
	ESP_UART_EMPTY_BUFFER();
    1218:	45 e0       	ldi	r20, 0x05	; 5
    121a:	50 e0       	ldi	r21, 0x00	; 0
    121c:	60 e0       	ldi	r22, 0x00	; 0
    121e:	70 e0       	ldi	r23, 0x00	; 0
    1220:	ce 01       	movw	r24, r28
    1222:	01 96       	adiw	r24, 0x01	; 1
    1224:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    1228:	89 81       	ldd	r24, Y+1	; 0x01
    122a:	81 30       	cpi	r24, 0x01	; 1
    122c:	a9 f3       	breq	.-22     	; 0x1218 <ESP_CIPSTATUS+0x10>
	ESP_UART_SEND_ARRAY("AT+CIPSTATUS\r\n",14);
    122e:	6e e0       	ldi	r22, 0x0E	; 14
    1230:	70 e0       	ldi	r23, 0x00	; 0
    1232:	8a e5       	ldi	r24, 0x5A	; 90
    1234:	91 e0       	ldi	r25, 0x01	; 1
    1236:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	TEST=ESP_READ_CHAR_AND_CHECK('S');
    123a:	83 e5       	ldi	r24, 0x53	; 83
    123c:	e0 de       	rcall	.-576    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
	if (TEST)
    123e:	81 11       	cpse	r24, r1
    1240:	28 c0       	rjmp	.+80     	; 0x1292 <ESP_CIPSTATUS+0x8a>
	{
		return TEST;
	}
	do 
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1242:	40 e0       	ldi	r20, 0x00	; 0
    1244:	5c e6       	ldi	r21, 0x6C	; 108
    1246:	6c ed       	ldi	r22, 0xDC	; 220
    1248:	72 e0       	ldi	r23, 0x02	; 2
    124a:	ce 01       	movw	r24, r28
    124c:	01 96       	adiw	r24, 0x01	; 1
    124e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    1252:	99 81       	ldd	r25, Y+1	; 0x01
    1254:	99 23       	and	r25, r25
    1256:	d1 f0       	breq	.+52     	; 0x128c <ESP_CIPSTATUS+0x84>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
	} while (RECIVE_TEMP_DATA[0]!=':');
    1258:	8a 33       	cpi	r24, 0x3A	; 58
    125a:	99 f7       	brne	.-26     	; 0x1242 <ESP_CIPSTATUS+0x3a>
	RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    125c:	40 e0       	ldi	r20, 0x00	; 0
    125e:	5c e6       	ldi	r21, 0x6C	; 108
    1260:	6c ed       	ldi	r22, 0xDC	; 220
    1262:	72 e0       	ldi	r23, 0x02	; 2
    1264:	ce 01       	movw	r24, r28
    1266:	01 96       	adiw	r24, 0x01	; 1
    1268:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
	if (V==0)
    126c:	99 81       	ldd	r25, Y+1	; 0x01
    126e:	99 23       	and	r25, r25
    1270:	79 f0       	breq	.+30     	; 0x1290 <ESP_CIPSTATUS+0x88>
	{
		return 1;//WIFI MODULE NOT CONNECTED
	}
	*RETURN_VALUE=RECIVE_TEMP_DATA[0]-48;
    1272:	80 53       	subi	r24, 0x30	; 48
    1274:	f8 01       	movw	r30, r16
    1276:	80 83       	st	Z, r24
	TEST=ESP_READ_CHAR_AND_CHECK('\r');
    1278:	8d e0       	ldi	r24, 0x0D	; 13
    127a:	c1 de       	rcall	.-638    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
	if (TEST)
    127c:	81 11       	cpse	r24, r1
    127e:	09 c0       	rjmp	.+18     	; 0x1292 <ESP_CIPSTATUS+0x8a>
	{
		return TEST;
	}
	TEST=ESP_READ_CHAR_AND_CHECK('\n');
    1280:	8a e0       	ldi	r24, 0x0A	; 10
    1282:	bd de       	rcall	.-646    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
	if (TEST)
    1284:	81 11       	cpse	r24, r1
    1286:	05 c0       	rjmp	.+10     	; 0x1292 <ESP_CIPSTATUS+0x8a>
	{
		return TEST;
	}
	TEST=ESP_CHECK_OK_RESP();
    1288:	d8 de       	rcall	.-592    	; 0x103a <ESP_CHECK_OK_RESP>
    128a:	03 c0       	rjmp	.+6      	; 0x1292 <ESP_CIPSTATUS+0x8a>
	do 
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	01 c0       	rjmp	.+2      	; 0x1292 <ESP_CIPSTATUS+0x8a>
		}
	} while (RECIVE_TEMP_DATA[0]!=':');
	RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
	if (V==0)
	{
		return 1;//WIFI MODULE NOT CONNECTED
    1290:	81 e0       	ldi	r24, 0x01	; 1
	if (TEST)
	{
		return TEST;
	}
	return 0; /*done*/
}
    1292:	0f 90       	pop	r0
    1294:	df 91       	pop	r29
    1296:	cf 91       	pop	r28
    1298:	1f 91       	pop	r17
    129a:	0f 91       	pop	r16
    129c:	08 95       	ret

0000129e <ESP_CWJAP_CUR>:
/*here we split the function into 2 stages because it consumes alot of time in delay .. so we make the first stage 0 then move to the program while waiting 8 sec using the timer then make the second stage*/
unsigned char ESP_CWJAP_CUR(unsigned char *AP_NAME,unsigned char AP_LENGTH,unsigned char *PASS_NAME,unsigned char PASS_LENGTH)
{
    129e:	cf 92       	push	r12
    12a0:	df 92       	push	r13
    12a2:	ef 92       	push	r14
    12a4:	ff 92       	push	r15
    12a6:	0f 93       	push	r16
    12a8:	1f 93       	push	r17
    12aa:	cf 93       	push	r28
    12ac:	df 93       	push	r29
    12ae:	1f 92       	push	r1
    12b0:	cd b7       	in	r28, 0x3d	; 61
    12b2:	de b7       	in	r29, 0x3e	; 62
    12b4:	7c 01       	movw	r14, r24
    12b6:	c6 2e       	mov	r12, r22
    12b8:	8a 01       	movw	r16, r20
    12ba:	d2 2e       	mov	r13, r18
	unsigned char V;
	if (WIFI_CONNECT_STAGE==0)
    12bc:	80 91 27 03 	lds	r24, 0x0327
    12c0:	81 11       	cpse	r24, r1
    12c2:	2c c0       	rjmp	.+88     	; 0x131c <ESP_CWJAP_CUR+0x7e>
	{
		ESP_UART_EMPTY_BUFFER();
    12c4:	45 e0       	ldi	r20, 0x05	; 5
    12c6:	50 e0       	ldi	r21, 0x00	; 0
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	70 e0       	ldi	r23, 0x00	; 0
    12cc:	ce 01       	movw	r24, r28
    12ce:	01 96       	adiw	r24, 0x01	; 1
    12d0:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    12d4:	89 81       	ldd	r24, Y+1	; 0x01
    12d6:	81 30       	cpi	r24, 0x01	; 1
    12d8:	a9 f3       	breq	.-22     	; 0x12c4 <ESP_CWJAP_CUR+0x26>
		ESP_UART_SEND_ARRAY("AT+CWJAP_CUR=\"",14);
    12da:	6e e0       	ldi	r22, 0x0E	; 14
    12dc:	70 e0       	ldi	r23, 0x00	; 0
    12de:	89 e6       	ldi	r24, 0x69	; 105
    12e0:	91 e0       	ldi	r25, 0x01	; 1
    12e2:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
		ESP_UART_SEND_ARRAY(AP_NAME,AP_LENGTH);
    12e6:	6c 2d       	mov	r22, r12
    12e8:	70 e0       	ldi	r23, 0x00	; 0
    12ea:	c7 01       	movw	r24, r14
    12ec:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
		ESP_UART_SEND_ARRAY("\",\"",3);
    12f0:	63 e0       	ldi	r22, 0x03	; 3
    12f2:	70 e0       	ldi	r23, 0x00	; 0
    12f4:	88 e7       	ldi	r24, 0x78	; 120
    12f6:	91 e0       	ldi	r25, 0x01	; 1
    12f8:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
		ESP_UART_SEND_ARRAY(PASS_NAME,PASS_LENGTH);
    12fc:	6d 2d       	mov	r22, r13
    12fe:	70 e0       	ldi	r23, 0x00	; 0
    1300:	c8 01       	movw	r24, r16
    1302:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
		ESP_UART_SEND_ARRAY("\"\r\n",3);
    1306:	63 e0       	ldi	r22, 0x03	; 3
    1308:	70 e0       	ldi	r23, 0x00	; 0
    130a:	8c e7       	ldi	r24, 0x7C	; 124
    130c:	91 e0       	ldi	r25, 0x01	; 1
    130e:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
		
		F_WIFI_CONNECT_STAGE_COUNTER=0;
    1312:	10 92 28 03 	sts	0x0328, r1
		
		WIFI_CONNECT_STAGE=1;
    1316:	81 e0       	ldi	r24, 0x01	; 1
    1318:	80 93 27 03 	sts	0x0327, r24
	}
	if (F_WIFI_CONNECT_STAGE_COUNTER==MAX_WIFI_STAGE_COUNTER)
    131c:	80 91 28 03 	lds	r24, 0x0328
    1320:	80 32       	cpi	r24, 0x20	; 32
    1322:	79 f4       	brne	.+30     	; 0x1342 <ESP_CWJAP_CUR+0xa4>
	{
		
		F_WIFI_CONNECT_STAGE_COUNTER=0;
    1324:	10 92 28 03 	sts	0x0328, r1
		ESP_UART_EMPTY_BUFFER();
    1328:	45 e0       	ldi	r20, 0x05	; 5
    132a:	50 e0       	ldi	r21, 0x00	; 0
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	70 e0       	ldi	r23, 0x00	; 0
    1330:	ce 01       	movw	r24, r28
    1332:	01 96       	adiw	r24, 0x01	; 1
    1334:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    1338:	89 81       	ldd	r24, Y+1	; 0x01
    133a:	81 30       	cpi	r24, 0x01	; 1
    133c:	a9 f3       	breq	.-22     	; 0x1328 <ESP_CWJAP_CUR+0x8a>
		return ESP_AT_COMMAND();
    133e:	b7 de       	rcall	.-658    	; 0x10ae <ESP_AT_COMMAND>
    1340:	01 c0       	rjmp	.+2      	; 0x1344 <ESP_CWJAP_CUR+0xa6>
	}
	
	return 3;
    1342:	83 e0       	ldi	r24, 0x03	; 3
}
    1344:	0f 90       	pop	r0
    1346:	df 91       	pop	r29
    1348:	cf 91       	pop	r28
    134a:	1f 91       	pop	r17
    134c:	0f 91       	pop	r16
    134e:	ff 90       	pop	r15
    1350:	ef 90       	pop	r14
    1352:	df 90       	pop	r13
    1354:	cf 90       	pop	r12
    1356:	08 95       	ret

00001358 <ESP_OPEN_SOCKET>:
	
	return test;
}*/

unsigned char ESP_OPEN_SOCKET() /*SIMPLIFIED*/
{
    1358:	cf 93       	push	r28
    135a:	df 93       	push	r29
    135c:	1f 92       	push	r1
    135e:	cd b7       	in	r28, 0x3d	; 61
    1360:	de b7       	in	r29, 0x3e	; 62
	unsigned char RECIVE_TEMP_DATA[1];
	unsigned char V;
	unsigned char TEST;
	ESP_UART_EMPTY_BUFFER();
    1362:	45 e0       	ldi	r20, 0x05	; 5
    1364:	50 e0       	ldi	r21, 0x00	; 0
    1366:	60 e0       	ldi	r22, 0x00	; 0
    1368:	70 e0       	ldi	r23, 0x00	; 0
    136a:	ce 01       	movw	r24, r28
    136c:	01 96       	adiw	r24, 0x01	; 1
    136e:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    1372:	89 81       	ldd	r24, Y+1	; 0x01
    1374:	81 30       	cpi	r24, 0x01	; 1
    1376:	a9 f3       	breq	.-22     	; 0x1362 <ESP_OPEN_SOCKET+0xa>
	ESP_UART_SEND_ARRAY("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n",43);
    1378:	6b e2       	ldi	r22, 0x2B	; 43
    137a:	70 e0       	ldi	r23, 0x00	; 0
    137c:	80 e8       	ldi	r24, 0x80	; 128
    137e:	91 e0       	ldi	r25, 0x01	; 1
    1380:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	/*CONNECT\r\n\r\nOK\r\n*/
	TEST=ESP_READ_CHAR_AND_CHECK('C');
    1384:	83 e4       	ldi	r24, 0x43	; 67
    1386:	3b de       	rcall	.-906    	; 0xffe <ESP_READ_CHAR_AND_CHECK>
	if (TEST)
    1388:	81 11       	cpse	r24, r1
    138a:	10 c0       	rjmp	.+32     	; 0x13ac <ESP_OPEN_SOCKET+0x54>
	{
		return TEST;
	}
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    138c:	40 e0       	ldi	r20, 0x00	; 0
    138e:	5c e6       	ldi	r21, 0x6C	; 108
    1390:	6c ed       	ldi	r22, 0xDC	; 220
    1392:	72 e0       	ldi	r23, 0x02	; 2
    1394:	ce 01       	movw	r24, r28
    1396:	01 96       	adiw	r24, 0x01	; 1
    1398:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    139c:	99 81       	ldd	r25, Y+1	; 0x01
    139e:	99 23       	and	r25, r25
    13a0:	21 f0       	breq	.+8      	; 0x13aa <ESP_OPEN_SOCKET+0x52>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
	} while (RECIVE_TEMP_DATA[0]!='\n');
    13a2:	8a 30       	cpi	r24, 0x0A	; 10
    13a4:	99 f7       	brne	.-26     	; 0x138c <ESP_OPEN_SOCKET+0x34>
	TEST=ESP_CHECK_OK_RESP();
    13a6:	49 de       	rcall	.-878    	; 0x103a <ESP_CHECK_OK_RESP>
    13a8:	01 c0       	rjmp	.+2      	; 0x13ac <ESP_OPEN_SOCKET+0x54>
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    13aa:	81 e0       	ldi	r24, 0x01	; 1
	if (TEST)
	{
		return TEST;
	}
	return 0;//done
}
    13ac:	0f 90       	pop	r0
    13ae:	df 91       	pop	r29
    13b0:	cf 91       	pop	r28
    13b2:	08 95       	ret

000013b4 <ESP_SEND_WRITE_HTTP_DATA>:
unsigned char ESP_SEND_WRITE_HTTP_DATA(unsigned char *API_WRITE_KEY,unsigned char API_WRITE_KEY_LENGTH,unsigned char FIELD_NUM,unsigned char *DATA,unsigned char DATA_LENGTH)
{
    13b4:	9f 92       	push	r9
    13b6:	af 92       	push	r10
    13b8:	bf 92       	push	r11
    13ba:	cf 92       	push	r12
    13bc:	df 92       	push	r13
    13be:	ef 92       	push	r14
    13c0:	ff 92       	push	r15
    13c2:	0f 93       	push	r16
    13c4:	1f 93       	push	r17
    13c6:	cf 93       	push	r28
    13c8:	df 93       	push	r29
    13ca:	00 d0       	rcall	.+0      	; 0x13cc <ESP_SEND_WRITE_HTTP_DATA+0x18>
    13cc:	00 d0       	rcall	.+0      	; 0x13ce <ESP_SEND_WRITE_HTTP_DATA+0x1a>
    13ce:	00 d0       	rcall	.+0      	; 0x13d0 <ESP_SEND_WRITE_HTTP_DATA+0x1c>
    13d0:	cd b7       	in	r28, 0x3d	; 61
    13d2:	de b7       	in	r29, 0x3e	; 62
    13d4:	6c 01       	movw	r12, r24
    13d6:	a6 2e       	mov	r10, r22
    13d8:	94 2e       	mov	r9, r20
    13da:	79 01       	movw	r14, r18
    13dc:	b0 2e       	mov	r11, r16
	unsigned char TEMP[5];
	unsigned char TEMP_length;
	unsigned char FIELD_NUM_LENGTH;
	unsigned char V;
	unsigned char TEST;
	FIELD_NUM_LENGTH=inttostring(TEMP,FIELD_NUM);
    13de:	04 2f       	mov	r16, r20
    13e0:	10 e0       	ldi	r17, 0x00	; 0
    13e2:	20 e0       	ldi	r18, 0x00	; 0
    13e4:	30 e0       	ldi	r19, 0x00	; 0
    13e6:	40 e0       	ldi	r20, 0x00	; 0
    13e8:	50 e0       	ldi	r21, 0x00	; 0
    13ea:	60 e0       	ldi	r22, 0x00	; 0
    13ec:	70 e0       	ldi	r23, 0x00	; 0
    13ee:	ce 01       	movw	r24, r28
    13f0:	01 96       	adiw	r24, 0x01	; 1
    13f2:	d4 d2       	rcall	.+1448   	; 0x199c <inttostring>
	TOTAL_LENGTH=20+API_WRITE_KEY_LENGTH+6+FIELD_NUM_LENGTH+1+DATA_LENGTH+2;
    13f4:	0d e1       	ldi	r16, 0x1D	; 29
    13f6:	0b 0d       	add	r16, r11
    13f8:	0a 0d       	add	r16, r10
    13fa:	08 0f       	add	r16, r24
	TEMP_length=inttostring(TEMP,TOTAL_LENGTH);
    13fc:	20 e0       	ldi	r18, 0x00	; 0
    13fe:	30 e0       	ldi	r19, 0x00	; 0
    1400:	40 e0       	ldi	r20, 0x00	; 0
    1402:	50 e0       	ldi	r21, 0x00	; 0
    1404:	60 e0       	ldi	r22, 0x00	; 0
    1406:	70 e0       	ldi	r23, 0x00	; 0
    1408:	ce 01       	movw	r24, r28
    140a:	01 96       	adiw	r24, 0x01	; 1
    140c:	c7 d2       	rcall	.+1422   	; 0x199c <inttostring>
    140e:	18 2f       	mov	r17, r24
	ESP_UART_EMPTY_BUFFER();
    1410:	45 e0       	ldi	r20, 0x05	; 5
    1412:	50 e0       	ldi	r21, 0x00	; 0
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	ce 01       	movw	r24, r28
    141a:	06 96       	adiw	r24, 0x06	; 6
    141c:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    1420:	9e 81       	ldd	r25, Y+6	; 0x06
    1422:	91 30       	cpi	r25, 0x01	; 1
    1424:	a9 f3       	breq	.-22     	; 0x1410 <ESP_SEND_WRITE_HTTP_DATA+0x5c>
	
	ESP_UART_SEND_ARRAY("AT+CIPSEND=",11);
    1426:	6b e0       	ldi	r22, 0x0B	; 11
    1428:	70 e0       	ldi	r23, 0x00	; 0
    142a:	8c ea       	ldi	r24, 0xAC	; 172
    142c:	91 e0       	ldi	r25, 0x01	; 1
    142e:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY(TEMP,TEMP_length);
    1432:	61 2f       	mov	r22, r17
    1434:	70 e0       	ldi	r23, 0x00	; 0
    1436:	ce 01       	movw	r24, r28
    1438:	01 96       	adiw	r24, 0x01	; 1
    143a:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY("\r\n",2);
    143e:	62 e0       	ldi	r22, 0x02	; 2
    1440:	70 e0       	ldi	r23, 0x00	; 0
    1442:	8d e7       	ldi	r24, 0x7D	; 125
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	TEST=ESP_CHECK_OK_RESP();
    144a:	f7 dd       	rcall	.-1042   	; 0x103a <ESP_CHECK_OK_RESP>
	if (TEST)
    144c:	81 11       	cpse	r24, r1
    144e:	4a c0       	rjmp	.+148    	; 0x14e4 <ESP_SEND_WRITE_HTTP_DATA+0x130>
	{
		/*put for loop*/
		return TEST;
	}
	TEST=ESP_READ_CHAR_AND_CHECK('>');
    1450:	8e e3       	ldi	r24, 0x3E	; 62
    1452:	d5 dd       	rcall	.-1110   	; 0xffe <ESP_READ_CHAR_AND_CHECK>
	if (TEST)
    1454:	81 11       	cpse	r24, r1
    1456:	46 c0       	rjmp	.+140    	; 0x14e4 <ESP_SEND_WRITE_HTTP_DATA+0x130>
	{
		return TEST;
	}
	
	FIELD_NUM_LENGTH=inttostring(TEMP,FIELD_NUM);
    1458:	09 2d       	mov	r16, r9
    145a:	10 e0       	ldi	r17, 0x00	; 0
    145c:	20 e0       	ldi	r18, 0x00	; 0
    145e:	30 e0       	ldi	r19, 0x00	; 0
    1460:	40 e0       	ldi	r20, 0x00	; 0
    1462:	50 e0       	ldi	r21, 0x00	; 0
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	ce 01       	movw	r24, r28
    146a:	01 96       	adiw	r24, 0x01	; 1
    146c:	97 d2       	rcall	.+1326   	; 0x199c <inttostring>
    146e:	18 2f       	mov	r17, r24
	ESP_UART_SEND_ARRAY("GET /update?api_key=",20);
    1470:	64 e1       	ldi	r22, 0x14	; 20
    1472:	70 e0       	ldi	r23, 0x00	; 0
    1474:	88 eb       	ldi	r24, 0xB8	; 184
    1476:	91 e0       	ldi	r25, 0x01	; 1
    1478:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY(API_WRITE_KEY,API_WRITE_KEY_LENGTH);
    147c:	6a 2d       	mov	r22, r10
    147e:	70 e0       	ldi	r23, 0x00	; 0
    1480:	c6 01       	movw	r24, r12
    1482:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY("&field",6);
    1486:	66 e0       	ldi	r22, 0x06	; 6
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	8d ec       	ldi	r24, 0xCD	; 205
    148c:	91 e0       	ldi	r25, 0x01	; 1
    148e:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY(TEMP,FIELD_NUM_LENGTH);
    1492:	61 2f       	mov	r22, r17
    1494:	70 e0       	ldi	r23, 0x00	; 0
    1496:	ce 01       	movw	r24, r28
    1498:	01 96       	adiw	r24, 0x01	; 1
    149a:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_BYTE('=');
    149e:	8d e3       	ldi	r24, 0x3D	; 61
    14a0:	0e 94 14 13 	call	0x2628	; 0x2628 <USART1_SEND_byte>
	ESP_UART_SEND_ARRAY(DATA,DATA_LENGTH);	
    14a4:	6b 2d       	mov	r22, r11
    14a6:	70 e0       	ldi	r23, 0x00	; 0
    14a8:	c7 01       	movw	r24, r14
    14aa:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY("\r\n",2);	
    14ae:	62 e0       	ldi	r22, 0x02	; 2
    14b0:	70 e0       	ldi	r23, 0x00	; 0
    14b2:	8d e7       	ldi	r24, 0x7D	; 125
    14b4:	91 e0       	ldi	r25, 0x01	; 1
    14b6:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
    14ba:	2f ef       	ldi	r18, 0xFF	; 255
    14bc:	81 ee       	ldi	r24, 0xE1	; 225
    14be:	94 e0       	ldi	r25, 0x04	; 4
    14c0:	21 50       	subi	r18, 0x01	; 1
    14c2:	80 40       	sbci	r24, 0x00	; 0
    14c4:	90 40       	sbci	r25, 0x00	; 0
    14c6:	e1 f7       	brne	.-8      	; 0x14c0 <ESP_SEND_WRITE_HTTP_DATA+0x10c>
    14c8:	00 c0       	rjmp	.+0      	; 0x14ca <ESP_SEND_WRITE_HTTP_DATA+0x116>
    14ca:	00 00       	nop
	/*ESCAPE*/
	_delay_ms(100);
	ESP_UART_EMPTY_BUFFER();
    14cc:	45 e0       	ldi	r20, 0x05	; 5
    14ce:	50 e0       	ldi	r21, 0x00	; 0
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	70 e0       	ldi	r23, 0x00	; 0
    14d4:	ce 01       	movw	r24, r28
    14d6:	06 96       	adiw	r24, 0x06	; 6
    14d8:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    14dc:	8e 81       	ldd	r24, Y+6	; 0x06
    14de:	81 30       	cpi	r24, 0x01	; 1
    14e0:	a9 f3       	breq	.-22     	; 0x14cc <ESP_SEND_WRITE_HTTP_DATA+0x118>
	
	return 0;//done
    14e2:	80 e0       	ldi	r24, 0x00	; 0
				return 1;//WIFI MODULE NOT CONNECTED
			}
		} while (RECIVE_TEMP_DATA[0]!="\n");
	}*/
	
}
    14e4:	26 96       	adiw	r28, 0x06	; 6
    14e6:	0f b6       	in	r0, 0x3f	; 63
    14e8:	f8 94       	cli
    14ea:	de bf       	out	0x3e, r29	; 62
    14ec:	0f be       	out	0x3f, r0	; 63
    14ee:	cd bf       	out	0x3d, r28	; 61
    14f0:	df 91       	pop	r29
    14f2:	cf 91       	pop	r28
    14f4:	1f 91       	pop	r17
    14f6:	0f 91       	pop	r16
    14f8:	ff 90       	pop	r15
    14fa:	ef 90       	pop	r14
    14fc:	df 90       	pop	r13
    14fe:	cf 90       	pop	r12
    1500:	bf 90       	pop	r11
    1502:	af 90       	pop	r10
    1504:	9f 90       	pop	r9
    1506:	08 95       	ret

00001508 <ESP_SEND_READ_HTTP_DATA>:

unsigned char ESP_SEND_READ_HTTP_DATA(unsigned char *CHANNEL_ID,unsigned char CHANNEL_ID_LENGTH,unsigned char FIELD_NUM,ESP_RECIVED_DATA_DT *DATA)
{
    1508:	6f 92       	push	r6
    150a:	7f 92       	push	r7
    150c:	8f 92       	push	r8
    150e:	9f 92       	push	r9
    1510:	af 92       	push	r10
    1512:	bf 92       	push	r11
    1514:	cf 92       	push	r12
    1516:	df 92       	push	r13
    1518:	ef 92       	push	r14
    151a:	ff 92       	push	r15
    151c:	0f 93       	push	r16
    151e:	1f 93       	push	r17
    1520:	cf 93       	push	r28
    1522:	df 93       	push	r29
    1524:	cd b7       	in	r28, 0x3d	; 61
    1526:	de b7       	in	r29, 0x3e	; 62
    1528:	2b 97       	sbiw	r28, 0x0b	; 11
    152a:	0f b6       	in	r0, 0x3f	; 63
    152c:	f8 94       	cli
    152e:	de bf       	out	0x3e, r29	; 62
    1530:	0f be       	out	0x3f, r0	; 63
    1532:	cd bf       	out	0x3d, r28	; 61
    1534:	6c 01       	movw	r12, r24
    1536:	b6 2e       	mov	r11, r22
    1538:	a4 2e       	mov	r10, r20
    153a:	79 01       	movw	r14, r18
	unsigned char TEMP_length;
	unsigned char FIELD_NUM_LENGTH;
	unsigned char RECIVE_TEMP_DATA[1];
	unsigned char V,i,k;
	unsigned char TEST;
	FIELD_NUM_LENGTH=inttostring(TEMP,FIELD_NUM);
    153c:	04 2f       	mov	r16, r20
    153e:	10 e0       	ldi	r17, 0x00	; 0
    1540:	20 e0       	ldi	r18, 0x00	; 0
    1542:	30 e0       	ldi	r19, 0x00	; 0
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e0       	ldi	r21, 0x00	; 0
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	ce 01       	movw	r24, r28
    154e:	01 96       	adiw	r24, 0x01	; 1
    1550:	25 d2       	rcall	.+1098   	; 0x199c <inttostring>
	TOTAL_LENGTH=40+CHANNEL_ID_LENGTH+8+FIELD_NUM_LENGTH+16;
    1552:	00 e4       	ldi	r16, 0x40	; 64
    1554:	0b 0d       	add	r16, r11
    1556:	08 0f       	add	r16, r24
	TEMP_length=inttostring(TEMP,TOTAL_LENGTH);
    1558:	20 e0       	ldi	r18, 0x00	; 0
    155a:	30 e0       	ldi	r19, 0x00	; 0
    155c:	40 e0       	ldi	r20, 0x00	; 0
    155e:	50 e0       	ldi	r21, 0x00	; 0
    1560:	60 e0       	ldi	r22, 0x00	; 0
    1562:	70 e0       	ldi	r23, 0x00	; 0
    1564:	ce 01       	movw	r24, r28
    1566:	01 96       	adiw	r24, 0x01	; 1
    1568:	19 d2       	rcall	.+1074   	; 0x199c <inttostring>
    156a:	18 2f       	mov	r17, r24
	ESP_UART_EMPTY_BUFFER();
    156c:	45 e0       	ldi	r20, 0x05	; 5
    156e:	50 e0       	ldi	r21, 0x00	; 0
    1570:	60 e0       	ldi	r22, 0x00	; 0
    1572:	70 e0       	ldi	r23, 0x00	; 0
    1574:	ce 01       	movw	r24, r28
    1576:	0b 96       	adiw	r24, 0x0b	; 11
    1578:	0e 94 db 12 	call	0x25b6	; 0x25b6 <USART1_RECEIVE_byte>
    157c:	9b 85       	ldd	r25, Y+11	; 0x0b
    157e:	91 30       	cpi	r25, 0x01	; 1
    1580:	a9 f3       	breq	.-22     	; 0x156c <ESP_SEND_READ_HTTP_DATA+0x64>
	ESP_UART_SEND_ARRAY("AT+CIPSEND=",11);
    1582:	6b e0       	ldi	r22, 0x0B	; 11
    1584:	70 e0       	ldi	r23, 0x00	; 0
    1586:	8c ea       	ldi	r24, 0xAC	; 172
    1588:	91 e0       	ldi	r25, 0x01	; 1
    158a:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY(TEMP,TEMP_length);
    158e:	61 2f       	mov	r22, r17
    1590:	70 e0       	ldi	r23, 0x00	; 0
    1592:	ce 01       	movw	r24, r28
    1594:	01 96       	adiw	r24, 0x01	; 1
    1596:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY("\r\n",2);
    159a:	62 e0       	ldi	r22, 0x02	; 2
    159c:	70 e0       	ldi	r23, 0x00	; 0
    159e:	8d e7       	ldi	r24, 0x7D	; 125
    15a0:	91 e0       	ldi	r25, 0x01	; 1
    15a2:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	TEST=ESP_CHECK_OK_RESP();
    15a6:	49 dd       	rcall	.-1390   	; 0x103a <ESP_CHECK_OK_RESP>
	if (TEST)
    15a8:	81 11       	cpse	r24, r1
    15aa:	f2 c0       	rjmp	.+484    	; 0x1790 <ESP_SEND_READ_HTTP_DATA+0x288>
	{
		/*put for loop*/
		return TEST;
	}
	TEST=ESP_READ_CHAR_AND_CHECK('>');
    15ac:	8e e3       	ldi	r24, 0x3E	; 62
    15ae:	27 dd       	rcall	.-1458   	; 0xffe <ESP_READ_CHAR_AND_CHECK>
	if (TEST)
    15b0:	81 11       	cpse	r24, r1
    15b2:	f0 c0       	rjmp	.+480    	; 0x1794 <ESP_SEND_READ_HTTP_DATA+0x28c>
	{
		return TEST;
	}
	
	FIELD_NUM_LENGTH=inttostring(TEMP,FIELD_NUM);
    15b4:	0a 2d       	mov	r16, r10
    15b6:	10 e0       	ldi	r17, 0x00	; 0
    15b8:	20 e0       	ldi	r18, 0x00	; 0
    15ba:	30 e0       	ldi	r19, 0x00	; 0
    15bc:	40 e0       	ldi	r20, 0x00	; 0
    15be:	50 e0       	ldi	r21, 0x00	; 0
    15c0:	60 e0       	ldi	r22, 0x00	; 0
    15c2:	70 e0       	ldi	r23, 0x00	; 0
    15c4:	ce 01       	movw	r24, r28
    15c6:	01 96       	adiw	r24, 0x01	; 1
    15c8:	e9 d1       	rcall	.+978    	; 0x199c <inttostring>
    15ca:	18 2f       	mov	r17, r24
	ESP_UART_SEND_ARRAY("GET https://api.thingspeak.com/channels/" ,40);
    15cc:	68 e2       	ldi	r22, 0x28	; 40
    15ce:	70 e0       	ldi	r23, 0x00	; 0
    15d0:	84 ed       	ldi	r24, 0xD4	; 212
    15d2:	91 e0       	ldi	r25, 0x01	; 1
    15d4:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY(CHANNEL_ID,CHANNEL_ID_LENGTH);
    15d8:	6b 2d       	mov	r22, r11
    15da:	70 e0       	ldi	r23, 0x00	; 0
    15dc:	c6 01       	movw	r24, r12
    15de:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY("/fields/",8);
    15e2:	68 e0       	ldi	r22, 0x08	; 8
    15e4:	70 e0       	ldi	r23, 0x00	; 0
    15e6:	8d ef       	ldi	r24, 0xFD	; 253
    15e8:	91 e0       	ldi	r25, 0x01	; 1
    15ea:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY(TEMP,FIELD_NUM_LENGTH);
    15ee:	61 2f       	mov	r22, r17
    15f0:	70 e0       	ldi	r23, 0x00	; 0
    15f2:	ce 01       	movw	r24, r28
    15f4:	01 96       	adiw	r24, 0x01	; 1
    15f6:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	ESP_UART_SEND_ARRAY(".csv?results=5\r\n",16);	
    15fa:	60 e1       	ldi	r22, 0x10	; 16
    15fc:	70 e0       	ldi	r23, 0x00	; 0
    15fe:	86 e0       	ldi	r24, 0x06	; 6
    1600:	92 e0       	ldi	r25, 0x02	; 2
    1602:	0e 94 b6 14 	call	0x296c	; 0x296c <USART1_SEND_ARRAY>
	
	
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1606:	40 e0       	ldi	r20, 0x00	; 0
    1608:	5c e6       	ldi	r21, 0x6C	; 108
    160a:	6c ed       	ldi	r22, 0xDC	; 220
    160c:	72 e0       	ldi	r23, 0x02	; 2
    160e:	ce 01       	movw	r24, r28
    1610:	0b 96       	adiw	r24, 0x0b	; 11
    1612:	d1 d7       	rcall	.+4002   	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    1614:	9b 85       	ldd	r25, Y+11	; 0x0b
    1616:	99 23       	and	r25, r25
    1618:	09 f4       	brne	.+2      	; 0x161c <ESP_SEND_READ_HTTP_DATA+0x114>
    161a:	be c0       	rjmp	.+380    	; 0x1798 <ESP_SEND_READ_HTTP_DATA+0x290>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
	} while (RECIVE_TEMP_DATA[0]!='+');
    161c:	8b 32       	cpi	r24, 0x2B	; 43
    161e:	99 f7       	brne	.-26     	; 0x1606 <ESP_SEND_READ_HTTP_DATA+0xfe>
	
	
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1620:	40 e0       	ldi	r20, 0x00	; 0
    1622:	5c e6       	ldi	r21, 0x6C	; 108
    1624:	6c ed       	ldi	r22, 0xDC	; 220
    1626:	72 e0       	ldi	r23, 0x02	; 2
    1628:	ce 01       	movw	r24, r28
    162a:	0b 96       	adiw	r24, 0x0b	; 11
    162c:	c4 d7       	rcall	.+3976   	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    162e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1630:	99 23       	and	r25, r25
    1632:	09 f4       	brne	.+2      	; 0x1636 <ESP_SEND_READ_HTTP_DATA+0x12e>
    1634:	b4 c0       	rjmp	.+360    	; 0x179e <ESP_SEND_READ_HTTP_DATA+0x296>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
	} while (RECIVE_TEMP_DATA[0]!='\n');
    1636:	8a 30       	cpi	r24, 0x0A	; 10
    1638:	99 f7       	brne	.-26     	; 0x1620 <ESP_SEND_READ_HTTP_DATA+0x118>
    163a:	57 01       	movw	r10, r14
    163c:	68 94       	set
    163e:	99 24       	eor	r9, r9
    1640:	92 f8       	bld	r9, 2
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
			if (V==0)
			{
				return 1;//WIFI MODULE NOT CONNECTED
			}
			DATA[i].DATA_ELEMENT[k]=RECIVE_TEMP_DATA[0];
    1642:	71 2c       	mov	r7, r1
    1644:	81 2c       	mov	r8, r1
	
	for (i=0;i<4;i++)
	{	/*TIME i*/
		do
		{
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1646:	40 e0       	ldi	r20, 0x00	; 0
    1648:	5c e6       	ldi	r21, 0x6C	; 108
    164a:	6c ed       	ldi	r22, 0xDC	; 220
    164c:	72 e0       	ldi	r23, 0x02	; 2
    164e:	ce 01       	movw	r24, r28
    1650:	0b 96       	adiw	r24, 0x0b	; 11
    1652:	b1 d7       	rcall	.+3938   	; 0x25b6 <USART1_RECEIVE_byte>
			if (V==0)
    1654:	9b 85       	ldd	r25, Y+11	; 0x0b
    1656:	99 23       	and	r25, r25
    1658:	09 f4       	brne	.+2      	; 0x165c <ESP_SEND_READ_HTTP_DATA+0x154>
    165a:	a4 c0       	rjmp	.+328    	; 0x17a4 <ESP_SEND_READ_HTTP_DATA+0x29c>
			{
				return 1;//WIFI MODULE NOT CONNECTED
			}
		} while (RECIVE_TEMP_DATA[0]!=',');
    165c:	8c 32       	cpi	r24, 0x2C	; 44
    165e:	99 f7       	brne	.-26     	; 0x1646 <ESP_SEND_READ_HTTP_DATA+0x13e>
		/*ENTRY I*/
		do
		{
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1660:	40 e0       	ldi	r20, 0x00	; 0
    1662:	5c e6       	ldi	r21, 0x6C	; 108
    1664:	6c ed       	ldi	r22, 0xDC	; 220
    1666:	72 e0       	ldi	r23, 0x02	; 2
    1668:	ce 01       	movw	r24, r28
    166a:	0b 96       	adiw	r24, 0x0b	; 11
    166c:	a4 d7       	rcall	.+3912   	; 0x25b6 <USART1_RECEIVE_byte>
			if (V==0)
    166e:	9b 85       	ldd	r25, Y+11	; 0x0b
    1670:	99 23       	and	r25, r25
    1672:	09 f4       	brne	.+2      	; 0x1676 <ESP_SEND_READ_HTTP_DATA+0x16e>
    1674:	9a c0       	rjmp	.+308    	; 0x17aa <ESP_SEND_READ_HTTP_DATA+0x2a2>
			{
				return 1;//WIFI MODULE NOT CONNECTED
			}
		} while (RECIVE_TEMP_DATA[0]!=',');	
    1676:	8c 32       	cpi	r24, 0x2C	; 44
    1678:	99 f7       	brne	.-26     	; 0x1660 <ESP_SEND_READ_HTTP_DATA+0x158>
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
			if (V==0)
			{
				return 1;//WIFI MODULE NOT CONNECTED
			}
			DATA[i].DATA_ELEMENT[k]=RECIVE_TEMP_DATA[0];
    167a:	85 01       	movw	r16, r10
    167c:	c7 2c       	mov	r12, r7
    167e:	d8 2c       	mov	r13, r8
    1680:	6c 2c       	mov	r6, r12
		/*DATA i*/
		k=0;
		do
		{
		
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1682:	40 e0       	ldi	r20, 0x00	; 0
    1684:	5c e6       	ldi	r21, 0x6C	; 108
    1686:	6c ed       	ldi	r22, 0xDC	; 220
    1688:	72 e0       	ldi	r23, 0x02	; 2
    168a:	ce 01       	movw	r24, r28
    168c:	0b 96       	adiw	r24, 0x0b	; 11
    168e:	93 d7       	rcall	.+3878   	; 0x25b6 <USART1_RECEIVE_byte>
			if (V==0)
    1690:	9b 85       	ldd	r25, Y+11	; 0x0b
    1692:	99 23       	and	r25, r25
    1694:	09 f4       	brne	.+2      	; 0x1698 <ESP_SEND_READ_HTTP_DATA+0x190>
    1696:	8c c0       	rjmp	.+280    	; 0x17b0 <ESP_SEND_READ_HTTP_DATA+0x2a8>
			{
				return 1;//WIFI MODULE NOT CONNECTED
			}
			DATA[i].DATA_ELEMENT[k]=RECIVE_TEMP_DATA[0];
    1698:	f8 01       	movw	r30, r16
    169a:	ec 0d       	add	r30, r12
    169c:	fd 1d       	adc	r31, r13
    169e:	80 83       	st	Z, r24
			++k;
			if (k>MAX_CHAR_DATA)
    16a0:	9e e1       	ldi	r25, 0x1E	; 30
    16a2:	c9 16       	cp	r12, r25
    16a4:	d1 04       	cpc	r13, r1
    16a6:	29 f0       	breq	.+10     	; 0x16b2 <ESP_SEND_READ_HTTP_DATA+0x1aa>
    16a8:	ef ef       	ldi	r30, 0xFF	; 255
    16aa:	ce 1a       	sub	r12, r30
    16ac:	de 0a       	sbc	r13, r30
			{
				break;
			}
		} while (RECIVE_TEMP_DATA[0]!='\n');
    16ae:	8a 30       	cpi	r24, 0x0A	; 10
    16b0:	39 f7       	brne	.-50     	; 0x1680 <ESP_SEND_READ_HTTP_DATA+0x178>
		DATA[i].length=k-1;
    16b2:	f8 01       	movw	r30, r16
    16b4:	66 8e       	std	Z+30, r6	; 0x1e
    16b6:	9a 94       	dec	r9
    16b8:	ff e1       	ldi	r31, 0x1F	; 31
    16ba:	af 0e       	add	r10, r31
    16bc:	b1 1c       	adc	r11, r1
	
	
	
	
	
	for (i=0;i<4;i++)
    16be:	91 10       	cpse	r9, r1
    16c0:	c2 cf       	rjmp	.-124    	; 0x1646 <ESP_SEND_READ_HTTP_DATA+0x13e>

	}
	/*TIME 4*/
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    16c2:	40 e0       	ldi	r20, 0x00	; 0
    16c4:	5c e6       	ldi	r21, 0x6C	; 108
    16c6:	6c ed       	ldi	r22, 0xDC	; 220
    16c8:	72 e0       	ldi	r23, 0x02	; 2
    16ca:	ce 01       	movw	r24, r28
    16cc:	0b 96       	adiw	r24, 0x0b	; 11
    16ce:	73 d7       	rcall	.+3814   	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    16d0:	9b 85       	ldd	r25, Y+11	; 0x0b
    16d2:	99 23       	and	r25, r25
    16d4:	09 f4       	brne	.+2      	; 0x16d8 <ESP_SEND_READ_HTTP_DATA+0x1d0>
    16d6:	6f c0       	rjmp	.+222    	; 0x17b6 <ESP_SEND_READ_HTTP_DATA+0x2ae>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
	} while (RECIVE_TEMP_DATA[0]!=',');
    16d8:	8c 32       	cpi	r24, 0x2C	; 44
    16da:	99 f7       	brne	.-26     	; 0x16c2 <ESP_SEND_READ_HTTP_DATA+0x1ba>
    16dc:	10 e0       	ldi	r17, 0x00	; 0
	
	k=0;
	/*LAST ENTRY*/
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    16de:	40 e0       	ldi	r20, 0x00	; 0
    16e0:	5c e6       	ldi	r21, 0x6C	; 108
    16e2:	6c ed       	ldi	r22, 0xDC	; 220
    16e4:	72 e0       	ldi	r23, 0x02	; 2
    16e6:	ce 01       	movw	r24, r28
    16e8:	0b 96       	adiw	r24, 0x0b	; 11
    16ea:	65 d7       	rcall	.+3786   	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    16ec:	9b 85       	ldd	r25, Y+11	; 0x0b
    16ee:	99 23       	and	r25, r25
    16f0:	09 f4       	brne	.+2      	; 0x16f4 <ESP_SEND_READ_HTTP_DATA+0x1ec>
    16f2:	64 c0       	rjmp	.+200    	; 0x17bc <ESP_SEND_READ_HTTP_DATA+0x2b4>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
		TEMP[k]=RECIVE_TEMP_DATA[0];
    16f4:	e1 e0       	ldi	r30, 0x01	; 1
    16f6:	f0 e0       	ldi	r31, 0x00	; 0
    16f8:	ec 0f       	add	r30, r28
    16fa:	fd 1f       	adc	r31, r29
    16fc:	e1 0f       	add	r30, r17
    16fe:	f1 1d       	adc	r31, r1
    1700:	80 83       	st	Z, r24
		++k;
    1702:	91 e0       	ldi	r25, 0x01	; 1
    1704:	91 0f       	add	r25, r17
		if (k>10)
    1706:	9b 30       	cpi	r25, 0x0B	; 11
    1708:	08 f4       	brcc	.+2      	; 0x170c <ESP_SEND_READ_HTTP_DATA+0x204>
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
		TEMP[k]=RECIVE_TEMP_DATA[0];
		++k;
    170a:	19 2f       	mov	r17, r25
		if (k>10)
		{
			k--;
		}
	} while (RECIVE_TEMP_DATA[0]!=',');
    170c:	8c 32       	cpi	r24, 0x2C	; 44
    170e:	39 f7       	brne	.-50     	; 0x16de <ESP_SEND_READ_HTTP_DATA+0x1d6>
	
	NEW_LAST_ENTRY=STRINGTOINT(TEMP,k-1);
    1710:	6f ef       	ldi	r22, 0xFF	; 255
    1712:	61 0f       	add	r22, r17
    1714:	ce 01       	movw	r24, r28
    1716:	01 96       	adiw	r24, 0x01	; 1
    1718:	12 d3       	rcall	.+1572   	; 0x1d3e <STRINGTOINT>
    171a:	84 2f       	mov	r24, r20
    171c:	95 2f       	mov	r25, r21
    171e:	42 2f       	mov	r20, r18
    1720:	53 2f       	mov	r21, r19
    1722:	68 2f       	mov	r22, r24
    1724:	79 2f       	mov	r23, r25
    1726:	40 93 83 03 	sts	0x0383, r20
    172a:	50 93 84 03 	sts	0x0384, r21
    172e:	60 93 85 03 	sts	0x0385, r22
    1732:	70 93 86 03 	sts	0x0386, r23
    1736:	00 e0       	ldi	r16, 0x00	; 0
    1738:	10 e0       	ldi	r17, 0x00	; 0
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
		DATA[4].DATA_ELEMENT[k]=RECIVE_TEMP_DATA[0];
    173a:	67 01       	movw	r12, r14
    173c:	8c e7       	ldi	r24, 0x7C	; 124
    173e:	c8 0e       	add	r12, r24
    1740:	d1 1c       	adc	r13, r1
    1742:	b0 2e       	mov	r11, r16
	k=0;
	/*DATA 4*/
	do
	{
		
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1744:	40 e0       	ldi	r20, 0x00	; 0
    1746:	5c e6       	ldi	r21, 0x6C	; 108
    1748:	6c ed       	ldi	r22, 0xDC	; 220
    174a:	72 e0       	ldi	r23, 0x02	; 2
    174c:	ce 01       	movw	r24, r28
    174e:	0b 96       	adiw	r24, 0x0b	; 11
    1750:	32 d7       	rcall	.+3684   	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    1752:	9b 85       	ldd	r25, Y+11	; 0x0b
    1754:	99 23       	and	r25, r25
    1756:	a9 f1       	breq	.+106    	; 0x17c2 <ESP_SEND_READ_HTTP_DATA+0x2ba>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
		DATA[4].DATA_ELEMENT[k]=RECIVE_TEMP_DATA[0];
    1758:	f6 01       	movw	r30, r12
    175a:	e0 0f       	add	r30, r16
    175c:	f1 1f       	adc	r31, r17
    175e:	80 83       	st	Z, r24
		++k;
		if (k>MAX_CHAR_DATA)
    1760:	0e 31       	cpi	r16, 0x1E	; 30
    1762:	11 05       	cpc	r17, r1
    1764:	21 f0       	breq	.+8      	; 0x176e <ESP_SEND_READ_HTTP_DATA+0x266>
    1766:	0f 5f       	subi	r16, 0xFF	; 255
    1768:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			break;
		}
	} while (RECIVE_TEMP_DATA[0]!='\n');
    176a:	8a 30       	cpi	r24, 0x0A	; 10
    176c:	51 f7       	brne	.-44     	; 0x1742 <ESP_SEND_READ_HTTP_DATA+0x23a>
	DATA[4].length=k-1;
    176e:	f7 01       	movw	r30, r14
    1770:	e4 58       	subi	r30, 0x84	; 132
    1772:	ff 4f       	sbci	r31, 0xFF	; 255
    1774:	b6 8e       	std	Z+30, r11	; 0x1e

	/*CLOSED\r\n*/
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
    1776:	40 e0       	ldi	r20, 0x00	; 0
    1778:	5c e6       	ldi	r21, 0x6C	; 108
    177a:	6c ed       	ldi	r22, 0xDC	; 220
    177c:	72 e0       	ldi	r23, 0x02	; 2
    177e:	ce 01       	movw	r24, r28
    1780:	0b 96       	adiw	r24, 0x0b	; 11
    1782:	19 d7       	rcall	.+3634   	; 0x25b6 <USART1_RECEIVE_byte>
		if (V==0)
    1784:	9b 85       	ldd	r25, Y+11	; 0x0b
    1786:	99 23       	and	r25, r25
    1788:	f9 f0       	breq	.+62     	; 0x17c8 <ESP_SEND_READ_HTTP_DATA+0x2c0>
		{
			return 1;//WIFI MODULE NOT CONNECTED
		}
	} while (RECIVE_TEMP_DATA[0]!='\n');
    178a:	8a 30       	cpi	r24, 0x0A	; 10
    178c:	a1 f7       	brne	.-24     	; 0x1776 <ESP_SEND_READ_HTTP_DATA+0x26e>
    178e:	1e c0       	rjmp	.+60     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	ESP_UART_SEND_ARRAY("\r\n",2);
	TEST=ESP_CHECK_OK_RESP();
	if (TEST)
	{
		/*put for loop*/
		return TEST;
    1790:	98 2e       	mov	r9, r24
    1792:	1c c0       	rjmp	.+56     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	}
	TEST=ESP_READ_CHAR_AND_CHECK('>');
	if (TEST)
	{
		return TEST;
    1794:	98 2e       	mov	r9, r24
    1796:	1a c0       	rjmp	.+52     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    1798:	99 24       	eor	r9, r9
    179a:	93 94       	inc	r9
    179c:	17 c0       	rjmp	.+46     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    179e:	99 24       	eor	r9, r9
    17a0:	93 94       	inc	r9
    17a2:	14 c0       	rjmp	.+40     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
		do
		{
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
			if (V==0)
			{
				return 1;//WIFI MODULE NOT CONNECTED
    17a4:	99 24       	eor	r9, r9
    17a6:	93 94       	inc	r9
    17a8:	11 c0       	rjmp	.+34     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
		do
		{
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
			if (V==0)
			{
				return 1;//WIFI MODULE NOT CONNECTED
    17aa:	99 24       	eor	r9, r9
    17ac:	93 94       	inc	r9
    17ae:	0e c0       	rjmp	.+28     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
		{
		
			RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
			if (V==0)
			{
				return 1;//WIFI MODULE NOT CONNECTED
    17b0:	99 24       	eor	r9, r9
    17b2:	93 94       	inc	r9
    17b4:	0b c0       	rjmp	.+22     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    17b6:	99 24       	eor	r9, r9
    17b8:	93 94       	inc	r9
    17ba:	08 c0       	rjmp	.+16     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    17bc:	99 24       	eor	r9, r9
    17be:	93 94       	inc	r9
    17c0:	05 c0       	rjmp	.+10     	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	{
		
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    17c2:	99 24       	eor	r9, r9
    17c4:	93 94       	inc	r9
    17c6:	02 c0       	rjmp	.+4      	; 0x17cc <ESP_SEND_READ_HTTP_DATA+0x2c4>
	do
	{
		RECIVE_TEMP_DATA[0]=ESP_UART_RECIVE_BYTE(ESP_UART_COUNT_RECIVER1,&V);
		if (V==0)
		{
			return 1;//WIFI MODULE NOT CONNECTED
    17c8:	99 24       	eor	r9, r9
    17ca:	93 94       	inc	r9
		}
	} while (RECIVE_TEMP_DATA[0]!='\n');
	
	return 0;//done
}
    17cc:	89 2d       	mov	r24, r9
    17ce:	2b 96       	adiw	r28, 0x0b	; 11
    17d0:	0f b6       	in	r0, 0x3f	; 63
    17d2:	f8 94       	cli
    17d4:	de bf       	out	0x3e, r29	; 62
    17d6:	0f be       	out	0x3f, r0	; 63
    17d8:	cd bf       	out	0x3d, r28	; 61
    17da:	df 91       	pop	r29
    17dc:	cf 91       	pop	r28
    17de:	1f 91       	pop	r17
    17e0:	0f 91       	pop	r16
    17e2:	ff 90       	pop	r15
    17e4:	ef 90       	pop	r14
    17e6:	df 90       	pop	r13
    17e8:	cf 90       	pop	r12
    17ea:	bf 90       	pop	r11
    17ec:	af 90       	pop	r10
    17ee:	9f 90       	pop	r9
    17f0:	8f 90       	pop	r8
    17f2:	7f 90       	pop	r7
    17f4:	6f 90       	pop	r6
    17f6:	08 95       	ret

000017f8 <ESP_SETUP>:
/*USED OUT IN PUBLIC*/

unsigned char ESP_SETUP()
{
	unsigned char test;
	test=ESP_AT_COMMAND();
    17f8:	5a dc       	rcall	.-1868   	; 0x10ae <ESP_AT_COMMAND>
	if (test)
    17fa:	81 11       	cpse	r24, r1
    17fc:	07 c0       	rjmp	.+14     	; 0x180c <ESP_SETUP+0x14>
	{
		return test;
	}

	test=ESP_ATE_COMMAND();
    17fe:	aa dc       	rcall	.-1708   	; 0x1154 <ESP_ATE_COMMAND>
	if (test)
    1800:	81 11       	cpse	r24, r1
    1802:	04 c0       	rjmp	.+8      	; 0x180c <ESP_SETUP+0x14>
	{
		return test;
	}
	
	test=ESP_CWMODE_1();
    1804:	cb dc       	rcall	.-1642   	; 0x119c <ESP_CWMODE_1>
	if (test)
    1806:	81 11       	cpse	r24, r1
    1808:	01 c0       	rjmp	.+2      	; 0x180c <ESP_SETUP+0x14>
	{
		return test;
	}
		
	test=ESP_CWLAPOPT_1();
    180a:	e3 cc       	rjmp	.-1594   	; 0x11d2 <ESP_CWLAPOPT_1>
	{
		return test;
	}
		
	return 0;
}
    180c:	08 95       	ret

0000180e <ESP_CONNECT_AP>:
// connect

unsigned char ESP_CONNECT_AP(unsigned char *AP_NAME,unsigned char AP_LENGTH,unsigned char *PASS_NAME,unsigned char PASS_LENGTH, unsigned char *connection_state)
{
    180e:	af 92       	push	r10
    1810:	bf 92       	push	r11
    1812:	cf 92       	push	r12
    1814:	df 92       	push	r13
    1816:	ef 92       	push	r14
    1818:	ff 92       	push	r15
    181a:	0f 93       	push	r16
    181c:	1f 93       	push	r17
    181e:	cf 93       	push	r28
    1820:	df 93       	push	r29
    1822:	1f 92       	push	r1
    1824:	cd b7       	in	r28, 0x3d	; 61
    1826:	de b7       	in	r29, 0x3e	; 62
    1828:	7c 01       	movw	r14, r24
    182a:	b6 2e       	mov	r11, r22
    182c:	6a 01       	movw	r12, r20
    182e:	a2 2e       	mov	r10, r18
	unsigned char test,test2;
	if (WIFI_CONNECT_STAGE==0)
    1830:	80 91 27 03 	lds	r24, 0x0327
    1834:	81 11       	cpse	r24, r1
    1836:	23 c0       	rjmp	.+70     	; 0x187e <ESP_CONNECT_AP+0x70>
	{
		test=ESP_AT_COMMAND();
    1838:	3a dc       	rcall	.-1932   	; 0x10ae <ESP_AT_COMMAND>
		if (test)
    183a:	81 11       	cpse	r24, r1
    183c:	3d c0       	rjmp	.+122    	; 0x18b8 <ESP_CONNECT_AP+0xaa>
		{
			return test;
		}
		test=ESP_CIPSTATUS(&test2);
    183e:	ce 01       	movw	r24, r28
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	e2 dc       	rcall	.-1596   	; 0x1208 <ESP_CIPSTATUS>
		if (test)
    1844:	81 11       	cpse	r24, r1
    1846:	38 c0       	rjmp	.+112    	; 0x18b8 <ESP_CONNECT_AP+0xaa>
		{
			return test;
		}
		*connection_state=1;
    1848:	81 e0       	ldi	r24, 0x01	; 1
    184a:	f8 01       	movw	r30, r16
    184c:	80 83       	st	Z, r24
		if (test2==5)
    184e:	89 81       	ldd	r24, Y+1	; 0x01
    1850:	85 30       	cpi	r24, 0x05	; 5
    1852:	59 f5       	brne	.+86     	; 0x18aa <ESP_CONNECT_AP+0x9c>
		{
			test=ESP_CWJAP_CUR(AP_NAME,AP_LENGTH,PASS_NAME,PASS_LENGTH);
    1854:	2a 2d       	mov	r18, r10
    1856:	a6 01       	movw	r20, r12
    1858:	6b 2d       	mov	r22, r11
    185a:	c7 01       	movw	r24, r14
    185c:	20 dd       	rcall	.-1472   	; 0x129e <ESP_CWJAP_CUR>
			if (test)
    185e:	81 11       	cpse	r24, r1
    1860:	2b c0       	rjmp	.+86     	; 0x18b8 <ESP_CONNECT_AP+0xaa>
			{
				return test;
			}
			WIFI_CONNECT_STAGE=0;
    1862:	10 92 27 03 	sts	0x0327, r1
			test=ESP_CIPSTATUS(&test2);
    1866:	ce 01       	movw	r24, r28
    1868:	01 96       	adiw	r24, 0x01	; 1
    186a:	ce dc       	rcall	.-1636   	; 0x1208 <ESP_CIPSTATUS>
			if (test)
    186c:	81 11       	cpse	r24, r1
    186e:	24 c0       	rjmp	.+72     	; 0x18b8 <ESP_CONNECT_AP+0xaa>
			{
				return test;
			}
			if (test2==5)
    1870:	89 81       	ldd	r24, Y+1	; 0x01
    1872:	85 30       	cpi	r24, 0x05	; 5
    1874:	e1 f4       	brne	.+56     	; 0x18ae <ESP_CONNECT_AP+0xa0>
			{
				*connection_state=0;
    1876:	f8 01       	movw	r30, r16
    1878:	10 82       	st	Z, r1
			}
		
		}
		return 0;//done
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	1d c0       	rjmp	.+58     	; 0x18b8 <ESP_CONNECT_AP+0xaa>
	}
	if (WIFI_CONNECT_STAGE==1)
    187e:	80 91 27 03 	lds	r24, 0x0327
    1882:	81 30       	cpi	r24, 0x01	; 1
    1884:	b1 f4       	brne	.+44     	; 0x18b2 <ESP_CONNECT_AP+0xa4>
	{
		test=ESP_CWJAP_CUR(AP_NAME,AP_LENGTH,PASS_NAME,PASS_LENGTH);
    1886:	c7 01       	movw	r24, r14
    1888:	0a dd       	rcall	.-1516   	; 0x129e <ESP_CWJAP_CUR>
		if (test)
    188a:	81 11       	cpse	r24, r1
    188c:	15 c0       	rjmp	.+42     	; 0x18b8 <ESP_CONNECT_AP+0xaa>
		{
			return test;
		}
		WIFI_CONNECT_STAGE=0;
    188e:	10 92 27 03 	sts	0x0327, r1
		test=ESP_CIPSTATUS(&test2);
    1892:	ce 01       	movw	r24, r28
    1894:	01 96       	adiw	r24, 0x01	; 1
    1896:	b8 dc       	rcall	.-1680   	; 0x1208 <ESP_CIPSTATUS>
		if (test)
    1898:	81 11       	cpse	r24, r1
    189a:	0e c0       	rjmp	.+28     	; 0x18b8 <ESP_CONNECT_AP+0xaa>
		{
			return test;
		}
		if (test2==5)
    189c:	89 81       	ldd	r24, Y+1	; 0x01
    189e:	85 30       	cpi	r24, 0x05	; 5
    18a0:	51 f4       	brne	.+20     	; 0x18b6 <ESP_CONNECT_AP+0xa8>
		{
			*connection_state=0;
    18a2:	f8 01       	movw	r30, r16
    18a4:	10 82       	st	Z, r1
		}
		return 0;//done
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	07 c0       	rjmp	.+14     	; 0x18b8 <ESP_CONNECT_AP+0xaa>
			{
				*connection_state=0;
			}
		
		}
		return 0;//done
    18aa:	80 e0       	ldi	r24, 0x00	; 0
    18ac:	05 c0       	rjmp	.+10     	; 0x18b8 <ESP_CONNECT_AP+0xaa>
    18ae:	80 e0       	ldi	r24, 0x00	; 0
    18b0:	03 c0       	rjmp	.+6      	; 0x18b8 <ESP_CONNECT_AP+0xaa>
		{
			*connection_state=0;
		}
		return 0;//done
	}
	return 0;
    18b2:	80 e0       	ldi	r24, 0x00	; 0
    18b4:	01 c0       	rjmp	.+2      	; 0x18b8 <ESP_CONNECT_AP+0xaa>
		}
		if (test2==5)
		{
			*connection_state=0;
		}
		return 0;//done
    18b6:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 0;
}
    18b8:	0f 90       	pop	r0
    18ba:	df 91       	pop	r29
    18bc:	cf 91       	pop	r28
    18be:	1f 91       	pop	r17
    18c0:	0f 91       	pop	r16
    18c2:	ff 90       	pop	r15
    18c4:	ef 90       	pop	r14
    18c6:	df 90       	pop	r13
    18c8:	cf 90       	pop	r12
    18ca:	bf 90       	pop	r11
    18cc:	af 90       	pop	r10
    18ce:	08 95       	ret

000018d0 <ESP_WRITE_HTTP>:
	return 0;//done
	
}*/

unsigned char ESP_WRITE_HTTP(unsigned char *API_WRITE_KEY,unsigned char API_WRITE_KEY_LENGTH,unsigned char FIELD_NUM,unsigned char *DATA,unsigned char DATA_LENGTH)
{
    18d0:	bf 92       	push	r11
    18d2:	cf 92       	push	r12
    18d4:	df 92       	push	r13
    18d6:	ef 92       	push	r14
    18d8:	ff 92       	push	r15
    18da:	0f 93       	push	r16
    18dc:	1f 93       	push	r17
    18de:	cf 93       	push	r28
    18e0:	df 93       	push	r29
    18e2:	1f 92       	push	r1
    18e4:	cd b7       	in	r28, 0x3d	; 61
    18e6:	de b7       	in	r29, 0x3e	; 62
    18e8:	6c 01       	movw	r12, r24
    18ea:	16 2f       	mov	r17, r22
    18ec:	b4 2e       	mov	r11, r20
    18ee:	79 01       	movw	r14, r18
	unsigned char test,test2;
	test=ESP_AT_COMMAND();
    18f0:	de db       	rcall	.-2116   	; 0x10ae <ESP_AT_COMMAND>
	if (test)
    18f2:	81 11       	cpse	r24, r1
    18f4:	16 c0       	rjmp	.+44     	; 0x1922 <ESP_WRITE_HTTP+0x52>
	{
		return test;
	}
	test=ESP_CIPSTATUS(&test2);
    18f6:	ce 01       	movw	r24, r28
    18f8:	01 96       	adiw	r24, 0x01	; 1
    18fa:	86 dc       	rcall	.-1780   	; 0x1208 <ESP_CIPSTATUS>
	if (test)
    18fc:	81 11       	cpse	r24, r1
    18fe:	11 c0       	rjmp	.+34     	; 0x1922 <ESP_WRITE_HTTP+0x52>
	{
		return test;
	}
	
	if (test2==5)
    1900:	89 81       	ldd	r24, Y+1	; 0x01
    1902:	85 30       	cpi	r24, 0x05	; 5
    1904:	59 f0       	breq	.+22     	; 0x191c <ESP_WRITE_HTTP+0x4c>
	{
		return 4;// not connected 
	}
	if (test2==3)
    1906:	83 30       	cpi	r24, 0x03	; 3
    1908:	59 f0       	breq	.+22     	; 0x1920 <ESP_WRITE_HTTP+0x50>
	{
		return 5;// tcp connected
	}
	test=ESP_OPEN_SOCKET();
    190a:	26 dd       	rcall	.-1460   	; 0x1358 <ESP_OPEN_SOCKET>
	if (test)
    190c:	81 11       	cpse	r24, r1
    190e:	09 c0       	rjmp	.+18     	; 0x1922 <ESP_WRITE_HTTP+0x52>
	{
		return test;
	}
	test=ESP_SEND_WRITE_HTTP_DATA(API_WRITE_KEY,API_WRITE_KEY_LENGTH,FIELD_NUM,DATA, DATA_LENGTH);
    1910:	97 01       	movw	r18, r14
    1912:	4b 2d       	mov	r20, r11
    1914:	61 2f       	mov	r22, r17
    1916:	c6 01       	movw	r24, r12
    1918:	4d dd       	rcall	.-1382   	; 0x13b4 <ESP_SEND_WRITE_HTTP_DATA>
    191a:	03 c0       	rjmp	.+6      	; 0x1922 <ESP_WRITE_HTTP+0x52>
		return test;
	}
	
	if (test2==5)
	{
		return 4;// not connected 
    191c:	84 e0       	ldi	r24, 0x04	; 4
    191e:	01 c0       	rjmp	.+2      	; 0x1922 <ESP_WRITE_HTTP+0x52>
	}
	if (test2==3)
	{
		return 5;// tcp connected
    1920:	85 e0       	ldi	r24, 0x05	; 5
	{
		return test;
	}
	return 0;//done
	
}
    1922:	0f 90       	pop	r0
    1924:	df 91       	pop	r29
    1926:	cf 91       	pop	r28
    1928:	1f 91       	pop	r17
    192a:	0f 91       	pop	r16
    192c:	ff 90       	pop	r15
    192e:	ef 90       	pop	r14
    1930:	df 90       	pop	r13
    1932:	cf 90       	pop	r12
    1934:	bf 90       	pop	r11
    1936:	08 95       	ret

00001938 <ESP_READ_HTTP>:

unsigned char ESP_READ_HTTP(unsigned char *CHANNEL_ID,unsigned char CHANNEL_ID_LENGTH,unsigned char FIELD_NUM,ESP_RECIVED_DATA_DT *DATA)
{
    1938:	cf 92       	push	r12
    193a:	df 92       	push	r13
    193c:	ef 92       	push	r14
    193e:	ff 92       	push	r15
    1940:	0f 93       	push	r16
    1942:	1f 93       	push	r17
    1944:	cf 93       	push	r28
    1946:	df 93       	push	r29
    1948:	1f 92       	push	r1
    194a:	cd b7       	in	r28, 0x3d	; 61
    194c:	de b7       	in	r29, 0x3e	; 62
    194e:	7c 01       	movw	r14, r24
    1950:	d6 2e       	mov	r13, r22
    1952:	c4 2e       	mov	r12, r20
    1954:	89 01       	movw	r16, r18
	unsigned char test,test2;
	test=ESP_AT_COMMAND();
    1956:	ab db       	rcall	.-2218   	; 0x10ae <ESP_AT_COMMAND>
	if (test)
    1958:	81 11       	cpse	r24, r1
    195a:	16 c0       	rjmp	.+44     	; 0x1988 <ESP_READ_HTTP+0x50>
	{
		return test;
	}
	test=ESP_CIPSTATUS(&test2);
    195c:	ce 01       	movw	r24, r28
    195e:	01 96       	adiw	r24, 0x01	; 1
    1960:	53 dc       	rcall	.-1882   	; 0x1208 <ESP_CIPSTATUS>
	if (test)
    1962:	81 11       	cpse	r24, r1
    1964:	11 c0       	rjmp	.+34     	; 0x1988 <ESP_READ_HTTP+0x50>
	{
		return test;
	}
	
	if (test2==5)
    1966:	89 81       	ldd	r24, Y+1	; 0x01
    1968:	85 30       	cpi	r24, 0x05	; 5
    196a:	59 f0       	breq	.+22     	; 0x1982 <ESP_READ_HTTP+0x4a>
	{
		return 4;// not connected
	}
	if (test2==3)
    196c:	83 30       	cpi	r24, 0x03	; 3
    196e:	59 f0       	breq	.+22     	; 0x1986 <ESP_READ_HTTP+0x4e>
	{
		return 5;// tcp connected
	}
	test=ESP_OPEN_SOCKET();
    1970:	f3 dc       	rcall	.-1562   	; 0x1358 <ESP_OPEN_SOCKET>
	if (test)
    1972:	81 11       	cpse	r24, r1
    1974:	09 c0       	rjmp	.+18     	; 0x1988 <ESP_READ_HTTP+0x50>
	{
		return test;
	}
	test=ESP_SEND_READ_HTTP_DATA(CHANNEL_ID, CHANNEL_ID_LENGTH,FIELD_NUM,DATA);
    1976:	98 01       	movw	r18, r16
    1978:	4c 2d       	mov	r20, r12
    197a:	6d 2d       	mov	r22, r13
    197c:	c7 01       	movw	r24, r14
    197e:	c4 dd       	rcall	.-1144   	; 0x1508 <ESP_SEND_READ_HTTP_DATA>
    1980:	03 c0       	rjmp	.+6      	; 0x1988 <ESP_READ_HTTP+0x50>
		return test;
	}
	
	if (test2==5)
	{
		return 4;// not connected
    1982:	84 e0       	ldi	r24, 0x04	; 4
    1984:	01 c0       	rjmp	.+2      	; 0x1988 <ESP_READ_HTTP+0x50>
	}
	if (test2==3)
	{
		return 5;// tcp connected
    1986:	85 e0       	ldi	r24, 0x05	; 5
	if (test)
	{
		return test;
	}
	return 0;//done
}
    1988:	0f 90       	pop	r0
    198a:	df 91       	pop	r29
    198c:	cf 91       	pop	r28
    198e:	1f 91       	pop	r17
    1990:	0f 91       	pop	r16
    1992:	ff 90       	pop	r15
    1994:	ef 90       	pop	r14
    1996:	df 90       	pop	r13
    1998:	cf 90       	pop	r12
    199a:	08 95       	ret

0000199c <inttostring>:
 * Created: 9/1/2020 12:42:54 PM
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long long thenumber)
{
    199c:	2f 92       	push	r2
    199e:	3f 92       	push	r3
    19a0:	4f 92       	push	r4
    19a2:	5f 92       	push	r5
    19a4:	6f 92       	push	r6
    19a6:	7f 92       	push	r7
    19a8:	8f 92       	push	r8
    19aa:	9f 92       	push	r9
    19ac:	af 92       	push	r10
    19ae:	bf 92       	push	r11
    19b0:	cf 92       	push	r12
    19b2:	df 92       	push	r13
    19b4:	ef 92       	push	r14
    19b6:	ff 92       	push	r15
    19b8:	0f 93       	push	r16
    19ba:	1f 93       	push	r17
    19bc:	cf 93       	push	r28
    19be:	df 93       	push	r29
    19c0:	cd b7       	in	r28, 0x3d	; 61
    19c2:	de b7       	in	r29, 0x3e	; 62
    19c4:	65 97       	sbiw	r28, 0x15	; 21
    19c6:	0f b6       	in	r0, 0x3f	; 63
    19c8:	f8 94       	cli
    19ca:	de bf       	out	0x3e, r29	; 62
    19cc:	0f be       	out	0x3f, r0	; 63
    19ce:	cd bf       	out	0x3d, r28	; 61
    19d0:	9b 8b       	std	Y+19, r25	; 0x13
    19d2:	8a 8b       	std	Y+18, r24	; 0x12
    19d4:	09 83       	std	Y+1, r16	; 0x01
    19d6:	1a 83       	std	Y+2, r17	; 0x02
    19d8:	2b 83       	std	Y+3, r18	; 0x03
    19da:	3c 83       	std	Y+4, r19	; 0x04
    19dc:	4d 83       	std	Y+5, r20	; 0x05
    19de:	5e 83       	std	Y+6, r21	; 0x06
    19e0:	86 2e       	mov	r8, r22
    19e2:	97 2e       	mov	r9, r23
	unsigned char counter=0;
	unsigned long long the_scaler=10000000000000;/*13 digit*/
	if (thenumber<0)
    19e4:	20 2f       	mov	r18, r16
    19e6:	31 2f       	mov	r19, r17
    19e8:	4b 81       	ldd	r20, Y+3	; 0x03
    19ea:	5c 81       	ldd	r21, Y+4	; 0x04
    19ec:	6d 81       	ldd	r22, Y+5	; 0x05
    19ee:	7e 81       	ldd	r23, Y+6	; 0x06
    19f0:	88 2d       	mov	r24, r8
    19f2:	99 2d       	mov	r25, r9
    19f4:	a0 e0       	ldi	r26, 0x00	; 0
    19f6:	0e 94 1d 34 	call	0x683a	; 0x683a <__cmpdi2_s8>
    19fa:	94 f4       	brge	.+36     	; 0x1a20 <inttostring+0x84>
	{
		the_return[0]='-';
    19fc:	8d e2       	ldi	r24, 0x2D	; 45
    19fe:	ea 89       	ldd	r30, Y+18	; 0x12
    1a00:	fb 89       	ldd	r31, Y+19	; 0x13
    1a02:	80 83       	st	Z, r24
		thenumber=thenumber*(-1);
    1a04:	88 2d       	mov	r24, r8
    1a06:	0e 94 c1 33 	call	0x6782	; 0x6782 <__negdi2>
    1a0a:	29 83       	std	Y+1, r18	; 0x01
    1a0c:	3a 83       	std	Y+2, r19	; 0x02
    1a0e:	4b 83       	std	Y+3, r20	; 0x03
    1a10:	5c 83       	std	Y+4, r21	; 0x04
    1a12:	6d 83       	std	Y+5, r22	; 0x05
    1a14:	7e 83       	std	Y+6, r23	; 0x06
    1a16:	88 2e       	mov	r8, r24
    1a18:	99 2e       	mov	r9, r25
		counter=1;
    1a1a:	f1 e0       	ldi	r31, 0x01	; 1
    1a1c:	ff 83       	std	Y+7, r31	; 0x07
    1a1e:	01 c0       	rjmp	.+2      	; 0x1a22 <inttostring+0x86>
 *  Author: ideapad510
 */ 
#include "minohelper.h"
unsigned char inttostring(unsigned char * the_return,long long thenumber)
{
	unsigned char counter=0;
    1a20:	1f 82       	std	Y+7, r1	; 0x07
	{
		the_return[0]='-';
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
    1a22:	29 81       	ldd	r18, Y+1	; 0x01
    1a24:	3a 81       	ldd	r19, Y+2	; 0x02
    1a26:	4b 81       	ldd	r20, Y+3	; 0x03
    1a28:	5c 81       	ldd	r21, Y+4	; 0x04
    1a2a:	6d 81       	ldd	r22, Y+5	; 0x05
    1a2c:	7e 81       	ldd	r23, Y+6	; 0x06
    1a2e:	88 2d       	mov	r24, r8
    1a30:	99 2d       	mov	r25, r9
    1a32:	a0 e0       	ldi	r26, 0x00	; 0
    1a34:	0e 94 1d 34 	call	0x683a	; 0x683a <__cmpdi2_s8>
    1a38:	99 f0       	breq	.+38     	; 0x1a60 <inttostring+0xc4>
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
    1a3a:	2c 8b       	std	Y+20, r18	; 0x14
    1a3c:	38 8b       	std	Y+16, r19	; 0x10
    1a3e:	24 2e       	mov	r2, r20
    1a40:	35 2e       	mov	r3, r21
    1a42:	46 2e       	mov	r4, r22
    1a44:	57 2e       	mov	r5, r23
    1a46:	68 2c       	mov	r6, r8
    1a48:	79 2c       	mov	r7, r9
    1a4a:	2f 3f       	cpi	r18, 0xFF	; 255
    1a4c:	3f 49       	sbci	r19, 0x9F	; 159
    1a4e:	42 47       	sbci	r20, 0x72	; 114
    1a50:	5e 44       	sbci	r21, 0x4E	; 78
    1a52:	68 41       	sbci	r22, 0x18	; 24
    1a54:	79 40       	sbci	r23, 0x09	; 9
    1a56:	81 05       	cpc	r24, r1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	41 f0       	breq	.+16     	; 0x1a6c <inttostring+0xd0>
    1a5c:	38 f0       	brcs	.+14     	; 0x1a6c <inttostring+0xd0>
    1a5e:	0a c1       	rjmp	.+532    	; 0x1c74 <inttostring+0x2d8>
		thenumber=thenumber*(-1);
		counter=1;
	}
	if (thenumber==0)
	{
		the_return[0]='0';
    1a60:	80 e3       	ldi	r24, 0x30	; 48
    1a62:	ea 89       	ldd	r30, Y+18	; 0x12
    1a64:	fb 89       	ldd	r31, Y+19	; 0x13
    1a66:	80 83       	st	Z, r24
		return 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	50 c1       	rjmp	.+672    	; 0x1d0c <inttostring+0x370>
	}
	while (thenumber/the_scaler==0)
    1a6c:	18 86       	std	Y+8, r1	; 0x08
    1a6e:	f0 ea       	ldi	r31, 0xA0	; 160
    1a70:	f9 87       	std	Y+9, r31	; 0x09
    1a72:	22 e7       	ldi	r18, 0x72	; 114
    1a74:	2a 87       	std	Y+10, r18	; 0x0a
    1a76:	8e e4       	ldi	r24, 0x4E	; 78
    1a78:	8b 87       	std	Y+11, r24	; 0x0b
    1a7a:	98 e1       	ldi	r25, 0x18	; 24
    1a7c:	9c 87       	std	Y+12, r25	; 0x0c
    1a7e:	e9 e0       	ldi	r30, 0x09	; 9
    1a80:	ed 87       	std	Y+13, r30	; 0x0d
    1a82:	1e 86       	std	Y+14, r1	; 0x0e
    1a84:	1f 86       	std	Y+15, r1	; 0x0f
    1a86:	0f 2e       	mov	r0, r31
    1a88:	f2 e7       	ldi	r31, 0x72	; 114
    1a8a:	9f 2e       	mov	r9, r31
    1a8c:	f0 2d       	mov	r31, r0
    1a8e:	0f 2e       	mov	r0, r31
    1a90:	fe e4       	ldi	r31, 0x4E	; 78
    1a92:	8f 2e       	mov	r8, r31
    1a94:	f0 2d       	mov	r31, r0
    1a96:	fc 89       	ldd	r31, Y+20	; 0x14
    1a98:	f9 83       	std	Y+1, r31	; 0x01
    1a9a:	88 89       	ldd	r24, Y+16	; 0x10
    1a9c:	8a 83       	std	Y+2, r24	; 0x02
    1a9e:	2b 82       	std	Y+3, r2	; 0x03
    1aa0:	21 2c       	mov	r2, r1
    1aa2:	3c 82       	std	Y+4, r3	; 0x04
    1aa4:	31 2c       	mov	r3, r1
    1aa6:	4d 82       	std	Y+5, r4	; 0x05
    1aa8:	0f 2e       	mov	r0, r31
    1aaa:	f9 e0       	ldi	r31, 0x09	; 9
    1aac:	4f 2e       	mov	r4, r31
    1aae:	f0 2d       	mov	r31, r0
    1ab0:	5e 82       	std	Y+6, r5	; 0x06
    1ab2:	0f 2e       	mov	r0, r31
    1ab4:	f8 e1       	ldi	r31, 0x18	; 24
    1ab6:	5f 2e       	mov	r5, r31
    1ab8:	f0 2d       	mov	r31, r0
	{
		the_scaler=the_scaler/10;
    1aba:	0f 2e       	mov	r0, r31
    1abc:	fa e0       	ldi	r31, 0x0A	; 10
    1abe:	af 2e       	mov	r10, r31
    1ac0:	f0 2d       	mov	r31, r0
    1ac2:	b1 2c       	mov	r11, r1
    1ac4:	c1 2c       	mov	r12, r1
    1ac6:	d1 2c       	mov	r13, r1
    1ac8:	e1 2c       	mov	r14, r1
    1aca:	f1 2c       	mov	r15, r1
    1acc:	00 e0       	ldi	r16, 0x00	; 0
    1ace:	10 e0       	ldi	r17, 0x00	; 0
    1ad0:	28 85       	ldd	r18, Y+8	; 0x08
    1ad2:	39 85       	ldd	r19, Y+9	; 0x09
    1ad4:	49 2d       	mov	r20, r9
    1ad6:	58 2d       	mov	r21, r8
    1ad8:	65 2d       	mov	r22, r5
    1ada:	74 2d       	mov	r23, r4
    1adc:	83 2d       	mov	r24, r3
    1ade:	92 2d       	mov	r25, r2
    1ae0:	0e 94 65 33 	call	0x66ca	; 0x66ca <__udivdi3>
    1ae4:	28 87       	std	Y+8, r18	; 0x08
    1ae6:	39 87       	std	Y+9, r19	; 0x09
    1ae8:	94 2e       	mov	r9, r20
    1aea:	85 2e       	mov	r8, r21
    1aec:	56 2e       	mov	r5, r22
    1aee:	47 2e       	mov	r4, r23
    1af0:	38 2e       	mov	r3, r24
    1af2:	29 2e       	mov	r2, r25
	if (thenumber==0)
	{
		the_return[0]='0';
		return 1;
	}
	while (thenumber/the_scaler==0)
    1af4:	a2 2e       	mov	r10, r18
    1af6:	b3 2e       	mov	r11, r19
    1af8:	c4 2e       	mov	r12, r20
    1afa:	d5 2e       	mov	r13, r21
    1afc:	e6 2e       	mov	r14, r22
    1afe:	f7 2e       	mov	r15, r23
    1b00:	08 2f       	mov	r16, r24
    1b02:	19 2f       	mov	r17, r25
    1b04:	29 81       	ldd	r18, Y+1	; 0x01
    1b06:	3a 81       	ldd	r19, Y+2	; 0x02
    1b08:	4b 81       	ldd	r20, Y+3	; 0x03
    1b0a:	5c 81       	ldd	r21, Y+4	; 0x04
    1b0c:	6d 81       	ldd	r22, Y+5	; 0x05
    1b0e:	7e 81       	ldd	r23, Y+6	; 0x06
    1b10:	86 2d       	mov	r24, r6
    1b12:	97 2d       	mov	r25, r7
    1b14:	0e 94 65 33 	call	0x66ca	; 0x66ca <__udivdi3>
    1b18:	a0 e0       	ldi	r26, 0x00	; 0
    1b1a:	0e 94 1d 34 	call	0x683a	; 0x683a <__cmpdi2_s8>
    1b1e:	69 f2       	breq	.-102    	; 0x1aba <inttostring+0x11e>
    1b20:	9a 86       	std	Y+10, r9	; 0x0a
    1b22:	8b 86       	std	Y+11, r8	; 0x0b
    1b24:	5c 86       	std	Y+12, r5	; 0x0c
    1b26:	4d 86       	std	Y+13, r4	; 0x0d
    1b28:	3e 86       	std	Y+14, r3	; 0x0e
    1b2a:	2f 86       	std	Y+15, r2	; 0x0f
    1b2c:	29 81       	ldd	r18, Y+1	; 0x01
    1b2e:	2c 8b       	std	Y+20, r18	; 0x14
    1b30:	8a 81       	ldd	r24, Y+2	; 0x02
    1b32:	88 8b       	std	Y+16, r24	; 0x10
    1b34:	2b 80       	ldd	r2, Y+3	; 0x03
    1b36:	3c 80       	ldd	r3, Y+4	; 0x04
    1b38:	4d 80       	ldd	r4, Y+5	; 0x05
    1b3a:	5e 80       	ldd	r5, Y+6	; 0x06
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    1b3c:	8a 88       	ldd	r8, Y+18	; 0x12
    1b3e:	9b 88       	ldd	r9, Y+19	; 0x13
    1b40:	9f 81       	ldd	r25, Y+7	; 0x07
    1b42:	89 0e       	add	r8, r25
    1b44:	91 1c       	adc	r9, r1
    1b46:	38 2f       	mov	r19, r24
    1b48:	42 2d       	mov	r20, r2
    1b4a:	53 2d       	mov	r21, r3
    1b4c:	64 2d       	mov	r22, r4
    1b4e:	75 2d       	mov	r23, r5
    1b50:	86 2d       	mov	r24, r6
    1b52:	97 2d       	mov	r25, r7
    1b54:	0e 94 65 33 	call	0x66ca	; 0x66ca <__udivdi3>
    1b58:	20 5d       	subi	r18, 0xD0	; 208
    1b5a:	f4 01       	movw	r30, r8
    1b5c:	20 83       	st	Z, r18
			counter++;
    1b5e:	ff 81       	ldd	r31, Y+7	; 0x07
    1b60:	ff 5f       	subi	r31, 0xFF	; 255
    1b62:	ff 83       	std	Y+7, r31	; 0x07
			thenumber=thenumber%the_scaler;
    1b64:	2c 89       	ldd	r18, Y+20	; 0x14
    1b66:	38 89       	ldd	r19, Y+16	; 0x10
    1b68:	42 2d       	mov	r20, r2
    1b6a:	53 2d       	mov	r21, r3
    1b6c:	64 2d       	mov	r22, r4
    1b6e:	75 2d       	mov	r23, r5
    1b70:	86 2d       	mov	r24, r6
    1b72:	97 2d       	mov	r25, r7
    1b74:	0e 94 63 33 	call	0x66c6	; 0x66c6 <__umoddi3>
    1b78:	29 83       	std	Y+1, r18	; 0x01
    1b7a:	3a 83       	std	Y+2, r19	; 0x02
    1b7c:	4b 83       	std	Y+3, r20	; 0x03
    1b7e:	5c 83       	std	Y+4, r21	; 0x04
    1b80:	6d 83       	std	Y+5, r22	; 0x05
    1b82:	7e 83       	std	Y+6, r23	; 0x06
    1b84:	38 2e       	mov	r3, r24
    1b86:	29 2e       	mov	r2, r25
			if (the_scaler==1)
    1b88:	2a 2d       	mov	r18, r10
    1b8a:	3b 2d       	mov	r19, r11
    1b8c:	4c 2d       	mov	r20, r12
    1b8e:	5d 2d       	mov	r21, r13
    1b90:	6e 2d       	mov	r22, r14
    1b92:	7f 2d       	mov	r23, r15
    1b94:	80 2f       	mov	r24, r16
    1b96:	91 2f       	mov	r25, r17
    1b98:	a1 e0       	ldi	r26, 0x01	; 1
    1b9a:	0e 94 1d 34 	call	0x683a	; 0x683a <__cmpdi2_s8>
    1b9e:	09 f4       	brne	.+2      	; 0x1ba2 <inttostring+0x206>
    1ba0:	65 c0       	rjmp	.+202    	; 0x1c6c <inttostring+0x2d0>
			{
				break;
			}
			the_scaler=the_scaler/10;
    1ba2:	0f 2e       	mov	r0, r31
    1ba4:	fa e0       	ldi	r31, 0x0A	; 10
    1ba6:	af 2e       	mov	r10, r31
    1ba8:	f0 2d       	mov	r31, r0
    1baa:	b1 2c       	mov	r11, r1
    1bac:	c1 2c       	mov	r12, r1
    1bae:	d1 2c       	mov	r13, r1
    1bb0:	e1 2c       	mov	r14, r1
    1bb2:	f1 2c       	mov	r15, r1
    1bb4:	00 e0       	ldi	r16, 0x00	; 0
    1bb6:	10 e0       	ldi	r17, 0x00	; 0
    1bb8:	28 85       	ldd	r18, Y+8	; 0x08
    1bba:	39 85       	ldd	r19, Y+9	; 0x09
    1bbc:	4a 85       	ldd	r20, Y+10	; 0x0a
    1bbe:	5b 85       	ldd	r21, Y+11	; 0x0b
    1bc0:	6c 85       	ldd	r22, Y+12	; 0x0c
    1bc2:	7d 85       	ldd	r23, Y+13	; 0x0d
    1bc4:	8e 85       	ldd	r24, Y+14	; 0x0e
    1bc6:	9f 85       	ldd	r25, Y+15	; 0x0f
    1bc8:	0e 94 65 33 	call	0x66ca	; 0x66ca <__udivdi3>
    1bcc:	42 2e       	mov	r4, r18
    1bce:	53 2e       	mov	r5, r19
    1bd0:	64 2e       	mov	r6, r20
    1bd2:	75 2e       	mov	r7, r21
    1bd4:	86 2e       	mov	r8, r22
    1bd6:	97 2e       	mov	r9, r23
    1bd8:	8d 8b       	std	Y+21, r24	; 0x15
    1bda:	9c 8b       	std	Y+20, r25	; 0x14
    1bdc:	28 87       	std	Y+8, r18	; 0x08
    1bde:	39 87       	std	Y+9, r19	; 0x09
    1be0:	4a 87       	std	Y+10, r20	; 0x0a
    1be2:	5b 87       	std	Y+11, r21	; 0x0b
    1be4:	6c 87       	std	Y+12, r22	; 0x0c
    1be6:	7d 87       	std	Y+13, r23	; 0x0d
    1be8:	8e 87       	std	Y+14, r24	; 0x0e
    1bea:	9f 87       	std	Y+15, r25	; 0x0f
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    1bec:	8a 89       	ldd	r24, Y+18	; 0x12
    1bee:	9b 89       	ldd	r25, Y+19	; 0x13
    1bf0:	ef 81       	ldd	r30, Y+7	; 0x07
    1bf2:	8e 0f       	add	r24, r30
    1bf4:	91 1d       	adc	r25, r1
    1bf6:	99 8b       	std	Y+17, r25	; 0x11
    1bf8:	88 8b       	std	Y+16, r24	; 0x10
    1bfa:	a4 2c       	mov	r10, r4
    1bfc:	b5 2c       	mov	r11, r5
    1bfe:	c6 2c       	mov	r12, r6
    1c00:	d7 2c       	mov	r13, r7
    1c02:	e8 2c       	mov	r14, r8
    1c04:	f9 2c       	mov	r15, r9
    1c06:	0d 89       	ldd	r16, Y+21	; 0x15
    1c08:	1c 89       	ldd	r17, Y+20	; 0x14
    1c0a:	29 81       	ldd	r18, Y+1	; 0x01
    1c0c:	3a 81       	ldd	r19, Y+2	; 0x02
    1c0e:	4b 81       	ldd	r20, Y+3	; 0x03
    1c10:	5c 81       	ldd	r21, Y+4	; 0x04
    1c12:	6d 81       	ldd	r22, Y+5	; 0x05
    1c14:	7e 81       	ldd	r23, Y+6	; 0x06
    1c16:	83 2d       	mov	r24, r3
    1c18:	92 2d       	mov	r25, r2
    1c1a:	0e 94 65 33 	call	0x66ca	; 0x66ca <__udivdi3>
    1c1e:	20 5d       	subi	r18, 0xD0	; 208
    1c20:	e8 89       	ldd	r30, Y+16	; 0x10
    1c22:	f9 89       	ldd	r31, Y+17	; 0x11
    1c24:	20 83       	st	Z, r18
			counter++;
    1c26:	ff 81       	ldd	r31, Y+7	; 0x07
    1c28:	ff 5f       	subi	r31, 0xFF	; 255
    1c2a:	ff 83       	std	Y+7, r31	; 0x07
			thenumber=thenumber%the_scaler;
    1c2c:	29 81       	ldd	r18, Y+1	; 0x01
    1c2e:	3a 81       	ldd	r19, Y+2	; 0x02
    1c30:	4b 81       	ldd	r20, Y+3	; 0x03
    1c32:	5c 81       	ldd	r21, Y+4	; 0x04
    1c34:	6d 81       	ldd	r22, Y+5	; 0x05
    1c36:	7e 81       	ldd	r23, Y+6	; 0x06
    1c38:	83 2d       	mov	r24, r3
    1c3a:	92 2d       	mov	r25, r2
    1c3c:	0e 94 63 33 	call	0x66c6	; 0x66c6 <__umoddi3>
    1c40:	29 83       	std	Y+1, r18	; 0x01
    1c42:	3a 83       	std	Y+2, r19	; 0x02
    1c44:	4b 83       	std	Y+3, r20	; 0x03
    1c46:	5c 83       	std	Y+4, r21	; 0x04
    1c48:	6d 83       	std	Y+5, r22	; 0x05
    1c4a:	7e 83       	std	Y+6, r23	; 0x06
    1c4c:	38 2e       	mov	r3, r24
    1c4e:	29 2e       	mov	r2, r25
			if (the_scaler==1)
    1c50:	24 2d       	mov	r18, r4
    1c52:	35 2d       	mov	r19, r5
    1c54:	46 2d       	mov	r20, r6
    1c56:	57 2d       	mov	r21, r7
    1c58:	68 2d       	mov	r22, r8
    1c5a:	79 2d       	mov	r23, r9
    1c5c:	80 2f       	mov	r24, r16
    1c5e:	91 2f       	mov	r25, r17
    1c60:	a1 e0       	ldi	r26, 0x01	; 1
    1c62:	0e 94 1d 34 	call	0x683a	; 0x683a <__cmpdi2_s8>
    1c66:	09 f0       	breq	.+2      	; 0x1c6a <inttostring+0x2ce>
    1c68:	9c cf       	rjmp	.-200    	; 0x1ba2 <inttostring+0x206>
    1c6a:	02 c0       	rjmp	.+4      	; 0x1c70 <inttostring+0x2d4>
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
			counter++;
    1c6c:	8f 81       	ldd	r24, Y+7	; 0x07
    1c6e:	4e c0       	rjmp	.+156    	; 0x1d0c <inttostring+0x370>
    1c70:	8f 81       	ldd	r24, Y+7	; 0x07
    1c72:	4c c0       	rjmp	.+152    	; 0x1d0c <inttostring+0x370>
		the_scaler=the_scaler/10;
	}
	
	do 
	{
			the_return[counter]=(thenumber/the_scaler)+48;
    1c74:	6a 88       	ldd	r6, Y+18	; 0x12
    1c76:	7b 88       	ldd	r7, Y+19	; 0x13
    1c78:	2f 81       	ldd	r18, Y+7	; 0x07
    1c7a:	62 0e       	add	r6, r18
    1c7c:	71 1c       	adc	r7, r1
    1c7e:	a1 2c       	mov	r10, r1
    1c80:	0f 2e       	mov	r0, r31
    1c82:	f0 ea       	ldi	r31, 0xA0	; 160
    1c84:	bf 2e       	mov	r11, r31
    1c86:	f0 2d       	mov	r31, r0
    1c88:	0f 2e       	mov	r0, r31
    1c8a:	f2 e7       	ldi	r31, 0x72	; 114
    1c8c:	cf 2e       	mov	r12, r31
    1c8e:	f0 2d       	mov	r31, r0
    1c90:	0f 2e       	mov	r0, r31
    1c92:	fe e4       	ldi	r31, 0x4E	; 78
    1c94:	df 2e       	mov	r13, r31
    1c96:	f0 2d       	mov	r31, r0
    1c98:	0f 2e       	mov	r0, r31
    1c9a:	f8 e1       	ldi	r31, 0x18	; 24
    1c9c:	ef 2e       	mov	r14, r31
    1c9e:	f0 2d       	mov	r31, r0
    1ca0:	0f 2e       	mov	r0, r31
    1ca2:	f9 e0       	ldi	r31, 0x09	; 9
    1ca4:	ff 2e       	mov	r15, r31
    1ca6:	f0 2d       	mov	r31, r0
    1ca8:	00 e0       	ldi	r16, 0x00	; 0
    1caa:	10 e0       	ldi	r17, 0x00	; 0
    1cac:	29 81       	ldd	r18, Y+1	; 0x01
    1cae:	3a 81       	ldd	r19, Y+2	; 0x02
    1cb0:	4b 81       	ldd	r20, Y+3	; 0x03
    1cb2:	5c 81       	ldd	r21, Y+4	; 0x04
    1cb4:	6d 81       	ldd	r22, Y+5	; 0x05
    1cb6:	7e 81       	ldd	r23, Y+6	; 0x06
    1cb8:	88 2d       	mov	r24, r8
    1cba:	99 2d       	mov	r25, r9
    1cbc:	0e 94 65 33 	call	0x66ca	; 0x66ca <__udivdi3>
    1cc0:	20 5d       	subi	r18, 0xD0	; 208
    1cc2:	f3 01       	movw	r30, r6
    1cc4:	20 83       	st	Z, r18
			counter++;
    1cc6:	ff 81       	ldd	r31, Y+7	; 0x07
    1cc8:	ff 5f       	subi	r31, 0xFF	; 255
    1cca:	ff 83       	std	Y+7, r31	; 0x07
			thenumber=thenumber%the_scaler;
    1ccc:	29 81       	ldd	r18, Y+1	; 0x01
    1cce:	3a 81       	ldd	r19, Y+2	; 0x02
    1cd0:	4b 81       	ldd	r20, Y+3	; 0x03
    1cd2:	5c 81       	ldd	r21, Y+4	; 0x04
    1cd4:	6d 81       	ldd	r22, Y+5	; 0x05
    1cd6:	7e 81       	ldd	r23, Y+6	; 0x06
    1cd8:	88 2d       	mov	r24, r8
    1cda:	99 2d       	mov	r25, r9
    1cdc:	0e 94 63 33 	call	0x66c6	; 0x66c6 <__umoddi3>
    1ce0:	29 83       	std	Y+1, r18	; 0x01
    1ce2:	3a 83       	std	Y+2, r19	; 0x02
    1ce4:	4b 83       	std	Y+3, r20	; 0x03
    1ce6:	5c 83       	std	Y+4, r21	; 0x04
    1ce8:	6d 83       	std	Y+5, r22	; 0x05
    1cea:	7e 83       	std	Y+6, r23	; 0x06
    1cec:	38 2e       	mov	r3, r24
    1cee:	29 2e       	mov	r2, r25
    1cf0:	18 86       	std	Y+8, r1	; 0x08
    1cf2:	20 ea       	ldi	r18, 0xA0	; 160
    1cf4:	29 87       	std	Y+9, r18	; 0x09
    1cf6:	82 e7       	ldi	r24, 0x72	; 114
    1cf8:	8a 87       	std	Y+10, r24	; 0x0a
    1cfa:	9e e4       	ldi	r25, 0x4E	; 78
    1cfc:	9b 87       	std	Y+11, r25	; 0x0b
    1cfe:	e8 e1       	ldi	r30, 0x18	; 24
    1d00:	ec 87       	std	Y+12, r30	; 0x0c
    1d02:	f9 e0       	ldi	r31, 0x09	; 9
    1d04:	fd 87       	std	Y+13, r31	; 0x0d
    1d06:	1e 86       	std	Y+14, r1	; 0x0e
    1d08:	1f 86       	std	Y+15, r1	; 0x0f
    1d0a:	4b cf       	rjmp	.-362    	; 0x1ba2 <inttostring+0x206>
			the_scaler=the_scaler/10;
	} while (1);

	
	return counter;
}
    1d0c:	65 96       	adiw	r28, 0x15	; 21
    1d0e:	0f b6       	in	r0, 0x3f	; 63
    1d10:	f8 94       	cli
    1d12:	de bf       	out	0x3e, r29	; 62
    1d14:	0f be       	out	0x3f, r0	; 63
    1d16:	cd bf       	out	0x3d, r28	; 61
    1d18:	df 91       	pop	r29
    1d1a:	cf 91       	pop	r28
    1d1c:	1f 91       	pop	r17
    1d1e:	0f 91       	pop	r16
    1d20:	ff 90       	pop	r15
    1d22:	ef 90       	pop	r14
    1d24:	df 90       	pop	r13
    1d26:	cf 90       	pop	r12
    1d28:	bf 90       	pop	r11
    1d2a:	af 90       	pop	r10
    1d2c:	9f 90       	pop	r9
    1d2e:	8f 90       	pop	r8
    1d30:	7f 90       	pop	r7
    1d32:	6f 90       	pop	r6
    1d34:	5f 90       	pop	r5
    1d36:	4f 90       	pop	r4
    1d38:	3f 90       	pop	r3
    1d3a:	2f 90       	pop	r2
    1d3c:	08 95       	ret

00001d3e <STRINGTOINT>:

unsigned long long STRINGTOINT(unsigned char * the_return,unsigned char size)
{
    1d3e:	4f 92       	push	r4
    1d40:	5f 92       	push	r5
    1d42:	6f 92       	push	r6
    1d44:	7f 92       	push	r7
    1d46:	8f 92       	push	r8
    1d48:	9f 92       	push	r9
    1d4a:	af 92       	push	r10
    1d4c:	bf 92       	push	r11
    1d4e:	cf 92       	push	r12
    1d50:	df 92       	push	r13
    1d52:	ef 92       	push	r14
    1d54:	ff 92       	push	r15
    1d56:	0f 93       	push	r16
    1d58:	1f 93       	push	r17
    1d5a:	cf 93       	push	r28
    1d5c:	df 93       	push	r29
    1d5e:	86 2e       	mov	r8, r22
	unsigned char i=0;
	unsigned long long result=0;
	for (i=0;i<size;i++)
    1d60:	66 23       	and	r22, r22
    1d62:	09 f4       	brne	.+2      	; 0x1d66 <STRINGTOINT+0x28>
    1d64:	47 c0       	rjmp	.+142    	; 0x1df4 <STRINGTOINT+0xb6>
    1d66:	78 2e       	mov	r7, r24
    1d68:	a8 2f       	mov	r26, r24
    1d6a:	b9 2f       	mov	r27, r25
}

unsigned long long STRINGTOINT(unsigned char * the_return,unsigned char size)
{
	unsigned char i=0;
	unsigned long long result=0;
    1d6c:	20 e0       	ldi	r18, 0x00	; 0
    1d6e:	30 e0       	ldi	r19, 0x00	; 0
    1d70:	40 e0       	ldi	r20, 0x00	; 0
    1d72:	50 e0       	ldi	r21, 0x00	; 0
    1d74:	60 e0       	ldi	r22, 0x00	; 0
    1d76:	70 e0       	ldi	r23, 0x00	; 0
    1d78:	80 e0       	ldi	r24, 0x00	; 0
    1d7a:	90 e0       	ldi	r25, 0x00	; 0
	for (i=0;i<size;i++)
	{
		result*=10;
    1d7c:	01 e0       	ldi	r16, 0x01	; 1
    1d7e:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    1d82:	42 2e       	mov	r4, r18
    1d84:	53 2e       	mov	r5, r19
    1d86:	64 2e       	mov	r6, r20
    1d88:	95 2e       	mov	r9, r21
    1d8a:	d6 2f       	mov	r29, r22
    1d8c:	c7 2f       	mov	r28, r23
    1d8e:	f8 2f       	mov	r31, r24
    1d90:	e9 2f       	mov	r30, r25
    1d92:	02 e0       	ldi	r16, 0x02	; 2
    1d94:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    1d98:	a2 2e       	mov	r10, r18
    1d9a:	b3 2e       	mov	r11, r19
    1d9c:	c4 2e       	mov	r12, r20
    1d9e:	d5 2e       	mov	r13, r21
    1da0:	e6 2e       	mov	r14, r22
    1da2:	f7 2e       	mov	r15, r23
    1da4:	08 2f       	mov	r16, r24
    1da6:	19 2f       	mov	r17, r25
    1da8:	24 2d       	mov	r18, r4
    1daa:	35 2d       	mov	r19, r5
    1dac:	46 2d       	mov	r20, r6
    1dae:	59 2d       	mov	r21, r9
    1db0:	6d 2f       	mov	r22, r29
    1db2:	7c 2f       	mov	r23, r28
    1db4:	8f 2f       	mov	r24, r31
    1db6:	9e 2f       	mov	r25, r30
    1db8:	0e 94 08 34 	call	0x6810	; 0x6810 <__adddi3>
    1dbc:	a2 2e       	mov	r10, r18
    1dbe:	b3 2e       	mov	r11, r19
    1dc0:	c4 2e       	mov	r12, r20
    1dc2:	d5 2e       	mov	r13, r21
    1dc4:	e6 2e       	mov	r14, r22
    1dc6:	f7 2e       	mov	r15, r23
    1dc8:	08 2f       	mov	r16, r24
    1dca:	19 2f       	mov	r17, r25
		result+=(the_return[i]-48);
    1dcc:	ed 91       	ld	r30, X+
    1dce:	f0 e0       	ldi	r31, 0x00	; 0
    1dd0:	f0 97       	sbiw	r30, 0x30	; 48
    1dd2:	9f 2f       	mov	r25, r31
    1dd4:	99 0f       	add	r25, r25
    1dd6:	99 0b       	sbc	r25, r25
    1dd8:	2e 2f       	mov	r18, r30
    1dda:	3f 2f       	mov	r19, r31
    1ddc:	49 2f       	mov	r20, r25
    1dde:	59 2f       	mov	r21, r25
    1de0:	69 2f       	mov	r22, r25
    1de2:	79 2f       	mov	r23, r25
    1de4:	89 2f       	mov	r24, r25
    1de6:	0e 94 08 34 	call	0x6810	; 0x6810 <__adddi3>
    1dea:	ea 2f       	mov	r30, r26
    1dec:	e7 19       	sub	r30, r7

unsigned long long STRINGTOINT(unsigned char * the_return,unsigned char size)
{
	unsigned char i=0;
	unsigned long long result=0;
	for (i=0;i<size;i++)
    1dee:	e8 15       	cp	r30, r8
    1df0:	28 f2       	brcs	.-118    	; 0x1d7c <STRINGTOINT+0x3e>
    1df2:	08 c0       	rjmp	.+16     	; 0x1e04 <STRINGTOINT+0xc6>
}

unsigned long long STRINGTOINT(unsigned char * the_return,unsigned char size)
{
	unsigned char i=0;
	unsigned long long result=0;
    1df4:	20 e0       	ldi	r18, 0x00	; 0
    1df6:	30 e0       	ldi	r19, 0x00	; 0
    1df8:	40 e0       	ldi	r20, 0x00	; 0
    1dfa:	50 e0       	ldi	r21, 0x00	; 0
    1dfc:	60 e0       	ldi	r22, 0x00	; 0
    1dfe:	70 e0       	ldi	r23, 0x00	; 0
    1e00:	80 e0       	ldi	r24, 0x00	; 0
    1e02:	90 e0       	ldi	r25, 0x00	; 0
	{
		result*=10;
		result+=(the_return[i]-48);
	}
	return result;
    1e04:	df 91       	pop	r29
    1e06:	cf 91       	pop	r28
    1e08:	1f 91       	pop	r17
    1e0a:	0f 91       	pop	r16
    1e0c:	ff 90       	pop	r15
    1e0e:	ef 90       	pop	r14
    1e10:	df 90       	pop	r13
    1e12:	cf 90       	pop	r12
    1e14:	bf 90       	pop	r11
    1e16:	af 90       	pop	r10
    1e18:	9f 90       	pop	r9
    1e1a:	8f 90       	pop	r8
    1e1c:	7f 90       	pop	r7
    1e1e:	6f 90       	pop	r6
    1e20:	5f 90       	pop	r5
    1e22:	4f 90       	pop	r4
    1e24:	08 95       	ret

00001e26 <NRF_SPI_EXCHANGE>:

void NRF_UPDATE_RET_PL(NRF_RETRANSMIT_COUNT_DT RET)
{
	NRF1.NRF_SETUP_RETR&=0B11110000;
	NRF1.NRF_SETUP_RETR|=RET;	
	NRF_WRITE_REGISTER(NRF_SETUP_RETR_ADDRESS,NRF1.NRF_SETUP_RETR);
    1e26:	8f b9       	out	0x0f, r24	; 15
    1e28:	77 9b       	sbis	0x0e, 7	; 14
    1e2a:	fe cf       	rjmp	.-4      	; 0x1e28 <NRF_SPI_EXCHANGE+0x2>
    1e2c:	8f b1       	in	r24, 0x0f	; 15
    1e2e:	08 95       	ret

00001e30 <NRF_WRITE_REGISTER>:
    1e30:	cf 93       	push	r28
    1e32:	c6 2f       	mov	r28, r22
    1e34:	1f 98       	cbi	0x03, 7	; 3
    1e36:	80 62       	ori	r24, 0x20	; 32
    1e38:	f6 df       	rcall	.-20     	; 0x1e26 <NRF_SPI_EXCHANGE>
    1e3a:	80 93 ad 03 	sts	0x03AD, r24
    1e3e:	8c 2f       	mov	r24, r28
    1e40:	f2 df       	rcall	.-28     	; 0x1e26 <NRF_SPI_EXCHANGE>
    1e42:	1f 9a       	sbi	0x03, 7	; 3
    1e44:	8f e9       	ldi	r24, 0x9F	; 159
    1e46:	9f e0       	ldi	r25, 0x0F	; 15
    1e48:	01 97       	sbiw	r24, 0x01	; 1
    1e4a:	f1 f7       	brne	.-4      	; 0x1e48 <NRF_WRITE_REGISTER+0x18>
    1e4c:	00 c0       	rjmp	.+0      	; 0x1e4e <NRF_WRITE_REGISTER+0x1e>
    1e4e:	00 00       	nop
    1e50:	cf 91       	pop	r28
    1e52:	08 95       	ret

00001e54 <NRF_READ_REGISTER>:
    1e54:	1f 98       	cbi	0x03, 7	; 3
    1e56:	e7 df       	rcall	.-50     	; 0x1e26 <NRF_SPI_EXCHANGE>
    1e58:	80 93 ad 03 	sts	0x03AD, r24
    1e5c:	8f ef       	ldi	r24, 0xFF	; 255
    1e5e:	e3 df       	rcall	.-58     	; 0x1e26 <NRF_SPI_EXCHANGE>
    1e60:	1f 9a       	sbi	0x03, 7	; 3
    1e62:	ef e9       	ldi	r30, 0x9F	; 159
    1e64:	ff e0       	ldi	r31, 0x0F	; 15
    1e66:	31 97       	sbiw	r30, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <NRF_READ_REGISTER+0x12>
    1e6a:	00 c0       	rjmp	.+0      	; 0x1e6c <NRF_READ_REGISTER+0x18>
    1e6c:	00 00       	nop
    1e6e:	08 95       	ret

00001e70 <NRF_R_RX_PAYLOAD_DYNAMIC>:
    1e70:	ff 92       	push	r15
    1e72:	0f 93       	push	r16
    1e74:	1f 93       	push	r17
    1e76:	cf 93       	push	r28
    1e78:	df 93       	push	r29
    1e7a:	f8 2e       	mov	r15, r24
    1e7c:	19 2f       	mov	r17, r25
    1e7e:	06 2f       	mov	r16, r22
    1e80:	1f 98       	cbi	0x03, 7	; 3
    1e82:	81 e6       	ldi	r24, 0x61	; 97
    1e84:	d0 df       	rcall	.-96     	; 0x1e26 <NRF_SPI_EXCHANGE>
    1e86:	80 93 ad 03 	sts	0x03AD, r24
    1e8a:	00 23       	and	r16, r16
    1e8c:	49 f0       	breq	.+18     	; 0x1ea0 <NRF_R_RX_PAYLOAD_DYNAMIC+0x30>
    1e8e:	cf 2d       	mov	r28, r15
    1e90:	d1 2f       	mov	r29, r17
    1e92:	10 e0       	ldi	r17, 0x00	; 0
    1e94:	8f ef       	ldi	r24, 0xFF	; 255
    1e96:	c7 df       	rcall	.-114    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1e98:	89 93       	st	Y+, r24
    1e9a:	1f 5f       	subi	r17, 0xFF	; 255
    1e9c:	10 13       	cpse	r17, r16
    1e9e:	fa cf       	rjmp	.-12     	; 0x1e94 <NRF_R_RX_PAYLOAD_DYNAMIC+0x24>
    1ea0:	1f 9a       	sbi	0x03, 7	; 3
    1ea2:	df 91       	pop	r29
    1ea4:	cf 91       	pop	r28
    1ea6:	1f 91       	pop	r17
    1ea8:	0f 91       	pop	r16
    1eaa:	ff 90       	pop	r15
    1eac:	08 95       	ret

00001eae <NRF_W_TX_PAYLOAD_ACK>:
    1eae:	ff 92       	push	r15
    1eb0:	0f 93       	push	r16
    1eb2:	1f 93       	push	r17
    1eb4:	cf 93       	push	r28
    1eb6:	df 93       	push	r29
    1eb8:	f8 2e       	mov	r15, r24
    1eba:	19 2f       	mov	r17, r25
    1ebc:	06 2f       	mov	r16, r22
    1ebe:	1f 98       	cbi	0x03, 7	; 3
    1ec0:	80 ea       	ldi	r24, 0xA0	; 160
    1ec2:	b1 df       	rcall	.-158    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1ec4:	80 93 ad 03 	sts	0x03AD, r24
    1ec8:	00 23       	and	r16, r16
    1eca:	41 f0       	breq	.+16     	; 0x1edc <NRF_W_TX_PAYLOAD_ACK+0x2e>
    1ecc:	cf 2d       	mov	r28, r15
    1ece:	d1 2f       	mov	r29, r17
    1ed0:	10 e0       	ldi	r17, 0x00	; 0
    1ed2:	89 91       	ld	r24, Y+
    1ed4:	a8 df       	rcall	.-176    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1ed6:	1f 5f       	subi	r17, 0xFF	; 255
    1ed8:	10 13       	cpse	r17, r16
    1eda:	fb cf       	rjmp	.-10     	; 0x1ed2 <NRF_W_TX_PAYLOAD_ACK+0x24>
    1edc:	1f 9a       	sbi	0x03, 7	; 3
    1ede:	df 91       	pop	r29
    1ee0:	cf 91       	pop	r28
    1ee2:	1f 91       	pop	r17
    1ee4:	0f 91       	pop	r16
    1ee6:	ff 90       	pop	r15
    1ee8:	08 95       	ret

00001eea <NRF_FLUSH_TX_BUFFER>:
    1eea:	1f 98       	cbi	0x03, 7	; 3
    1eec:	81 ee       	ldi	r24, 0xE1	; 225
    1eee:	9b df       	rcall	.-202    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1ef0:	80 93 ad 03 	sts	0x03AD, r24
    1ef4:	1f 9a       	sbi	0x03, 7	; 3
    1ef6:	08 95       	ret

00001ef8 <NRF_FLUSH_RX_BUFFER>:
    1ef8:	1f 98       	cbi	0x03, 7	; 3
    1efa:	82 ee       	ldi	r24, 0xE2	; 226
    1efc:	94 df       	rcall	.-216    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1efe:	80 93 ad 03 	sts	0x03AD, r24
    1f02:	1f 9a       	sbi	0x03, 7	; 3
    1f04:	08 95       	ret

00001f06 <NRF_READ_LENGTH_RX_PL>:
    1f06:	1f 98       	cbi	0x03, 7	; 3
    1f08:	80 e6       	ldi	r24, 0x60	; 96
    1f0a:	8d df       	rcall	.-230    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1f0c:	80 93 ad 03 	sts	0x03AD, r24
    1f10:	8f ef       	ldi	r24, 0xFF	; 255
    1f12:	89 df       	rcall	.-238    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1f14:	1f 9a       	sbi	0x03, 7	; 3
    1f16:	08 95       	ret

00001f18 <NRF_READ_RX_DR_AND_CLEAR>:
    1f18:	cf 93       	push	r28
    1f1a:	df 93       	push	r29
    1f1c:	1f 92       	push	r1
    1f1e:	cd b7       	in	r28, 0x3d	; 61
    1f20:	de b7       	in	r29, 0x3e	; 62
    1f22:	87 e0       	ldi	r24, 0x07	; 7
    1f24:	97 df       	rcall	.-210    	; 0x1e54 <NRF_READ_REGISTER>
    1f26:	89 83       	std	Y+1, r24	; 0x01
    1f28:	99 81       	ldd	r25, Y+1	; 0x01
    1f2a:	89 2f       	mov	r24, r25
    1f2c:	80 74       	andi	r24, 0x40	; 64
    1f2e:	96 ff       	sbrs	r25, 6
    1f30:	04 c0       	rjmp	.+8      	; 0x1f3a <NRF_READ_RX_DR_AND_CLEAR+0x22>
    1f32:	69 81       	ldd	r22, Y+1	; 0x01
    1f34:	87 e0       	ldi	r24, 0x07	; 7
    1f36:	7c df       	rcall	.-264    	; 0x1e30 <NRF_WRITE_REGISTER>
    1f38:	81 e0       	ldi	r24, 0x01	; 1
    1f3a:	0f 90       	pop	r0
    1f3c:	df 91       	pop	r29
    1f3e:	cf 91       	pop	r28
    1f40:	08 95       	ret

00001f42 <NRF_READ_TX_DS_AND_CLEAR>:
    1f42:	cf 93       	push	r28
    1f44:	df 93       	push	r29
    1f46:	1f 92       	push	r1
    1f48:	cd b7       	in	r28, 0x3d	; 61
    1f4a:	de b7       	in	r29, 0x3e	; 62
    1f4c:	87 e0       	ldi	r24, 0x07	; 7
    1f4e:	82 df       	rcall	.-252    	; 0x1e54 <NRF_READ_REGISTER>
    1f50:	89 83       	std	Y+1, r24	; 0x01
    1f52:	99 81       	ldd	r25, Y+1	; 0x01
    1f54:	89 2f       	mov	r24, r25
    1f56:	80 72       	andi	r24, 0x20	; 32
    1f58:	95 ff       	sbrs	r25, 5
    1f5a:	04 c0       	rjmp	.+8      	; 0x1f64 <NRF_READ_TX_DS_AND_CLEAR+0x22>
    1f5c:	69 81       	ldd	r22, Y+1	; 0x01
    1f5e:	87 e0       	ldi	r24, 0x07	; 7
    1f60:	67 df       	rcall	.-306    	; 0x1e30 <NRF_WRITE_REGISTER>
    1f62:	81 e0       	ldi	r24, 0x01	; 1
    1f64:	0f 90       	pop	r0
    1f66:	df 91       	pop	r29
    1f68:	cf 91       	pop	r28
    1f6a:	08 95       	ret

00001f6c <NRF_READ_MAX_RT_AND_CLEAR>:
    1f6c:	cf 93       	push	r28
    1f6e:	df 93       	push	r29
    1f70:	1f 92       	push	r1
    1f72:	cd b7       	in	r28, 0x3d	; 61
    1f74:	de b7       	in	r29, 0x3e	; 62
    1f76:	87 e0       	ldi	r24, 0x07	; 7
    1f78:	6d df       	rcall	.-294    	; 0x1e54 <NRF_READ_REGISTER>
    1f7a:	89 83       	std	Y+1, r24	; 0x01
    1f7c:	99 81       	ldd	r25, Y+1	; 0x01
    1f7e:	89 2f       	mov	r24, r25
    1f80:	80 71       	andi	r24, 0x10	; 16
    1f82:	94 ff       	sbrs	r25, 4
    1f84:	04 c0       	rjmp	.+8      	; 0x1f8e <NRF_READ_MAX_RT_AND_CLEAR+0x22>
    1f86:	69 81       	ldd	r22, Y+1	; 0x01
    1f88:	87 e0       	ldi	r24, 0x07	; 7
    1f8a:	52 df       	rcall	.-348    	; 0x1e30 <NRF_WRITE_REGISTER>
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	0f 90       	pop	r0
    1f90:	df 91       	pop	r29
    1f92:	cf 91       	pop	r28
    1f94:	08 95       	ret

00001f96 <NRF_SET_TX_MODE>:
    1f96:	cf 93       	push	r28
    1f98:	df 93       	push	r29
    1f9a:	1f 92       	push	r1
    1f9c:	cd b7       	in	r28, 0x3d	; 61
    1f9e:	de b7       	in	r29, 0x3e	; 62
    1fa0:	80 e0       	ldi	r24, 0x00	; 0
    1fa2:	58 df       	rcall	.-336    	; 0x1e54 <NRF_READ_REGISTER>
    1fa4:	89 83       	std	Y+1, r24	; 0x01
    1fa6:	89 81       	ldd	r24, Y+1	; 0x01
    1fa8:	8e 7f       	andi	r24, 0xFE	; 254
    1faa:	89 83       	std	Y+1, r24	; 0x01
    1fac:	69 81       	ldd	r22, Y+1	; 0x01
    1fae:	80 e0       	ldi	r24, 0x00	; 0
    1fb0:	3f df       	rcall	.-386    	; 0x1e30 <NRF_WRITE_REGISTER>
    1fb2:	0f 90       	pop	r0
    1fb4:	df 91       	pop	r29
    1fb6:	cf 91       	pop	r28
    1fb8:	08 95       	ret

00001fba <NRF_SET_RX_MODE>:
    1fba:	cf 93       	push	r28
    1fbc:	df 93       	push	r29
    1fbe:	1f 92       	push	r1
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	80 e0       	ldi	r24, 0x00	; 0
    1fc6:	46 df       	rcall	.-372    	; 0x1e54 <NRF_READ_REGISTER>
    1fc8:	89 83       	std	Y+1, r24	; 0x01
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	81 60       	ori	r24, 0x01	; 1
    1fce:	89 83       	std	Y+1, r24	; 0x01
    1fd0:	69 81       	ldd	r22, Y+1	; 0x01
    1fd2:	80 e0       	ldi	r24, 0x00	; 0
    1fd4:	2d df       	rcall	.-422    	; 0x1e30 <NRF_WRITE_REGISTER>
    1fd6:	0f 90       	pop	r0
    1fd8:	df 91       	pop	r29
    1fda:	cf 91       	pop	r28
    1fdc:	08 95       	ret

00001fde <NRF_UPDATE_PIPE_RX_ADDRESS>:
    1fde:	ff 92       	push	r15
    1fe0:	0f 93       	push	r16
    1fe2:	1f 93       	push	r17
    1fe4:	cf 93       	push	r28
    1fe6:	df 93       	push	r29
    1fe8:	f6 2e       	mov	r15, r22
    1fea:	17 2f       	mov	r17, r23
    1fec:	04 2f       	mov	r16, r20
    1fee:	1f 98       	cbi	0x03, 7	; 3
    1ff0:	86 5f       	subi	r24, 0xF6	; 246
    1ff2:	80 62       	ori	r24, 0x20	; 32
    1ff4:	18 df       	rcall	.-464    	; 0x1e26 <NRF_SPI_EXCHANGE>
    1ff6:	80 93 ad 03 	sts	0x03AD, r24
    1ffa:	00 23       	and	r16, r16
    1ffc:	41 f0       	breq	.+16     	; 0x200e <NRF_UPDATE_PIPE_RX_ADDRESS+0x30>
    1ffe:	cf 2d       	mov	r28, r15
    2000:	d1 2f       	mov	r29, r17
    2002:	10 e0       	ldi	r17, 0x00	; 0
    2004:	89 91       	ld	r24, Y+
    2006:	0f df       	rcall	.-482    	; 0x1e26 <NRF_SPI_EXCHANGE>
    2008:	1f 5f       	subi	r17, 0xFF	; 255
    200a:	10 13       	cpse	r17, r16
    200c:	fb cf       	rjmp	.-10     	; 0x2004 <NRF_UPDATE_PIPE_RX_ADDRESS+0x26>
    200e:	1f 9a       	sbi	0x03, 7	; 3
    2010:	df 91       	pop	r29
    2012:	cf 91       	pop	r28
    2014:	1f 91       	pop	r17
    2016:	0f 91       	pop	r16
    2018:	ff 90       	pop	r15
    201a:	08 95       	ret

0000201c <NRF_UPDATE_TX_ADDRESS>:
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	cf 93       	push	r28
    2024:	df 93       	push	r29
    2026:	f8 2e       	mov	r15, r24
    2028:	19 2f       	mov	r17, r25
    202a:	06 2f       	mov	r16, r22
    202c:	1f 98       	cbi	0x03, 7	; 3
    202e:	80 e3       	ldi	r24, 0x30	; 48
    2030:	fa de       	rcall	.-524    	; 0x1e26 <NRF_SPI_EXCHANGE>
    2032:	80 93 ad 03 	sts	0x03AD, r24
    2036:	00 23       	and	r16, r16
    2038:	41 f0       	breq	.+16     	; 0x204a <NRF_UPDATE_TX_ADDRESS+0x2e>
    203a:	cf 2d       	mov	r28, r15
    203c:	d1 2f       	mov	r29, r17
    203e:	10 e0       	ldi	r17, 0x00	; 0
    2040:	89 91       	ld	r24, Y+
    2042:	f1 de       	rcall	.-542    	; 0x1e26 <NRF_SPI_EXCHANGE>
    2044:	1f 5f       	subi	r17, 0xFF	; 255
    2046:	10 13       	cpse	r17, r16
    2048:	fb cf       	rjmp	.-10     	; 0x2040 <NRF_UPDATE_TX_ADDRESS+0x24>
    204a:	1f 9a       	sbi	0x03, 7	; 3
    204c:	df 91       	pop	r29
    204e:	cf 91       	pop	r28
    2050:	1f 91       	pop	r17
    2052:	0f 91       	pop	r16
    2054:	ff 90       	pop	r15
    2056:	08 95       	ret

00002058 <NRF_UPDATE_USED_CHANNEL>:
    2058:	80 93 8c 03 	sts	0x038C, r24
    205c:	68 2f       	mov	r22, r24
    205e:	85 e0       	ldi	r24, 0x05	; 5
    2060:	e7 ce       	rjmp	.-562    	; 0x1e30 <NRF_WRITE_REGISTER>
    2062:	08 95       	ret

00002064 <NRF_IO_SETUP>:
}
void NRF_IO_SETUP()
{
	gpio_outputconfg(PORT_DDR_CE,PORT_OUTMOD_CE,OUTPASS,CE_PIN);
    2064:	24 e0       	ldi	r18, 0x04	; 4
    2066:	40 e0       	ldi	r20, 0x00	; 0
    2068:	66 e3       	ldi	r22, 0x36	; 54
    206a:	70 e0       	ldi	r23, 0x00	; 0
    206c:	87 e3       	ldi	r24, 0x37	; 55
    206e:	90 e0       	ldi	r25, 0x00	; 0
    2070:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
	gpio_outputconfg(PORT_DDR_CSN,PORT_OUTMOD_CSN,OUTPASS,CSN_PIN);
    2074:	27 e0       	ldi	r18, 0x07	; 7
    2076:	40 e0       	ldi	r20, 0x00	; 0
    2078:	61 e2       	ldi	r22, 0x21	; 33
    207a:	70 e0       	ldi	r23, 0x00	; 0
    207c:	82 e2       	ldi	r24, 0x22	; 34
    207e:	90 e0       	ldi	r25, 0x00	; 0
    2080:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
	gpio_inputconfg(PORT_DDR_IRQ,PORT_INMOD_IRQ,PULLUP_mod,IRQ_PIN);
    2084:	24 e0       	ldi	r18, 0x04	; 4
    2086:	41 e0       	ldi	r20, 0x01	; 1
    2088:	62 e3       	ldi	r22, 0x32	; 50
    208a:	70 e0       	ldi	r23, 0x00	; 0
    208c:	81 e3       	ldi	r24, 0x31	; 49
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <gpio_inputconfg>
    2094:	08 95       	ret

00002096 <NRF_SETUP_USED_CONFIG>:
}
void NRF_SETUP_USED_CONFIG()
{
    2096:	0f 93       	push	r16
    2098:	1f 93       	push	r17
    209a:	cf 93       	push	r28
    209c:	df 93       	push	r29
	
	
	NRF_SPI_SET_PIN();
    209e:	1f 9a       	sbi	0x03, 7	; 3
    20a0:	2f ef       	ldi	r18, 0xFF	; 255
    20a2:	81 ee       	ldi	r24, 0xE1	; 225
    20a4:	94 e0       	ldi	r25, 0x04	; 4
    20a6:	21 50       	subi	r18, 0x01	; 1
    20a8:	80 40       	sbci	r24, 0x00	; 0
    20aa:	90 40       	sbci	r25, 0x00	; 0
    20ac:	e1 f7       	brne	.-8      	; 0x20a6 <NRF_SETUP_USED_CONFIG+0x10>
    20ae:	00 c0       	rjmp	.+0      	; 0x20b0 <NRF_SETUP_USED_CONFIG+0x1a>
    20b0:	00 00       	nop
	_delay_ms(100);
	NRF1.NRF_CONFIG=(NRF_USED_MASK_RX_DR<<NRF_MASK_RX_DR_BIT)|(NRF_USED_MASK_TX_DR<<NRF_MASK_TX_DS_BIT)|(NRF_USED_MASK_MAX_RT_DR<<NRF_MASK_MAX_RT_BIT)|(NRF_USED_CRC_STATE<<NRF_EN_CRC_BIT)|(NRF_USED_CRC<<NRF_CRCO_BIT)|(1<<NRF_PWR_UP_BIT);
    20b2:	e7 e8       	ldi	r30, 0x87	; 135
    20b4:	f3 e0       	ldi	r31, 0x03	; 3
    20b6:	8a e0       	ldi	r24, 0x0A	; 10
    20b8:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_CONFIG_ADDRESS,NRF1.NRF_CONFIG);
    20ba:	60 81       	ld	r22, Z
    20bc:	80 e0       	ldi	r24, 0x00	; 0
    20be:	b8 de       	rcall	.-656    	; 0x1e30 <NRF_WRITE_REGISTER>
    20c0:	8f e3       	ldi	r24, 0x3F	; 63
    20c2:	9f e1       	ldi	r25, 0x1F	; 31
    20c4:	01 97       	sbiw	r24, 0x01	; 1
    20c6:	f1 f7       	brne	.-4      	; 0x20c4 <NRF_SETUP_USED_CONFIG+0x2e>
    20c8:	00 c0       	rjmp	.+0      	; 0x20ca <NRF_SETUP_USED_CONFIG+0x34>
    20ca:	00 00       	nop
	_delay_ms(2);
	NRF1.NRF_ENABLE_AA=(NRF_USED_ENNAA_P0<<0)|(NRF_USED_ENNAA_P1<<1)|(NRF_USED_ENNAA_P2<<2)|(NRF_USED_ENNAA_P3<<3)|(NRF_USED_ENNAA_P4<<4)|(NRF_USED_ENNAA_P5<<5);
    20cc:	e8 e8       	ldi	r30, 0x88	; 136
    20ce:	f3 e0       	ldi	r31, 0x03	; 3
    20d0:	03 e0       	ldi	r16, 0x03	; 3
    20d2:	00 83       	st	Z, r16
	NRF_WRITE_REGISTER(NRF_ENABLE_AA_ADDRESS,NRF1.NRF_ENABLE_AA);
    20d4:	60 81       	ld	r22, Z
    20d6:	81 e0       	ldi	r24, 0x01	; 1
    20d8:	ab de       	rcall	.-682    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF1.NRF_ENABLE_RX_ADDRESS=(NRF_USED_ERX_P0<<0)|(NRF_USED_ERX_P1<<1)|(NRF_USED_ERX_P2<<2)|(NRF_USED_ERX_P3<<3)|(NRF_USED_ERX_P4<<4)|(NRF_USED_ERX_P5<<5);
    20da:	e9 e8       	ldi	r30, 0x89	; 137
    20dc:	f3 e0       	ldi	r31, 0x03	; 3
    20de:	c2 e0       	ldi	r28, 0x02	; 2
    20e0:	c0 83       	st	Z, r28
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,NRF1.NRF_ENABLE_RX_ADDRESS);
    20e2:	60 81       	ld	r22, Z
    20e4:	82 e0       	ldi	r24, 0x02	; 2
    20e6:	a4 de       	rcall	.-696    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF1.NRF_SETUP_AW=2;
    20e8:	c0 93 8a 03 	sts	0x038A, r28
	NRF1.NRF_SETUP_RETR=NRF_USED_WAIT_TIME|NRF_USED_RET_COUNT;
    20ec:	eb e8       	ldi	r30, 0x8B	; 139
    20ee:	f3 e0       	ldi	r31, 0x03	; 3
    20f0:	85 e3       	ldi	r24, 0x35	; 53
    20f2:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_SETUP_RETR_ADDRESS,NRF1.NRF_SETUP_RETR);
    20f4:	60 81       	ld	r22, Z
    20f6:	84 e0       	ldi	r24, 0x04	; 4
    20f8:	9b de       	rcall	.-714    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF1.NRF_RF_CH=NRF_USED_CH_1;
    20fa:	ec e8       	ldi	r30, 0x8C	; 140
    20fc:	f3 e0       	ldi	r31, 0x03	; 3
    20fe:	c0 83       	st	Z, r28
	NRF_WRITE_REGISTER(NRF_RF_CH_ADDRESS,NRF1.NRF_RF_CH);
    2100:	60 81       	ld	r22, Z
    2102:	85 e0       	ldi	r24, 0x05	; 5
    2104:	95 de       	rcall	.-726    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF1.NRF_RF_SETUP=NRF_USED_RF_SPEED|NRF_USED_POWER;
    2106:	ed e8       	ldi	r30, 0x8D	; 141
    2108:	f3 e0       	ldi	r31, 0x03	; 3
    210a:	84 e2       	ldi	r24, 0x24	; 36
    210c:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_RF_SETUP_ADDRESS,NRF1.NRF_RF_SETUP);
    210e:	60 81       	ld	r22, Z
    2110:	86 e0       	ldi	r24, 0x06	; 6
    2112:	8e de       	rcall	.-740    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF1.NRF_RX_ADDR_P1[0]=NRF_USED_RX_ADDR_P1&0XFF;
    2114:	80 e1       	ldi	r24, 0x10	; 16
    2116:	80 93 96 03 	sts	0x0396, r24
	NRF1.NRF_RX_ADDR_P1[1]=(NRF_USED_RX_ADDR_P1>>8)&0XFF;
    211a:	10 e2       	ldi	r17, 0x20	; 32
    211c:	10 93 97 03 	sts	0x0397, r17
	NRF1.NRF_RX_ADDR_P1[2]=(NRF_USED_RX_ADDR_P1>>16)&0XFF;
    2120:	80 e3       	ldi	r24, 0x30	; 48
    2122:	80 93 98 03 	sts	0x0398, r24
	NRF1.NRF_RX_ADDR_P1[3]=(NRF_USED_RX_ADDR_P1>>24)&0XFF;
    2126:	80 e4       	ldi	r24, 0x40	; 64
    2128:	80 93 99 03 	sts	0x0399, r24
	NRF1.NRF_RX_ADDR_P1[4]=(NRF_USED_RX_ADDR_P1>>32)&0XFF;
    212c:	80 e5       	ldi	r24, 0x50	; 80
    212e:	80 93 9a 03 	sts	0x039A, r24
	NRF_UPDATE_PIPE_RX_ADDRESS(1,NRF1.NRF_RX_ADDR_P1,5);
    2132:	45 e0       	ldi	r20, 0x05	; 5
    2134:	66 e9       	ldi	r22, 0x96	; 150
    2136:	73 e0       	ldi	r23, 0x03	; 3
    2138:	81 e0       	ldi	r24, 0x01	; 1
    213a:	51 df       	rcall	.-350    	; 0x1fde <NRF_UPDATE_PIPE_RX_ADDRESS>
	NRF1.NRF_RX_PW_P1=32;
    213c:	e5 ea       	ldi	r30, 0xA5	; 165
    213e:	f3 e0       	ldi	r31, 0x03	; 3
    2140:	10 83       	st	Z, r17
	NRF1.NRF_RX_PW_P0=32;
    2142:	c4 ea       	ldi	r28, 0xA4	; 164
    2144:	d3 e0       	ldi	r29, 0x03	; 3
    2146:	18 83       	st	Y, r17
	NRF_WRITE_REGISTER(NRF_RX_PW_P1_ADDRESS,NRF1.NRF_RX_PW_P1);
    2148:	60 81       	ld	r22, Z
    214a:	82 e1       	ldi	r24, 0x12	; 18
    214c:	71 de       	rcall	.-798    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(NRF_RX_PW_P0_ADDRESS,NRF1.NRF_RX_PW_P0);
    214e:	68 81       	ld	r22, Y
    2150:	81 e1       	ldi	r24, 0x11	; 17
    2152:	6e de       	rcall	.-804    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF1.NRF_DYNPD=0b00000011;
    2154:	eb ea       	ldi	r30, 0xAB	; 171
    2156:	f3 e0       	ldi	r31, 0x03	; 3
    2158:	00 83       	st	Z, r16
	NRF_WRITE_REGISTER(NRF_DYNPD_ADDRESS,NRF1.NRF_DYNPD);
    215a:	60 81       	ld	r22, Z
    215c:	8c e1       	ldi	r24, 0x1C	; 28
    215e:	68 de       	rcall	.-816    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF1.NRF_FEATURE=(NRF_USED_PL_WITH_ACK_STATE_AT_FIRST<<1)|(NRF_USED_EN_DPL<<2);
    2160:	ec ea       	ldi	r30, 0xAC	; 172
    2162:	f3 e0       	ldi	r31, 0x03	; 3
    2164:	84 e0       	ldi	r24, 0x04	; 4
    2166:	80 83       	st	Z, r24
	NRF_WRITE_REGISTER(NRF_FEATURE_ADDRESS,NRF1.NRF_FEATURE);
    2168:	60 81       	ld	r22, Z
    216a:	8d e1       	ldi	r24, 0x1D	; 29
    216c:	61 de       	rcall	.-830    	; 0x1e30 <NRF_WRITE_REGISTER>
	
	
	/*TEST_UART_SEND_str("state:");
	TEST_UART_SEND_VALUE(NRF_STATUS);*/
}
    216e:	df 91       	pop	r29
    2170:	cf 91       	pop	r28
    2172:	1f 91       	pop	r17
    2174:	0f 91       	pop	r16
    2176:	08 95       	ret

00002178 <NRF_SEND_DATA_WITH_ACK>:

unsigned char NRF_SEND_DATA_WITH_ACK(unsigned char *ADDRESS,unsigned char ADDRESS_LENGTH,unsigned char *DATA,unsigned char DATA_LENGTH)
{
    2178:	ef 92       	push	r14
    217a:	ff 92       	push	r15
    217c:	0f 93       	push	r16
    217e:	1f 93       	push	r17
    2180:	cf 93       	push	r28
    2182:	df 93       	push	r29
    2184:	ec 01       	movw	r28, r24
    2186:	f6 2e       	mov	r15, r22
    2188:	8a 01       	movw	r16, r20
    218a:	e2 2e       	mov	r14, r18
	NRF_CLEAR_CE();
    218c:	c4 98       	cbi	0x18, 4	; 24
    218e:	8f e9       	ldi	r24, 0x9F	; 159
    2190:	9f e0       	ldi	r25, 0x0F	; 15
    2192:	01 97       	sbiw	r24, 0x01	; 1
    2194:	f1 f7       	brne	.-4      	; 0x2192 <NRF_SEND_DATA_WITH_ACK+0x1a>
    2196:	00 c0       	rjmp	.+0      	; 0x2198 <NRF_SEND_DATA_WITH_ACK+0x20>
    2198:	00 00       	nop
	_delay_ms(1);
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000011);
    219a:	63 e0       	ldi	r22, 0x03	; 3
    219c:	82 e0       	ldi	r24, 0x02	; 2
    219e:	48 de       	rcall	.-880    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
    21a0:	60 e7       	ldi	r22, 0x70	; 112
    21a2:	87 e0       	ldi	r24, 0x07	; 7
    21a4:	45 de       	rcall	.-886    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF_UPDATE_TX_ADDRESS(ADDRESS, ADDRESS_LENGTH);
    21a6:	6f 2d       	mov	r22, r15
    21a8:	ce 01       	movw	r24, r28
    21aa:	38 df       	rcall	.-400    	; 0x201c <NRF_UPDATE_TX_ADDRESS>
	NRF_UPDATE_PIPE_RX_ADDRESS(0,ADDRESS,ADDRESS_LENGTH);
    21ac:	4f 2d       	mov	r20, r15
    21ae:	be 01       	movw	r22, r28
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	15 df       	rcall	.-470    	; 0x1fde <NRF_UPDATE_PIPE_RX_ADDRESS>
	NRF_FLUSH_TX_BUFFER();
    21b4:	9a de       	rcall	.-716    	; 0x1eea <NRF_FLUSH_TX_BUFFER>
	NRF_SET_TX_MODE();
    21b6:	ef de       	rcall	.-546    	; 0x1f96 <NRF_SET_TX_MODE>
	NRF_W_TX_PAYLOAD_ACK(DATA,DATA_LENGTH);
    21b8:	6e 2d       	mov	r22, r14
    21ba:	c8 01       	movw	r24, r16
    21bc:	78 de       	rcall	.-784    	; 0x1eae <NRF_W_TX_PAYLOAD_ACK>
	NRF_SET_CE();
    21be:	c4 9a       	sbi	0x18, 4	; 24
    21c0:	8f e3       	ldi	r24, 0x3F	; 63
    21c2:	9f e1       	ldi	r25, 0x1F	; 31
    21c4:	01 97       	sbiw	r24, 0x01	; 1
    21c6:	f1 f7       	brne	.-4      	; 0x21c4 <NRF_SEND_DATA_WITH_ACK+0x4c>
    21c8:	00 c0       	rjmp	.+0      	; 0x21ca <NRF_SEND_DATA_WITH_ACK+0x52>
    21ca:	00 00       	nop
	_delay_ms(2);
	while (NRF_IS_IRQ_SET());
    21cc:	84 99       	sbic	0x10, 4	; 16
    21ce:	fe cf       	rjmp	.-4      	; 0x21cc <NRF_SEND_DATA_WITH_ACK+0x54>
	NRF_CLEAR_CE();
    21d0:	c4 98       	cbi	0x18, 4	; 24
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000010);
    21d2:	62 e0       	ldi	r22, 0x02	; 2
    21d4:	82 e0       	ldi	r24, 0x02	; 2
    21d6:	2c de       	rcall	.-936    	; 0x1e30 <NRF_WRITE_REGISTER>
	if (NRF_READ_TX_DS_AND_CLEAR())
    21d8:	b4 de       	rcall	.-664    	; 0x1f42 <NRF_READ_TX_DS_AND_CLEAR>
    21da:	c8 2f       	mov	r28, r24
    21dc:	81 11       	cpse	r24, r1
    21de:	02 c0       	rjmp	.+4      	; 0x21e4 <NRF_SEND_DATA_WITH_ACK+0x6c>
	{
		return 1;
	}
	if (NRF_READ_MAX_RT_AND_CLEAR())
    21e0:	c5 de       	rcall	.-630    	; 0x1f6c <NRF_READ_MAX_RT_AND_CLEAR>
    21e2:	01 c0       	rjmp	.+2      	; 0x21e6 <NRF_SEND_DATA_WITH_ACK+0x6e>
	while (NRF_IS_IRQ_SET());
	NRF_CLEAR_CE();
	NRF_WRITE_REGISTER(NRF_ENABLE_RX_ADDRESS_ADDRESS,0b00000010);
	if (NRF_READ_TX_DS_AND_CLEAR())
	{
		return 1;
    21e4:	c1 e0       	ldi	r28, 0x01	; 1
	{
		/*TEST_UART_SEND_str("heree\n");*/
		return 0;
	}
	return 0;
}
    21e6:	8c 2f       	mov	r24, r28
    21e8:	df 91       	pop	r29
    21ea:	cf 91       	pop	r28
    21ec:	1f 91       	pop	r17
    21ee:	0f 91       	pop	r16
    21f0:	ff 90       	pop	r15
    21f2:	ef 90       	pop	r14
    21f4:	08 95       	ret

000021f6 <NRF_START_RX_MODE>:

void NRF_START_RX_MODE()
{
	NRF_CLEAR_CE();
    21f6:	c4 98       	cbi	0x18, 4	; 24
    21f8:	8f e9       	ldi	r24, 0x9F	; 159
    21fa:	9f e0       	ldi	r25, 0x0F	; 15
    21fc:	01 97       	sbiw	r24, 0x01	; 1
    21fe:	f1 f7       	brne	.-4      	; 0x21fc <NRF_START_RX_MODE+0x6>
    2200:	00 c0       	rjmp	.+0      	; 0x2202 <NRF_START_RX_MODE+0xc>
    2202:	00 00       	nop
	_delay_ms(1);
	NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
    2204:	60 e7       	ldi	r22, 0x70	; 112
    2206:	87 e0       	ldi	r24, 0x07	; 7
    2208:	13 de       	rcall	.-986    	; 0x1e30 <NRF_WRITE_REGISTER>
	NRF_FLUSH_RX_BUFFER();
    220a:	76 de       	rcall	.-788    	; 0x1ef8 <NRF_FLUSH_RX_BUFFER>
	NRF_SET_RX_MODE();
    220c:	d6 de       	rcall	.-596    	; 0x1fba <NRF_SET_RX_MODE>
	NRF_SET_CE();
    220e:	c4 9a       	sbi	0x18, 4	; 24
    2210:	08 95       	ret

00002212 <NRF_STOP_RX_MODE>:
}

void NRF_STOP_RX_MODE()
{
		NRF_CLEAR_CE();
    2212:	c4 98       	cbi	0x18, 4	; 24
    2214:	8f e9       	ldi	r24, 0x9F	; 159
    2216:	9f e0       	ldi	r25, 0x0F	; 15
    2218:	01 97       	sbiw	r24, 0x01	; 1
    221a:	f1 f7       	brne	.-4      	; 0x2218 <NRF_STOP_RX_MODE+0x6>
    221c:	00 c0       	rjmp	.+0      	; 0x221e <NRF_STOP_RX_MODE+0xc>
    221e:	00 00       	nop
		_delay_ms(1);
		NRF_WRITE_REGISTER(NRF_STATUS_ADDRESS,0b01110000);
    2220:	60 e7       	ldi	r22, 0x70	; 112
    2222:	87 e0       	ldi	r24, 0x07	; 7
    2224:	05 de       	rcall	.-1014   	; 0x1e30 <NRF_WRITE_REGISTER>
		NRF_FLUSH_RX_BUFFER();
    2226:	68 ce       	rjmp	.-816    	; 0x1ef8 <NRF_FLUSH_RX_BUFFER>
    2228:	08 95       	ret

0000222a <NRF_CHECK_RX_PL>:
}

unsigned char NRF_CHECK_RX_PL(unsigned char *DATA,unsigned char* LENGTH)
{
    222a:	0f 93       	push	r16
    222c:	1f 93       	push	r17
    222e:	cf 93       	push	r28
    2230:	df 93       	push	r29
    2232:	ec 01       	movw	r28, r24
    2234:	8b 01       	movw	r16, r22
	if (NRF_IS_IRQ_CLEAR())
    2236:	84 99       	sbic	0x10, 4	; 16
    2238:	0c c0       	rjmp	.+24     	; 0x2252 <NRF_CHECK_RX_PL+0x28>
	{
		if (NRF_READ_RX_DR_AND_CLEAR())
    223a:	6e de       	rcall	.-804    	; 0x1f18 <NRF_READ_RX_DR_AND_CLEAR>
    223c:	88 23       	and	r24, r24
    223e:	51 f0       	breq	.+20     	; 0x2254 <NRF_CHECK_RX_PL+0x2a>
		{
			NRF_CLEAR_CE();
    2240:	c4 98       	cbi	0x18, 4	; 24
			*LENGTH=NRF_READ_LENGTH_RX_PL();
    2242:	61 de       	rcall	.-830    	; 0x1f06 <NRF_READ_LENGTH_RX_PL>
    2244:	f8 01       	movw	r30, r16
    2246:	80 83       	st	Z, r24
			NRF_R_RX_PAYLOAD_DYNAMIC(DATA,*LENGTH);	
    2248:	68 2f       	mov	r22, r24
    224a:	ce 01       	movw	r24, r28
    224c:	11 de       	rcall	.-990    	; 0x1e70 <NRF_R_RX_PAYLOAD_DYNAMIC>
			return 1;
    224e:	81 e0       	ldi	r24, 0x01	; 1
    2250:	01 c0       	rjmp	.+2      	; 0x2254 <NRF_CHECK_RX_PL+0x2a>
		}
		return 0;
	}
	else
	{
		return 0;
    2252:	80 e0       	ldi	r24, 0x00	; 0
	}
}
    2254:	df 91       	pop	r29
    2256:	cf 91       	pop	r28
    2258:	1f 91       	pop	r17
    225a:	0f 91       	pop	r16
    225c:	08 95       	ret

0000225e <readeeprom>:
		while(isbitset(*EEPROM_CONTROL_ADD,1));
	}
}

uint8 readeeprom(uint16 ADD)
{while(isbitset(*EEPROM_CONTROL_ADD,1));  /*checking the last write is done*/
    225e:	e1 99       	sbic	0x1c, 1	; 28
    2260:	fe cf       	rjmp	.-4      	; 0x225e <readeeprom>
	*EEPROM_ADDRESS_HIGH_ADD=ADD>>8;
    2262:	9f bb       	out	0x1f, r25	; 31
	*EEPROM_ADDRESS_LOW_ADD=ADD;
    2264:	8e bb       	out	0x1e, r24	; 30
    clearbit(*EEPROM_CONTROL_ADD,2);
    2266:	e2 98       	cbi	0x1c, 2	; 28
	setbit(*EEPROM_CONTROL_ADD,0);	
    2268:	e0 9a       	sbi	0x1c, 0	; 28
	
	return *EEPROM_DATA_ADD;
    226a:	8d b3       	in	r24, 0x1d	; 29
}
    226c:	08 95       	ret

0000226e <writeeeprom>:
 *  Author: ideapad510
 */ 
#include "eeprom.h"

void writeeeprom(uint16 ADD,uint8 Data)
{
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	d8 2f       	mov	r29, r24
    2276:	19 2f       	mov	r17, r25
    2278:	c6 2f       	mov	r28, r22
	if (readeeprom(ADD)!=Data)
    227a:	f1 df       	rcall	.-30     	; 0x225e <readeeprom>
    227c:	8c 17       	cp	r24, r28
    227e:	51 f0       	breq	.+20     	; 0x2294 <writeeeprom+0x26>
	{
		while(isbitset(*EEPROM_CONTROL_ADD,1));  /*checking the last write is done*/
    2280:	e1 99       	sbic	0x1c, 1	; 28
    2282:	fe cf       	rjmp	.-4      	; 0x2280 <writeeeprom+0x12>
		*EEPROM_ADDRESS_HIGH_ADD=ADD>>8;
    2284:	1f bb       	out	0x1f, r17	; 31
		*EEPROM_ADDRESS_LOW_ADD=ADD;
    2286:	de bb       	out	0x1e, r29	; 30
		*EEPROM_DATA_ADD=Data;
    2288:	cd bb       	out	0x1d, r28	; 29
		setbit(*EEPROM_CONTROL_ADD,2);
    228a:	e2 9a       	sbi	0x1c, 2	; 28
		clearbit(*EEPROM_CONTROL_ADD,0);
    228c:	e0 98       	cbi	0x1c, 0	; 28
		setbit(*EEPROM_CONTROL_ADD,1);
    228e:	e1 9a       	sbi	0x1c, 1	; 28
		while(isbitset(*EEPROM_CONTROL_ADD,1));
    2290:	e1 99       	sbic	0x1c, 1	; 28
    2292:	fe cf       	rjmp	.-4      	; 0x2290 <writeeeprom+0x22>
	}
}
    2294:	df 91       	pop	r29
    2296:	cf 91       	pop	r28
    2298:	1f 91       	pop	r17
    229a:	08 95       	ret

0000229c <external_int_enable>:
 */ 
#include "EXINTEREPUT128A.h"

void external_int_enable(INT_ENABLE_NUMBER INT_NUM,INT_POLARTY POLARTY)
{
	global_interupt_disable();
    229c:	9f b7       	in	r25, 0x3f	; 63
    229e:	9f 77       	andi	r25, 0x7F	; 127
    22a0:	9f bf       	out	0x3f, r25	; 63
	EIMSK|=INT_NUM;
    22a2:	99 b7       	in	r25, 0x39	; 57
    22a4:	98 2b       	or	r25, r24
    22a6:	99 bf       	out	0x39, r25	; 57
	switch(INT_NUM)
    22a8:	88 30       	cpi	r24, 0x08	; 8
    22aa:	c1 f1       	breq	.+112    	; 0x231c <external_int_enable+0x80>
    22ac:	40 f4       	brcc	.+16     	; 0x22be <external_int_enable+0x22>
    22ae:	82 30       	cpi	r24, 0x02	; 2
    22b0:	e9 f0       	breq	.+58     	; 0x22ec <external_int_enable+0x50>
    22b2:	84 30       	cpi	r24, 0x04	; 4
    22b4:	31 f1       	breq	.+76     	; 0x2302 <external_int_enable+0x66>
    22b6:	81 30       	cpi	r24, 0x01	; 1
    22b8:	09 f0       	breq	.+2      	; 0x22bc <external_int_enable+0x20>
    22ba:	62 c0       	rjmp	.+196    	; 0x2380 <external_int_enable+0xe4>
    22bc:	0e c0       	rjmp	.+28     	; 0x22da <external_int_enable+0x3e>
    22be:	80 32       	cpi	r24, 0x20	; 32
    22c0:	09 f4       	brne	.+2      	; 0x22c4 <external_int_enable+0x28>
    22c2:	40 c0       	rjmp	.+128    	; 0x2344 <external_int_enable+0xa8>
    22c4:	18 f4       	brcc	.+6      	; 0x22cc <external_int_enable+0x30>
    22c6:	80 31       	cpi	r24, 0x10	; 16
    22c8:	b1 f1       	breq	.+108    	; 0x2336 <external_int_enable+0x9a>
    22ca:	5a c0       	rjmp	.+180    	; 0x2380 <external_int_enable+0xe4>
    22cc:	80 34       	cpi	r24, 0x40	; 64
    22ce:	09 f4       	brne	.+2      	; 0x22d2 <external_int_enable+0x36>
    22d0:	42 c0       	rjmp	.+132    	; 0x2356 <external_int_enable+0xba>
    22d2:	80 38       	cpi	r24, 0x80	; 128
    22d4:	09 f4       	brne	.+2      	; 0x22d8 <external_int_enable+0x3c>
    22d6:	4a c0       	rjmp	.+148    	; 0x236c <external_int_enable+0xd0>
    22d8:	53 c0       	rjmp	.+166    	; 0x2380 <external_int_enable+0xe4>
	{   case INT0_ENABLE:EICRA&=0xfc;
    22da:	ea e6       	ldi	r30, 0x6A	; 106
    22dc:	f0 e0       	ldi	r31, 0x00	; 0
    22de:	80 81       	ld	r24, Z
    22e0:	8c 7f       	andi	r24, 0xFC	; 252
    22e2:	80 83       	st	Z, r24
		                 EICRA|=POLARTY;
    22e4:	80 81       	ld	r24, Z
    22e6:	68 2b       	or	r22, r24
    22e8:	60 83       	st	Z, r22
						 break;
    22ea:	4a c0       	rjmp	.+148    	; 0x2380 <external_int_enable+0xe4>
		case INT1_ENABLE:EICRA&=0xf3;
    22ec:	ea e6       	ldi	r30, 0x6A	; 106
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	83 7f       	andi	r24, 0xF3	; 243
    22f4:	80 83       	st	Z, r24
						 EICRA|=POLARTY<<2;
    22f6:	80 81       	ld	r24, Z
    22f8:	66 0f       	add	r22, r22
    22fa:	66 0f       	add	r22, r22
    22fc:	68 2b       	or	r22, r24
    22fe:	60 83       	st	Z, r22
					     break;
    2300:	3f c0       	rjmp	.+126    	; 0x2380 <external_int_enable+0xe4>
		
		case INT2_ENABLE:EICRA&=0xcf;
    2302:	ea e6       	ldi	r30, 0x6A	; 106
    2304:	f0 e0       	ldi	r31, 0x00	; 0
    2306:	80 81       	ld	r24, Z
    2308:	8f 7c       	andi	r24, 0xCF	; 207
    230a:	80 83       	st	Z, r24
						 EICRA|=POLARTY<<4;
    230c:	80 81       	ld	r24, Z
    230e:	90 e1       	ldi	r25, 0x10	; 16
    2310:	69 9f       	mul	r22, r25
    2312:	b0 01       	movw	r22, r0
    2314:	11 24       	eor	r1, r1
    2316:	68 2b       	or	r22, r24
    2318:	60 83       	st	Z, r22
						 break;
    231a:	32 c0       	rjmp	.+100    	; 0x2380 <external_int_enable+0xe4>
		case INT3_ENABLE:EICRA&=0x3f;
    231c:	ea e6       	ldi	r30, 0x6A	; 106
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	8f 73       	andi	r24, 0x3F	; 63
    2324:	80 83       	st	Z, r24
					     EICRA|=POLARTY<<6;
    2326:	80 81       	ld	r24, Z
    2328:	90 e4       	ldi	r25, 0x40	; 64
    232a:	69 9f       	mul	r22, r25
    232c:	b0 01       	movw	r22, r0
    232e:	11 24       	eor	r1, r1
    2330:	68 2b       	or	r22, r24
    2332:	60 83       	st	Z, r22
						 break;
    2334:	25 c0       	rjmp	.+74     	; 0x2380 <external_int_enable+0xe4>
		case INT4_ENABLE:EICRB&=0xfc;
    2336:	8a b7       	in	r24, 0x3a	; 58
    2338:	8c 7f       	andi	r24, 0xFC	; 252
    233a:	8a bf       	out	0x3a, r24	; 58
						 EICRB|=POLARTY;
    233c:	8a b7       	in	r24, 0x3a	; 58
    233e:	68 2b       	or	r22, r24
    2340:	6a bf       	out	0x3a, r22	; 58
						 break;
    2342:	1e c0       	rjmp	.+60     	; 0x2380 <external_int_enable+0xe4>
		case INT5_ENABLE:EICRB&=0xf3;
    2344:	8a b7       	in	r24, 0x3a	; 58
    2346:	83 7f       	andi	r24, 0xF3	; 243
    2348:	8a bf       	out	0x3a, r24	; 58
						 EICRB|=POLARTY<<2;
    234a:	8a b7       	in	r24, 0x3a	; 58
    234c:	66 0f       	add	r22, r22
    234e:	66 0f       	add	r22, r22
    2350:	68 2b       	or	r22, r24
    2352:	6a bf       	out	0x3a, r22	; 58
						 break;
    2354:	15 c0       	rjmp	.+42     	; 0x2380 <external_int_enable+0xe4>
		
		case INT6_ENABLE:EICRB&=0xcf;
    2356:	8a b7       	in	r24, 0x3a	; 58
    2358:	8f 7c       	andi	r24, 0xCF	; 207
    235a:	8a bf       	out	0x3a, r24	; 58
						 EICRB|=POLARTY<<4;
    235c:	8a b7       	in	r24, 0x3a	; 58
    235e:	90 e1       	ldi	r25, 0x10	; 16
    2360:	69 9f       	mul	r22, r25
    2362:	b0 01       	movw	r22, r0
    2364:	11 24       	eor	r1, r1
    2366:	68 2b       	or	r22, r24
    2368:	6a bf       	out	0x3a, r22	; 58
						 break;
    236a:	0a c0       	rjmp	.+20     	; 0x2380 <external_int_enable+0xe4>
		case INT7_ENABLE:EICRB&=0x3f;
    236c:	8a b7       	in	r24, 0x3a	; 58
    236e:	8f 73       	andi	r24, 0x3F	; 63
    2370:	8a bf       	out	0x3a, r24	; 58
						 EICRB|=POLARTY<<6;
    2372:	8a b7       	in	r24, 0x3a	; 58
    2374:	90 e4       	ldi	r25, 0x40	; 64
    2376:	69 9f       	mul	r22, r25
    2378:	b0 01       	movw	r22, r0
    237a:	11 24       	eor	r1, r1
    237c:	68 2b       	or	r22, r24
    237e:	6a bf       	out	0x3a, r22	; 58
						 break;
	}
	global_interupt_enable();
    2380:	8f b7       	in	r24, 0x3f	; 63
    2382:	80 68       	ori	r24, 0x80	; 128
    2384:	8f bf       	out	0x3f, r24	; 63
    2386:	08 95       	ret

00002388 <SPI_INT>:
 */ 

#include "spi.h"
 volatile  SPI_DATA data;
void SPI_INT(SPI_OPMODE opmode, SPI_PRESCALE prescale,SPI_MODE mode, SPI_INTURUPT intupt,SPI_DATA_ORDER order)
{	switch (opmode)
    2388:	ff 92       	push	r15
    238a:	0f 93       	push	r16
    238c:	1f 93       	push	r17
    238e:	cf 93       	push	r28
    2390:	df 93       	push	r29
    2392:	c6 2f       	mov	r28, r22
    2394:	f7 2e       	mov	r15, r23
    2396:	d4 2f       	mov	r29, r20
    2398:	12 2f       	mov	r17, r18
    239a:	88 23       	and	r24, r24
    239c:	29 f1       	breq	.+74     	; 0x23e8 <SPI_INT+0x60>
    239e:	80 31       	cpi	r24, 0x10	; 16
    23a0:	89 f5       	brne	.+98     	; 0x2404 <SPI_INT+0x7c>
	{
		case SPI_MASTER: gpio_outputconfg(DDR_MOSI_ADDRESS,PORT_OUTMOD_MOSI_ADDRESS,OUTPASS,MOSI_PIN);
    23a2:	22 e0       	ldi	r18, 0x02	; 2
    23a4:	40 e0       	ldi	r20, 0x00	; 0
    23a6:	66 e3       	ldi	r22, 0x36	; 54
    23a8:	70 e0       	ldi	r23, 0x00	; 0
    23aa:	87 e3       	ldi	r24, 0x37	; 55
    23ac:	90 e0       	ldi	r25, 0x00	; 0
    23ae:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
		                 gpio_outputconfg(DDR_SS_ADDRESS,PORT_OUTMOD_SS_ADDRESS,OUTPASS,SS_PIN);
    23b2:	20 e0       	ldi	r18, 0x00	; 0
    23b4:	40 e0       	ldi	r20, 0x00	; 0
    23b6:	66 e3       	ldi	r22, 0x36	; 54
    23b8:	70 e0       	ldi	r23, 0x00	; 0
    23ba:	87 e3       	ldi	r24, 0x37	; 55
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
						 gpio_outputconfg(DDR_SCK_ADDRESS,PORT_OUTMOD_SCK_ADDRESS,OUTPASS,SCK_PIN);
    23c2:	21 e0       	ldi	r18, 0x01	; 1
    23c4:	40 e0       	ldi	r20, 0x00	; 0
    23c6:	66 e3       	ldi	r22, 0x36	; 54
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	87 e3       	ldi	r24, 0x37	; 55
    23cc:	90 e0       	ldi	r25, 0x00	; 0
    23ce:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
                        clearbit(*PORT_OUT_SCK_ADDRESS,SCK_PIN);
    23d2:	c1 98       	cbi	0x18, 1	; 24
						SPSR_ACCESS &=0xFE;
    23d4:	70 98       	cbi	0x0e, 0	; 14
						SPSR_ACCESS |=(prescale>>8);
    23d6:	8e b1       	in	r24, 0x0e	; 14
    23d8:	f8 2a       	or	r15, r24
    23da:	fe b8       	out	0x0e, r15	; 14
						SPCR_ACCESS=opmode|prescale|mode|intupt|order|0X40;
    23dc:	00 65       	ori	r16, 0x50	; 80
    23de:	10 2b       	or	r17, r16
    23e0:	d1 2b       	or	r29, r17
    23e2:	cd 2b       	or	r28, r29
    23e4:	cd b9       	out	0x0d, r28	; 13
						
						 break;	                 
    23e6:	0e c0       	rjmp	.+28     	; 0x2404 <SPI_INT+0x7c>
		
		case SPI_SLAVE: gpio_outputconfg(DDR_MISO_ADDRESS,PORT_OUTMOD_MISO_ADDRESS,OUTPASS,MISO_PIN);
    23e8:	23 e0       	ldi	r18, 0x03	; 3
    23ea:	40 e0       	ldi	r20, 0x00	; 0
    23ec:	66 e3       	ldi	r22, 0x36	; 54
    23ee:	70 e0       	ldi	r23, 0x00	; 0
    23f0:	87 e3       	ldi	r24, 0x37	; 55
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
		              SPSR_ACCESS &=0xFE;
    23f8:	70 98       	cbi	0x0e, 0	; 14
					  SPCR_ACCESS=opmode|prescale|mode|intupt|order|0X40;
    23fa:	00 64       	ori	r16, 0x40	; 64
    23fc:	10 2b       	or	r17, r16
    23fe:	d1 2b       	or	r29, r17
    2400:	cd 2b       	or	r28, r29
    2402:	cd b9       	out	0x0d, r28	; 13

	

/*	setbit(*PORT_OUT_SS_ADDRESS,SS_PIN);*/
/*	setbit(*PORT_OUT_SCK_ADDRESS,SCK_PIN);*/
}
    2404:	df 91       	pop	r29
    2406:	cf 91       	pop	r28
    2408:	1f 91       	pop	r17
    240a:	0f 91       	pop	r16
    240c:	ff 90       	pop	r15
    240e:	08 95       	ret

00002410 <TIMER0_ENABLE>:
			break;    
	case PWM_PHASE_CORRECT_MOD: break;
	
	default:return;
	}
}
    2410:	13 be       	out	0x33, r1	; 51
    2412:	97 b7       	in	r25, 0x37	; 55
    2414:	9c 7f       	andi	r25, 0xFC	; 252
    2416:	97 bf       	out	0x37, r25	; 55
    2418:	93 b7       	in	r25, 0x33	; 51
    241a:	49 2b       	or	r20, r25
    241c:	64 2b       	or	r22, r20
    241e:	86 2b       	or	r24, r22
    2420:	83 bf       	out	0x33, r24	; 51
    2422:	87 b7       	in	r24, 0x37	; 55
    2424:	28 2b       	or	r18, r24
    2426:	27 bf       	out	0x37, r18	; 55
    2428:	08 95       	ret

0000242a <TIMER0_READ_COUNTER>:
unsigned char TIMER0_READ_COUNTER()
{
	return TCNT0;
    242a:	82 b7       	in	r24, 0x32	; 50
}
    242c:	08 95       	ret

0000242e <TIMER1_ENABLE>:
				   T1_INT_DATATYPE OCIE1C_state,  
				   T1_INT_DATATYPE OCIE1B_state, 
				   T1_INT_DATATYPE OCIE1A_state, 
				   
				   T1_INT_DATATYPE TICIE1_state)
{
    242e:	8f 92       	push	r8
    2430:	9f 92       	push	r9
    2432:	af 92       	push	r10
    2434:	bf 92       	push	r11
    2436:	cf 92       	push	r12
    2438:	df 92       	push	r13
    243a:	ef 92       	push	r14
    243c:	ff 92       	push	r15
    243e:	0f 93       	push	r16
    2440:	1f 93       	push	r17
    2442:	cf 93       	push	r28
    2444:	df 93       	push	r29
    2446:	cd b7       	in	r28, 0x3d	; 61
    2448:	de b7       	in	r29, 0x3e	; 62
    244a:	96 2e       	mov	r9, r22
    244c:	14 2f       	mov	r17, r20
	TCCR1A_ACCESS=00;
    244e:	1f bc       	out	0x2f, r1	; 47
	TCCR1B_ACCESS=00;
    2450:	1e bc       	out	0x2e, r1	; 46
	TCCR1A_ACCESS|=COM1A<<6;
    2452:	9f b5       	in	r25, 0x2f	; 47
    2454:	30 e4       	ldi	r19, 0x40	; 64
    2456:	83 9f       	mul	r24, r19
    2458:	f0 01       	movw	r30, r0
    245a:	11 24       	eor	r1, r1
    245c:	e9 2b       	or	r30, r25
    245e:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=COM1B<<4;
    2460:	9f b5       	in	r25, 0x2f	; 47
    2462:	30 e1       	ldi	r19, 0x10	; 16
    2464:	63 9f       	mul	r22, r19
    2466:	f0 01       	movw	r30, r0
    2468:	11 24       	eor	r1, r1
    246a:	e9 2b       	or	r30, r25
    246c:	ef bd       	out	0x2f, r30	; 47
	TCCR1A_ACCESS|=COM1C<<2;
    246e:	9f b5       	in	r25, 0x2f	; 47
    2470:	34 2f       	mov	r19, r20
    2472:	33 0f       	add	r19, r19
    2474:	33 0f       	add	r19, r19
    2476:	93 2b       	or	r25, r19
    2478:	9f bd       	out	0x2f, r25	; 47
	TCCR1A_ACCESS|=WGM1&0x03;
    247a:	9f b5       	in	r25, 0x2f	; 47
    247c:	32 2f       	mov	r19, r18
    247e:	33 70       	andi	r19, 0x03	; 3
    2480:	93 2b       	or	r25, r19
    2482:	9f bd       	out	0x2f, r25	; 47
	TCCR1B_ACCESS|=(WGM1&0x0c)<<1;
    2484:	9e b5       	in	r25, 0x2e	; 46
    2486:	2c 70       	andi	r18, 0x0C	; 12
    2488:	22 0f       	add	r18, r18
    248a:	29 2b       	or	r18, r25
    248c:	2e bd       	out	0x2e, r18	; 46
    OCR1AH_ACCESS=OCR1A_DATA>>8;
    248e:	fb bc       	out	0x2b, r15	; 43
	OCR1AL_ACCESS=OCR1A_DATA;
    2490:	ea bc       	out	0x2a, r14	; 42
	OCR1BH_ACCESS=OCR1B_DATA>>8;
    2492:	d9 bc       	out	0x29, r13	; 41
	OCR1BL_ACCESS=OCR1B_DATA;
    2494:	c8 bc       	out	0x28, r12	; 40
	OCR1CH_ACCESS=OCR1C_DATA>>8;
    2496:	b0 92 79 00 	sts	0x0079, r11
	OCR1CL_ACCESS=OCR1C_DATA;
    249a:	a0 92 78 00 	sts	0x0078, r10
	TIMSK_ACCESS&=0xc3;
    249e:	97 b7       	in	r25, 0x37	; 55
    24a0:	93 7c       	andi	r25, 0xC3	; 195
    24a2:	97 bf       	out	0x37, r25	; 55
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
	TIMSK_ACCESS|=x<<2;
    24a4:	27 b7       	in	r18, 0x37	; 55
	OCR1BH_ACCESS=OCR1B_DATA>>8;
	OCR1BL_ACCESS=OCR1B_DATA;
	OCR1CH_ACCESS=OCR1C_DATA>>8;
	OCR1CL_ACCESS=OCR1C_DATA;
	TIMSK_ACCESS&=0xc3;
	unsigned char x=TOIE1_state|(OCIE1B_state<<1)|(OCIE1A_state<<2)|(TICIE1_state<<3);
    24a6:	9a 89       	ldd	r25, Y+18	; 0x12
    24a8:	99 0f       	add	r25, r25
    24aa:	99 0f       	add	r25, r25
    24ac:	99 0f       	add	r25, r25
    24ae:	89 2a       	or	r8, r25
    24b0:	99 89       	ldd	r25, Y+17	; 0x11
    24b2:	99 0f       	add	r25, r25
    24b4:	99 0f       	add	r25, r25
    24b6:	89 2a       	or	r8, r25
    24b8:	98 89       	ldd	r25, Y+16	; 0x10
    24ba:	99 0f       	add	r25, r25
    24bc:	98 29       	or	r25, r8
	TIMSK_ACCESS|=x<<2;
    24be:	99 0f       	add	r25, r25
    24c0:	99 0f       	add	r25, r25
    24c2:	92 2b       	or	r25, r18
    24c4:	97 bf       	out	0x37, r25	; 55
	ETIMSK&=0b11111110;
    24c6:	ed e7       	ldi	r30, 0x7D	; 125
    24c8:	f0 e0       	ldi	r31, 0x00	; 0
    24ca:	90 81       	ld	r25, Z
    24cc:	9e 7f       	andi	r25, 0xFE	; 254
    24ce:	90 83       	st	Z, r25
	ETIMSK|=OCIE1C_state;
    24d0:	90 81       	ld	r25, Z
    24d2:	2f 85       	ldd	r18, Y+15	; 0x0f
    24d4:	92 2b       	or	r25, r18
    24d6:	90 83       	st	Z, r25
	TCCR1B_ACCESS|=CS1;
    24d8:	9e b5       	in	r25, 0x2e	; 46
    24da:	09 2b       	or	r16, r25
    24dc:	0e bd       	out	0x2e, r16	; 46
	if (COM1A!=T1_OCA1_DISCONNECT)
    24de:	88 23       	and	r24, r24
    24e0:	41 f0       	breq	.+16     	; 0x24f2 <TIMER1_ENABLE+0xc4>
	{gpio_outputconfg(DDR_OC1A_ADDRESS,PORT_OUTMOD_OC1A_ADDRESS,OUTPASS,OC1A_PIN);
    24e2:	25 e0       	ldi	r18, 0x05	; 5
    24e4:	40 e0       	ldi	r20, 0x00	; 0
    24e6:	66 e3       	ldi	r22, 0x36	; 54
    24e8:	70 e0       	ldi	r23, 0x00	; 0
    24ea:	87 e3       	ldi	r24, 0x37	; 55
    24ec:	90 e0       	ldi	r25, 0x00	; 0
    24ee:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
	}
	if (COM1B!=T1_OCB1_DISCONNECT)
    24f2:	99 20       	and	r9, r9
    24f4:	41 f0       	breq	.+16     	; 0x2506 <TIMER1_ENABLE+0xd8>
	{gpio_outputconfg(DDR_OC1B_ADDRESS,PORT_OUTMOD_OC1B_ADDRESS,OUTPASS,OC1B_PIN);
    24f6:	26 e0       	ldi	r18, 0x06	; 6
    24f8:	40 e0       	ldi	r20, 0x00	; 0
    24fa:	66 e3       	ldi	r22, 0x36	; 54
    24fc:	70 e0       	ldi	r23, 0x00	; 0
    24fe:	87 e3       	ldi	r24, 0x37	; 55
    2500:	90 e0       	ldi	r25, 0x00	; 0
    2502:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
	}
	if (COM1C!=T1_OCC1_DISCONNECT)
    2506:	11 23       	and	r17, r17
    2508:	41 f0       	breq	.+16     	; 0x251a <TIMER1_ENABLE+0xec>
	{gpio_outputconfg(DDR_OC1C_ADDRESS,PORT_OUTMOD_OC1C_ADDRESS,OUTPASS,OC1C_PIN);
    250a:	27 e0       	ldi	r18, 0x07	; 7
    250c:	40 e0       	ldi	r20, 0x00	; 0
    250e:	66 e3       	ldi	r22, 0x36	; 54
    2510:	70 e0       	ldi	r23, 0x00	; 0
    2512:	87 e3       	ldi	r24, 0x37	; 55
    2514:	90 e0       	ldi	r25, 0x00	; 0
    2516:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
	}
	
}
    251a:	df 91       	pop	r29
    251c:	cf 91       	pop	r28
    251e:	1f 91       	pop	r17
    2520:	0f 91       	pop	r16
    2522:	ff 90       	pop	r15
    2524:	ef 90       	pop	r14
    2526:	df 90       	pop	r13
    2528:	cf 90       	pop	r12
    252a:	bf 90       	pop	r11
    252c:	af 90       	pop	r10
    252e:	9f 90       	pop	r9
    2530:	8f 90       	pop	r8
    2532:	08 95       	ret

00002534 <TIMER2_DISABLE>:
 * Created: 30/03/2020 11:57:31 م
 *  Author: ideapad510
 */ 
#include "TIMER2.h"
void TIMER2_DISABLE()
{   TCNT2=0;
    2534:	14 bc       	out	0x24, r1	; 36
	TCCR2=00;
    2536:	15 bc       	out	0x25, r1	; 37
    2538:	08 95       	ret

0000253a <TIMER2_ENABLE>:
}

void TIMER2_ENABLE(WGM2_D MODE,T2_OC2_DATATYPE OC2_TYPE,T2_clock CLK_PRE,unsigned char as2_sync_mode /*1 or 0 default 0*/,T2_INT_DATATYPE out_compare_int,T2_INT_DATATYPE ovr_flow_int ,unsigned char ocr2)
{
    253a:	cf 92       	push	r12
    253c:	ef 92       	push	r14
    253e:	ff 92       	push	r15
    2540:	0f 93       	push	r16
    2542:	1f 93       	push	r17
	TCCR2_ACCESS=00;
    2544:	15 bc       	out	0x25, r1	; 37
	TCCR2_ACCESS|=MODE;
    2546:	95 b5       	in	r25, 0x25	; 37
    2548:	89 2b       	or	r24, r25
    254a:	85 bd       	out	0x25, r24	; 37
	TCCR2_ACCESS|=OC2_TYPE<<4;
    254c:	35 b5       	in	r19, 0x25	; 37
    254e:	50 e1       	ldi	r21, 0x10	; 16
    2550:	65 9f       	mul	r22, r21
    2552:	c0 01       	movw	r24, r0
    2554:	11 24       	eor	r1, r1
    2556:	83 2b       	or	r24, r19
    2558:	85 bd       	out	0x25, r24	; 37
	TCCR2_ACCESS|=CLK_PRE;
    255a:	85 b5       	in	r24, 0x25	; 37
    255c:	48 2b       	or	r20, r24
    255e:	45 bd       	out	0x25, r20	; 37
	OCR2_ACCESS=ocr2;
    2560:	c3 bc       	out	0x23, r12	; 35
	clearbit(ASSR,3);
    2562:	80 b7       	in	r24, 0x30	; 48
    2564:	87 7f       	andi	r24, 0xF7	; 247
    2566:	80 bf       	out	0x30, r24	; 48
	ASSR|=as2_sync_mode<<3;
    2568:	80 b7       	in	r24, 0x30	; 48
    256a:	22 0f       	add	r18, r18
    256c:	22 0f       	add	r18, r18
    256e:	22 0f       	add	r18, r18
    2570:	28 2b       	or	r18, r24
    2572:	20 bf       	out	0x30, r18	; 48
	TIMSK_ACCESS&=0x3f;
    2574:	87 b7       	in	r24, 0x37	; 55
    2576:	8f 73       	andi	r24, 0x3F	; 63
    2578:	87 bf       	out	0x37, r24	; 55
	TIMSK_ACCESS|=out_compare_int<<7;
    257a:	87 b7       	in	r24, 0x37	; 55
    257c:	90 e8       	ldi	r25, 0x80	; 128
    257e:	09 9f       	mul	r16, r25
    2580:	80 01       	movw	r16, r0
    2582:	11 24       	eor	r1, r1
    2584:	08 2b       	or	r16, r24
    2586:	07 bf       	out	0x37, r16	; 55
	TIMSK_ACCESS|=ovr_flow_int<<6;
    2588:	87 b7       	in	r24, 0x37	; 55
    258a:	50 e4       	ldi	r21, 0x40	; 64
    258c:	e5 9e       	mul	r14, r21
    258e:	70 01       	movw	r14, r0
    2590:	11 24       	eor	r1, r1
    2592:	e8 2a       	or	r14, r24
    2594:	e7 be       	out	0x37, r14	; 55
	if (OC2_TYPE!=T2_OC2_DISCONNECT)
    2596:	66 23       	and	r22, r22
    2598:	41 f0       	breq	.+16     	; 0x25aa <TIMER2_ENABLE+0x70>
	{gpio_outputconfg(DDR_OC2_ADDRESS,PORT_OUTMOD_OC2_ADDRESS,OUTPASS,OC2_PIN);
    259a:	27 e0       	ldi	r18, 0x07	; 7
    259c:	40 e0       	ldi	r20, 0x00	; 0
    259e:	60 e3       	ldi	r22, 0x30	; 48
    25a0:	70 e0       	ldi	r23, 0x00	; 0
    25a2:	81 e3       	ldi	r24, 0x31	; 49
    25a4:	90 e0       	ldi	r25, 0x00	; 0
    25a6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
	}	
}
    25aa:	1f 91       	pop	r17
    25ac:	0f 91       	pop	r16
    25ae:	ff 90       	pop	r15
    25b0:	ef 90       	pop	r14
    25b2:	cf 90       	pop	r12
    25b4:	08 95       	ret

000025b6 <USART1_RECEIVE_byte>:
		}
	
	}
	
return 1;
}
    25b6:	0f 93       	push	r16
    25b8:	1f 93       	push	r17
    25ba:	cf 93       	push	r28
    25bc:	df 93       	push	r29
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <USART1_RECEIVE_byte+0xa>
    25c0:	00 d0       	rcall	.+0      	; 0x25c2 <USART1_RECEIVE_byte+0xc>
    25c2:	cd b7       	in	r28, 0x3d	; 61
    25c4:	de b7       	in	r29, 0x3e	; 62
    25c6:	19 82       	std	Y+1, r1	; 0x01
    25c8:	1a 82       	std	Y+2, r1	; 0x02
    25ca:	1b 82       	std	Y+3, r1	; 0x03
    25cc:	1c 82       	std	Y+4, r1	; 0x04
    25ce:	eb e9       	ldi	r30, 0x9B	; 155
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	19 c0       	rjmp	.+50     	; 0x2606 <USART1_RECEIVE_byte+0x50>
    25d4:	09 81       	ldd	r16, Y+1	; 0x01
    25d6:	1a 81       	ldd	r17, Y+2	; 0x02
    25d8:	2b 81       	ldd	r18, Y+3	; 0x03
    25da:	3c 81       	ldd	r19, Y+4	; 0x04
    25dc:	0f 5f       	subi	r16, 0xFF	; 255
    25de:	1f 4f       	sbci	r17, 0xFF	; 255
    25e0:	2f 4f       	sbci	r18, 0xFF	; 255
    25e2:	3f 4f       	sbci	r19, 0xFF	; 255
    25e4:	09 83       	std	Y+1, r16	; 0x01
    25e6:	1a 83       	std	Y+2, r17	; 0x02
    25e8:	2b 83       	std	Y+3, r18	; 0x03
    25ea:	3c 83       	std	Y+4, r19	; 0x04
    25ec:	09 81       	ldd	r16, Y+1	; 0x01
    25ee:	1a 81       	ldd	r17, Y+2	; 0x02
    25f0:	2b 81       	ldd	r18, Y+3	; 0x03
    25f2:	3c 81       	ldd	r19, Y+4	; 0x04
    25f4:	40 17       	cp	r20, r16
    25f6:	51 07       	cpc	r21, r17
    25f8:	62 07       	cpc	r22, r18
    25fa:	73 07       	cpc	r23, r19
    25fc:	21 f4       	brne	.+8      	; 0x2606 <USART1_RECEIVE_byte+0x50>
    25fe:	fc 01       	movw	r30, r24
    2600:	10 82       	st	Z, r1
    2602:	80 e0       	ldi	r24, 0x00	; 0
    2604:	08 c0       	rjmp	.+16     	; 0x2616 <USART1_RECEIVE_byte+0x60>
    2606:	20 81       	ld	r18, Z
    2608:	22 23       	and	r18, r18
    260a:	24 f7       	brge	.-56     	; 0x25d4 <USART1_RECEIVE_byte+0x1e>
    260c:	21 e0       	ldi	r18, 0x01	; 1
    260e:	fc 01       	movw	r30, r24
    2610:	20 83       	st	Z, r18
    2612:	80 91 9c 00 	lds	r24, 0x009C
    2616:	0f 90       	pop	r0
    2618:	0f 90       	pop	r0
    261a:	0f 90       	pop	r0
    261c:	0f 90       	pop	r0
    261e:	df 91       	pop	r29
    2620:	cf 91       	pop	r28
    2622:	1f 91       	pop	r17
    2624:	0f 91       	pop	r16
    2626:	08 95       	ret

00002628 <USART1_SEND_byte>:
    2628:	cf 93       	push	r28
    262a:	df 93       	push	r29
    262c:	00 d0       	rcall	.+0      	; 0x262e <USART1_SEND_byte+0x6>
    262e:	00 d0       	rcall	.+0      	; 0x2630 <USART1_SEND_byte+0x8>
    2630:	cd b7       	in	r28, 0x3d	; 61
    2632:	de b7       	in	r29, 0x3e	; 62
    2634:	19 82       	std	Y+1, r1	; 0x01
    2636:	1a 82       	std	Y+2, r1	; 0x02
    2638:	1b 82       	std	Y+3, r1	; 0x03
    263a:	1c 82       	std	Y+4, r1	; 0x04
    263c:	80 93 9c 00 	sts	0x009C, r24
    2640:	eb e9       	ldi	r30, 0x9B	; 155
    2642:	f0 e0       	ldi	r31, 0x00	; 0
    2644:	15 c0       	rjmp	.+42     	; 0x2670 <USART1_SEND_byte+0x48>
    2646:	49 81       	ldd	r20, Y+1	; 0x01
    2648:	5a 81       	ldd	r21, Y+2	; 0x02
    264a:	6b 81       	ldd	r22, Y+3	; 0x03
    264c:	7c 81       	ldd	r23, Y+4	; 0x04
    264e:	4f 5f       	subi	r20, 0xFF	; 255
    2650:	5f 4f       	sbci	r21, 0xFF	; 255
    2652:	6f 4f       	sbci	r22, 0xFF	; 255
    2654:	7f 4f       	sbci	r23, 0xFF	; 255
    2656:	49 83       	std	Y+1, r20	; 0x01
    2658:	5a 83       	std	Y+2, r21	; 0x02
    265a:	6b 83       	std	Y+3, r22	; 0x03
    265c:	7c 83       	std	Y+4, r23	; 0x04
    265e:	49 81       	ldd	r20, Y+1	; 0x01
    2660:	5a 81       	ldd	r21, Y+2	; 0x02
    2662:	6b 81       	ldd	r22, Y+3	; 0x03
    2664:	7c 81       	ldd	r23, Y+4	; 0x04
    2666:	48 3e       	cpi	r20, 0xE8	; 232
    2668:	53 40       	sbci	r21, 0x03	; 3
    266a:	61 05       	cpc	r22, r1
    266c:	71 05       	cpc	r23, r1
    266e:	31 f0       	breq	.+12     	; 0x267c <USART1_SEND_byte+0x54>
    2670:	90 81       	ld	r25, Z
    2672:	89 2f       	mov	r24, r25
    2674:	80 72       	andi	r24, 0x20	; 32
    2676:	95 ff       	sbrs	r25, 5
    2678:	e6 cf       	rjmp	.-52     	; 0x2646 <USART1_SEND_byte+0x1e>
    267a:	81 e0       	ldi	r24, 0x01	; 1
    267c:	0f 90       	pop	r0
    267e:	0f 90       	pop	r0
    2680:	0f 90       	pop	r0
    2682:	0f 90       	pop	r0
    2684:	df 91       	pop	r29
    2686:	cf 91       	pop	r28
    2688:	08 95       	ret

0000268a <USART0_INIT>:
    268a:	5f 92       	push	r5
    268c:	6f 92       	push	r6
    268e:	7f 92       	push	r7
    2690:	8f 92       	push	r8
    2692:	9f 92       	push	r9
    2694:	af 92       	push	r10
    2696:	bf 92       	push	r11
    2698:	cf 92       	push	r12
    269a:	df 92       	push	r13
    269c:	ef 92       	push	r14
    269e:	ff 92       	push	r15
    26a0:	0f 93       	push	r16
    26a2:	1f 93       	push	r17
    26a4:	cf 93       	push	r28
    26a6:	df 93       	push	r29
    26a8:	cd b7       	in	r28, 0x3d	; 61
    26aa:	de b7       	in	r29, 0x3e	; 62
    26ac:	3c 01       	movw	r6, r24
    26ae:	f6 2e       	mov	r15, r22
    26b0:	14 2f       	mov	r17, r20
    26b2:	52 2e       	mov	r5, r18
    26b4:	21 e0       	ldi	r18, 0x01	; 1
    26b6:	40 e0       	ldi	r20, 0x00	; 0
    26b8:	61 e2       	ldi	r22, 0x21	; 33
    26ba:	70 e0       	ldi	r23, 0x00	; 0
    26bc:	82 e2       	ldi	r24, 0x22	; 34
    26be:	90 e0       	ldi	r25, 0x00	; 0
    26c0:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	40 e0       	ldi	r20, 0x00	; 0
    26c8:	63 e2       	ldi	r22, 0x23	; 35
    26ca:	70 e0       	ldi	r23, 0x00	; 0
    26cc:	82 e2       	ldi	r24, 0x22	; 34
    26ce:	90 e0       	ldi	r25, 0x00	; 0
    26d0:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_inputconfg>
    26d4:	1a b8       	out	0x0a, r1	; 10
    26d6:	8e 2d       	mov	r24, r14
    26d8:	8c 29       	or	r24, r12
    26da:	80 68       	ori	r24, 0x80	; 128
    26dc:	e8 2e       	mov	r14, r24
    26de:	e6 28       	or	r14, r6
    26e0:	e0 92 95 00 	sts	0x0095, r14
    26e4:	8a b1       	in	r24, 0x0a	; 10
    26e6:	d8 2a       	or	r13, r24
    26e8:	80 e2       	ldi	r24, 0x20	; 32
    26ea:	58 9e       	mul	r5, r24
    26ec:	90 01       	movw	r18, r0
    26ee:	11 24       	eor	r1, r1
    26f0:	02 2b       	or	r16, r18
    26f2:	80 e4       	ldi	r24, 0x40	; 64
    26f4:	f8 9e       	mul	r15, r24
    26f6:	90 01       	movw	r18, r0
    26f8:	11 24       	eor	r1, r1
    26fa:	20 2b       	or	r18, r16
    26fc:	30 e8       	ldi	r19, 0x80	; 128
    26fe:	13 9f       	mul	r17, r19
    2700:	c0 01       	movw	r24, r0
    2702:	11 24       	eor	r1, r1
    2704:	82 2b       	or	r24, r18
    2706:	8d 29       	or	r24, r13
    2708:	8a b9       	out	0x0a, r24	; 10
    270a:	8b b1       	in	r24, 0x0b	; 11
    270c:	87 29       	or	r24, r7
    270e:	8b b9       	out	0x0b, r24	; 11
    2710:	82 e4       	ldi	r24, 0x42	; 66
    2712:	68 16       	cp	r6, r24
    2714:	71 04       	cpc	r7, r1
    2716:	38 f4       	brcc	.+14     	; 0x2726 <USART0_INIT+0x9c>
    2718:	30 e4       	ldi	r19, 0x40	; 64
    271a:	63 16       	cp	r6, r19
    271c:	71 04       	cpc	r7, r1
    271e:	d0 f5       	brcc	.+116    	; 0x2794 <USART0_INIT+0x10a>
    2720:	67 28       	or	r6, r7
    2722:	31 f0       	breq	.+12     	; 0x2730 <USART0_INIT+0xa6>
    2724:	51 c0       	rjmp	.+162    	; 0x27c8 <USART0_INIT+0x13e>
    2726:	61 14       	cp	r6, r1
    2728:	82 e0       	ldi	r24, 0x02	; 2
    272a:	78 06       	cpc	r7, r24
    272c:	e1 f0       	breq	.+56     	; 0x2766 <USART0_INIT+0xdc>
    272e:	4c c0       	rjmp	.+152    	; 0x27c8 <USART0_INIT+0x13e>
    2730:	88 0c       	add	r8, r8
    2732:	99 1c       	adc	r9, r9
    2734:	aa 1c       	adc	r10, r10
    2736:	bb 1c       	adc	r11, r11
    2738:	88 0c       	add	r8, r8
    273a:	99 1c       	adc	r9, r9
    273c:	aa 1c       	adc	r10, r10
    273e:	bb 1c       	adc	r11, r11
    2740:	a5 01       	movw	r20, r10
    2742:	94 01       	movw	r18, r8
    2744:	22 0f       	add	r18, r18
    2746:	33 1f       	adc	r19, r19
    2748:	44 1f       	adc	r20, r20
    274a:	55 1f       	adc	r21, r21
    274c:	22 0f       	add	r18, r18
    274e:	33 1f       	adc	r19, r19
    2750:	44 1f       	adc	r20, r20
    2752:	55 1f       	adc	r21, r21
    2754:	60 e0       	ldi	r22, 0x00	; 0
    2756:	74 e2       	ldi	r23, 0x24	; 36
    2758:	84 ef       	ldi	r24, 0xF4	; 244
    275a:	90 e0       	ldi	r25, 0x00	; 0
    275c:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    2760:	21 50       	subi	r18, 0x01	; 1
    2762:	31 09       	sbc	r19, r1
    2764:	33 c0       	rjmp	.+102    	; 0x27cc <USART0_INIT+0x142>
    2766:	88 0c       	add	r8, r8
    2768:	99 1c       	adc	r9, r9
    276a:	aa 1c       	adc	r10, r10
    276c:	bb 1c       	adc	r11, r11
    276e:	88 0c       	add	r8, r8
    2770:	99 1c       	adc	r9, r9
    2772:	aa 1c       	adc	r10, r10
    2774:	bb 1c       	adc	r11, r11
    2776:	a5 01       	movw	r20, r10
    2778:	94 01       	movw	r18, r8
    277a:	22 0f       	add	r18, r18
    277c:	33 1f       	adc	r19, r19
    277e:	44 1f       	adc	r20, r20
    2780:	55 1f       	adc	r21, r21
    2782:	60 e0       	ldi	r22, 0x00	; 0
    2784:	74 e2       	ldi	r23, 0x24	; 36
    2786:	84 ef       	ldi	r24, 0xF4	; 244
    2788:	90 e0       	ldi	r25, 0x00	; 0
    278a:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    278e:	21 50       	subi	r18, 0x01	; 1
    2790:	31 09       	sbc	r19, r1
    2792:	1c c0       	rjmp	.+56     	; 0x27cc <USART0_INIT+0x142>
    2794:	c5 01       	movw	r24, r10
    2796:	b4 01       	movw	r22, r8
    2798:	0e 94 94 32 	call	0x6528	; 0x6528 <__floatunsisf>
    279c:	9b 01       	movw	r18, r22
    279e:	ac 01       	movw	r20, r24
    27a0:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    27a4:	9b 01       	movw	r18, r22
    27a6:	ac 01       	movw	r20, r24
    27a8:	60 e0       	ldi	r22, 0x00	; 0
    27aa:	74 e2       	ldi	r23, 0x24	; 36
    27ac:	84 e7       	ldi	r24, 0x74	; 116
    27ae:	9b e4       	ldi	r25, 0x4B	; 75
    27b0:	0e 94 00 32 	call	0x6400	; 0x6400 <__divsf3>
    27b4:	20 e0       	ldi	r18, 0x00	; 0
    27b6:	30 e0       	ldi	r19, 0x00	; 0
    27b8:	40 e8       	ldi	r20, 0x80	; 128
    27ba:	5f e3       	ldi	r21, 0x3F	; 63
    27bc:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    27c0:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__fixunssfsi>
    27c4:	9b 01       	movw	r18, r22
    27c6:	02 c0       	rjmp	.+4      	; 0x27cc <USART0_INIT+0x142>
    27c8:	20 e0       	ldi	r18, 0x00	; 0
    27ca:	30 e0       	ldi	r19, 0x00	; 0
    27cc:	29 b9       	out	0x09, r18	; 9
    27ce:	83 2f       	mov	r24, r19
    27d0:	8f 70       	andi	r24, 0x0F	; 15
    27d2:	80 93 90 00 	sts	0x0090, r24
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	cf 90       	pop	r12
    27e6:	bf 90       	pop	r11
    27e8:	af 90       	pop	r10
    27ea:	9f 90       	pop	r9
    27ec:	8f 90       	pop	r8
    27ee:	7f 90       	pop	r7
    27f0:	6f 90       	pop	r6
    27f2:	5f 90       	pop	r5
    27f4:	08 95       	ret

000027f6 <USART1_INIT>:
    27f6:	5f 92       	push	r5
    27f8:	6f 92       	push	r6
    27fa:	7f 92       	push	r7
    27fc:	8f 92       	push	r8
    27fe:	9f 92       	push	r9
    2800:	af 92       	push	r10
    2802:	bf 92       	push	r11
    2804:	cf 92       	push	r12
    2806:	df 92       	push	r13
    2808:	ef 92       	push	r14
    280a:	ff 92       	push	r15
    280c:	0f 93       	push	r16
    280e:	1f 93       	push	r17
    2810:	cf 93       	push	r28
    2812:	df 93       	push	r29
    2814:	cd b7       	in	r28, 0x3d	; 61
    2816:	de b7       	in	r29, 0x3e	; 62
    2818:	3c 01       	movw	r6, r24
    281a:	f6 2e       	mov	r15, r22
    281c:	14 2f       	mov	r17, r20
    281e:	52 2e       	mov	r5, r18
    2820:	23 e0       	ldi	r18, 0x03	; 3
    2822:	40 e0       	ldi	r20, 0x00	; 0
    2824:	60 e3       	ldi	r22, 0x30	; 48
    2826:	70 e0       	ldi	r23, 0x00	; 0
    2828:	81 e3       	ldi	r24, 0x31	; 49
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
    2830:	22 e0       	ldi	r18, 0x02	; 2
    2832:	40 e0       	ldi	r20, 0x00	; 0
    2834:	62 e3       	ldi	r22, 0x32	; 50
    2836:	70 e0       	ldi	r23, 0x00	; 0
    2838:	81 e3       	ldi	r24, 0x31	; 49
    283a:	90 e0       	ldi	r25, 0x00	; 0
    283c:	0e 94 c5 07 	call	0xf8a	; 0xf8a <gpio_inputconfg>
    2840:	ea e9       	ldi	r30, 0x9A	; 154
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	10 82       	st	Z, r1
    2846:	8e 2d       	mov	r24, r14
    2848:	8c 29       	or	r24, r12
    284a:	80 68       	ori	r24, 0x80	; 128
    284c:	e8 2e       	mov	r14, r24
    284e:	e6 28       	or	r14, r6
    2850:	e0 92 9d 00 	sts	0x009D, r14
    2854:	80 81       	ld	r24, Z
    2856:	d8 2a       	or	r13, r24
    2858:	80 e2       	ldi	r24, 0x20	; 32
    285a:	58 9e       	mul	r5, r24
    285c:	90 01       	movw	r18, r0
    285e:	11 24       	eor	r1, r1
    2860:	02 2b       	or	r16, r18
    2862:	80 e4       	ldi	r24, 0x40	; 64
    2864:	f8 9e       	mul	r15, r24
    2866:	90 01       	movw	r18, r0
    2868:	11 24       	eor	r1, r1
    286a:	20 2b       	or	r18, r16
    286c:	30 e8       	ldi	r19, 0x80	; 128
    286e:	13 9f       	mul	r17, r19
    2870:	c0 01       	movw	r24, r0
    2872:	11 24       	eor	r1, r1
    2874:	82 2b       	or	r24, r18
    2876:	8d 29       	or	r24, r13
    2878:	80 83       	st	Z, r24
    287a:	eb e9       	ldi	r30, 0x9B	; 155
    287c:	f0 e0       	ldi	r31, 0x00	; 0
    287e:	80 81       	ld	r24, Z
    2880:	87 29       	or	r24, r7
    2882:	80 83       	st	Z, r24
    2884:	82 e4       	ldi	r24, 0x42	; 66
    2886:	68 16       	cp	r6, r24
    2888:	71 04       	cpc	r7, r1
    288a:	38 f4       	brcc	.+14     	; 0x289a <USART1_INIT+0xa4>
    288c:	30 e4       	ldi	r19, 0x40	; 64
    288e:	63 16       	cp	r6, r19
    2890:	71 04       	cpc	r7, r1
    2892:	d0 f5       	brcc	.+116    	; 0x2908 <USART1_INIT+0x112>
    2894:	67 28       	or	r6, r7
    2896:	31 f0       	breq	.+12     	; 0x28a4 <USART1_INIT+0xae>
    2898:	51 c0       	rjmp	.+162    	; 0x293c <USART1_INIT+0x146>
    289a:	61 14       	cp	r6, r1
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	78 06       	cpc	r7, r24
    28a0:	e1 f0       	breq	.+56     	; 0x28da <USART1_INIT+0xe4>
    28a2:	4c c0       	rjmp	.+152    	; 0x293c <USART1_INIT+0x146>
    28a4:	88 0c       	add	r8, r8
    28a6:	99 1c       	adc	r9, r9
    28a8:	aa 1c       	adc	r10, r10
    28aa:	bb 1c       	adc	r11, r11
    28ac:	88 0c       	add	r8, r8
    28ae:	99 1c       	adc	r9, r9
    28b0:	aa 1c       	adc	r10, r10
    28b2:	bb 1c       	adc	r11, r11
    28b4:	a5 01       	movw	r20, r10
    28b6:	94 01       	movw	r18, r8
    28b8:	22 0f       	add	r18, r18
    28ba:	33 1f       	adc	r19, r19
    28bc:	44 1f       	adc	r20, r20
    28be:	55 1f       	adc	r21, r21
    28c0:	22 0f       	add	r18, r18
    28c2:	33 1f       	adc	r19, r19
    28c4:	44 1f       	adc	r20, r20
    28c6:	55 1f       	adc	r21, r21
    28c8:	60 e0       	ldi	r22, 0x00	; 0
    28ca:	74 e2       	ldi	r23, 0x24	; 36
    28cc:	84 ef       	ldi	r24, 0xF4	; 244
    28ce:	90 e0       	ldi	r25, 0x00	; 0
    28d0:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    28d4:	21 50       	subi	r18, 0x01	; 1
    28d6:	31 09       	sbc	r19, r1
    28d8:	33 c0       	rjmp	.+102    	; 0x2940 <USART1_INIT+0x14a>
    28da:	88 0c       	add	r8, r8
    28dc:	99 1c       	adc	r9, r9
    28de:	aa 1c       	adc	r10, r10
    28e0:	bb 1c       	adc	r11, r11
    28e2:	88 0c       	add	r8, r8
    28e4:	99 1c       	adc	r9, r9
    28e6:	aa 1c       	adc	r10, r10
    28e8:	bb 1c       	adc	r11, r11
    28ea:	a5 01       	movw	r20, r10
    28ec:	94 01       	movw	r18, r8
    28ee:	22 0f       	add	r18, r18
    28f0:	33 1f       	adc	r19, r19
    28f2:	44 1f       	adc	r20, r20
    28f4:	55 1f       	adc	r21, r21
    28f6:	60 e0       	ldi	r22, 0x00	; 0
    28f8:	74 e2       	ldi	r23, 0x24	; 36
    28fa:	84 ef       	ldi	r24, 0xF4	; 244
    28fc:	90 e0       	ldi	r25, 0x00	; 0
    28fe:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    2902:	21 50       	subi	r18, 0x01	; 1
    2904:	31 09       	sbc	r19, r1
    2906:	1c c0       	rjmp	.+56     	; 0x2940 <USART1_INIT+0x14a>
    2908:	c5 01       	movw	r24, r10
    290a:	b4 01       	movw	r22, r8
    290c:	0e 94 94 32 	call	0x6528	; 0x6528 <__floatunsisf>
    2910:	9b 01       	movw	r18, r22
    2912:	ac 01       	movw	r20, r24
    2914:	0e 94 9c 31 	call	0x6338	; 0x6338 <__addsf3>
    2918:	9b 01       	movw	r18, r22
    291a:	ac 01       	movw	r20, r24
    291c:	60 e0       	ldi	r22, 0x00	; 0
    291e:	74 e2       	ldi	r23, 0x24	; 36
    2920:	84 e7       	ldi	r24, 0x74	; 116
    2922:	9b e4       	ldi	r25, 0x4B	; 75
    2924:	0e 94 00 32 	call	0x6400	; 0x6400 <__divsf3>
    2928:	20 e0       	ldi	r18, 0x00	; 0
    292a:	30 e0       	ldi	r19, 0x00	; 0
    292c:	40 e8       	ldi	r20, 0x80	; 128
    292e:	5f e3       	ldi	r21, 0x3F	; 63
    2930:	0e 94 9b 31 	call	0x6336	; 0x6336 <__subsf3>
    2934:	0e 94 68 32 	call	0x64d0	; 0x64d0 <__fixunssfsi>
    2938:	9b 01       	movw	r18, r22
    293a:	02 c0       	rjmp	.+4      	; 0x2940 <USART1_INIT+0x14a>
    293c:	20 e0       	ldi	r18, 0x00	; 0
    293e:	30 e0       	ldi	r19, 0x00	; 0
    2940:	20 93 99 00 	sts	0x0099, r18
    2944:	83 2f       	mov	r24, r19
    2946:	8f 70       	andi	r24, 0x0F	; 15
    2948:	80 93 98 00 	sts	0x0098, r24
    294c:	df 91       	pop	r29
    294e:	cf 91       	pop	r28
    2950:	1f 91       	pop	r17
    2952:	0f 91       	pop	r16
    2954:	ff 90       	pop	r15
    2956:	ef 90       	pop	r14
    2958:	df 90       	pop	r13
    295a:	cf 90       	pop	r12
    295c:	bf 90       	pop	r11
    295e:	af 90       	pop	r10
    2960:	9f 90       	pop	r9
    2962:	8f 90       	pop	r8
    2964:	7f 90       	pop	r7
    2966:	6f 90       	pop	r6
    2968:	5f 90       	pop	r5
    296a:	08 95       	ret

0000296c <USART1_SEND_ARRAY>:

unsigned char USART1_SEND_ARRAY(unsigned char *DATA,unsigned short N)
{
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	cf 93       	push	r28
    2972:	df 93       	push	r29
	unsigned short i=0;
	for(i=0;i<N;i++)
    2974:	61 15       	cp	r22, r1
    2976:	71 05       	cpc	r23, r1
    2978:	61 f0       	breq	.+24     	; 0x2992 <USART1_SEND_ARRAY+0x26>
    297a:	ec 01       	movw	r28, r24
    297c:	8c 01       	movw	r16, r24
    297e:	06 0f       	add	r16, r22
    2980:	17 1f       	adc	r17, r23
	{
		if(USART1_SEND_byte(DATA[i])!=1)
    2982:	89 91       	ld	r24, Y+
    2984:	51 de       	rcall	.-862    	; 0x2628 <USART1_SEND_byte>
    2986:	81 30       	cpi	r24, 0x01	; 1
    2988:	31 f4       	brne	.+12     	; 0x2996 <USART1_SEND_ARRAY+0x2a>
}

unsigned char USART1_SEND_ARRAY(unsigned char *DATA,unsigned short N)
{
	unsigned short i=0;
	for(i=0;i<N;i++)
    298a:	c0 17       	cp	r28, r16
    298c:	d1 07       	cpc	r29, r17
    298e:	c9 f7       	brne	.-14     	; 0x2982 <USART1_SEND_ARRAY+0x16>
    2990:	03 c0       	rjmp	.+6      	; 0x2998 <USART1_SEND_ARRAY+0x2c>
			return 0;
		}
		
	}
	
	return 1;
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	01 c0       	rjmp	.+2      	; 0x2998 <USART1_SEND_ARRAY+0x2c>
	unsigned short i=0;
	for(i=0;i<N;i++)
	{
		if(USART1_SEND_byte(DATA[i])!=1)
		{
			return 0;
    2996:	80 e0       	ldi	r24, 0x00	; 0
		}
		
	}
	
	return 1;
}
    2998:	df 91       	pop	r29
    299a:	cf 91       	pop	r28
    299c:	1f 91       	pop	r17
    299e:	0f 91       	pop	r16
    29a0:	08 95       	ret

000029a2 <PROTOCOL_SETUP>:

unsigned char MY_ADDRESS[5]={MY_PROTOCOL_ADDRESS_ARRAY_0,MY_PROTOCOL_ADDRESS_ARRAY_1,MY_PROTOCOL_ADDRESS_ARRAY_2,MY_PROTOCOL_ADDRESS_ARRAY_3,MY_PROTOCOL_ADDRESS_ARRAY_4};

void PROTOCOL_SETUP()
{
	 NRF_SETUP_USED_CONFIG();
    29a2:	79 cb       	rjmp	.-2318   	; 0x2096 <NRF_SETUP_USED_CONFIG>
    29a4:	08 95       	ret

000029a6 <PROTOCOL_IO_SETUP>:
}

void PROTOCOL_IO_SETUP()
{
	 NRF_IO_SETUP();
    29a6:	5e cb       	rjmp	.-2372   	; 0x2064 <NRF_IO_SETUP>
    29a8:	08 95       	ret

000029aa <PROTOCOL_CHECK_RECIVED_PACKET>:
	TEST_UART_SEND_str("SENSOR CONNECTED\n");
	return 1;
}

unsigned char PROTOCOL_CHECK_RECIVED_PACKET(unsigned char *PACKET, unsigned char *SENSOR_ADDRESS,unsigned char LENGTH,unsigned char*KEY)
{
    29aa:	ef 92       	push	r14
    29ac:	ff 92       	push	r15
    29ae:	0f 93       	push	r16
    29b0:	1f 93       	push	r17
    29b2:	cf 93       	push	r28
    29b4:	df 93       	push	r29
    29b6:	00 d0       	rcall	.+0      	; 0x29b8 <PROTOCOL_CHECK_RECIVED_PACKET+0xe>
    29b8:	cd b7       	in	r28, 0x3d	; 61
    29ba:	de b7       	in	r29, 0x3e	; 62
    29bc:	8c 01       	movw	r16, r24
	if (LENGTH!=(0b01111111 & PACKET[0]))
    29be:	fc 01       	movw	r30, r24
    29c0:	80 81       	ld	r24, Z
    29c2:	f8 2f       	mov	r31, r24
    29c4:	ff 77       	andi	r31, 0x7F	; 127
    29c6:	ef 2e       	mov	r14, r31
    29c8:	f4 13       	cpse	r31, r20
    29ca:	3c c0       	rjmp	.+120    	; 0x2a44 <PROTOCOL_CHECK_RECIVED_PACKET+0x9a>
	{
		return 0;
	}
	if (PACKET[1]>PROTOCOL_CURRENT_VERSION)
    29cc:	f8 01       	movw	r30, r16
    29ce:	91 81       	ldd	r25, Z+1	; 0x01
    29d0:	92 30       	cpi	r25, 0x02	; 2
    29d2:	d0 f5       	brcc	.+116    	; 0x2a48 <PROTOCOL_CHECK_RECIVED_PACKET+0x9e>
		return 0;
	}
	unsigned char i;
	for(i=0;i<5;i++)
	{
		if (PACKET[2+i]!=SENSOR_ADDRESS[i])
    29d4:	42 81       	ldd	r20, Z+2	; 0x02
    29d6:	fb 01       	movw	r30, r22
    29d8:	90 81       	ld	r25, Z
    29da:	49 13       	cpse	r20, r25
    29dc:	37 c0       	rjmp	.+110    	; 0x2a4c <PROTOCOL_CHECK_RECIVED_PACKET+0xa2>
    29de:	d8 01       	movw	r26, r16
    29e0:	13 96       	adiw	r26, 0x03	; 3
    29e2:	31 96       	adiw	r30, 0x01	; 1
    29e4:	68 94       	set
    29e6:	ff 24       	eor	r15, r15
    29e8:	f2 f8       	bld	r15, 2
    29ea:	4d 91       	ld	r20, X+
    29ec:	91 91       	ld	r25, Z+
    29ee:	49 13       	cpse	r20, r25
    29f0:	2f c0       	rjmp	.+94     	; 0x2a50 <PROTOCOL_CHECK_RECIVED_PACKET+0xa6>
    29f2:	fa 94       	dec	r15
	if (PACKET[1]>PROTOCOL_CURRENT_VERSION)
	{
		return 0;
	}
	unsigned char i;
	for(i=0;i<5;i++)
    29f4:	d1 f7       	brne	.-12     	; 0x29ea <PROTOCOL_CHECK_RECIVED_PACKET+0x40>
	}
	
	
	
	unsigned char HASH_VALUE[2];
	if (0b10000000&PACKET[0])
    29f6:	88 23       	and	r24, r24
    29f8:	44 f4       	brge	.+16     	; 0x2a0a <PROTOCOL_CHECK_RECIVED_PACKET+0x60>
	{
		HASH_PASWORD_KEY(PACKET,HASH_VALUE,LENGTH-2,KEY);
    29fa:	4e ef       	ldi	r20, 0xFE	; 254
    29fc:	4e 0d       	add	r20, r14
    29fe:	be 01       	movw	r22, r28
    2a00:	6f 5f       	subi	r22, 0xFF	; 255
    2a02:	7f 4f       	sbci	r23, 0xFF	; 255
    2a04:	c8 01       	movw	r24, r16
    2a06:	4a d6       	rcall	.+3220   	; 0x369c <HASH_PASWORD_KEY>
    2a08:	07 c0       	rjmp	.+14     	; 0x2a18 <PROTOCOL_CHECK_RECIVED_PACKET+0x6e>
	}
	else
	{
		HASH_SESSION_KEY(PACKET,HASH_VALUE,LENGTH-2,KEY);
    2a0a:	4e ef       	ldi	r20, 0xFE	; 254
    2a0c:	4e 0d       	add	r20, r14
    2a0e:	be 01       	movw	r22, r28
    2a10:	6f 5f       	subi	r22, 0xFF	; 255
    2a12:	7f 4f       	sbci	r23, 0xFF	; 255
    2a14:	c8 01       	movw	r24, r16
    2a16:	b3 d5       	rcall	.+2918   	; 0x357e <HASH_SESSION_KEY>
	}
	if ((HASH_VALUE[0]==PACKET[LENGTH-2])&&(HASH_VALUE[1]==PACKET[LENGTH-1]))
    2a18:	2e 2d       	mov	r18, r14
    2a1a:	30 e0       	ldi	r19, 0x00	; 0
    2a1c:	f8 01       	movw	r30, r16
    2a1e:	e2 0f       	add	r30, r18
    2a20:	f3 1f       	adc	r31, r19
    2a22:	32 97       	sbiw	r30, 0x02	; 2
    2a24:	99 81       	ldd	r25, Y+1	; 0x01
    2a26:	80 81       	ld	r24, Z
    2a28:	98 13       	cpse	r25, r24
    2a2a:	13 c0       	rjmp	.+38     	; 0x2a52 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>
    2a2c:	02 0f       	add	r16, r18
    2a2e:	13 1f       	adc	r17, r19
    2a30:	f8 01       	movw	r30, r16
    2a32:	31 97       	sbiw	r30, 0x01	; 1
    2a34:	ff 24       	eor	r15, r15
    2a36:	f3 94       	inc	r15
    2a38:	9a 81       	ldd	r25, Y+2	; 0x02
    2a3a:	80 81       	ld	r24, Z
    2a3c:	98 17       	cp	r25, r24
    2a3e:	49 f0       	breq	.+18     	; 0x2a52 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>
    2a40:	f1 2c       	mov	r15, r1
    2a42:	07 c0       	rjmp	.+14     	; 0x2a52 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>

unsigned char PROTOCOL_CHECK_RECIVED_PACKET(unsigned char *PACKET, unsigned char *SENSOR_ADDRESS,unsigned char LENGTH,unsigned char*KEY)
{
	if (LENGTH!=(0b01111111 & PACKET[0]))
	{
		return 0;
    2a44:	f1 2c       	mov	r15, r1
    2a46:	05 c0       	rjmp	.+10     	; 0x2a52 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>
	}
	if (PACKET[1]>PROTOCOL_CURRENT_VERSION)
	{
		return 0;
    2a48:	f1 2c       	mov	r15, r1
    2a4a:	03 c0       	rjmp	.+6      	; 0x2a52 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>
	unsigned char i;
	for(i=0;i<5;i++)
	{
		if (PACKET[2+i]!=SENSOR_ADDRESS[i])
		{
			return 0;
    2a4c:	f1 2c       	mov	r15, r1
    2a4e:	01 c0       	rjmp	.+2      	; 0x2a52 <PROTOCOL_CHECK_RECIVED_PACKET+0xa8>
    2a50:	f1 2c       	mov	r15, r1
	{
		return 1;
	}
	return 0;
	
}
    2a52:	8f 2d       	mov	r24, r15
    2a54:	0f 90       	pop	r0
    2a56:	0f 90       	pop	r0
    2a58:	df 91       	pop	r29
    2a5a:	cf 91       	pop	r28
    2a5c:	1f 91       	pop	r17
    2a5e:	0f 91       	pop	r16
    2a60:	ff 90       	pop	r15
    2a62:	ef 90       	pop	r14
    2a64:	08 95       	ret

00002a66 <PROTOCOL_MASTER_CONNECT_TO_SENSOR>:
{
	 NRF_IO_SETUP();
}

unsigned char PROTOCOL_MASTER_CONNECT_TO_SENSOR(unsigned char*SENSOR_ADDRESS,unsigned char SENSOR_VERSION,unsigned char SENSOR_ADDRESS_LENGTH,unsigned char*PASSWORD_KEY)
{
    2a66:	2f 92       	push	r2
    2a68:	3f 92       	push	r3
    2a6a:	4f 92       	push	r4
    2a6c:	5f 92       	push	r5
    2a6e:	6f 92       	push	r6
    2a70:	7f 92       	push	r7
    2a72:	8f 92       	push	r8
    2a74:	9f 92       	push	r9
    2a76:	af 92       	push	r10
    2a78:	bf 92       	push	r11
    2a7a:	cf 92       	push	r12
    2a7c:	df 92       	push	r13
    2a7e:	ef 92       	push	r14
    2a80:	ff 92       	push	r15
    2a82:	0f 93       	push	r16
    2a84:	1f 93       	push	r17
    2a86:	cf 93       	push	r28
    2a88:	df 93       	push	r29
    2a8a:	cd b7       	in	r28, 0x3d	; 61
    2a8c:	de b7       	in	r29, 0x3e	; 62
    2a8e:	68 97       	sbiw	r28, 0x18	; 24
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
    2a9a:	7c 01       	movw	r14, r24
    2a9c:	26 2e       	mov	r2, r22
    2a9e:	34 2e       	mov	r3, r20
    2aa0:	89 01       	movw	r16, r18
	unsigned char PACKET_TEMP[12];
	unsigned char i,RX_LENGTH;
	unsigned char HASH_VALUE[2];
	volatile unsigned long COUNT_TIMER=0;
    2aa2:	18 8a       	std	Y+16, r1	; 0x10
    2aa4:	19 8a       	std	Y+17, r1	; 0x11
    2aa6:	1a 8a       	std	Y+18, r1	; 0x12
    2aa8:	1b 8a       	std	Y+19, r1	; 0x13
	
	
	
	/*********SEND MASTER NEEDS TO CONNECT**********/
	PACKET_TEMP[0]=10|0B10000000;
    2aaa:	8a e8       	ldi	r24, 0x8A	; 138
    2aac:	89 83       	std	Y+1, r24	; 0x01
	PACKET_TEMP[1]=SENSOR_VERSION;
    2aae:	6a 83       	std	Y+2, r22	; 0x02
    2ab0:	0f 2e       	mov	r0, r31
    2ab2:	f8 e0       	ldi	r31, 0x08	; 8
    2ab4:	cf 2e       	mov	r12, r31
    2ab6:	f1 e0       	ldi	r31, 0x01	; 1
    2ab8:	df 2e       	mov	r13, r31
    2aba:	f0 2d       	mov	r31, r0
    2abc:	8d e0       	ldi	r24, 0x0D	; 13
    2abe:	91 e0       	ldi	r25, 0x01	; 1
    2ac0:	de 01       	movw	r26, r28
    2ac2:	13 96       	adiw	r26, 0x03	; 3
    2ac4:	f6 01       	movw	r30, r12
	for (i=0;i<5;i++)
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
    2ac6:	21 91       	ld	r18, Z+
    2ac8:	2d 93       	st	X+, r18
	
	
	/*********SEND MASTER NEEDS TO CONNECT**********/
	PACKET_TEMP[0]=10|0B10000000;
	PACKET_TEMP[1]=SENSOR_VERSION;
	for (i=0;i<5;i++)
    2aca:	e8 17       	cp	r30, r24
    2acc:	f9 07       	cpc	r31, r25
    2ace:	d9 f7       	brne	.-10     	; 0x2ac6 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x60>
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
	}
	PACKET_TEMP[7]=MASTER_REQUEST_CONNECT_CODE;
    2ad0:	81 e0       	ldi	r24, 0x01	; 1
    2ad2:	88 87       	std	Y+8, r24	; 0x08
	HASH_PASWORD_KEY(PACKET_TEMP,HASH_VALUE,8,PASSWORD_KEY);
    2ad4:	98 01       	movw	r18, r16
    2ad6:	48 e0       	ldi	r20, 0x08	; 8
    2ad8:	be 01       	movw	r22, r28
    2ada:	62 5f       	subi	r22, 0xF2	; 242
    2adc:	7f 4f       	sbci	r23, 0xFF	; 255
    2ade:	ce 01       	movw	r24, r28
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	dc d5       	rcall	.+3000   	; 0x369c <HASH_PASWORD_KEY>
	PACKET_TEMP[8]=HASH_VALUE[0];
    2ae4:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ae6:	89 87       	std	Y+9, r24	; 0x09
	PACKET_TEMP[9]=HASH_VALUE[1];
    2ae8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2aea:	8a 87       	std	Y+10, r24	; 0x0a
	if (!NRF_SEND_DATA_WITH_ACK(SENSOR_ADDRESS,SENSOR_ADDRESS_LENGTH,PACKET_TEMP,10))
    2aec:	2a e0       	ldi	r18, 0x0A	; 10
    2aee:	ae 01       	movw	r20, r28
    2af0:	4f 5f       	subi	r20, 0xFF	; 255
    2af2:	5f 4f       	sbci	r21, 0xFF	; 255
    2af4:	63 2d       	mov	r22, r3
    2af6:	c7 01       	movw	r24, r14
    2af8:	3f db       	rcall	.-2434   	; 0x2178 <NRF_SEND_DATA_WITH_ACK>
    2afa:	b8 2e       	mov	r11, r24
    2afc:	81 11       	cpse	r24, r1
    2afe:	05 c0       	rjmp	.+10     	; 0x2b0a <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0xa4>
	{
		TEST_UART_SEND_str("FIRST FAIL\n");
    2b00:	87 e1       	ldi	r24, 0x17	; 23
    2b02:	92 e0       	ldi	r25, 0x02	; 2
    2b04:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
		return 0;
    2b08:	e8 c0       	rjmp	.+464    	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	}
	/*****************************************************************************************/
	
	
	/******************************RECIVE SENSOR CHALLANGE*******************************************/
	NRF_START_RX_MODE();
    2b0a:	75 db       	rcall	.-2326   	; 0x21f6 <NRF_START_RX_MODE>
	TEST_UART_SEND_str("FIRST PASS\n");
    2b0c:	83 e2       	ldi	r24, 0x23	; 35
    2b0e:	92 e0       	ldi	r25, 0x02	; 2
    2b10:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2b14:	1a c0       	rjmp	.+52     	; 0x2b4a <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0xe4>
	{
		COUNT_TIMER++;
    2b16:	88 89       	ldd	r24, Y+16	; 0x10
    2b18:	99 89       	ldd	r25, Y+17	; 0x11
    2b1a:	aa 89       	ldd	r26, Y+18	; 0x12
    2b1c:	bb 89       	ldd	r27, Y+19	; 0x13
    2b1e:	01 96       	adiw	r24, 0x01	; 1
    2b20:	a1 1d       	adc	r26, r1
    2b22:	b1 1d       	adc	r27, r1
    2b24:	88 8b       	std	Y+16, r24	; 0x10
    2b26:	99 8b       	std	Y+17, r25	; 0x11
    2b28:	aa 8b       	std	Y+18, r26	; 0x12
    2b2a:	bb 8b       	std	Y+19, r27	; 0x13
		if(COUNT_TIMER==MAX_COUNT_WAIT)
    2b2c:	48 89       	ldd	r20, Y+16	; 0x10
    2b2e:	59 89       	ldd	r21, Y+17	; 0x11
    2b30:	6a 89       	ldd	r22, Y+18	; 0x12
    2b32:	7b 89       	ldd	r23, Y+19	; 0x13
    2b34:	4f 3f       	cpi	r20, 0xFF	; 255
    2b36:	5f 4f       	sbci	r21, 0xFF	; 255
    2b38:	6f 40       	sbci	r22, 0x0F	; 15
    2b3a:	71 05       	cpc	r23, r1
    2b3c:	31 f4       	brne	.+12     	; 0x2b4a <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0xe4>
		{
			
			TEST_UART_SEND_str("FAIL 2\n");
    2b3e:	8f e2       	ldi	r24, 0x2F	; 47
    2b40:	92 e0       	ldi	r25, 0x02	; 2
    2b42:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
			NRF_STOP_RX_MODE();
    2b46:	65 db       	rcall	.-2358   	; 0x2212 <NRF_STOP_RX_MODE>
			
			return 0;
    2b48:	c8 c0       	rjmp	.+400    	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	
	
	/******************************RECIVE SENSOR CHALLANGE*******************************************/
	NRF_START_RX_MODE();
	TEST_UART_SEND_str("FIRST PASS\n");
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2b4a:	be 01       	movw	r22, r28
    2b4c:	63 5f       	subi	r22, 0xF3	; 243
    2b4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2b50:	ce 01       	movw	r24, r28
    2b52:	01 96       	adiw	r24, 0x01	; 1
    2b54:	6a db       	rcall	.-2348   	; 0x222a <NRF_CHECK_RX_PL>
    2b56:	b8 2e       	mov	r11, r24
    2b58:	88 23       	and	r24, r24
    2b5a:	e9 f2       	breq	.-70     	; 0x2b16 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0xb0>
			NRF_STOP_RX_MODE();
			
			return 0;
		}
	}
	TEST_UART_SEND_str("counter=");
    2b5c:	87 e3       	ldi	r24, 0x37	; 55
    2b5e:	92 e0       	ldi	r25, 0x02	; 2
    2b60:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	TEST_UART_SEND_VALUE(COUNT_TIMER);
    2b64:	48 88       	ldd	r4, Y+16	; 0x10
    2b66:	59 88       	ldd	r5, Y+17	; 0x11
    2b68:	6a 88       	ldd	r6, Y+18	; 0x12
    2b6a:	7b 88       	ldd	r7, Y+19	; 0x13
    2b6c:	24 2d       	mov	r18, r4
    2b6e:	35 2d       	mov	r19, r5
    2b70:	46 2d       	mov	r20, r6
    2b72:	57 2d       	mov	r21, r7
    2b74:	60 e0       	ldi	r22, 0x00	; 0
    2b76:	70 e0       	ldi	r23, 0x00	; 0
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
	TEST_UART_SEND_str("\n");
    2b80:	8e e7       	ldi	r24, 0x7E	; 126
    2b82:	91 e0       	ldi	r25, 0x01	; 1
    2b84:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	NRF_STOP_RX_MODE();
    2b88:	44 db       	rcall	.-2424   	; 0x2212 <NRF_STOP_RX_MODE>
	
	if (!PROTOCOL_CHECK_RECIVED_PACKET(PACKET_TEMP, SENSOR_ADDRESS,RX_LENGTH,PASSWORD_KEY))
    2b8a:	98 01       	movw	r18, r16
    2b8c:	4d 85       	ldd	r20, Y+13	; 0x0d
    2b8e:	b7 01       	movw	r22, r14
    2b90:	ce 01       	movw	r24, r28
    2b92:	01 96       	adiw	r24, 0x01	; 1
    2b94:	0a df       	rcall	.-492    	; 0x29aa <PROTOCOL_CHECK_RECIVED_PACKET>
    2b96:	b8 2e       	mov	r11, r24
    2b98:	88 23       	and	r24, r24
    2b9a:	09 f4       	brne	.+2      	; 0x2b9e <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x138>
    2b9c:	9e c0       	rjmp	.+316    	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=SENSOR_CHALLENGE_CODE)
    2b9e:	88 85       	ldd	r24, Y+8	; 0x08
    2ba0:	82 30       	cpi	r24, 0x02	; 2
    2ba2:	09 f0       	breq	.+2      	; 0x2ba6 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x140>
    2ba4:	95 c0       	rjmp	.+298    	; 0x2cd0 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x26a>
	
	/**************************************************************************************************/
	
	/****************************************SEND THE ENCRYPTED RANDOM NUMBER***********************************************************/
	unsigned char R_N[2],ENC_R_N[2];
	R_N[0]=PACKET_TEMP[8];
    2ba6:	89 85       	ldd	r24, Y+9	; 0x09
    2ba8:	8c 8b       	std	Y+20, r24	; 0x14
	R_N[1]=PACKET_TEMP[9];
    2baa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2bac:	8d 8b       	std	Y+21, r24	; 0x15
	ENCRYPT_ALGORISM_2_V1(R_N,ENC_R_N,2,PASSWORD_KEY);
    2bae:	98 01       	movw	r18, r16
    2bb0:	42 e0       	ldi	r20, 0x02	; 2
    2bb2:	be 01       	movw	r22, r28
    2bb4:	6a 5e       	subi	r22, 0xEA	; 234
    2bb6:	7f 4f       	sbci	r23, 0xFF	; 255
    2bb8:	ce 01       	movw	r24, r28
    2bba:	44 96       	adiw	r24, 0x14	; 20
    2bbc:	aa d4       	rcall	.+2388   	; 0x3512 <ENCRYPT_ALGORISM_2_V1>
	
	PACKET_TEMP[0]=12|0B10000000;
    2bbe:	8c e8       	ldi	r24, 0x8C	; 140
    2bc0:	89 83       	std	Y+1, r24	; 0x01
	PACKET_TEMP[1]=SENSOR_VERSION;
    2bc2:	2a 82       	std	Y+2, r2	; 0x02
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    2bc4:	33 20       	and	r3, r3
    2bc6:	51 f0       	breq	.+20     	; 0x2bdc <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x176>
    2bc8:	de 01       	movw	r26, r28
    2bca:	13 96       	adiw	r26, 0x03	; 3
    2bcc:	e8 e0       	ldi	r30, 0x08	; 8
    2bce:	f1 e0       	ldi	r31, 0x01	; 1
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
    2bd0:	81 91       	ld	r24, Z+
    2bd2:	8d 93       	st	X+, r24
    2bd4:	8e 2f       	mov	r24, r30
    2bd6:	8c 19       	sub	r24, r12
	R_N[1]=PACKET_TEMP[9];
	ENCRYPT_ALGORISM_2_V1(R_N,ENC_R_N,2,PASSWORD_KEY);
	
	PACKET_TEMP[0]=12|0B10000000;
	PACKET_TEMP[1]=SENSOR_VERSION;
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    2bd8:	83 15       	cp	r24, r3
    2bda:	d0 f3       	brcs	.-12     	; 0x2bd0 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x16a>
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
	}
	PACKET_TEMP[7]=CHALLENGE_ANSWER_CODE;
    2bdc:	83 e0       	ldi	r24, 0x03	; 3
    2bde:	88 87       	std	Y+8, r24	; 0x08
	PACKET_TEMP[8]=ENC_R_N[0];
    2be0:	8e 89       	ldd	r24, Y+22	; 0x16
    2be2:	89 87       	std	Y+9, r24	; 0x09
	PACKET_TEMP[9]=ENC_R_N[1];
    2be4:	8f 89       	ldd	r24, Y+23	; 0x17
    2be6:	8a 87       	std	Y+10, r24	; 0x0a
	HASH_PASWORD_KEY(PACKET_TEMP,HASH_VALUE,10,PASSWORD_KEY);
    2be8:	98 01       	movw	r18, r16
    2bea:	4a e0       	ldi	r20, 0x0A	; 10
    2bec:	be 01       	movw	r22, r28
    2bee:	62 5f       	subi	r22, 0xF2	; 242
    2bf0:	7f 4f       	sbci	r23, 0xFF	; 255
    2bf2:	ce 01       	movw	r24, r28
    2bf4:	01 96       	adiw	r24, 0x01	; 1
    2bf6:	52 d5       	rcall	.+2724   	; 0x369c <HASH_PASWORD_KEY>
	PACKET_TEMP[10]=HASH_VALUE[0];
    2bf8:	8e 85       	ldd	r24, Y+14	; 0x0e
    2bfa:	8b 87       	std	Y+11, r24	; 0x0b
	PACKET_TEMP[11]=HASH_VALUE[1];
    2bfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    2bfe:	8c 87       	std	Y+12, r24	; 0x0c
	if (!NRF_SEND_DATA_WITH_ACK(SENSOR_ADDRESS,SENSOR_ADDRESS_LENGTH,PACKET_TEMP,12))
    2c00:	2c e0       	ldi	r18, 0x0C	; 12
    2c02:	ae 01       	movw	r20, r28
    2c04:	4f 5f       	subi	r20, 0xFF	; 255
    2c06:	5f 4f       	sbci	r21, 0xFF	; 255
    2c08:	63 2d       	mov	r22, r3
    2c0a:	c7 01       	movw	r24, r14
    2c0c:	b5 da       	rcall	.-2710   	; 0x2178 <NRF_SEND_DATA_WITH_ACK>
    2c0e:	b8 2e       	mov	r11, r24
    2c10:	88 23       	and	r24, r24
    2c12:	09 f4       	brne	.+2      	; 0x2c16 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x1b0>
    2c14:	62 c0       	rjmp	.+196    	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	}
	/******************************************************************************************************************************/
	
	
	/****************************************CHECK THE RESULT OF CHALLANGE***********************************************************/
	COUNT_TIMER=0;
    2c16:	18 8a       	std	Y+16, r1	; 0x10
    2c18:	19 8a       	std	Y+17, r1	; 0x11
    2c1a:	1a 8a       	std	Y+18, r1	; 0x12
    2c1c:	1b 8a       	std	Y+19, r1	; 0x13
	NRF_START_RX_MODE();
    2c1e:	eb da       	rcall	.-2602   	; 0x21f6 <NRF_START_RX_MODE>
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2c20:	16 c0       	rjmp	.+44     	; 0x2c4e <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x1e8>
	{
		COUNT_TIMER++;
    2c22:	88 89       	ldd	r24, Y+16	; 0x10
    2c24:	99 89       	ldd	r25, Y+17	; 0x11
    2c26:	aa 89       	ldd	r26, Y+18	; 0x12
    2c28:	bb 89       	ldd	r27, Y+19	; 0x13
    2c2a:	01 96       	adiw	r24, 0x01	; 1
    2c2c:	a1 1d       	adc	r26, r1
    2c2e:	b1 1d       	adc	r27, r1
    2c30:	88 8b       	std	Y+16, r24	; 0x10
    2c32:	99 8b       	std	Y+17, r25	; 0x11
    2c34:	aa 8b       	std	Y+18, r26	; 0x12
    2c36:	bb 8b       	std	Y+19, r27	; 0x13
		if(COUNT_TIMER==MAX_COUNT_WAIT)
    2c38:	88 89       	ldd	r24, Y+16	; 0x10
    2c3a:	99 89       	ldd	r25, Y+17	; 0x11
    2c3c:	aa 89       	ldd	r26, Y+18	; 0x12
    2c3e:	bb 89       	ldd	r27, Y+19	; 0x13
    2c40:	8f 3f       	cpi	r24, 0xFF	; 255
    2c42:	9f 4f       	sbci	r25, 0xFF	; 255
    2c44:	af 40       	sbci	r26, 0x0F	; 15
    2c46:	b1 05       	cpc	r27, r1
    2c48:	11 f4       	brne	.+4      	; 0x2c4e <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x1e8>
		{
			NRF_STOP_RX_MODE();
    2c4a:	e3 da       	rcall	.-2618   	; 0x2212 <NRF_STOP_RX_MODE>
			return 0;
    2c4c:	46 c0       	rjmp	.+140    	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	
	
	/****************************************CHECK THE RESULT OF CHALLANGE***********************************************************/
	COUNT_TIMER=0;
	NRF_START_RX_MODE();
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2c4e:	be 01       	movw	r22, r28
    2c50:	63 5f       	subi	r22, 0xF3	; 243
    2c52:	7f 4f       	sbci	r23, 0xFF	; 255
    2c54:	ce 01       	movw	r24, r28
    2c56:	01 96       	adiw	r24, 0x01	; 1
    2c58:	e8 da       	rcall	.-2608   	; 0x222a <NRF_CHECK_RX_PL>
    2c5a:	b8 2e       	mov	r11, r24
    2c5c:	88 23       	and	r24, r24
    2c5e:	09 f3       	breq	.-62     	; 0x2c22 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x1bc>
		{
			NRF_STOP_RX_MODE();
			return 0;
		}
	}
	TEST_UART_SEND_str("counter=");
    2c60:	87 e3       	ldi	r24, 0x37	; 55
    2c62:	92 e0       	ldi	r25, 0x02	; 2
    2c64:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	TEST_UART_SEND_VALUE(COUNT_TIMER);
    2c68:	88 89       	ldd	r24, Y+16	; 0x10
    2c6a:	99 89       	ldd	r25, Y+17	; 0x11
    2c6c:	aa 89       	ldd	r26, Y+18	; 0x12
    2c6e:	bb 89       	ldd	r27, Y+19	; 0x13
    2c70:	3c 01       	movw	r6, r24
    2c72:	4d 01       	movw	r8, r26
    2c74:	28 2f       	mov	r18, r24
    2c76:	37 2d       	mov	r19, r7
    2c78:	48 2d       	mov	r20, r8
    2c7a:	59 2d       	mov	r21, r9
    2c7c:	60 e0       	ldi	r22, 0x00	; 0
    2c7e:	70 e0       	ldi	r23, 0x00	; 0
    2c80:	80 e0       	ldi	r24, 0x00	; 0
    2c82:	90 e0       	ldi	r25, 0x00	; 0
    2c84:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
	TEST_UART_SEND_str("\n");
    2c88:	8e e7       	ldi	r24, 0x7E	; 126
    2c8a:	91 e0       	ldi	r25, 0x01	; 1
    2c8c:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	NRF_STOP_RX_MODE();
    2c90:	c0 da       	rcall	.-2688   	; 0x2212 <NRF_STOP_RX_MODE>
	if (!PROTOCOL_CHECK_RECIVED_PACKET(PACKET_TEMP, SENSOR_ADDRESS,RX_LENGTH,PASSWORD_KEY))
    2c92:	98 01       	movw	r18, r16
    2c94:	4d 85       	ldd	r20, Y+13	; 0x0d
    2c96:	b7 01       	movw	r22, r14
    2c98:	ce 01       	movw	r24, r28
    2c9a:	01 96       	adiw	r24, 0x01	; 1
    2c9c:	86 de       	rcall	.-756    	; 0x29aa <PROTOCOL_CHECK_RECIVED_PACKET>
    2c9e:	b8 2e       	mov	r11, r24
    2ca0:	88 23       	and	r24, r24
    2ca2:	d9 f0       	breq	.+54     	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	{
		return 0;
	}	
	if(PACKET_TEMP[7]!=CHALLENGE_RESULT_CODE)
    2ca4:	88 85       	ldd	r24, Y+8	; 0x08
    2ca6:	84 30       	cpi	r24, 0x04	; 4
    2ca8:	a9 f4       	brne	.+42     	; 0x2cd4 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x26e>
	{
		return 0;
	}
	unsigned char TEMP=0;
    2caa:	18 8e       	std	Y+24, r1	; 0x18
	DECRYPT_ALGORISM_2_V1(&TEMP,&PACKET_TEMP[8],1,PASSWORD_KEY);
    2cac:	98 01       	movw	r18, r16
    2cae:	41 e0       	ldi	r20, 0x01	; 1
    2cb0:	be 01       	movw	r22, r28
    2cb2:	67 5f       	subi	r22, 0xF7	; 247
    2cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	48 96       	adiw	r24, 0x18	; 24
    2cba:	46 d4       	rcall	.+2188   	; 0x3548 <DECRYPT_ALGORISM_2_V1>
	
	if(TEMP!=CHALLANGE_RESULT_SUCCESS)
    2cbc:	88 8d       	ldd	r24, Y+24	; 0x18
    2cbe:	84 34       	cpi	r24, 0x44	; 68
    2cc0:	59 f4       	brne	.+22     	; 0x2cd8 <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x272>
	{
		return 0;
	}
	TEST_UART_SEND_str("SENSOR CONNECTED\n");
    2cc2:	80 e4       	ldi	r24, 0x40	; 64
    2cc4:	92 e0       	ldi	r25, 0x02	; 2
    2cc6:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	return 1;
    2cca:	bb 24       	eor	r11, r11
    2ccc:	b3 94       	inc	r11
    2cce:	05 c0       	rjmp	.+10     	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=SENSOR_CHALLENGE_CODE)
	{
		return 0;
    2cd0:	b1 2c       	mov	r11, r1
    2cd2:	03 c0       	rjmp	.+6      	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	{
		return 0;
	}	
	if(PACKET_TEMP[7]!=CHALLENGE_RESULT_CODE)
	{
		return 0;
    2cd4:	b1 2c       	mov	r11, r1
    2cd6:	01 c0       	rjmp	.+2      	; 0x2cda <PROTOCOL_MASTER_CONNECT_TO_SENSOR+0x274>
	unsigned char TEMP=0;
	DECRYPT_ALGORISM_2_V1(&TEMP,&PACKET_TEMP[8],1,PASSWORD_KEY);
	
	if(TEMP!=CHALLANGE_RESULT_SUCCESS)
	{
		return 0;
    2cd8:	b1 2c       	mov	r11, r1
	}
	TEST_UART_SEND_str("SENSOR CONNECTED\n");
	return 1;
}
    2cda:	8b 2d       	mov	r24, r11
    2cdc:	68 96       	adiw	r28, 0x18	; 24
    2cde:	0f b6       	in	r0, 0x3f	; 63
    2ce0:	f8 94       	cli
    2ce2:	de bf       	out	0x3e, r29	; 62
    2ce4:	0f be       	out	0x3f, r0	; 63
    2ce6:	cd bf       	out	0x3d, r28	; 61
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	ff 90       	pop	r15
    2cf2:	ef 90       	pop	r14
    2cf4:	df 90       	pop	r13
    2cf6:	cf 90       	pop	r12
    2cf8:	bf 90       	pop	r11
    2cfa:	af 90       	pop	r10
    2cfc:	9f 90       	pop	r9
    2cfe:	8f 90       	pop	r8
    2d00:	7f 90       	pop	r7
    2d02:	6f 90       	pop	r6
    2d04:	5f 90       	pop	r5
    2d06:	4f 90       	pop	r4
    2d08:	3f 90       	pop	r3
    2d0a:	2f 90       	pop	r2
    2d0c:	08 95       	ret

00002d0e <PROTOCOL_SEND_BEACON>:
	return 0;
	
}

unsigned char PROTOCOL_SEND_BEACON(unsigned char*SENSOR_ADDRESS,unsigned char SENSOR_VERSION,unsigned char SENSOR_ADDRESS_LENGTH,unsigned char*SESSION_KEY)
{
    2d0e:	6f 92       	push	r6
    2d10:	7f 92       	push	r7
    2d12:	8f 92       	push	r8
    2d14:	9f 92       	push	r9
    2d16:	af 92       	push	r10
    2d18:	bf 92       	push	r11
    2d1a:	cf 92       	push	r12
    2d1c:	df 92       	push	r13
    2d1e:	ef 92       	push	r14
    2d20:	ff 92       	push	r15
    2d22:	0f 93       	push	r16
    2d24:	1f 93       	push	r17
    2d26:	cf 93       	push	r28
    2d28:	df 93       	push	r29
    2d2a:	cd b7       	in	r28, 0x3d	; 61
    2d2c:	de b7       	in	r29, 0x3e	; 62
    2d2e:	61 97       	sbiw	r28, 0x11	; 17
    2d30:	0f b6       	in	r0, 0x3f	; 63
    2d32:	f8 94       	cli
    2d34:	de bf       	out	0x3e, r29	; 62
    2d36:	0f be       	out	0x3f, r0	; 63
    2d38:	cd bf       	out	0x3d, r28	; 61
    2d3a:	8c 01       	movw	r16, r24
    2d3c:	d4 2e       	mov	r13, r20
    2d3e:	79 01       	movw	r14, r18
	unsigned char PACKET_TEMP[10];
	unsigned char i,RX_LENGTH;
	unsigned char HASH_VALUE[2];
	volatile unsigned long COUNT_TIMER=0;
    2d40:	1e 86       	std	Y+14, r1	; 0x0e
    2d42:	1f 86       	std	Y+15, r1	; 0x0f
    2d44:	18 8a       	std	Y+16, r1	; 0x10
    2d46:	19 8a       	std	Y+17, r1	; 0x11
	
	
	
	/*********SEND BEACON**********/
	PACKET_TEMP[0]=10|0B00000000;
    2d48:	8a e0       	ldi	r24, 0x0A	; 10
    2d4a:	89 83       	std	Y+1, r24	; 0x01
	PACKET_TEMP[1]=SENSOR_VERSION;
    2d4c:	6a 83       	std	Y+2, r22	; 0x02
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    2d4e:	44 23       	and	r20, r20
    2d50:	59 f0       	breq	.+22     	; 0x2d68 <PROTOCOL_SEND_BEACON+0x5a>
    2d52:	88 e0       	ldi	r24, 0x08	; 8
    2d54:	91 e0       	ldi	r25, 0x01	; 1
    2d56:	de 01       	movw	r26, r28
    2d58:	13 96       	adiw	r26, 0x03	; 3
    2d5a:	fc 01       	movw	r30, r24
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
    2d5c:	21 91       	ld	r18, Z+
    2d5e:	2d 93       	st	X+, r18
    2d60:	2e 2f       	mov	r18, r30
    2d62:	28 1b       	sub	r18, r24
	
	
	/*********SEND BEACON**********/
	PACKET_TEMP[0]=10|0B00000000;
	PACKET_TEMP[1]=SENSOR_VERSION;
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    2d64:	2d 15       	cp	r18, r13
    2d66:	d0 f3       	brcs	.-12     	; 0x2d5c <PROTOCOL_SEND_BEACON+0x4e>
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
	}
	PACKET_TEMP[7]=BEACON_CODE;
    2d68:	85 e0       	ldi	r24, 0x05	; 5
    2d6a:	88 87       	std	Y+8, r24	; 0x08
	HASH_SESSION_KEY(PACKET_TEMP,HASH_VALUE,8,SESSION_KEY);
    2d6c:	97 01       	movw	r18, r14
    2d6e:	48 e0       	ldi	r20, 0x08	; 8
    2d70:	be 01       	movw	r22, r28
    2d72:	64 5f       	subi	r22, 0xF4	; 244
    2d74:	7f 4f       	sbci	r23, 0xFF	; 255
    2d76:	ce 01       	movw	r24, r28
    2d78:	01 96       	adiw	r24, 0x01	; 1
    2d7a:	01 d4       	rcall	.+2050   	; 0x357e <HASH_SESSION_KEY>
	PACKET_TEMP[8]=HASH_VALUE[0];
    2d7c:	8c 85       	ldd	r24, Y+12	; 0x0c
    2d7e:	89 87       	std	Y+9, r24	; 0x09
	PACKET_TEMP[9]=HASH_VALUE[1];
    2d80:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d82:	8a 87       	std	Y+10, r24	; 0x0a
	if (!NRF_SEND_DATA_WITH_ACK(SENSOR_ADDRESS,SENSOR_ADDRESS_LENGTH,PACKET_TEMP,10))
    2d84:	2a e0       	ldi	r18, 0x0A	; 10
    2d86:	ae 01       	movw	r20, r28
    2d88:	4f 5f       	subi	r20, 0xFF	; 255
    2d8a:	5f 4f       	sbci	r21, 0xFF	; 255
    2d8c:	6d 2d       	mov	r22, r13
    2d8e:	c8 01       	movw	r24, r16
    2d90:	f3 d9       	rcall	.-3098   	; 0x2178 <NRF_SEND_DATA_WITH_ACK>
    2d92:	d8 2e       	mov	r13, r24
    2d94:	88 23       	and	r24, r24
    2d96:	09 f4       	brne	.+2      	; 0x2d9a <PROTOCOL_SEND_BEACON+0x8c>
    2d98:	4a c0       	rjmp	.+148    	; 0x2e2e <PROTOCOL_SEND_BEACON+0x120>
	}
	/*****************************************************************************************/
	
	
	/******************************RECIVE BEACON *******************************************/
	NRF_START_RX_MODE();
    2d9a:	2d da       	rcall	.-2982   	; 0x21f6 <NRF_START_RX_MODE>
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2d9c:	17 c0       	rjmp	.+46     	; 0x2dcc <PROTOCOL_SEND_BEACON+0xbe>
	{
		COUNT_TIMER++;
    2d9e:	4e 85       	ldd	r20, Y+14	; 0x0e
    2da0:	5f 85       	ldd	r21, Y+15	; 0x0f
    2da2:	68 89       	ldd	r22, Y+16	; 0x10
    2da4:	79 89       	ldd	r23, Y+17	; 0x11
    2da6:	4f 5f       	subi	r20, 0xFF	; 255
    2da8:	5f 4f       	sbci	r21, 0xFF	; 255
    2daa:	6f 4f       	sbci	r22, 0xFF	; 255
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	4e 87       	std	Y+14, r20	; 0x0e
    2db0:	5f 87       	std	Y+15, r21	; 0x0f
    2db2:	68 8b       	std	Y+16, r22	; 0x10
    2db4:	79 8b       	std	Y+17, r23	; 0x11
		if(COUNT_TIMER==MAX_COUNT_WAIT_BEACON)
    2db6:	4e 85       	ldd	r20, Y+14	; 0x0e
    2db8:	5f 85       	ldd	r21, Y+15	; 0x0f
    2dba:	68 89       	ldd	r22, Y+16	; 0x10
    2dbc:	79 89       	ldd	r23, Y+17	; 0x11
    2dbe:	48 39       	cpi	r20, 0x98	; 152
    2dc0:	5a 43       	sbci	r21, 0x3A	; 58
    2dc2:	61 05       	cpc	r22, r1
    2dc4:	71 05       	cpc	r23, r1
    2dc6:	11 f4       	brne	.+4      	; 0x2dcc <PROTOCOL_SEND_BEACON+0xbe>
		{
			NRF_STOP_RX_MODE();
    2dc8:	24 da       	rcall	.-3000   	; 0x2212 <NRF_STOP_RX_MODE>
			return 0;
    2dca:	31 c0       	rjmp	.+98     	; 0x2e2e <PROTOCOL_SEND_BEACON+0x120>
	/*****************************************************************************************/
	
	
	/******************************RECIVE BEACON *******************************************/
	NRF_START_RX_MODE();
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2dcc:	be 01       	movw	r22, r28
    2dce:	65 5f       	subi	r22, 0xF5	; 245
    2dd0:	7f 4f       	sbci	r23, 0xFF	; 255
    2dd2:	ce 01       	movw	r24, r28
    2dd4:	01 96       	adiw	r24, 0x01	; 1
    2dd6:	29 da       	rcall	.-2990   	; 0x222a <NRF_CHECK_RX_PL>
    2dd8:	d8 2e       	mov	r13, r24
    2dda:	88 23       	and	r24, r24
    2ddc:	01 f3       	breq	.-64     	; 0x2d9e <PROTOCOL_SEND_BEACON+0x90>
		{
			NRF_STOP_RX_MODE();
			return 0;
		}
	}
	TEST_UART_SEND_str("counter=");
    2dde:	87 e3       	ldi	r24, 0x37	; 55
    2de0:	92 e0       	ldi	r25, 0x02	; 2
    2de2:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	TEST_UART_SEND_VALUE(COUNT_TIMER);
    2de6:	8e 85       	ldd	r24, Y+14	; 0x0e
    2de8:	9f 85       	ldd	r25, Y+15	; 0x0f
    2dea:	a8 89       	ldd	r26, Y+16	; 0x10
    2dec:	b9 89       	ldd	r27, Y+17	; 0x11
    2dee:	3c 01       	movw	r6, r24
    2df0:	4d 01       	movw	r8, r26
    2df2:	28 2f       	mov	r18, r24
    2df4:	37 2d       	mov	r19, r7
    2df6:	48 2d       	mov	r20, r8
    2df8:	59 2d       	mov	r21, r9
    2dfa:	60 e0       	ldi	r22, 0x00	; 0
    2dfc:	70 e0       	ldi	r23, 0x00	; 0
    2dfe:	80 e0       	ldi	r24, 0x00	; 0
    2e00:	90 e0       	ldi	r25, 0x00	; 0
    2e02:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
	TEST_UART_SEND_str("\n");
    2e06:	8e e7       	ldi	r24, 0x7E	; 126
    2e08:	91 e0       	ldi	r25, 0x01	; 1
    2e0a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	NRF_STOP_RX_MODE();
    2e0e:	01 da       	rcall	.-3070   	; 0x2212 <NRF_STOP_RX_MODE>
	if (!PROTOCOL_CHECK_RECIVED_PACKET(PACKET_TEMP, SENSOR_ADDRESS,RX_LENGTH,SESSION_KEY))
    2e10:	97 01       	movw	r18, r14
    2e12:	4b 85       	ldd	r20, Y+11	; 0x0b
    2e14:	b8 01       	movw	r22, r16
    2e16:	ce 01       	movw	r24, r28
    2e18:	01 96       	adiw	r24, 0x01	; 1
    2e1a:	c7 dd       	rcall	.-1138   	; 0x29aa <PROTOCOL_CHECK_RECIVED_PACKET>
    2e1c:	d8 2e       	mov	r13, r24
    2e1e:	88 23       	and	r24, r24
    2e20:	31 f0       	breq	.+12     	; 0x2e2e <PROTOCOL_SEND_BEACON+0x120>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=BEACON_RECEIVED_CODE)
    2e22:	dd 24       	eor	r13, r13
    2e24:	d3 94       	inc	r13
    2e26:	88 85       	ldd	r24, Y+8	; 0x08
    2e28:	86 30       	cpi	r24, 0x06	; 6
    2e2a:	09 f0       	breq	.+2      	; 0x2e2e <PROTOCOL_SEND_BEACON+0x120>
    2e2c:	d1 2c       	mov	r13, r1
	{
		return 0;
	}
	
	return 1;
}
    2e2e:	8d 2d       	mov	r24, r13
    2e30:	61 96       	adiw	r28, 0x11	; 17
    2e32:	0f b6       	in	r0, 0x3f	; 63
    2e34:	f8 94       	cli
    2e36:	de bf       	out	0x3e, r29	; 62
    2e38:	0f be       	out	0x3f, r0	; 63
    2e3a:	cd bf       	out	0x3d, r28	; 61
    2e3c:	df 91       	pop	r29
    2e3e:	cf 91       	pop	r28
    2e40:	1f 91       	pop	r17
    2e42:	0f 91       	pop	r16
    2e44:	ff 90       	pop	r15
    2e46:	ef 90       	pop	r14
    2e48:	df 90       	pop	r13
    2e4a:	cf 90       	pop	r12
    2e4c:	bf 90       	pop	r11
    2e4e:	af 90       	pop	r10
    2e50:	9f 90       	pop	r9
    2e52:	8f 90       	pop	r8
    2e54:	7f 90       	pop	r7
    2e56:	6f 90       	pop	r6
    2e58:	08 95       	ret

00002e5a <PROTOCOL_SEND_SESSION_KEY>:

unsigned char PROTOCOL_SEND_SESSION_KEY(unsigned char*SENSOR_ADDRESS,unsigned char SENSOR_VERSION,unsigned char SENSOR_ADDRESS_LENGTH,unsigned char*SESSION_KEY,unsigned char*PASSWORD_KEY)
{
    2e5a:	6f 92       	push	r6
    2e5c:	7f 92       	push	r7
    2e5e:	8f 92       	push	r8
    2e60:	9f 92       	push	r9
    2e62:	af 92       	push	r10
    2e64:	bf 92       	push	r11
    2e66:	cf 92       	push	r12
    2e68:	df 92       	push	r13
    2e6a:	ef 92       	push	r14
    2e6c:	ff 92       	push	r15
    2e6e:	0f 93       	push	r16
    2e70:	1f 93       	push	r17
    2e72:	cf 93       	push	r28
    2e74:	df 93       	push	r29
    2e76:	cd b7       	in	r28, 0x3d	; 61
    2e78:	de b7       	in	r29, 0x3e	; 62
    2e7a:	66 97       	sbiw	r28, 0x16	; 22
    2e7c:	0f b6       	in	r0, 0x3f	; 63
    2e7e:	f8 94       	cli
    2e80:	de bf       	out	0x3e, r29	; 62
    2e82:	0f be       	out	0x3f, r0	; 63
    2e84:	cd bf       	out	0x3d, r28	; 61
    2e86:	7c 01       	movw	r14, r24
    2e88:	b4 2e       	mov	r11, r20
    2e8a:	c9 01       	movw	r24, r18
	unsigned char PACKET_TEMP[12];
	unsigned char i,RX_LENGTH;
	unsigned char HASH_VALUE[2];
	volatile unsigned long COUNT_TIMER=0;
    2e8c:	18 8a       	std	Y+16, r1	; 0x10
    2e8e:	19 8a       	std	Y+17, r1	; 0x11
    2e90:	1a 8a       	std	Y+18, r1	; 0x12
    2e92:	1b 8a       	std	Y+19, r1	; 0x13
	
	
	
	/*********NEW SESSION**********/
	PACKET_TEMP[0]=12|0B10000000;
    2e94:	2c e8       	ldi	r18, 0x8C	; 140
    2e96:	29 83       	std	Y+1, r18	; 0x01
	PACKET_TEMP[1]=SENSOR_VERSION;
    2e98:	6a 83       	std	Y+2, r22	; 0x02
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    2e9a:	44 23       	and	r20, r20
    2e9c:	59 f0       	breq	.+22     	; 0x2eb4 <PROTOCOL_SEND_SESSION_KEY+0x5a>
    2e9e:	48 e0       	ldi	r20, 0x08	; 8
    2ea0:	51 e0       	ldi	r21, 0x01	; 1
    2ea2:	de 01       	movw	r26, r28
    2ea4:	13 96       	adiw	r26, 0x03	; 3
    2ea6:	fa 01       	movw	r30, r20
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
    2ea8:	21 91       	ld	r18, Z+
    2eaa:	2d 93       	st	X+, r18
    2eac:	2e 2f       	mov	r18, r30
    2eae:	24 1b       	sub	r18, r20
	
	
	/*********NEW SESSION**********/
	PACKET_TEMP[0]=12|0B10000000;
	PACKET_TEMP[1]=SENSOR_VERSION;
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    2eb0:	2b 15       	cp	r18, r11
    2eb2:	d0 f3       	brcs	.-12     	; 0x2ea8 <PROTOCOL_SEND_SESSION_KEY+0x4e>
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
	}
	PACKET_TEMP[7]=NEW_SESSION_KEY_CODE;
    2eb4:	27 e0       	ldi	r18, 0x07	; 7
    2eb6:	28 87       	std	Y+8, r18	; 0x08
	unsigned char ENC_SESSION[2];
	ENCRYPT_ALGORISM_2_V1(SESSION_KEY,ENC_SESSION,2,PASSWORD_KEY);
    2eb8:	98 01       	movw	r18, r16
    2eba:	42 e0       	ldi	r20, 0x02	; 2
    2ebc:	be 01       	movw	r22, r28
    2ebe:	6c 5e       	subi	r22, 0xEC	; 236
    2ec0:	7f 4f       	sbci	r23, 0xFF	; 255
    2ec2:	27 d3       	rcall	.+1614   	; 0x3512 <ENCRYPT_ALGORISM_2_V1>
	PACKET_TEMP[8]=ENC_SESSION[0];
    2ec4:	8c 89       	ldd	r24, Y+20	; 0x14
    2ec6:	89 87       	std	Y+9, r24	; 0x09
	PACKET_TEMP[9]=ENC_SESSION[1];
    2ec8:	8d 89       	ldd	r24, Y+21	; 0x15
    2eca:	8a 87       	std	Y+10, r24	; 0x0a
	HASH_PASWORD_KEY(PACKET_TEMP,HASH_VALUE,10,PASSWORD_KEY);
    2ecc:	98 01       	movw	r18, r16
    2ece:	4a e0       	ldi	r20, 0x0A	; 10
    2ed0:	be 01       	movw	r22, r28
    2ed2:	62 5f       	subi	r22, 0xF2	; 242
    2ed4:	7f 4f       	sbci	r23, 0xFF	; 255
    2ed6:	ce 01       	movw	r24, r28
    2ed8:	01 96       	adiw	r24, 0x01	; 1
    2eda:	e0 d3       	rcall	.+1984   	; 0x369c <HASH_PASWORD_KEY>
	PACKET_TEMP[10]=HASH_VALUE[0];
    2edc:	8e 85       	ldd	r24, Y+14	; 0x0e
    2ede:	8b 87       	std	Y+11, r24	; 0x0b
	PACKET_TEMP[11]=HASH_VALUE[1];
    2ee0:	8f 85       	ldd	r24, Y+15	; 0x0f
    2ee2:	8c 87       	std	Y+12, r24	; 0x0c
	if (!NRF_SEND_DATA_WITH_ACK(SENSOR_ADDRESS,SENSOR_ADDRESS_LENGTH,PACKET_TEMP,12))
    2ee4:	2c e0       	ldi	r18, 0x0C	; 12
    2ee6:	ae 01       	movw	r20, r28
    2ee8:	4f 5f       	subi	r20, 0xFF	; 255
    2eea:	5f 4f       	sbci	r21, 0xFF	; 255
    2eec:	6b 2d       	mov	r22, r11
    2eee:	c7 01       	movw	r24, r14
    2ef0:	43 d9       	rcall	.-3450   	; 0x2178 <NRF_SEND_DATA_WITH_ACK>
    2ef2:	d8 2e       	mov	r13, r24
    2ef4:	88 23       	and	r24, r24
    2ef6:	09 f4       	brne	.+2      	; 0x2efa <PROTOCOL_SEND_SESSION_KEY+0xa0>
    2ef8:	58 c0       	rjmp	.+176    	; 0x2faa <PROTOCOL_SEND_SESSION_KEY+0x150>
	}
	/*****************************************************************************************/
	
	
	/******************************SESSION KEY APPLIED*******************************************/
	NRF_START_RX_MODE();
    2efa:	7d d9       	rcall	.-3334   	; 0x21f6 <NRF_START_RX_MODE>
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2efc:	17 c0       	rjmp	.+46     	; 0x2f2c <PROTOCOL_SEND_SESSION_KEY+0xd2>
	{
		COUNT_TIMER++;
    2efe:	48 89       	ldd	r20, Y+16	; 0x10
    2f00:	59 89       	ldd	r21, Y+17	; 0x11
    2f02:	6a 89       	ldd	r22, Y+18	; 0x12
    2f04:	7b 89       	ldd	r23, Y+19	; 0x13
    2f06:	4f 5f       	subi	r20, 0xFF	; 255
    2f08:	5f 4f       	sbci	r21, 0xFF	; 255
    2f0a:	6f 4f       	sbci	r22, 0xFF	; 255
    2f0c:	7f 4f       	sbci	r23, 0xFF	; 255
    2f0e:	48 8b       	std	Y+16, r20	; 0x10
    2f10:	59 8b       	std	Y+17, r21	; 0x11
    2f12:	6a 8b       	std	Y+18, r22	; 0x12
    2f14:	7b 8b       	std	Y+19, r23	; 0x13
		if(COUNT_TIMER==MAX_COUNT_WAIT_SESSION)
    2f16:	48 89       	ldd	r20, Y+16	; 0x10
    2f18:	59 89       	ldd	r21, Y+17	; 0x11
    2f1a:	6a 89       	ldd	r22, Y+18	; 0x12
    2f1c:	7b 89       	ldd	r23, Y+19	; 0x13
    2f1e:	4f 3f       	cpi	r20, 0xFF	; 255
    2f20:	5f 4f       	sbci	r21, 0xFF	; 255
    2f22:	61 05       	cpc	r22, r1
    2f24:	71 05       	cpc	r23, r1
    2f26:	11 f4       	brne	.+4      	; 0x2f2c <PROTOCOL_SEND_SESSION_KEY+0xd2>
		{
			NRF_STOP_RX_MODE();
    2f28:	74 d9       	rcall	.-3352   	; 0x2212 <NRF_STOP_RX_MODE>
			return 0;
    2f2a:	3f c0       	rjmp	.+126    	; 0x2faa <PROTOCOL_SEND_SESSION_KEY+0x150>
	/*****************************************************************************************/
	
	
	/******************************SESSION KEY APPLIED*******************************************/
	NRF_START_RX_MODE();
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    2f2c:	be 01       	movw	r22, r28
    2f2e:	63 5f       	subi	r22, 0xF3	; 243
    2f30:	7f 4f       	sbci	r23, 0xFF	; 255
    2f32:	ce 01       	movw	r24, r28
    2f34:	01 96       	adiw	r24, 0x01	; 1
    2f36:	79 d9       	rcall	.-3342   	; 0x222a <NRF_CHECK_RX_PL>
    2f38:	d8 2e       	mov	r13, r24
    2f3a:	88 23       	and	r24, r24
    2f3c:	01 f3       	breq	.-64     	; 0x2efe <PROTOCOL_SEND_SESSION_KEY+0xa4>
		{
			NRF_STOP_RX_MODE();
			return 0;
		}
	}
	TEST_UART_SEND_str("counter=");
    2f3e:	87 e3       	ldi	r24, 0x37	; 55
    2f40:	92 e0       	ldi	r25, 0x02	; 2
    2f42:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	TEST_UART_SEND_VALUE(COUNT_TIMER);
    2f46:	88 89       	ldd	r24, Y+16	; 0x10
    2f48:	99 89       	ldd	r25, Y+17	; 0x11
    2f4a:	aa 89       	ldd	r26, Y+18	; 0x12
    2f4c:	bb 89       	ldd	r27, Y+19	; 0x13
    2f4e:	3c 01       	movw	r6, r24
    2f50:	4d 01       	movw	r8, r26
    2f52:	28 2f       	mov	r18, r24
    2f54:	37 2d       	mov	r19, r7
    2f56:	48 2d       	mov	r20, r8
    2f58:	59 2d       	mov	r21, r9
    2f5a:	60 e0       	ldi	r22, 0x00	; 0
    2f5c:	70 e0       	ldi	r23, 0x00	; 0
    2f5e:	80 e0       	ldi	r24, 0x00	; 0
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
	TEST_UART_SEND_str("\n");
    2f66:	8e e7       	ldi	r24, 0x7E	; 126
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	NRF_STOP_RX_MODE();
    2f6e:	51 d9       	rcall	.-3422   	; 0x2212 <NRF_STOP_RX_MODE>
	if (!PROTOCOL_CHECK_RECIVED_PACKET(PACKET_TEMP, SENSOR_ADDRESS,RX_LENGTH,PASSWORD_KEY))
    2f70:	98 01       	movw	r18, r16
    2f72:	4d 85       	ldd	r20, Y+13	; 0x0d
    2f74:	b7 01       	movw	r22, r14
    2f76:	ce 01       	movw	r24, r28
    2f78:	01 96       	adiw	r24, 0x01	; 1
    2f7a:	17 dd       	rcall	.-1490   	; 0x29aa <PROTOCOL_CHECK_RECIVED_PACKET>
    2f7c:	d8 2e       	mov	r13, r24
    2f7e:	88 23       	and	r24, r24
    2f80:	a1 f0       	breq	.+40     	; 0x2faa <PROTOCOL_SEND_SESSION_KEY+0x150>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=NEW_SESSION_KEY_APPLIED_CODE)
    2f82:	88 85       	ldd	r24, Y+8	; 0x08
    2f84:	88 30       	cpi	r24, 0x08	; 8
    2f86:	81 f4       	brne	.+32     	; 0x2fa8 <PROTOCOL_SEND_SESSION_KEY+0x14e>
	{
		return 0;
	}
	unsigned char TEMP=0;
    2f88:	1e 8a       	std	Y+22, r1	; 0x16
	DECRYPT_ALGORISM_2_V1(&TEMP,&PACKET_TEMP[8],1,PASSWORD_KEY);
    2f8a:	98 01       	movw	r18, r16
    2f8c:	41 e0       	ldi	r20, 0x01	; 1
    2f8e:	be 01       	movw	r22, r28
    2f90:	67 5f       	subi	r22, 0xF7	; 247
    2f92:	7f 4f       	sbci	r23, 0xFF	; 255
    2f94:	ce 01       	movw	r24, r28
    2f96:	46 96       	adiw	r24, 0x16	; 22
    2f98:	d7 d2       	rcall	.+1454   	; 0x3548 <DECRYPT_ALGORISM_2_V1>
	
	if(TEMP!=CHALLANGE_RESULT_SUCCESS)
    2f9a:	dd 24       	eor	r13, r13
    2f9c:	d3 94       	inc	r13
    2f9e:	8e 89       	ldd	r24, Y+22	; 0x16
    2fa0:	84 34       	cpi	r24, 0x44	; 68
    2fa2:	19 f0       	breq	.+6      	; 0x2faa <PROTOCOL_SEND_SESSION_KEY+0x150>
    2fa4:	d1 2c       	mov	r13, r1
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <PROTOCOL_SEND_SESSION_KEY+0x150>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=NEW_SESSION_KEY_APPLIED_CODE)
	{
		return 0;
    2fa8:	d1 2c       	mov	r13, r1
		return 0;
	}
	return 1;
	
	
}
    2faa:	8d 2d       	mov	r24, r13
    2fac:	66 96       	adiw	r28, 0x16	; 22
    2fae:	0f b6       	in	r0, 0x3f	; 63
    2fb0:	f8 94       	cli
    2fb2:	de bf       	out	0x3e, r29	; 62
    2fb4:	0f be       	out	0x3f, r0	; 63
    2fb6:	cd bf       	out	0x3d, r28	; 61
    2fb8:	df 91       	pop	r29
    2fba:	cf 91       	pop	r28
    2fbc:	1f 91       	pop	r17
    2fbe:	0f 91       	pop	r16
    2fc0:	ff 90       	pop	r15
    2fc2:	ef 90       	pop	r14
    2fc4:	df 90       	pop	r13
    2fc6:	cf 90       	pop	r12
    2fc8:	bf 90       	pop	r11
    2fca:	af 90       	pop	r10
    2fcc:	9f 90       	pop	r9
    2fce:	8f 90       	pop	r8
    2fd0:	7f 90       	pop	r7
    2fd2:	6f 90       	pop	r6
    2fd4:	08 95       	ret

00002fd6 <PROTOCOL_CHANGE_CHANNEL>:

unsigned char PROTOCOL_CHANGE_CHANNEL(unsigned char*SENSOR_ADDRESS,unsigned char SENSOR_VERSION,unsigned char SENSOR_ADDRESS_LENGTH,unsigned char*SESSION_KEY,unsigned char CHANNEL)
{
    2fd6:	4f 92       	push	r4
    2fd8:	5f 92       	push	r5
    2fda:	6f 92       	push	r6
    2fdc:	7f 92       	push	r7
    2fde:	8f 92       	push	r8
    2fe0:	9f 92       	push	r9
    2fe2:	af 92       	push	r10
    2fe4:	bf 92       	push	r11
    2fe6:	cf 92       	push	r12
    2fe8:	df 92       	push	r13
    2fea:	ef 92       	push	r14
    2fec:	ff 92       	push	r15
    2fee:	0f 93       	push	r16
    2ff0:	1f 93       	push	r17
    2ff2:	cf 93       	push	r28
    2ff4:	df 93       	push	r29
    2ff6:	cd b7       	in	r28, 0x3d	; 61
    2ff8:	de b7       	in	r29, 0x3e	; 62
    2ffa:	66 97       	sbiw	r28, 0x16	; 22
    2ffc:	0f b6       	in	r0, 0x3f	; 63
    2ffe:	f8 94       	cli
    3000:	de bf       	out	0x3e, r29	; 62
    3002:	0f be       	out	0x3f, r0	; 63
    3004:	cd bf       	out	0x3d, r28	; 61
    3006:	6c 01       	movw	r12, r24
    3008:	14 2f       	mov	r17, r20
    300a:	79 01       	movw	r14, r18
    300c:	0e 8b       	std	Y+22, r16	; 0x16
	volatile unsigned char PACKET_TEMP[12];
	unsigned char i,RX_LENGTH;
	unsigned char HASH_VALUE[2];
	volatile unsigned long COUNT_TIMER=0;
    300e:	18 8a       	std	Y+16, r1	; 0x10
    3010:	19 8a       	std	Y+17, r1	; 0x11
    3012:	1a 8a       	std	Y+18, r1	; 0x12
    3014:	1b 8a       	std	Y+19, r1	; 0x13
	
	
	
	/*********NEW CHANNEL**********/
	PACKET_TEMP[0]=11|0B00000000;
    3016:	8b e0       	ldi	r24, 0x0B	; 11
    3018:	89 83       	std	Y+1, r24	; 0x01
	PACKET_TEMP[1]=SENSOR_VERSION;
    301a:	6a 83       	std	Y+2, r22	; 0x02
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    301c:	44 23       	and	r20, r20
    301e:	91 f0       	breq	.+36     	; 0x3044 <PROTOCOL_CHANGE_CHANNEL+0x6e>
    3020:	28 e0       	ldi	r18, 0x08	; 8
    3022:	31 e0       	ldi	r19, 0x01	; 1
    3024:	f9 01       	movw	r30, r18
    3026:	82 e0       	ldi	r24, 0x02	; 2
    3028:	90 e0       	ldi	r25, 0x00	; 0
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
    302a:	51 91       	ld	r21, Z+
    302c:	a1 e0       	ldi	r26, 0x01	; 1
    302e:	b0 e0       	ldi	r27, 0x00	; 0
    3030:	ac 0f       	add	r26, r28
    3032:	bd 1f       	adc	r27, r29
    3034:	a8 0f       	add	r26, r24
    3036:	b9 1f       	adc	r27, r25
    3038:	5c 93       	st	X, r21
    303a:	01 96       	adiw	r24, 0x01	; 1
    303c:	5e 2f       	mov	r21, r30
    303e:	52 1b       	sub	r21, r18
	
	
	/*********NEW CHANNEL**********/
	PACKET_TEMP[0]=11|0B00000000;
	PACKET_TEMP[1]=SENSOR_VERSION;
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    3040:	51 17       	cp	r21, r17
    3042:	98 f3       	brcs	.-26     	; 0x302a <PROTOCOL_CHANGE_CHANNEL+0x54>
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
	}
	PACKET_TEMP[7]=MASTER_CHANGE_CHANNEL_CODE;
    3044:	89 e0       	ldi	r24, 0x09	; 9
    3046:	88 87       	std	Y+8, r24	; 0x08
	unsigned char ENC_CHANNEL;
	ENCRYPT_ALGORISM_1_V1(&CHANNEL,&ENC_CHANNEL,1,SESSION_KEY);
    3048:	97 01       	movw	r18, r14
    304a:	41 e0       	ldi	r20, 0x01	; 1
    304c:	be 01       	movw	r22, r28
    304e:	6c 5e       	subi	r22, 0xEC	; 236
    3050:	7f 4f       	sbci	r23, 0xFF	; 255
    3052:	ce 01       	movw	r24, r28
    3054:	46 96       	adiw	r24, 0x16	; 22
    3056:	21 d2       	rcall	.+1090   	; 0x349a <ENCRYPT_ALGORISM_1_V1>
	PACKET_TEMP[8]=ENC_CHANNEL;
    3058:	8c 89       	ldd	r24, Y+20	; 0x14
    305a:	89 87       	std	Y+9, r24	; 0x09
	HASH_SESSION_KEY(PACKET_TEMP,HASH_VALUE,9,SESSION_KEY);
    305c:	97 01       	movw	r18, r14
    305e:	49 e0       	ldi	r20, 0x09	; 9
    3060:	be 01       	movw	r22, r28
    3062:	62 5f       	subi	r22, 0xF2	; 242
    3064:	7f 4f       	sbci	r23, 0xFF	; 255
    3066:	ce 01       	movw	r24, r28
    3068:	01 96       	adiw	r24, 0x01	; 1
    306a:	89 d2       	rcall	.+1298   	; 0x357e <HASH_SESSION_KEY>
	PACKET_TEMP[9]=HASH_VALUE[0];
    306c:	8e 85       	ldd	r24, Y+14	; 0x0e
    306e:	8a 87       	std	Y+10, r24	; 0x0a
	PACKET_TEMP[10]=HASH_VALUE[1];
    3070:	8f 85       	ldd	r24, Y+15	; 0x0f
    3072:	8b 87       	std	Y+11, r24	; 0x0b
	if (!NRF_SEND_DATA_WITH_ACK(SENSOR_ADDRESS,SENSOR_ADDRESS_LENGTH,PACKET_TEMP,11))
    3074:	2b e0       	ldi	r18, 0x0B	; 11
    3076:	ae 01       	movw	r20, r28
    3078:	4f 5f       	subi	r20, 0xFF	; 255
    307a:	5f 4f       	sbci	r21, 0xFF	; 255
    307c:	61 2f       	mov	r22, r17
    307e:	c6 01       	movw	r24, r12
    3080:	7b d8       	rcall	.-3850   	; 0x2178 <NRF_SEND_DATA_WITH_ACK>
    3082:	18 2f       	mov	r17, r24
    3084:	88 23       	and	r24, r24
    3086:	09 f4       	brne	.+2      	; 0x308a <PROTOCOL_CHANGE_CHANNEL+0xb4>
    3088:	55 c0       	rjmp	.+170    	; 0x3134 <PROTOCOL_CHANGE_CHANNEL+0x15e>
	}
	/*****************************************************************************************/
	
	
	/******************************CHANNEL APPLIED*******************************************/
	NRF_START_RX_MODE();
    308a:	b5 d8       	rcall	.-3734   	; 0x21f6 <NRF_START_RX_MODE>
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    308c:	17 c0       	rjmp	.+46     	; 0x30bc <PROTOCOL_CHANGE_CHANNEL+0xe6>
	{
		COUNT_TIMER++;
    308e:	48 89       	ldd	r20, Y+16	; 0x10
    3090:	59 89       	ldd	r21, Y+17	; 0x11
    3092:	6a 89       	ldd	r22, Y+18	; 0x12
    3094:	7b 89       	ldd	r23, Y+19	; 0x13
    3096:	4f 5f       	subi	r20, 0xFF	; 255
    3098:	5f 4f       	sbci	r21, 0xFF	; 255
    309a:	6f 4f       	sbci	r22, 0xFF	; 255
    309c:	7f 4f       	sbci	r23, 0xFF	; 255
    309e:	48 8b       	std	Y+16, r20	; 0x10
    30a0:	59 8b       	std	Y+17, r21	; 0x11
    30a2:	6a 8b       	std	Y+18, r22	; 0x12
    30a4:	7b 8b       	std	Y+19, r23	; 0x13
		if(COUNT_TIMER==MAX_COUNT_WAIT)
    30a6:	48 89       	ldd	r20, Y+16	; 0x10
    30a8:	59 89       	ldd	r21, Y+17	; 0x11
    30aa:	6a 89       	ldd	r22, Y+18	; 0x12
    30ac:	7b 89       	ldd	r23, Y+19	; 0x13
    30ae:	4f 3f       	cpi	r20, 0xFF	; 255
    30b0:	5f 4f       	sbci	r21, 0xFF	; 255
    30b2:	6f 40       	sbci	r22, 0x0F	; 15
    30b4:	71 05       	cpc	r23, r1
    30b6:	11 f4       	brne	.+4      	; 0x30bc <PROTOCOL_CHANGE_CHANNEL+0xe6>
		{
			NRF_STOP_RX_MODE();
    30b8:	ac d8       	rcall	.-3752   	; 0x2212 <NRF_STOP_RX_MODE>
			return 0;
    30ba:	3c c0       	rjmp	.+120    	; 0x3134 <PROTOCOL_CHANGE_CHANNEL+0x15e>
	/*****************************************************************************************/
	
	
	/******************************CHANNEL APPLIED*******************************************/
	NRF_START_RX_MODE();
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    30bc:	be 01       	movw	r22, r28
    30be:	63 5f       	subi	r22, 0xF3	; 243
    30c0:	7f 4f       	sbci	r23, 0xFF	; 255
    30c2:	ce 01       	movw	r24, r28
    30c4:	01 96       	adiw	r24, 0x01	; 1
    30c6:	b1 d8       	rcall	.-3742   	; 0x222a <NRF_CHECK_RX_PL>
    30c8:	18 2f       	mov	r17, r24
    30ca:	88 23       	and	r24, r24
    30cc:	01 f3       	breq	.-64     	; 0x308e <PROTOCOL_CHANGE_CHANNEL+0xb8>
		{
			NRF_STOP_RX_MODE();
			return 0;
		}
	}
	TEST_UART_SEND_str("counter=");
    30ce:	87 e3       	ldi	r24, 0x37	; 55
    30d0:	92 e0       	ldi	r25, 0x02	; 2
    30d2:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	TEST_UART_SEND_VALUE(COUNT_TIMER);
    30d6:	48 88       	ldd	r4, Y+16	; 0x10
    30d8:	59 88       	ldd	r5, Y+17	; 0x11
    30da:	6a 88       	ldd	r6, Y+18	; 0x12
    30dc:	7b 88       	ldd	r7, Y+19	; 0x13
    30de:	24 2d       	mov	r18, r4
    30e0:	35 2d       	mov	r19, r5
    30e2:	46 2d       	mov	r20, r6
    30e4:	57 2d       	mov	r21, r7
    30e6:	60 e0       	ldi	r22, 0x00	; 0
    30e8:	70 e0       	ldi	r23, 0x00	; 0
    30ea:	80 e0       	ldi	r24, 0x00	; 0
    30ec:	90 e0       	ldi	r25, 0x00	; 0
    30ee:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
	TEST_UART_SEND_str("\n");
    30f2:	8e e7       	ldi	r24, 0x7E	; 126
    30f4:	91 e0       	ldi	r25, 0x01	; 1
    30f6:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	NRF_STOP_RX_MODE();
    30fa:	8b d8       	rcall	.-3818   	; 0x2212 <NRF_STOP_RX_MODE>
	if (!PROTOCOL_CHECK_RECIVED_PACKET(PACKET_TEMP, SENSOR_ADDRESS,RX_LENGTH,SESSION_KEY))
    30fc:	97 01       	movw	r18, r14
    30fe:	4d 85       	ldd	r20, Y+13	; 0x0d
    3100:	b6 01       	movw	r22, r12
    3102:	ce 01       	movw	r24, r28
    3104:	01 96       	adiw	r24, 0x01	; 1
    3106:	51 dc       	rcall	.-1886   	; 0x29aa <PROTOCOL_CHECK_RECIVED_PACKET>
    3108:	18 2f       	mov	r17, r24
    310a:	88 23       	and	r24, r24
    310c:	99 f0       	breq	.+38     	; 0x3134 <PROTOCOL_CHANGE_CHANNEL+0x15e>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=CHANNEL_CHANGED_CODE)
    310e:	88 85       	ldd	r24, Y+8	; 0x08
    3110:	8a 30       	cpi	r24, 0x0A	; 10
    3112:	79 f4       	brne	.+30     	; 0x3132 <PROTOCOL_CHANGE_CHANNEL+0x15c>
	{
		return 0;
	}
	unsigned char TEMP=0;
    3114:	1d 8a       	std	Y+21, r1	; 0x15
	DECRYPT_ALGORISM_1_V1(&TEMP,&PACKET_TEMP[8],1,SESSION_KEY);
    3116:	97 01       	movw	r18, r14
    3118:	41 e0       	ldi	r20, 0x01	; 1
    311a:	be 01       	movw	r22, r28
    311c:	67 5f       	subi	r22, 0xF7	; 247
    311e:	7f 4f       	sbci	r23, 0xFF	; 255
    3120:	ce 01       	movw	r24, r28
    3122:	45 96       	adiw	r24, 0x15	; 21
    3124:	d8 d1       	rcall	.+944    	; 0x34d6 <DECRYPT_ALGORISM_1_V1>
	
	if(TEMP!=CHALLANGE_RESULT_SUCCESS)
    3126:	11 e0       	ldi	r17, 0x01	; 1
    3128:	8d 89       	ldd	r24, Y+21	; 0x15
    312a:	84 34       	cpi	r24, 0x44	; 68
    312c:	19 f0       	breq	.+6      	; 0x3134 <PROTOCOL_CHANGE_CHANNEL+0x15e>
    312e:	10 e0       	ldi	r17, 0x00	; 0
    3130:	01 c0       	rjmp	.+2      	; 0x3134 <PROTOCOL_CHANGE_CHANNEL+0x15e>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=CHANNEL_CHANGED_CODE)
	{
		return 0;
    3132:	10 e0       	ldi	r17, 0x00	; 0
	if(TEMP!=CHALLANGE_RESULT_SUCCESS)
	{
		return 0;
	}
	return 1;
}
    3134:	81 2f       	mov	r24, r17
    3136:	66 96       	adiw	r28, 0x16	; 22
    3138:	0f b6       	in	r0, 0x3f	; 63
    313a:	f8 94       	cli
    313c:	de bf       	out	0x3e, r29	; 62
    313e:	0f be       	out	0x3f, r0	; 63
    3140:	cd bf       	out	0x3d, r28	; 61
    3142:	df 91       	pop	r29
    3144:	cf 91       	pop	r28
    3146:	1f 91       	pop	r17
    3148:	0f 91       	pop	r16
    314a:	ff 90       	pop	r15
    314c:	ef 90       	pop	r14
    314e:	df 90       	pop	r13
    3150:	cf 90       	pop	r12
    3152:	bf 90       	pop	r11
    3154:	af 90       	pop	r10
    3156:	9f 90       	pop	r9
    3158:	8f 90       	pop	r8
    315a:	7f 90       	pop	r7
    315c:	6f 90       	pop	r6
    315e:	5f 90       	pop	r5
    3160:	4f 90       	pop	r4
    3162:	08 95       	ret

00003164 <PROTOCOL_DATA_SEND>:

unsigned char PROTOCOL_DATA_SEND(unsigned char*SENSOR_ADDRESS,unsigned char SENSOR_VERSION,unsigned char SENSOR_ADDRESS_LENGTH,unsigned char*SESSION_KEY,unsigned char *REGISTER_ADDRESS,unsigned char*DATA_SEND_BUFFER)
{
    3164:	2f 92       	push	r2
    3166:	3f 92       	push	r3
    3168:	4f 92       	push	r4
    316a:	5f 92       	push	r5
    316c:	6f 92       	push	r6
    316e:	7f 92       	push	r7
    3170:	8f 92       	push	r8
    3172:	9f 92       	push	r9
    3174:	af 92       	push	r10
    3176:	bf 92       	push	r11
    3178:	cf 92       	push	r12
    317a:	df 92       	push	r13
    317c:	ef 92       	push	r14
    317e:	ff 92       	push	r15
    3180:	0f 93       	push	r16
    3182:	1f 93       	push	r17
    3184:	cf 93       	push	r28
    3186:	df 93       	push	r29
    3188:	cd b7       	in	r28, 0x3d	; 61
    318a:	de b7       	in	r29, 0x3e	; 62
    318c:	6d 97       	sbiw	r28, 0x1d	; 29
    318e:	0f b6       	in	r0, 0x3f	; 63
    3190:	f8 94       	cli
    3192:	de bf       	out	0x3e, r29	; 62
    3194:	0f be       	out	0x3f, r0	; 63
    3196:	cd bf       	out	0x3d, r28	; 61
    3198:	5c 01       	movw	r10, r24
    319a:	94 2e       	mov	r9, r20
    319c:	69 01       	movw	r12, r18
	unsigned char PACKET_TEMP[14];
	unsigned char i,RX_LENGTH;
	unsigned char HASH_VALUE[2];
	volatile unsigned long COUNT_TIMER=0;
    319e:	1a 8a       	std	Y+18, r1	; 0x12
    31a0:	1b 8a       	std	Y+19, r1	; 0x13
    31a2:	1c 8a       	std	Y+20, r1	; 0x14
    31a4:	1d 8a       	std	Y+21, r1	; 0x15
	
	
	
	/*********SEND DATA**********/
	PACKET_TEMP[0]=14|0B00000000;
    31a6:	8e e0       	ldi	r24, 0x0E	; 14
    31a8:	89 83       	std	Y+1, r24	; 0x01
	PACKET_TEMP[1]=SENSOR_VERSION;
    31aa:	6a 83       	std	Y+2, r22	; 0x02
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    31ac:	44 23       	and	r20, r20
    31ae:	59 f0       	breq	.+22     	; 0x31c6 <PROTOCOL_DATA_SEND+0x62>
    31b0:	88 e0       	ldi	r24, 0x08	; 8
    31b2:	91 e0       	ldi	r25, 0x01	; 1
    31b4:	de 01       	movw	r26, r28
    31b6:	13 96       	adiw	r26, 0x03	; 3
    31b8:	fc 01       	movw	r30, r24
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
    31ba:	21 91       	ld	r18, Z+
    31bc:	2d 93       	st	X+, r18
    31be:	2e 2f       	mov	r18, r30
    31c0:	28 1b       	sub	r18, r24
	
	
	/*********SEND DATA**********/
	PACKET_TEMP[0]=14|0B00000000;
	PACKET_TEMP[1]=SENSOR_VERSION;
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    31c2:	29 15       	cp	r18, r9
    31c4:	d0 f3       	brcs	.-12     	; 0x31ba <PROTOCOL_DATA_SEND+0x56>
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
	}
	PACKET_TEMP[7]=MASTER_CHANGE_DATA_CODE;
    31c6:	80 e1       	ldi	r24, 0x10	; 16
    31c8:	88 87       	std	Y+8, r24	; 0x08
	unsigned char PLAIN_TEXT[4],CIPHER_TEXT[4];
	PLAIN_TEXT[0]=REGISTER_ADDRESS[0];
    31ca:	f8 01       	movw	r30, r16
    31cc:	80 81       	ld	r24, Z
    31ce:	8e 8b       	std	Y+22, r24	; 0x16
	PLAIN_TEXT[1]=REGISTER_ADDRESS[1];
    31d0:	81 81       	ldd	r24, Z+1	; 0x01
    31d2:	8f 8b       	std	Y+23, r24	; 0x17
	PLAIN_TEXT[2]=DATA_SEND_BUFFER[0];
    31d4:	f7 01       	movw	r30, r14
    31d6:	80 81       	ld	r24, Z
    31d8:	88 8f       	std	Y+24, r24	; 0x18
	PLAIN_TEXT[3]=DATA_SEND_BUFFER[1];
    31da:	81 81       	ldd	r24, Z+1	; 0x01
    31dc:	89 8f       	std	Y+25, r24	; 0x19
	ENCRYPT_ALGORISM_1_V1(PLAIN_TEXT,CIPHER_TEXT,4,SESSION_KEY);
    31de:	96 01       	movw	r18, r12
    31e0:	44 e0       	ldi	r20, 0x04	; 4
    31e2:	be 01       	movw	r22, r28
    31e4:	66 5e       	subi	r22, 0xE6	; 230
    31e6:	7f 4f       	sbci	r23, 0xFF	; 255
    31e8:	ce 01       	movw	r24, r28
    31ea:	46 96       	adiw	r24, 0x16	; 22
    31ec:	56 d1       	rcall	.+684    	; 0x349a <ENCRYPT_ALGORISM_1_V1>
	PACKET_TEMP[8]=CIPHER_TEXT[0];
    31ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    31f0:	89 87       	std	Y+9, r24	; 0x09
	PACKET_TEMP[9]=CIPHER_TEXT[1];
    31f2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31f4:	8a 87       	std	Y+10, r24	; 0x0a
	PACKET_TEMP[10]=CIPHER_TEXT[2];
    31f6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    31f8:	8b 87       	std	Y+11, r24	; 0x0b
	PACKET_TEMP[11]=CIPHER_TEXT[3];
    31fa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    31fc:	8c 87       	std	Y+12, r24	; 0x0c
	HASH_SESSION_KEY(PACKET_TEMP,HASH_VALUE,12,SESSION_KEY);
    31fe:	96 01       	movw	r18, r12
    3200:	4c e0       	ldi	r20, 0x0C	; 12
    3202:	be 01       	movw	r22, r28
    3204:	60 5f       	subi	r22, 0xF0	; 240
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	ce 01       	movw	r24, r28
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	b8 d1       	rcall	.+880    	; 0x357e <HASH_SESSION_KEY>
	PACKET_TEMP[12]=HASH_VALUE[0];
    320e:	88 89       	ldd	r24, Y+16	; 0x10
    3210:	8d 87       	std	Y+13, r24	; 0x0d
	PACKET_TEMP[13]=HASH_VALUE[1];
    3212:	89 89       	ldd	r24, Y+17	; 0x11
    3214:	8e 87       	std	Y+14, r24	; 0x0e
	if (!NRF_SEND_DATA_WITH_ACK(SENSOR_ADDRESS,SENSOR_ADDRESS_LENGTH,PACKET_TEMP,14))
    3216:	2e e0       	ldi	r18, 0x0E	; 14
    3218:	ae 01       	movw	r20, r28
    321a:	4f 5f       	subi	r20, 0xFF	; 255
    321c:	5f 4f       	sbci	r21, 0xFF	; 255
    321e:	69 2d       	mov	r22, r9
    3220:	c5 01       	movw	r24, r10
    3222:	0e 94 bc 10 	call	0x2178	; 0x2178 <NRF_SEND_DATA_WITH_ACK>
    3226:	18 2f       	mov	r17, r24
    3228:	88 23       	and	r24, r24
    322a:	09 f4       	brne	.+2      	; 0x322e <PROTOCOL_DATA_SEND+0xca>
    322c:	4d c0       	rjmp	.+154    	; 0x32c8 <PROTOCOL_DATA_SEND+0x164>
	}
	/*****************************************************************************************/
	
	
	/******************************CHANNEL APPLIED*******************************************/
	NRF_START_RX_MODE();
    322e:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <NRF_START_RX_MODE>
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    3232:	18 c0       	rjmp	.+48     	; 0x3264 <PROTOCOL_DATA_SEND+0x100>
	{
		COUNT_TIMER++;
    3234:	4a 89       	ldd	r20, Y+18	; 0x12
    3236:	5b 89       	ldd	r21, Y+19	; 0x13
    3238:	6c 89       	ldd	r22, Y+20	; 0x14
    323a:	7d 89       	ldd	r23, Y+21	; 0x15
    323c:	4f 5f       	subi	r20, 0xFF	; 255
    323e:	5f 4f       	sbci	r21, 0xFF	; 255
    3240:	6f 4f       	sbci	r22, 0xFF	; 255
    3242:	7f 4f       	sbci	r23, 0xFF	; 255
    3244:	4a 8b       	std	Y+18, r20	; 0x12
    3246:	5b 8b       	std	Y+19, r21	; 0x13
    3248:	6c 8b       	std	Y+20, r22	; 0x14
    324a:	7d 8b       	std	Y+21, r23	; 0x15
		if(COUNT_TIMER==MAX_COUNT_WAIT_SEND_PROTOCOL)
    324c:	4a 89       	ldd	r20, Y+18	; 0x12
    324e:	5b 89       	ldd	r21, Y+19	; 0x13
    3250:	6c 89       	ldd	r22, Y+20	; 0x14
    3252:	7d 89       	ldd	r23, Y+21	; 0x15
    3254:	4f 3f       	cpi	r20, 0xFF	; 255
    3256:	5f 4f       	sbci	r21, 0xFF	; 255
    3258:	6f 40       	sbci	r22, 0x0F	; 15
    325a:	71 05       	cpc	r23, r1
    325c:	19 f4       	brne	.+6      	; 0x3264 <PROTOCOL_DATA_SEND+0x100>
		{
			NRF_STOP_RX_MODE();
    325e:	0e 94 09 11 	call	0x2212	; 0x2212 <NRF_STOP_RX_MODE>
			return 0;
    3262:	32 c0       	rjmp	.+100    	; 0x32c8 <PROTOCOL_DATA_SEND+0x164>
	/*****************************************************************************************/
	
	
	/******************************CHANNEL APPLIED*******************************************/
	NRF_START_RX_MODE();
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    3264:	be 01       	movw	r22, r28
    3266:	61 5f       	subi	r22, 0xF1	; 241
    3268:	7f 4f       	sbci	r23, 0xFF	; 255
    326a:	ce 01       	movw	r24, r28
    326c:	01 96       	adiw	r24, 0x01	; 1
    326e:	0e 94 15 11 	call	0x222a	; 0x222a <NRF_CHECK_RX_PL>
    3272:	18 2f       	mov	r17, r24
    3274:	88 23       	and	r24, r24
    3276:	f1 f2       	breq	.-68     	; 0x3234 <PROTOCOL_DATA_SEND+0xd0>
		{
			NRF_STOP_RX_MODE();
			return 0;
		}
	}
	TEST_UART_SEND_str("counter=");
    3278:	87 e3       	ldi	r24, 0x37	; 55
    327a:	92 e0       	ldi	r25, 0x02	; 2
    327c:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	TEST_UART_SEND_VALUE(COUNT_TIMER);
    3280:	8a 89       	ldd	r24, Y+18	; 0x12
    3282:	9b 89       	ldd	r25, Y+19	; 0x13
    3284:	ac 89       	ldd	r26, Y+20	; 0x14
    3286:	bd 89       	ldd	r27, Y+21	; 0x15
    3288:	1c 01       	movw	r2, r24
    328a:	2d 01       	movw	r4, r26
    328c:	28 2f       	mov	r18, r24
    328e:	33 2d       	mov	r19, r3
    3290:	44 2d       	mov	r20, r4
    3292:	55 2d       	mov	r21, r5
    3294:	60 e0       	ldi	r22, 0x00	; 0
    3296:	70 e0       	ldi	r23, 0x00	; 0
    3298:	80 e0       	ldi	r24, 0x00	; 0
    329a:	90 e0       	ldi	r25, 0x00	; 0
    329c:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
	TEST_UART_SEND_str("\n");
    32a0:	8e e7       	ldi	r24, 0x7E	; 126
    32a2:	91 e0       	ldi	r25, 0x01	; 1
    32a4:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	NRF_STOP_RX_MODE();
    32a8:	0e 94 09 11 	call	0x2212	; 0x2212 <NRF_STOP_RX_MODE>
	if (!PROTOCOL_CHECK_RECIVED_PACKET(PACKET_TEMP, SENSOR_ADDRESS,RX_LENGTH,SESSION_KEY))
    32ac:	96 01       	movw	r18, r12
    32ae:	4f 85       	ldd	r20, Y+15	; 0x0f
    32b0:	b5 01       	movw	r22, r10
    32b2:	ce 01       	movw	r24, r28
    32b4:	01 96       	adiw	r24, 0x01	; 1
    32b6:	79 db       	rcall	.-2318   	; 0x29aa <PROTOCOL_CHECK_RECIVED_PACKET>
    32b8:	18 2f       	mov	r17, r24
    32ba:	88 23       	and	r24, r24
    32bc:	29 f0       	breq	.+10     	; 0x32c8 <PROTOCOL_DATA_SEND+0x164>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=DATA_CHANGED_CODE)
    32be:	11 e0       	ldi	r17, 0x01	; 1
    32c0:	88 85       	ldd	r24, Y+8	; 0x08
    32c2:	81 31       	cpi	r24, 0x11	; 17
    32c4:	09 f0       	breq	.+2      	; 0x32c8 <PROTOCOL_DATA_SEND+0x164>
    32c6:	10 e0       	ldi	r17, 0x00	; 0
	{
		return 0;
	}
	return 1;
}
    32c8:	81 2f       	mov	r24, r17
    32ca:	6d 96       	adiw	r28, 0x1d	; 29
    32cc:	0f b6       	in	r0, 0x3f	; 63
    32ce:	f8 94       	cli
    32d0:	de bf       	out	0x3e, r29	; 62
    32d2:	0f be       	out	0x3f, r0	; 63
    32d4:	cd bf       	out	0x3d, r28	; 61
    32d6:	df 91       	pop	r29
    32d8:	cf 91       	pop	r28
    32da:	1f 91       	pop	r17
    32dc:	0f 91       	pop	r16
    32de:	ff 90       	pop	r15
    32e0:	ef 90       	pop	r14
    32e2:	df 90       	pop	r13
    32e4:	cf 90       	pop	r12
    32e6:	bf 90       	pop	r11
    32e8:	af 90       	pop	r10
    32ea:	9f 90       	pop	r9
    32ec:	8f 90       	pop	r8
    32ee:	7f 90       	pop	r7
    32f0:	6f 90       	pop	r6
    32f2:	5f 90       	pop	r5
    32f4:	4f 90       	pop	r4
    32f6:	3f 90       	pop	r3
    32f8:	2f 90       	pop	r2
    32fa:	08 95       	ret

000032fc <PROTOCOL_DATA_READ>:

unsigned char PROTOCOL_DATA_READ(unsigned char*SENSOR_ADDRESS,unsigned char SENSOR_VERSION,unsigned char SENSOR_ADDRESS_LENGTH,unsigned char*SESSION_KEY,unsigned char *REGISTER_ADDRESS,unsigned char*DATA_READ_BUFFER)
{
    32fc:	2f 92       	push	r2
    32fe:	3f 92       	push	r3
    3300:	4f 92       	push	r4
    3302:	5f 92       	push	r5
    3304:	6f 92       	push	r6
    3306:	7f 92       	push	r7
    3308:	8f 92       	push	r8
    330a:	9f 92       	push	r9
    330c:	af 92       	push	r10
    330e:	bf 92       	push	r11
    3310:	cf 92       	push	r12
    3312:	df 92       	push	r13
    3314:	ef 92       	push	r14
    3316:	ff 92       	push	r15
    3318:	0f 93       	push	r16
    331a:	1f 93       	push	r17
    331c:	cf 93       	push	r28
    331e:	df 93       	push	r29
    3320:	cd b7       	in	r28, 0x3d	; 61
    3322:	de b7       	in	r29, 0x3e	; 62
    3324:	69 97       	sbiw	r28, 0x19	; 25
    3326:	0f b6       	in	r0, 0x3f	; 63
    3328:	f8 94       	cli
    332a:	de bf       	out	0x3e, r29	; 62
    332c:	0f be       	out	0x3f, r0	; 63
    332e:	cd bf       	out	0x3d, r28	; 61
    3330:	5c 01       	movw	r10, r24
    3332:	94 2e       	mov	r9, r20
    3334:	69 01       	movw	r12, r18
	unsigned char PACKET_TEMP[14];
	unsigned char i,RX_LENGTH;
	unsigned char HASH_VALUE[2];
	volatile unsigned long COUNT_TIMER=0;
    3336:	1a 8a       	std	Y+18, r1	; 0x12
    3338:	1b 8a       	std	Y+19, r1	; 0x13
    333a:	1c 8a       	std	Y+20, r1	; 0x14
    333c:	1d 8a       	std	Y+21, r1	; 0x15
	
	
	
	/*********READ DATA**********/
	PACKET_TEMP[0]=12|0B00000000;
    333e:	8c e0       	ldi	r24, 0x0C	; 12
    3340:	89 83       	std	Y+1, r24	; 0x01
	PACKET_TEMP[1]=SENSOR_VERSION;
    3342:	6a 83       	std	Y+2, r22	; 0x02
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    3344:	44 23       	and	r20, r20
    3346:	59 f0       	breq	.+22     	; 0x335e <PROTOCOL_DATA_READ+0x62>
    3348:	88 e0       	ldi	r24, 0x08	; 8
    334a:	91 e0       	ldi	r25, 0x01	; 1
    334c:	de 01       	movw	r26, r28
    334e:	13 96       	adiw	r26, 0x03	; 3
    3350:	fc 01       	movw	r30, r24
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
    3352:	21 91       	ld	r18, Z+
    3354:	2d 93       	st	X+, r18
    3356:	2e 2f       	mov	r18, r30
    3358:	28 1b       	sub	r18, r24
	
	
	/*********READ DATA**********/
	PACKET_TEMP[0]=12|0B00000000;
	PACKET_TEMP[1]=SENSOR_VERSION;
	for (i=0;i<SENSOR_ADDRESS_LENGTH;i++)
    335a:	29 15       	cp	r18, r9
    335c:	d0 f3       	brcs	.-12     	; 0x3352 <PROTOCOL_DATA_READ+0x56>
	{
		PACKET_TEMP[2+i]=MY_ADDRESS[i];
	}
	PACKET_TEMP[7]=MASTER_NEEDS_DATA_CODE;
    335e:	82 e1       	ldi	r24, 0x12	; 18
    3360:	88 87       	std	Y+8, r24	; 0x08
	unsigned char PLAIN_TEXT[2],CIPHER_TEXT[2];
	PLAIN_TEXT[0]=REGISTER_ADDRESS[0];
    3362:	f8 01       	movw	r30, r16
    3364:	80 81       	ld	r24, Z
    3366:	8e 8b       	std	Y+22, r24	; 0x16
	PLAIN_TEXT[1]=REGISTER_ADDRESS[1];
    3368:	81 81       	ldd	r24, Z+1	; 0x01
    336a:	8f 8b       	std	Y+23, r24	; 0x17
	ENCRYPT_ALGORISM_1_V1(PLAIN_TEXT,CIPHER_TEXT,2,SESSION_KEY);
    336c:	96 01       	movw	r18, r12
    336e:	42 e0       	ldi	r20, 0x02	; 2
    3370:	be 01       	movw	r22, r28
    3372:	68 5e       	subi	r22, 0xE8	; 232
    3374:	7f 4f       	sbci	r23, 0xFF	; 255
    3376:	ce 01       	movw	r24, r28
    3378:	46 96       	adiw	r24, 0x16	; 22
    337a:	8f d0       	rcall	.+286    	; 0x349a <ENCRYPT_ALGORISM_1_V1>
	PACKET_TEMP[8]=CIPHER_TEXT[0];
    337c:	88 8d       	ldd	r24, Y+24	; 0x18
    337e:	89 87       	std	Y+9, r24	; 0x09
	PACKET_TEMP[9]=CIPHER_TEXT[1];
    3380:	89 8d       	ldd	r24, Y+25	; 0x19
    3382:	8a 87       	std	Y+10, r24	; 0x0a
	HASH_SESSION_KEY(PACKET_TEMP,HASH_VALUE,10,SESSION_KEY);
    3384:	96 01       	movw	r18, r12
    3386:	4a e0       	ldi	r20, 0x0A	; 10
    3388:	be 01       	movw	r22, r28
    338a:	60 5f       	subi	r22, 0xF0	; 240
    338c:	7f 4f       	sbci	r23, 0xFF	; 255
    338e:	ce 01       	movw	r24, r28
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	f5 d0       	rcall	.+490    	; 0x357e <HASH_SESSION_KEY>
	PACKET_TEMP[10]=HASH_VALUE[0];
    3394:	88 89       	ldd	r24, Y+16	; 0x10
    3396:	8b 87       	std	Y+11, r24	; 0x0b
	PACKET_TEMP[11]=HASH_VALUE[1];
    3398:	89 89       	ldd	r24, Y+17	; 0x11
    339a:	8c 87       	std	Y+12, r24	; 0x0c
	if (!NRF_SEND_DATA_WITH_ACK(SENSOR_ADDRESS,SENSOR_ADDRESS_LENGTH,PACKET_TEMP,12))
    339c:	2c e0       	ldi	r18, 0x0C	; 12
    339e:	ae 01       	movw	r20, r28
    33a0:	4f 5f       	subi	r20, 0xFF	; 255
    33a2:	5f 4f       	sbci	r21, 0xFF	; 255
    33a4:	69 2d       	mov	r22, r9
    33a6:	c5 01       	movw	r24, r10
    33a8:	0e 94 bc 10 	call	0x2178	; 0x2178 <NRF_SEND_DATA_WITH_ACK>
    33ac:	18 2f       	mov	r17, r24
    33ae:	88 23       	and	r24, r24
    33b0:	09 f4       	brne	.+2      	; 0x33b4 <PROTOCOL_DATA_READ+0xb8>
    33b2:	59 c0       	rjmp	.+178    	; 0x3466 <PROTOCOL_DATA_READ+0x16a>
	}
	/*****************************************************************************************/
	
	
	/******************************DATA READ*******************************************/
	NRF_START_RX_MODE();
    33b4:	0e 94 fb 10 	call	0x21f6	; 0x21f6 <NRF_START_RX_MODE>
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    33b8:	18 c0       	rjmp	.+48     	; 0x33ea <PROTOCOL_DATA_READ+0xee>
	{
		COUNT_TIMER++;
    33ba:	4a 89       	ldd	r20, Y+18	; 0x12
    33bc:	5b 89       	ldd	r21, Y+19	; 0x13
    33be:	6c 89       	ldd	r22, Y+20	; 0x14
    33c0:	7d 89       	ldd	r23, Y+21	; 0x15
    33c2:	4f 5f       	subi	r20, 0xFF	; 255
    33c4:	5f 4f       	sbci	r21, 0xFF	; 255
    33c6:	6f 4f       	sbci	r22, 0xFF	; 255
    33c8:	7f 4f       	sbci	r23, 0xFF	; 255
    33ca:	4a 8b       	std	Y+18, r20	; 0x12
    33cc:	5b 8b       	std	Y+19, r21	; 0x13
    33ce:	6c 8b       	std	Y+20, r22	; 0x14
    33d0:	7d 8b       	std	Y+21, r23	; 0x15
		if(COUNT_TIMER==MAX_COUNT_WAIT_SEND_PROTOCOL)
    33d2:	4a 89       	ldd	r20, Y+18	; 0x12
    33d4:	5b 89       	ldd	r21, Y+19	; 0x13
    33d6:	6c 89       	ldd	r22, Y+20	; 0x14
    33d8:	7d 89       	ldd	r23, Y+21	; 0x15
    33da:	4f 3f       	cpi	r20, 0xFF	; 255
    33dc:	5f 4f       	sbci	r21, 0xFF	; 255
    33de:	6f 40       	sbci	r22, 0x0F	; 15
    33e0:	71 05       	cpc	r23, r1
    33e2:	19 f4       	brne	.+6      	; 0x33ea <PROTOCOL_DATA_READ+0xee>
		{
			NRF_STOP_RX_MODE();
    33e4:	0e 94 09 11 	call	0x2212	; 0x2212 <NRF_STOP_RX_MODE>
			return 0;
    33e8:	3e c0       	rjmp	.+124    	; 0x3466 <PROTOCOL_DATA_READ+0x16a>
	/*****************************************************************************************/
	
	
	/******************************DATA READ*******************************************/
	NRF_START_RX_MODE();
	while(!NRF_CHECK_RX_PL(PACKET_TEMP,&RX_LENGTH))
    33ea:	be 01       	movw	r22, r28
    33ec:	61 5f       	subi	r22, 0xF1	; 241
    33ee:	7f 4f       	sbci	r23, 0xFF	; 255
    33f0:	ce 01       	movw	r24, r28
    33f2:	01 96       	adiw	r24, 0x01	; 1
    33f4:	0e 94 15 11 	call	0x222a	; 0x222a <NRF_CHECK_RX_PL>
    33f8:	18 2f       	mov	r17, r24
    33fa:	88 23       	and	r24, r24
    33fc:	f1 f2       	breq	.-68     	; 0x33ba <PROTOCOL_DATA_READ+0xbe>
		{
			NRF_STOP_RX_MODE();
			return 0;
		}
	}
	TEST_UART_SEND_str("counter=");
    33fe:	87 e3       	ldi	r24, 0x37	; 55
    3400:	92 e0       	ldi	r25, 0x02	; 2
    3402:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	TEST_UART_SEND_VALUE(COUNT_TIMER);
    3406:	8a 89       	ldd	r24, Y+18	; 0x12
    3408:	9b 89       	ldd	r25, Y+19	; 0x13
    340a:	ac 89       	ldd	r26, Y+20	; 0x14
    340c:	bd 89       	ldd	r27, Y+21	; 0x15
    340e:	1c 01       	movw	r2, r24
    3410:	2d 01       	movw	r4, r26
    3412:	28 2f       	mov	r18, r24
    3414:	33 2d       	mov	r19, r3
    3416:	44 2d       	mov	r20, r4
    3418:	55 2d       	mov	r21, r5
    341a:	60 e0       	ldi	r22, 0x00	; 0
    341c:	70 e0       	ldi	r23, 0x00	; 0
    341e:	80 e0       	ldi	r24, 0x00	; 0
    3420:	90 e0       	ldi	r25, 0x00	; 0
    3422:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
	TEST_UART_SEND_str("\n");
    3426:	8e e7       	ldi	r24, 0x7E	; 126
    3428:	91 e0       	ldi	r25, 0x01	; 1
    342a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
	NRF_STOP_RX_MODE();
    342e:	0e 94 09 11 	call	0x2212	; 0x2212 <NRF_STOP_RX_MODE>
	if (!PROTOCOL_CHECK_RECIVED_PACKET(PACKET_TEMP, SENSOR_ADDRESS,RX_LENGTH,SESSION_KEY))
    3432:	96 01       	movw	r18, r12
    3434:	4f 85       	ldd	r20, Y+15	; 0x0f
    3436:	b5 01       	movw	r22, r10
    3438:	ce 01       	movw	r24, r28
    343a:	01 96       	adiw	r24, 0x01	; 1
    343c:	b6 da       	rcall	.-2708   	; 0x29aa <PROTOCOL_CHECK_RECIVED_PACKET>
    343e:	18 2f       	mov	r17, r24
    3440:	88 23       	and	r24, r24
    3442:	89 f0       	breq	.+34     	; 0x3466 <PROTOCOL_DATA_READ+0x16a>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=DATA_READ_CODE)
    3444:	88 85       	ldd	r24, Y+8	; 0x08
    3446:	83 31       	cpi	r24, 0x13	; 19
    3448:	69 f4       	brne	.+26     	; 0x3464 <PROTOCOL_DATA_READ+0x168>
	{
		return 0;
	}
	CIPHER_TEXT[0]=PACKET_TEMP[8];
    344a:	89 85       	ldd	r24, Y+9	; 0x09
    344c:	88 8f       	std	Y+24, r24	; 0x18
	CIPHER_TEXT[1]=PACKET_TEMP[9];
    344e:	8a 85       	ldd	r24, Y+10	; 0x0a
    3450:	89 8f       	std	Y+25, r24	; 0x19
	DECRYPT_ALGORISM_1_V1(DATA_READ_BUFFER,CIPHER_TEXT,2,SESSION_KEY);
    3452:	96 01       	movw	r18, r12
    3454:	42 e0       	ldi	r20, 0x02	; 2
    3456:	be 01       	movw	r22, r28
    3458:	68 5e       	subi	r22, 0xE8	; 232
    345a:	7f 4f       	sbci	r23, 0xFF	; 255
    345c:	c7 01       	movw	r24, r14
    345e:	3b d0       	rcall	.+118    	; 0x34d6 <DECRYPT_ALGORISM_1_V1>
	return 1;
    3460:	11 e0       	ldi	r17, 0x01	; 1
    3462:	01 c0       	rjmp	.+2      	; 0x3466 <PROTOCOL_DATA_READ+0x16a>
	{
		return 0;
	}
	if(PACKET_TEMP[7]!=DATA_READ_CODE)
	{
		return 0;
    3464:	10 e0       	ldi	r17, 0x00	; 0
	}
	CIPHER_TEXT[0]=PACKET_TEMP[8];
	CIPHER_TEXT[1]=PACKET_TEMP[9];
	DECRYPT_ALGORISM_1_V1(DATA_READ_BUFFER,CIPHER_TEXT,2,SESSION_KEY);
	return 1;
}
    3466:	81 2f       	mov	r24, r17
    3468:	69 96       	adiw	r28, 0x19	; 25
    346a:	0f b6       	in	r0, 0x3f	; 63
    346c:	f8 94       	cli
    346e:	de bf       	out	0x3e, r29	; 62
    3470:	0f be       	out	0x3f, r0	; 63
    3472:	cd bf       	out	0x3d, r28	; 61
    3474:	df 91       	pop	r29
    3476:	cf 91       	pop	r28
    3478:	1f 91       	pop	r17
    347a:	0f 91       	pop	r16
    347c:	ff 90       	pop	r15
    347e:	ef 90       	pop	r14
    3480:	df 90       	pop	r13
    3482:	cf 90       	pop	r12
    3484:	bf 90       	pop	r11
    3486:	af 90       	pop	r10
    3488:	9f 90       	pop	r9
    348a:	8f 90       	pop	r8
    348c:	7f 90       	pop	r7
    348e:	6f 90       	pop	r6
    3490:	5f 90       	pop	r5
    3492:	4f 90       	pop	r4
    3494:	3f 90       	pop	r3
    3496:	2f 90       	pop	r2
    3498:	08 95       	ret

0000349a <ENCRYPT_ALGORISM_1_V1>:
 */ 
#include "SECURITY_DRIVER.h"


void ENCRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    349a:	0f 93       	push	r16
    349c:	1f 93       	push	r17
    349e:	cf 93       	push	r28
    34a0:	df 93       	push	r29
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    34a2:	44 23       	and	r20, r20
    34a4:	99 f0       	breq	.+38     	; 0x34cc <ENCRYPT_ALGORISM_1_V1+0x32>
    34a6:	c8 2f       	mov	r28, r24
    34a8:	d9 2f       	mov	r29, r25
    34aa:	a6 2f       	mov	r26, r22
    34ac:	b7 2f       	mov	r27, r23
    34ae:	50 e0       	ldi	r21, 0x00	; 0
	{
		CIPHER_TEXT[i]=PLAIN_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
    34b0:	69 91       	ld	r22, Y+
    34b2:	05 2f       	mov	r16, r21
    34b4:	01 70       	andi	r16, 0x01	; 1
    34b6:	10 e0       	ldi	r17, 0x00	; 0
    34b8:	c9 01       	movw	r24, r18
    34ba:	80 0f       	add	r24, r16
    34bc:	91 1f       	adc	r25, r17
    34be:	fc 01       	movw	r30, r24
    34c0:	80 81       	ld	r24, Z
    34c2:	86 27       	eor	r24, r22
    34c4:	8d 93       	st	X+, r24


void ENCRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    34c6:	5f 5f       	subi	r21, 0xFF	; 255
    34c8:	54 13       	cpse	r21, r20
    34ca:	f2 cf       	rjmp	.-28     	; 0x34b0 <ENCRYPT_ALGORISM_1_V1+0x16>
	{
		CIPHER_TEXT[i]=PLAIN_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
	}
}
    34cc:	df 91       	pop	r29
    34ce:	cf 91       	pop	r28
    34d0:	1f 91       	pop	r17
    34d2:	0f 91       	pop	r16
    34d4:	08 95       	ret

000034d6 <DECRYPT_ALGORISM_1_V1>:

void DECRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    34d6:	0f 93       	push	r16
    34d8:	1f 93       	push	r17
    34da:	cf 93       	push	r28
    34dc:	df 93       	push	r29
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    34de:	44 23       	and	r20, r20
    34e0:	99 f0       	breq	.+38     	; 0x3508 <DECRYPT_ALGORISM_1_V1+0x32>
    34e2:	c6 2f       	mov	r28, r22
    34e4:	d7 2f       	mov	r29, r23
    34e6:	a8 2f       	mov	r26, r24
    34e8:	b9 2f       	mov	r27, r25
    34ea:	50 e0       	ldi	r21, 0x00	; 0
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
    34ec:	69 91       	ld	r22, Y+
    34ee:	05 2f       	mov	r16, r21
    34f0:	01 70       	andi	r16, 0x01	; 1
    34f2:	10 e0       	ldi	r17, 0x00	; 0
    34f4:	c9 01       	movw	r24, r18
    34f6:	80 0f       	add	r24, r16
    34f8:	91 1f       	adc	r25, r17
    34fa:	fc 01       	movw	r30, r24
    34fc:	80 81       	ld	r24, Z
    34fe:	86 27       	eor	r24, r22
    3500:	8d 93       	st	X+, r24
}

void DECRYPT_ALGORISM_1_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    3502:	5f 5f       	subi	r21, 0xFF	; 255
    3504:	54 13       	cpse	r21, r20
    3506:	f2 cf       	rjmp	.-28     	; 0x34ec <DECRYPT_ALGORISM_1_V1+0x16>
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(SESSION_KEY[i%SESSION_KEY_SIZE_V1]);
	}
}
    3508:	df 91       	pop	r29
    350a:	cf 91       	pop	r28
    350c:	1f 91       	pop	r17
    350e:	0f 91       	pop	r16
    3510:	08 95       	ret

00003512 <ENCRYPT_ALGORISM_2_V1>:

void ENCRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    3512:	cf 93       	push	r28
    3514:	df 93       	push	r29
    3516:	f9 01       	movw	r30, r18
		unsigned char i;
		for (i=0;i<LENGTH;i++)
    3518:	44 23       	and	r20, r20
    351a:	99 f0       	breq	.+38     	; 0x3542 <ENCRYPT_ALGORISM_2_V1+0x30>
    351c:	38 2f       	mov	r19, r24
    351e:	c6 2f       	mov	r28, r22
    3520:	d7 2f       	mov	r29, r23
    3522:	a8 2f       	mov	r26, r24
    3524:	b9 2f       	mov	r27, r25
		{
			CIPHER_TEXT[i]=PLAIN_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
    3526:	9d 91       	ld	r25, X+
    3528:	21 81       	ldd	r18, Z+1	; 0x01
    352a:	80 81       	ld	r24, Z
    352c:	82 27       	eor	r24, r18
    352e:	22 81       	ldd	r18, Z+2	; 0x02
    3530:	82 27       	eor	r24, r18
    3532:	23 81       	ldd	r18, Z+3	; 0x03
    3534:	82 27       	eor	r24, r18
    3536:	89 27       	eor	r24, r25
    3538:	89 93       	st	Y+, r24
    353a:	8a 2f       	mov	r24, r26
    353c:	83 1b       	sub	r24, r19
}

void ENCRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
		unsigned char i;
		for (i=0;i<LENGTH;i++)
    353e:	84 17       	cp	r24, r20
    3540:	90 f3       	brcs	.-28     	; 0x3526 <ENCRYPT_ALGORISM_2_V1+0x14>
		{
			CIPHER_TEXT[i]=PLAIN_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
		}
}
    3542:	df 91       	pop	r29
    3544:	cf 91       	pop	r28
    3546:	08 95       	ret

00003548 <DECRYPT_ALGORISM_2_V1>:

void DECRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    3548:	cf 93       	push	r28
    354a:	df 93       	push	r29
    354c:	f9 01       	movw	r30, r18
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    354e:	44 23       	and	r20, r20
    3550:	99 f0       	breq	.+38     	; 0x3578 <DECRYPT_ALGORISM_2_V1+0x30>
    3552:	36 2f       	mov	r19, r22
    3554:	c8 2f       	mov	r28, r24
    3556:	d9 2f       	mov	r29, r25
    3558:	a6 2f       	mov	r26, r22
    355a:	b7 2f       	mov	r27, r23
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
    355c:	9d 91       	ld	r25, X+
    355e:	21 81       	ldd	r18, Z+1	; 0x01
    3560:	80 81       	ld	r24, Z
    3562:	82 27       	eor	r24, r18
    3564:	22 81       	ldd	r18, Z+2	; 0x02
    3566:	82 27       	eor	r24, r18
    3568:	23 81       	ldd	r18, Z+3	; 0x03
    356a:	82 27       	eor	r24, r18
    356c:	89 27       	eor	r24, r25
    356e:	89 93       	st	Y+, r24
    3570:	8a 2f       	mov	r24, r26
    3572:	83 1b       	sub	r24, r19
}

void DECRYPT_ALGORISM_2_V1(unsigned char *PLAIN_TEXT,unsigned char *CIPHER_TEXT,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
	unsigned char i;
	for (i=0;i<LENGTH;i++)
    3574:	84 17       	cp	r24, r20
    3576:	90 f3       	brcs	.-28     	; 0x355c <DECRYPT_ALGORISM_2_V1+0x14>
	{
		PLAIN_TEXT[i]=CIPHER_TEXT[i]^(PASSWORD_KEY[0]^PASSWORD_KEY[1]^PASSWORD_KEY[2]^PASSWORD_KEY[3]);/*PASSWORD SIZE 4*/
	}
}
    3578:	df 91       	pop	r29
    357a:	cf 91       	pop	r28
    357c:	08 95       	ret

0000357e <HASH_SESSION_KEY>:

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
    357e:	3f 92       	push	r3
    3580:	4f 92       	push	r4
    3582:	5f 92       	push	r5
    3584:	6f 92       	push	r6
    3586:	7f 92       	push	r7
    3588:	8f 92       	push	r8
    358a:	9f 92       	push	r9
    358c:	af 92       	push	r10
    358e:	bf 92       	push	r11
    3590:	cf 92       	push	r12
    3592:	df 92       	push	r13
    3594:	ef 92       	push	r14
    3596:	ff 92       	push	r15
    3598:	0f 93       	push	r16
    359a:	1f 93       	push	r17
    359c:	cf 93       	push	r28
    359e:	df 93       	push	r29
    35a0:	8c 01       	movw	r16, r24
    35a2:	7b 01       	movw	r14, r22
    35a4:	34 2e       	mov	r3, r20
    35a6:	69 01       	movw	r12, r18
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    35a8:	44 23       	and	r20, r20
    35aa:	09 f4       	brne	.+2      	; 0x35ae <HASH_SESSION_KEY+0x30>
    35ac:	44 c0       	rjmp	.+136    	; 0x3636 <HASH_SESSION_KEY+0xb8>
    35ae:	c0 e0       	ldi	r28, 0x00	; 0
}

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    35b0:	81 2c       	mov	r8, r1
    35b2:	91 2c       	mov	r9, r1
    35b4:	54 01       	movw	r10, r8
    35b6:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
    35b8:	44 24       	eor	r4, r4
    35ba:	4a 94       	dec	r4
    35bc:	54 2c       	mov	r5, r4
    35be:	61 2c       	mov	r6, r1
    35c0:	71 2c       	mov	r7, r1
    35c2:	f8 01       	movw	r30, r16
    35c4:	ec 0f       	add	r30, r28
    35c6:	f1 1d       	adc	r31, r1
    35c8:	a0 81       	ld	r26, Z
    35ca:	b0 e0       	ldi	r27, 0x00	; 0
    35cc:	a5 01       	movw	r20, r10
    35ce:	94 01       	movw	r18, r8
    35d0:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__muluhisi3>
    35d4:	a3 01       	movw	r20, r6
    35d6:	92 01       	movw	r18, r4
    35d8:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    35dc:	4b 01       	movw	r8, r22
    35de:	5c 01       	movw	r10, r24
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    35e0:	ce 5f       	subi	r28, 0xFE	; 254
    35e2:	c3 15       	cp	r28, r3
    35e4:	70 f3       	brcs	.-36     	; 0x35c2 <HASH_SESSION_KEY+0x44>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    35e6:	81 e0       	ldi	r24, 0x01	; 1
    35e8:	83 15       	cp	r24, r3
    35ea:	70 f5       	brcc	.+92     	; 0x3648 <HASH_SESSION_KEY+0xca>
    35ec:	e8 01       	movw	r28, r16
    35ee:	21 96       	adiw	r28, 0x01	; 1
    35f0:	0d 5f       	subi	r16, 0xFD	; 253
    35f2:	1f 4f       	sbci	r17, 0xFF	; 255
    35f4:	3a 94       	dec	r3
    35f6:	3a 94       	dec	r3
    35f8:	36 94       	lsr	r3
    35fa:	83 2d       	mov	r24, r3
    35fc:	90 e0       	ldi	r25, 0x00	; 0
    35fe:	88 0f       	add	r24, r24
    3600:	99 1f       	adc	r25, r25
    3602:	08 0f       	add	r16, r24
    3604:	19 1f       	adc	r17, r25
    3606:	61 e0       	ldi	r22, 0x01	; 1
    3608:	70 e0       	ldi	r23, 0x00	; 0
    360a:	80 e0       	ldi	r24, 0x00	; 0
    360c:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
    360e:	44 24       	eor	r4, r4
    3610:	4a 94       	dec	r4
    3612:	54 2c       	mov	r5, r4
    3614:	61 2c       	mov	r6, r1
    3616:	71 2c       	mov	r7, r1
    3618:	a8 81       	ld	r26, Y
    361a:	b0 e0       	ldi	r27, 0x00	; 0
    361c:	9b 01       	movw	r18, r22
    361e:	ac 01       	movw	r20, r24
    3620:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__muluhisi3>
    3624:	a3 01       	movw	r20, r6
    3626:	92 01       	movw	r18, r4
    3628:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    362c:	22 96       	adiw	r28, 0x02	; 2
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    362e:	c0 17       	cp	r28, r16
    3630:	d1 07       	cpc	r29, r17
    3632:	91 f7       	brne	.-28     	; 0x3618 <HASH_SESSION_KEY+0x9a>
    3634:	0d c0       	rjmp	.+26     	; 0x3650 <HASH_SESSION_KEY+0xd2>
}

void HASH_SESSION_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*SESSION_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    3636:	81 2c       	mov	r8, r1
    3638:	91 2c       	mov	r9, r1
    363a:	54 01       	movw	r10, r8
    363c:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    363e:	61 e0       	ldi	r22, 0x01	; 1
    3640:	70 e0       	ldi	r23, 0x00	; 0
    3642:	80 e0       	ldi	r24, 0x00	; 0
    3644:	90 e0       	ldi	r25, 0x00	; 0
    3646:	04 c0       	rjmp	.+8      	; 0x3650 <HASH_SESSION_KEY+0xd2>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    3648:	61 e0       	ldi	r22, 0x01	; 1
    364a:	70 e0       	ldi	r23, 0x00	; 0
    364c:	80 e0       	ldi	r24, 0x00	; 0
    364e:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
			}
			TEMP_HASH_VALUE=(HASH_ODD^HASH_EVEN)%0xffff;
    3650:	68 25       	eor	r22, r8
    3652:	79 25       	eor	r23, r9
    3654:	8a 25       	eor	r24, r10
    3656:	9b 25       	eor	r25, r11
    3658:	2f ef       	ldi	r18, 0xFF	; 255
    365a:	3f ef       	ldi	r19, 0xFF	; 255
    365c:	40 e0       	ldi	r20, 0x00	; 0
    365e:	50 e0       	ldi	r21, 0x00	; 0
    3660:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
			HASH_VALUE[0]=(TEMP_HASH_VALUE>>8)^SESSION_KEY[0];
    3664:	f6 01       	movw	r30, r12
    3666:	80 81       	ld	r24, Z
    3668:	78 27       	eor	r23, r24
    366a:	f7 01       	movw	r30, r14
    366c:	70 83       	st	Z, r23
			HASH_VALUE[1]=(TEMP_HASH_VALUE&0x00ff)^SESSION_KEY[1];
    366e:	f6 01       	movw	r30, r12
    3670:	81 81       	ldd	r24, Z+1	; 0x01
    3672:	68 27       	eor	r22, r24
    3674:	f7 01       	movw	r30, r14
    3676:	61 83       	std	Z+1, r22	; 0x01
				
}
    3678:	df 91       	pop	r29
    367a:	cf 91       	pop	r28
    367c:	1f 91       	pop	r17
    367e:	0f 91       	pop	r16
    3680:	ff 90       	pop	r15
    3682:	ef 90       	pop	r14
    3684:	df 90       	pop	r13
    3686:	cf 90       	pop	r12
    3688:	bf 90       	pop	r11
    368a:	af 90       	pop	r10
    368c:	9f 90       	pop	r9
    368e:	8f 90       	pop	r8
    3690:	7f 90       	pop	r7
    3692:	6f 90       	pop	r6
    3694:	5f 90       	pop	r5
    3696:	4f 90       	pop	r4
    3698:	3f 90       	pop	r3
    369a:	08 95       	ret

0000369c <HASH_PASWORD_KEY>:

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
    369c:	3f 92       	push	r3
    369e:	4f 92       	push	r4
    36a0:	5f 92       	push	r5
    36a2:	6f 92       	push	r6
    36a4:	7f 92       	push	r7
    36a6:	8f 92       	push	r8
    36a8:	9f 92       	push	r9
    36aa:	af 92       	push	r10
    36ac:	bf 92       	push	r11
    36ae:	cf 92       	push	r12
    36b0:	df 92       	push	r13
    36b2:	ef 92       	push	r14
    36b4:	ff 92       	push	r15
    36b6:	0f 93       	push	r16
    36b8:	1f 93       	push	r17
    36ba:	cf 93       	push	r28
    36bc:	df 93       	push	r29
    36be:	8c 01       	movw	r16, r24
    36c0:	6b 01       	movw	r12, r22
    36c2:	34 2e       	mov	r3, r20
    36c4:	79 01       	movw	r14, r18
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    36c6:	44 23       	and	r20, r20
    36c8:	09 f4       	brne	.+2      	; 0x36cc <HASH_PASWORD_KEY+0x30>
    36ca:	44 c0       	rjmp	.+136    	; 0x3754 <HASH_PASWORD_KEY+0xb8>
    36cc:	c0 e0       	ldi	r28, 0x00	; 0
}

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    36ce:	81 2c       	mov	r8, r1
    36d0:	91 2c       	mov	r9, r1
    36d2:	54 01       	movw	r10, r8
    36d4:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
    36d6:	44 24       	eor	r4, r4
    36d8:	4a 94       	dec	r4
    36da:	54 2c       	mov	r5, r4
    36dc:	61 2c       	mov	r6, r1
    36de:	71 2c       	mov	r7, r1
    36e0:	f8 01       	movw	r30, r16
    36e2:	ec 0f       	add	r30, r28
    36e4:	f1 1d       	adc	r31, r1
    36e6:	a0 81       	ld	r26, Z
    36e8:	b0 e0       	ldi	r27, 0x00	; 0
    36ea:	a5 01       	movw	r20, r10
    36ec:	94 01       	movw	r18, r8
    36ee:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__muluhisi3>
    36f2:	a3 01       	movw	r20, r6
    36f4:	92 01       	movw	r18, r4
    36f6:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    36fa:	4b 01       	movw	r8, r22
    36fc:	5c 01       	movw	r10, r24
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    36fe:	ce 5f       	subi	r28, 0xFE	; 254
    3700:	c3 15       	cp	r28, r3
    3702:	70 f3       	brcs	.-36     	; 0x36e0 <HASH_PASWORD_KEY+0x44>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    3704:	81 e0       	ldi	r24, 0x01	; 1
    3706:	83 15       	cp	r24, r3
    3708:	70 f5       	brcc	.+92     	; 0x3766 <HASH_PASWORD_KEY+0xca>
    370a:	e8 01       	movw	r28, r16
    370c:	21 96       	adiw	r28, 0x01	; 1
    370e:	0d 5f       	subi	r16, 0xFD	; 253
    3710:	1f 4f       	sbci	r17, 0xFF	; 255
    3712:	3a 94       	dec	r3
    3714:	3a 94       	dec	r3
    3716:	36 94       	lsr	r3
    3718:	83 2d       	mov	r24, r3
    371a:	90 e0       	ldi	r25, 0x00	; 0
    371c:	88 0f       	add	r24, r24
    371e:	99 1f       	adc	r25, r25
    3720:	08 0f       	add	r16, r24
    3722:	19 1f       	adc	r17, r25
    3724:	61 e0       	ldi	r22, 0x01	; 1
    3726:	70 e0       	ldi	r23, 0x00	; 0
    3728:	80 e0       	ldi	r24, 0x00	; 0
    372a:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
    372c:	44 24       	eor	r4, r4
    372e:	4a 94       	dec	r4
    3730:	54 2c       	mov	r5, r4
    3732:	61 2c       	mov	r6, r1
    3734:	71 2c       	mov	r7, r1
    3736:	a8 81       	ld	r26, Y
    3738:	b0 e0       	ldi	r27, 0x00	; 0
    373a:	9b 01       	movw	r18, r22
    373c:	ac 01       	movw	r20, r24
    373e:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__muluhisi3>
    3742:	a3 01       	movw	r20, r6
    3744:	92 01       	movw	r18, r4
    3746:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    374a:	22 96       	adiw	r28, 0x02	; 2
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    374c:	c0 17       	cp	r28, r16
    374e:	d1 07       	cpc	r29, r17
    3750:	91 f7       	brne	.-28     	; 0x3736 <HASH_PASWORD_KEY+0x9a>
    3752:	0d c0       	rjmp	.+26     	; 0x376e <HASH_PASWORD_KEY+0xd2>
}

void HASH_PASWORD_KEY(unsigned char *DATA_TO_BE_HASHED,unsigned char *HASH_VALUE,unsigned char LENGTH,unsigned char*PASSWORD_KEY)
{
			unsigned short TEMP_HASH_VALUE;
			unsigned long HASH_ODD=1;
    3754:	81 2c       	mov	r8, r1
    3756:	91 2c       	mov	r9, r1
    3758:	54 01       	movw	r10, r8
    375a:	83 94       	inc	r8
			unsigned long HASH_EVEN=1;
			unsigned char i;
			for (i=0;i<LENGTH;i=i+2)
    375c:	61 e0       	ldi	r22, 0x01	; 1
    375e:	70 e0       	ldi	r23, 0x00	; 0
    3760:	80 e0       	ldi	r24, 0x00	; 0
    3762:	90 e0       	ldi	r25, 0x00	; 0
    3764:	04 c0       	rjmp	.+8      	; 0x376e <HASH_PASWORD_KEY+0xd2>
			{
				HASH_ODD=(HASH_ODD*DATA_TO_BE_HASHED[i])%0xffff;
			}
			for (i=1;i<LENGTH;i=i+2)
    3766:	61 e0       	ldi	r22, 0x01	; 1
    3768:	70 e0       	ldi	r23, 0x00	; 0
    376a:	80 e0       	ldi	r24, 0x00	; 0
    376c:	90 e0       	ldi	r25, 0x00	; 0
			{
				HASH_EVEN=(HASH_EVEN*DATA_TO_BE_HASHED[i])%0xffff;
			}
			TEMP_HASH_VALUE=(HASH_ODD^HASH_EVEN)%0xffff;
    376e:	68 25       	eor	r22, r8
    3770:	79 25       	eor	r23, r9
    3772:	8a 25       	eor	r24, r10
    3774:	9b 25       	eor	r25, r11
    3776:	2f ef       	ldi	r18, 0xFF	; 255
    3778:	3f ef       	ldi	r19, 0xFF	; 255
    377a:	40 e0       	ldi	r20, 0x00	; 0
    377c:	50 e0       	ldi	r21, 0x00	; 0
    377e:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
			HASH_VALUE[0]=(TEMP_HASH_VALUE>>8)^PASSWORD_KEY[0]^PASSWORD_KEY[1];
    3782:	f7 01       	movw	r30, r14
    3784:	91 81       	ldd	r25, Z+1	; 0x01
    3786:	80 81       	ld	r24, Z
    3788:	89 27       	eor	r24, r25
    378a:	78 27       	eor	r23, r24
    378c:	f6 01       	movw	r30, r12
    378e:	70 83       	st	Z, r23
			HASH_VALUE[1]=(TEMP_HASH_VALUE&0x00ff)^PASSWORD_KEY[2]^PASSWORD_KEY[3];
    3790:	f7 01       	movw	r30, r14
    3792:	93 81       	ldd	r25, Z+3	; 0x03
    3794:	82 81       	ldd	r24, Z+2	; 0x02
    3796:	89 27       	eor	r24, r25
    3798:	68 27       	eor	r22, r24
    379a:	f6 01       	movw	r30, r12
    379c:	61 83       	std	Z+1, r22	; 0x01
	
}
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	1f 91       	pop	r17
    37a4:	0f 91       	pop	r16
    37a6:	ff 90       	pop	r15
    37a8:	ef 90       	pop	r14
    37aa:	df 90       	pop	r13
    37ac:	cf 90       	pop	r12
    37ae:	bf 90       	pop	r11
    37b0:	af 90       	pop	r10
    37b2:	9f 90       	pop	r9
    37b4:	8f 90       	pop	r8
    37b6:	7f 90       	pop	r7
    37b8:	6f 90       	pop	r6
    37ba:	5f 90       	pop	r5
    37bc:	4f 90       	pop	r4
    37be:	3f 90       	pop	r3
    37c0:	08 95       	ret

000037c2 <GENNERATE_RANDOM_NUMBER>:
 *  Author: Mina Medhat
 */ 
#include "RANDOM_NUM_GEN.h"
volatile unsigned long RANDOM_NUMBER=1; 
unsigned short GENNERATE_RANDOM_NUMBER()
{
    37c2:	cf 92       	push	r12
    37c4:	df 92       	push	r13
    37c6:	ef 92       	push	r14
    37c8:	ff 92       	push	r15
	   RANDOM_NUMBER=(RANDOM_NUMBER+0x44444*((unsigned short)TIMER0_READ_COUNTER()+1))%(0xffff);
    37ca:	0e 94 15 12 	call	0x242a	; 0x242a <TIMER0_READ_COUNTER>
    37ce:	c0 90 0d 01 	lds	r12, 0x010D
    37d2:	d0 90 0e 01 	lds	r13, 0x010E
    37d6:	e0 90 0f 01 	lds	r14, 0x010F
    37da:	f0 90 10 01 	lds	r15, 0x0110
    37de:	a8 2f       	mov	r26, r24
    37e0:	b0 e0       	ldi	r27, 0x00	; 0
    37e2:	11 96       	adiw	r26, 0x01	; 1
    37e4:	24 e4       	ldi	r18, 0x44	; 68
    37e6:	34 e4       	ldi	r19, 0x44	; 68
    37e8:	44 e0       	ldi	r20, 0x04	; 4
    37ea:	50 e0       	ldi	r21, 0x00	; 0
    37ec:	0e 94 59 33 	call	0x66b2	; 0x66b2 <__muluhisi3>
    37f0:	6c 0d       	add	r22, r12
    37f2:	7d 1d       	adc	r23, r13
    37f4:	8e 1d       	adc	r24, r14
    37f6:	9f 1d       	adc	r25, r15
    37f8:	2f ef       	ldi	r18, 0xFF	; 255
    37fa:	3f ef       	ldi	r19, 0xFF	; 255
    37fc:	40 e0       	ldi	r20, 0x00	; 0
    37fe:	50 e0       	ldi	r21, 0x00	; 0
    3800:	0e 94 22 33 	call	0x6644	; 0x6644 <__udivmodsi4>
    3804:	60 93 0d 01 	sts	0x010D, r22
    3808:	70 93 0e 01 	sts	0x010E, r23
    380c:	80 93 0f 01 	sts	0x010F, r24
    3810:	90 93 10 01 	sts	0x0110, r25
	   return (unsigned short)RANDOM_NUMBER;
    3814:	80 91 0d 01 	lds	r24, 0x010D
    3818:	90 91 0e 01 	lds	r25, 0x010E
    381c:	a0 91 0f 01 	lds	r26, 0x010F
    3820:	b0 91 10 01 	lds	r27, 0x0110
}
    3824:	ff 90       	pop	r15
    3826:	ef 90       	pop	r14
    3828:	df 90       	pop	r13
    382a:	cf 90       	pop	r12
    382c:	08 95       	ret

0000382e <SENSOR_TIMER1>:
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+index*SIZE_OF_SENSOR_DATA_EEPROM+10,MY_SENSORS[index].SENSOR_VERSION);
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+index*SIZE_OF_SENSOR_DATA_EEPROM+11,MY_SENSORS[index].SENSOR_TYPE);
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+index*SIZE_OF_SENSOR_DATA_EEPROM+12,MY_SENSORS[index].SENSOR_STATE);
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+index*SIZE_OF_SENSOR_DATA_EEPROM+13,MY_SENSORS[index].SENSOR_OCCUBIED);
	}
}
    382e:	80 e0       	ldi	r24, 0x00	; 0
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	49 e1       	ldi	r20, 0x19	; 25
    3834:	9c 01       	movw	r18, r24
    3836:	48 9f       	mul	r20, r24
    3838:	f0 01       	movw	r30, r0
    383a:	49 9f       	mul	r20, r25
    383c:	f0 0d       	add	r31, r0
    383e:	11 24       	eor	r1, r1
    3840:	ef 51       	subi	r30, 0x1F	; 31
    3842:	fc 4f       	sbci	r31, 0xFC	; 252
    3844:	55 85       	ldd	r21, Z+13	; 0x0d
    3846:	55 23       	and	r21, r21
    3848:	09 f4       	brne	.+2      	; 0x384c <SENSOR_TIMER1+0x1e>
    384a:	52 c0       	rjmp	.+164    	; 0x38f0 <SENSOR_TIMER1+0xc2>
    384c:	48 9f       	mul	r20, r24
    384e:	f0 01       	movw	r30, r0
    3850:	49 9f       	mul	r20, r25
    3852:	f0 0d       	add	r31, r0
    3854:	11 24       	eor	r1, r1
    3856:	ef 51       	subi	r30, 0x1F	; 31
    3858:	fc 4f       	sbci	r31, 0xFC	; 252
    385a:	54 85       	ldd	r21, Z+12	; 0x0c
    385c:	55 23       	and	r21, r21
    385e:	09 f4       	brne	.+2      	; 0x3862 <SENSOR_TIMER1+0x34>
    3860:	47 c0       	rjmp	.+142    	; 0x38f0 <SENSOR_TIMER1+0xc2>
    3862:	48 9f       	mul	r20, r24
    3864:	f0 01       	movw	r30, r0
    3866:	49 9f       	mul	r20, r25
    3868:	f0 0d       	add	r31, r0
    386a:	11 24       	eor	r1, r1
    386c:	ef 51       	subi	r30, 0x1F	; 31
    386e:	fc 4f       	sbci	r31, 0xFC	; 252
    3870:	56 85       	ldd	r21, Z+14	; 0x0e
    3872:	55 23       	and	r21, r21
    3874:	49 f1       	breq	.+82     	; 0x38c8 <SENSOR_TIMER1+0x9a>
    3876:	48 9f       	mul	r20, r24
    3878:	f0 01       	movw	r30, r0
    387a:	49 9f       	mul	r20, r25
    387c:	f0 0d       	add	r31, r0
    387e:	11 24       	eor	r1, r1
    3880:	ef 51       	subi	r30, 0x1F	; 31
    3882:	fc 4f       	sbci	r31, 0xFC	; 252
    3884:	50 89       	ldd	r21, Z+16	; 0x10
    3886:	58 30       	cpi	r21, 0x08	; 8
    3888:	51 f0       	breq	.+20     	; 0x389e <SENSOR_TIMER1+0x70>
    388a:	48 9f       	mul	r20, r24
    388c:	f0 01       	movw	r30, r0
    388e:	49 9f       	mul	r20, r25
    3890:	f0 0d       	add	r31, r0
    3892:	11 24       	eor	r1, r1
    3894:	ef 51       	subi	r30, 0x1F	; 31
    3896:	fc 4f       	sbci	r31, 0xFC	; 252
    3898:	50 89       	ldd	r21, Z+16	; 0x10
    389a:	5f 5f       	subi	r21, 0xFF	; 255
    389c:	50 8b       	std	Z+16, r21	; 0x10
    389e:	42 9f       	mul	r20, r18
    38a0:	f0 01       	movw	r30, r0
    38a2:	43 9f       	mul	r20, r19
    38a4:	f0 0d       	add	r31, r0
    38a6:	11 24       	eor	r1, r1
    38a8:	ef 51       	subi	r30, 0x1F	; 31
    38aa:	fc 4f       	sbci	r31, 0xFC	; 252
    38ac:	52 89       	ldd	r21, Z+18	; 0x12
    38ae:	58 32       	cpi	r21, 0x28	; 40
    38b0:	f9 f0       	breq	.+62     	; 0x38f0 <SENSOR_TIMER1+0xc2>
    38b2:	42 9f       	mul	r20, r18
    38b4:	f0 01       	movw	r30, r0
    38b6:	43 9f       	mul	r20, r19
    38b8:	f0 0d       	add	r31, r0
    38ba:	11 24       	eor	r1, r1
    38bc:	ef 51       	subi	r30, 0x1F	; 31
    38be:	fc 4f       	sbci	r31, 0xFC	; 252
    38c0:	22 89       	ldd	r18, Z+18	; 0x12
    38c2:	2f 5f       	subi	r18, 0xFF	; 255
    38c4:	22 8b       	std	Z+18, r18	; 0x12
    38c6:	14 c0       	rjmp	.+40     	; 0x38f0 <SENSOR_TIMER1+0xc2>
    38c8:	48 9f       	mul	r20, r24
    38ca:	f0 01       	movw	r30, r0
    38cc:	49 9f       	mul	r20, r25
    38ce:	f0 0d       	add	r31, r0
    38d0:	11 24       	eor	r1, r1
    38d2:	ef 51       	subi	r30, 0x1F	; 31
    38d4:	fc 4f       	sbci	r31, 0xFC	; 252
    38d6:	57 85       	ldd	r21, Z+15	; 0x0f
    38d8:	54 31       	cpi	r21, 0x14	; 20
    38da:	51 f0       	breq	.+20     	; 0x38f0 <SENSOR_TIMER1+0xc2>
    38dc:	48 9f       	mul	r20, r24
    38de:	f0 01       	movw	r30, r0
    38e0:	49 9f       	mul	r20, r25
    38e2:	f0 0d       	add	r31, r0
    38e4:	11 24       	eor	r1, r1
    38e6:	ef 51       	subi	r30, 0x1F	; 31
    38e8:	fc 4f       	sbci	r31, 0xFC	; 252
    38ea:	27 85       	ldd	r18, Z+15	; 0x0f
    38ec:	2f 5f       	subi	r18, 0xFF	; 255
    38ee:	27 87       	std	Z+15, r18	; 0x0f
    38f0:	01 96       	adiw	r24, 0x01	; 1
    38f2:	8a 30       	cpi	r24, 0x0A	; 10
    38f4:	91 05       	cpc	r25, r1
    38f6:	09 f0       	breq	.+2      	; 0x38fa <SENSOR_TIMER1+0xcc>
    38f8:	9d cf       	rjmp	.-198    	; 0x3834 <SENSOR_TIMER1+0x6>
    38fa:	80 91 2d 03 	lds	r24, 0x032D
    38fe:	88 23       	and	r24, r24
    3900:	b9 f0       	breq	.+46     	; 0x3930 <SENSOR_TIMER1+0x102>
    3902:	0e 99       	sbic	0x01, 6	; 1
    3904:	11 c0       	rjmp	.+34     	; 0x3928 <SENSOR_TIMER1+0xfa>
    3906:	80 91 2c 03 	lds	r24, 0x032C
    390a:	8f 5f       	subi	r24, 0xFF	; 255
    390c:	80 93 2c 03 	sts	0x032C, r24
    3910:	80 91 2c 03 	lds	r24, 0x032C
    3914:	87 30       	cpi	r24, 0x07	; 7
    3916:	61 f4       	brne	.+24     	; 0x3930 <SENSOR_TIMER1+0x102>
    3918:	10 92 2c 03 	sts	0x032C, r1
    391c:	10 92 2d 03 	sts	0x032D, r1
    3920:	81 e0       	ldi	r24, 0x01	; 1
    3922:	80 93 2b 03 	sts	0x032B, r24
    3926:	08 95       	ret
    3928:	10 92 2c 03 	sts	0x032C, r1
    392c:	10 92 2d 03 	sts	0x032D, r1
    3930:	08 95       	ret

00003932 <SENSORS_IO_SETUP>:
    3932:	26 e0       	ldi	r18, 0x06	; 6
    3934:	41 e0       	ldi	r20, 0x01	; 1
    3936:	63 e2       	ldi	r22, 0x23	; 35
    3938:	70 e0       	ldi	r23, 0x00	; 0
    393a:	82 e2       	ldi	r24, 0x22	; 34
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0c 94 c5 07 	jmp	0xf8a	; 0xf8a <gpio_inputconfg>
    3942:	08 95       	ret

00003944 <SENSORS_LOAD_EEPROM>:
    3944:	df 92       	push	r13
    3946:	ef 92       	push	r14
    3948:	ff 92       	push	r15
    394a:	0f 93       	push	r16
    394c:	1f 93       	push	r17
    394e:	cf 93       	push	r28
    3950:	df 93       	push	r29
    3952:	83 e6       	ldi	r24, 0x63	; 99
    3954:	90 e0       	ldi	r25, 0x00	; 0
    3956:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    395a:	84 34       	cpi	r24, 0x44	; 68
    395c:	09 f0       	breq	.+2      	; 0x3960 <SENSORS_LOAD_EEPROM+0x1c>
    395e:	72 c0       	rjmp	.+228    	; 0x3a44 <SENSORS_LOAD_EEPROM+0x100>
    3960:	84 e6       	ldi	r24, 0x64	; 100
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3968:	80 93 2e 03 	sts	0x032E, r24
    396c:	c5 e6       	ldi	r28, 0x65	; 101
    396e:	d0 e0       	ldi	r29, 0x00	; 0
    3970:	e1 2c       	mov	r14, r1
    3972:	f1 2c       	mov	r15, r1
    3974:	0f 2e       	mov	r0, r31
    3976:	f9 e1       	ldi	r31, 0x19	; 25
    3978:	df 2e       	mov	r13, r31
    397a:	f0 2d       	mov	r31, r0
    397c:	ce 01       	movw	r24, r28
    397e:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3982:	de 9c       	mul	r13, r14
    3984:	80 01       	movw	r16, r0
    3986:	df 9c       	mul	r13, r15
    3988:	10 0d       	add	r17, r0
    398a:	11 24       	eor	r1, r1
    398c:	0f 51       	subi	r16, 0x1F	; 31
    398e:	1c 4f       	sbci	r17, 0xFC	; 252
    3990:	f8 01       	movw	r30, r16
    3992:	80 83       	st	Z, r24
    3994:	ce 01       	movw	r24, r28
    3996:	01 96       	adiw	r24, 0x01	; 1
    3998:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    399c:	f8 01       	movw	r30, r16
    399e:	81 83       	std	Z+1, r24	; 0x01
    39a0:	ce 01       	movw	r24, r28
    39a2:	02 96       	adiw	r24, 0x02	; 2
    39a4:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39a8:	f8 01       	movw	r30, r16
    39aa:	82 83       	std	Z+2, r24	; 0x02
    39ac:	ce 01       	movw	r24, r28
    39ae:	03 96       	adiw	r24, 0x03	; 3
    39b0:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39b4:	f8 01       	movw	r30, r16
    39b6:	83 83       	std	Z+3, r24	; 0x03
    39b8:	ce 01       	movw	r24, r28
    39ba:	04 96       	adiw	r24, 0x04	; 4
    39bc:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39c0:	f8 01       	movw	r30, r16
    39c2:	84 83       	std	Z+4, r24	; 0x04
    39c4:	ce 01       	movw	r24, r28
    39c6:	05 96       	adiw	r24, 0x05	; 5
    39c8:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39cc:	f8 01       	movw	r30, r16
    39ce:	85 83       	std	Z+5, r24	; 0x05
    39d0:	ce 01       	movw	r24, r28
    39d2:	06 96       	adiw	r24, 0x06	; 6
    39d4:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39d8:	f8 01       	movw	r30, r16
    39da:	86 83       	std	Z+6, r24	; 0x06
    39dc:	ce 01       	movw	r24, r28
    39de:	07 96       	adiw	r24, 0x07	; 7
    39e0:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39e4:	f8 01       	movw	r30, r16
    39e6:	87 83       	std	Z+7, r24	; 0x07
    39e8:	ce 01       	movw	r24, r28
    39ea:	08 96       	adiw	r24, 0x08	; 8
    39ec:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39f0:	f8 01       	movw	r30, r16
    39f2:	80 87       	std	Z+8, r24	; 0x08
    39f4:	ce 01       	movw	r24, r28
    39f6:	09 96       	adiw	r24, 0x09	; 9
    39f8:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    39fc:	f8 01       	movw	r30, r16
    39fe:	81 87       	std	Z+9, r24	; 0x09
    3a00:	ce 01       	movw	r24, r28
    3a02:	0a 96       	adiw	r24, 0x0a	; 10
    3a04:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3a08:	f8 01       	movw	r30, r16
    3a0a:	82 87       	std	Z+10, r24	; 0x0a
    3a0c:	ce 01       	movw	r24, r28
    3a0e:	0b 96       	adiw	r24, 0x0b	; 11
    3a10:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3a14:	f8 01       	movw	r30, r16
    3a16:	83 87       	std	Z+11, r24	; 0x0b
    3a18:	ce 01       	movw	r24, r28
    3a1a:	0c 96       	adiw	r24, 0x0c	; 12
    3a1c:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3a20:	f8 01       	movw	r30, r16
    3a22:	84 87       	std	Z+12, r24	; 0x0c
    3a24:	ce 01       	movw	r24, r28
    3a26:	0d 96       	adiw	r24, 0x0d	; 13
    3a28:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3a2c:	f8 01       	movw	r30, r16
    3a2e:	85 87       	std	Z+13, r24	; 0x0d
    3a30:	ff ef       	ldi	r31, 0xFF	; 255
    3a32:	ef 1a       	sub	r14, r31
    3a34:	ff 0a       	sbc	r15, r31
    3a36:	2e 96       	adiw	r28, 0x0e	; 14
    3a38:	8a e0       	ldi	r24, 0x0A	; 10
    3a3a:	e8 16       	cp	r14, r24
    3a3c:	f1 04       	cpc	r15, r1
    3a3e:	09 f0       	breq	.+2      	; 0x3a42 <SENSORS_LOAD_EEPROM+0xfe>
    3a40:	9d cf       	rjmp	.-198    	; 0x397c <SENSORS_LOAD_EEPROM+0x38>
    3a42:	16 c0       	rjmp	.+44     	; 0x3a70 <SENSORS_LOAD_EEPROM+0x12c>
    3a44:	10 92 2e 03 	sts	0x032E, r1
    3a48:	60 e0       	ldi	r22, 0x00	; 0
    3a4a:	84 e6       	ldi	r24, 0x64	; 100
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3a52:	c5 e6       	ldi	r28, 0x65	; 101
    3a54:	d0 e0       	ldi	r29, 0x00	; 0
    3a56:	60 e0       	ldi	r22, 0x00	; 0
    3a58:	ce 01       	movw	r24, r28
    3a5a:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3a5e:	21 96       	adiw	r28, 0x01	; 1
    3a60:	c1 3f       	cpi	r28, 0xF1	; 241
    3a62:	d1 05       	cpc	r29, r1
    3a64:	c1 f7       	brne	.-16     	; 0x3a56 <SENSORS_LOAD_EEPROM+0x112>
    3a66:	64 e4       	ldi	r22, 0x44	; 68
    3a68:	83 e6       	ldi	r24, 0x63	; 99
    3a6a:	90 e0       	ldi	r25, 0x00	; 0
    3a6c:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3a70:	df 91       	pop	r29
    3a72:	cf 91       	pop	r28
    3a74:	1f 91       	pop	r17
    3a76:	0f 91       	pop	r16
    3a78:	ff 90       	pop	r15
    3a7a:	ef 90       	pop	r14
    3a7c:	df 90       	pop	r13
    3a7e:	08 95       	ret

00003a80 <SAVE_OLD_LAST_ENTRY>:
    3a80:	80 91 fb 04 	lds	r24, 0x04FB
    3a84:	90 91 fc 04 	lds	r25, 0x04FC
    3a88:	a0 91 fd 04 	lds	r26, 0x04FD
    3a8c:	b0 91 fe 04 	lds	r27, 0x04FE
    3a90:	6b 2f       	mov	r22, r27
    3a92:	77 27       	eor	r23, r23
    3a94:	88 27       	eor	r24, r24
    3a96:	99 27       	eor	r25, r25
    3a98:	84 e8       	ldi	r24, 0x84	; 132
    3a9a:	93 e0       	ldi	r25, 0x03	; 3
    3a9c:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3aa0:	80 91 fb 04 	lds	r24, 0x04FB
    3aa4:	90 91 fc 04 	lds	r25, 0x04FC
    3aa8:	a0 91 fd 04 	lds	r26, 0x04FD
    3aac:	b0 91 fe 04 	lds	r27, 0x04FE
    3ab0:	bd 01       	movw	r22, r26
    3ab2:	88 27       	eor	r24, r24
    3ab4:	99 27       	eor	r25, r25
    3ab6:	85 e8       	ldi	r24, 0x85	; 133
    3ab8:	93 e0       	ldi	r25, 0x03	; 3
    3aba:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3abe:	80 91 fb 04 	lds	r24, 0x04FB
    3ac2:	90 91 fc 04 	lds	r25, 0x04FC
    3ac6:	a0 91 fd 04 	lds	r26, 0x04FD
    3aca:	b0 91 fe 04 	lds	r27, 0x04FE
    3ace:	69 2f       	mov	r22, r25
    3ad0:	7a 2f       	mov	r23, r26
    3ad2:	8b 2f       	mov	r24, r27
    3ad4:	99 27       	eor	r25, r25
    3ad6:	86 e8       	ldi	r24, 0x86	; 134
    3ad8:	93 e0       	ldi	r25, 0x03	; 3
    3ada:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3ade:	60 91 fb 04 	lds	r22, 0x04FB
    3ae2:	70 91 fc 04 	lds	r23, 0x04FC
    3ae6:	80 91 fd 04 	lds	r24, 0x04FD
    3aea:	90 91 fe 04 	lds	r25, 0x04FE
    3aee:	87 e8       	ldi	r24, 0x87	; 135
    3af0:	93 e0       	ldi	r25, 0x03	; 3
    3af2:	0c 94 37 11 	jmp	0x226e	; 0x226e <writeeeprom>
    3af6:	08 95       	ret

00003af8 <LOAD_OLD_LAST_ENTRY>:
    3af8:	cf 92       	push	r12
    3afa:	df 92       	push	r13
    3afc:	ef 92       	push	r14
    3afe:	ff 92       	push	r15
    3b00:	cf 93       	push	r28
    3b02:	df 93       	push	r29
    3b04:	10 92 fb 04 	sts	0x04FB, r1
    3b08:	10 92 fc 04 	sts	0x04FC, r1
    3b0c:	10 92 fd 04 	sts	0x04FD, r1
    3b10:	10 92 fe 04 	sts	0x04FE, r1
    3b14:	83 e8       	ldi	r24, 0x83	; 131
    3b16:	93 e0       	ldi	r25, 0x03	; 3
    3b18:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3b1c:	84 34       	cpi	r24, 0x44	; 68
    3b1e:	01 f5       	brne	.+64     	; 0x3b60 <LOAD_OLD_LAST_ENTRY+0x68>
    3b20:	c4 e8       	ldi	r28, 0x84	; 132
    3b22:	d3 e0       	ldi	r29, 0x03	; 3
    3b24:	c0 90 fb 04 	lds	r12, 0x04FB
    3b28:	d0 90 fc 04 	lds	r13, 0x04FC
    3b2c:	e0 90 fd 04 	lds	r14, 0x04FD
    3b30:	f0 90 fe 04 	lds	r15, 0x04FE
    3b34:	ce 01       	movw	r24, r28
    3b36:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    3b3a:	fe 2c       	mov	r15, r14
    3b3c:	ed 2c       	mov	r14, r13
    3b3e:	dc 2c       	mov	r13, r12
    3b40:	cc 24       	eor	r12, r12
    3b42:	c8 2a       	or	r12, r24
    3b44:	c0 92 fb 04 	sts	0x04FB, r12
    3b48:	d0 92 fc 04 	sts	0x04FC, r13
    3b4c:	e0 92 fd 04 	sts	0x04FD, r14
    3b50:	f0 92 fe 04 	sts	0x04FE, r15
    3b54:	21 96       	adiw	r28, 0x01	; 1
    3b56:	c8 38       	cpi	r28, 0x88	; 136
    3b58:	83 e0       	ldi	r24, 0x03	; 3
    3b5a:	d8 07       	cpc	r29, r24
    3b5c:	19 f7       	brne	.-58     	; 0x3b24 <LOAD_OLD_LAST_ENTRY+0x2c>
    3b5e:	19 c0       	rjmp	.+50     	; 0x3b92 <LOAD_OLD_LAST_ENTRY+0x9a>
    3b60:	64 e4       	ldi	r22, 0x44	; 68
    3b62:	83 e8       	ldi	r24, 0x83	; 131
    3b64:	93 e0       	ldi	r25, 0x03	; 3
    3b66:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3b6a:	60 e0       	ldi	r22, 0x00	; 0
    3b6c:	84 e8       	ldi	r24, 0x84	; 132
    3b6e:	93 e0       	ldi	r25, 0x03	; 3
    3b70:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	85 e8       	ldi	r24, 0x85	; 133
    3b78:	93 e0       	ldi	r25, 0x03	; 3
    3b7a:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3b7e:	60 e0       	ldi	r22, 0x00	; 0
    3b80:	86 e8       	ldi	r24, 0x86	; 134
    3b82:	93 e0       	ldi	r25, 0x03	; 3
    3b84:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3b88:	60 e0       	ldi	r22, 0x00	; 0
    3b8a:	87 e8       	ldi	r24, 0x87	; 135
    3b8c:	93 e0       	ldi	r25, 0x03	; 3
    3b8e:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3b92:	df 91       	pop	r29
    3b94:	cf 91       	pop	r28
    3b96:	ff 90       	pop	r15
    3b98:	ef 90       	pop	r14
    3b9a:	df 90       	pop	r13
    3b9c:	cf 90       	pop	r12
    3b9e:	08 95       	ret

00003ba0 <SENSORS_SETUP>:
    3ba0:	62 e0       	ldi	r22, 0x02	; 2
    3ba2:	80 e4       	ldi	r24, 0x40	; 64
    3ba4:	0e 94 4e 11 	call	0x229c	; 0x229c <external_int_enable>
    3ba8:	a7 df       	rcall	.-178    	; 0x3af8 <LOAD_OLD_LAST_ENTRY>
    3baa:	cc de       	rcall	.-616    	; 0x3944 <SENSORS_LOAD_EEPROM>
    3bac:	83 ef       	ldi	r24, 0xF3	; 243
    3bae:	95 e0       	ldi	r25, 0x05	; 5
    3bb0:	0c 94 70 05 	jmp	0xae0	; 0xae0 <QUEUE_INTILIZE_ARRAY_U8>
    3bb4:	08 95       	ret

00003bb6 <SENSOR_SAVE>:
    3bb6:	0f 93       	push	r16
    3bb8:	1f 93       	push	r17
    3bba:	cf 93       	push	r28
    3bbc:	df 93       	push	r29
    3bbe:	28 2f       	mov	r18, r24
    3bc0:	30 e0       	ldi	r19, 0x00	; 0
    3bc2:	99 e1       	ldi	r25, 0x19	; 25
    3bc4:	89 9f       	mul	r24, r25
    3bc6:	80 01       	movw	r16, r0
    3bc8:	11 24       	eor	r1, r1
    3bca:	0f 51       	subi	r16, 0x1F	; 31
    3bcc:	1c 4f       	sbci	r17, 0xFC	; 252
    3bce:	f8 01       	movw	r30, r16
    3bd0:	60 81       	ld	r22, Z
    3bd2:	c9 01       	movw	r24, r18
    3bd4:	88 0f       	add	r24, r24
    3bd6:	99 1f       	adc	r25, r25
    3bd8:	ec 01       	movw	r28, r24
    3bda:	cc 0f       	add	r28, r28
    3bdc:	dd 1f       	adc	r29, r29
    3bde:	cc 0f       	add	r28, r28
    3be0:	dd 1f       	adc	r29, r29
    3be2:	cc 0f       	add	r28, r28
    3be4:	dd 1f       	adc	r29, r29
    3be6:	c8 1b       	sub	r28, r24
    3be8:	d9 0b       	sbc	r29, r25
    3bea:	ce 01       	movw	r24, r28
    3bec:	8b 59       	subi	r24, 0x9B	; 155
    3bee:	9f 4f       	sbci	r25, 0xFF	; 255
    3bf0:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3bf4:	f8 01       	movw	r30, r16
    3bf6:	61 81       	ldd	r22, Z+1	; 0x01
    3bf8:	ce 01       	movw	r24, r28
    3bfa:	8a 59       	subi	r24, 0x9A	; 154
    3bfc:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfe:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c02:	f8 01       	movw	r30, r16
    3c04:	62 81       	ldd	r22, Z+2	; 0x02
    3c06:	ce 01       	movw	r24, r28
    3c08:	89 59       	subi	r24, 0x99	; 153
    3c0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c0c:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c10:	f8 01       	movw	r30, r16
    3c12:	63 81       	ldd	r22, Z+3	; 0x03
    3c14:	ce 01       	movw	r24, r28
    3c16:	88 59       	subi	r24, 0x98	; 152
    3c18:	9f 4f       	sbci	r25, 0xFF	; 255
    3c1a:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c1e:	f8 01       	movw	r30, r16
    3c20:	64 81       	ldd	r22, Z+4	; 0x04
    3c22:	ce 01       	movw	r24, r28
    3c24:	87 59       	subi	r24, 0x97	; 151
    3c26:	9f 4f       	sbci	r25, 0xFF	; 255
    3c28:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c2c:	f8 01       	movw	r30, r16
    3c2e:	65 81       	ldd	r22, Z+5	; 0x05
    3c30:	ce 01       	movw	r24, r28
    3c32:	86 59       	subi	r24, 0x96	; 150
    3c34:	9f 4f       	sbci	r25, 0xFF	; 255
    3c36:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c3a:	f8 01       	movw	r30, r16
    3c3c:	66 81       	ldd	r22, Z+6	; 0x06
    3c3e:	ce 01       	movw	r24, r28
    3c40:	85 59       	subi	r24, 0x95	; 149
    3c42:	9f 4f       	sbci	r25, 0xFF	; 255
    3c44:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c48:	f8 01       	movw	r30, r16
    3c4a:	67 81       	ldd	r22, Z+7	; 0x07
    3c4c:	ce 01       	movw	r24, r28
    3c4e:	84 59       	subi	r24, 0x94	; 148
    3c50:	9f 4f       	sbci	r25, 0xFF	; 255
    3c52:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c56:	f8 01       	movw	r30, r16
    3c58:	60 85       	ldd	r22, Z+8	; 0x08
    3c5a:	ce 01       	movw	r24, r28
    3c5c:	83 59       	subi	r24, 0x93	; 147
    3c5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3c60:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c64:	f8 01       	movw	r30, r16
    3c66:	61 85       	ldd	r22, Z+9	; 0x09
    3c68:	ce 01       	movw	r24, r28
    3c6a:	82 59       	subi	r24, 0x92	; 146
    3c6c:	9f 4f       	sbci	r25, 0xFF	; 255
    3c6e:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c72:	f8 01       	movw	r30, r16
    3c74:	62 85       	ldd	r22, Z+10	; 0x0a
    3c76:	ce 01       	movw	r24, r28
    3c78:	81 59       	subi	r24, 0x91	; 145
    3c7a:	9f 4f       	sbci	r25, 0xFF	; 255
    3c7c:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c80:	f8 01       	movw	r30, r16
    3c82:	63 85       	ldd	r22, Z+11	; 0x0b
    3c84:	ce 01       	movw	r24, r28
    3c86:	80 59       	subi	r24, 0x90	; 144
    3c88:	9f 4f       	sbci	r25, 0xFF	; 255
    3c8a:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c8e:	f8 01       	movw	r30, r16
    3c90:	64 85       	ldd	r22, Z+12	; 0x0c
    3c92:	ce 01       	movw	r24, r28
    3c94:	8f 58       	subi	r24, 0x8F	; 143
    3c96:	9f 4f       	sbci	r25, 0xFF	; 255
    3c98:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3c9c:	f8 01       	movw	r30, r16
    3c9e:	65 85       	ldd	r22, Z+13	; 0x0d
    3ca0:	ce 01       	movw	r24, r28
    3ca2:	8e 58       	subi	r24, 0x8E	; 142
    3ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    3ca6:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
    3caa:	df 91       	pop	r29
    3cac:	cf 91       	pop	r28
    3cae:	1f 91       	pop	r17
    3cb0:	0f 91       	pop	r16
    3cb2:	08 95       	ret

00003cb4 <NUM_SENSOR_SAVE>:
	
}

void NUM_SENSOR_SAVE()
{
	writeeeprom(MY_EEPROM_NUMBER_OF_SENSORS,NUMBER_OF_SENSORS);
    3cb4:	60 91 2e 03 	lds	r22, 0x032E
    3cb8:	84 e6       	ldi	r24, 0x64	; 100
    3cba:	90 e0       	ldi	r25, 0x00	; 0
    3cbc:	0c 94 37 11 	jmp	0x226e	; 0x226e <writeeeprom>
    3cc0:	08 95       	ret

00003cc2 <FIND_SENSOR>:
}

char FIND_SENSOR(unsigned char* ADDRESS,unsigned char ADDRESS_LENGTH)/*RETURN INDEX OR -1*/
{
    3cc2:	df 92       	push	r13
    3cc4:	ef 92       	push	r14
    3cc6:	ff 92       	push	r15
    3cc8:	0f 93       	push	r16
    3cca:	1f 93       	push	r17
    3ccc:	cf 93       	push	r28
    3cce:	df 93       	push	r29
	char index=0,counter_address,miss_match=0;
	if (NUMBER_OF_SENSORS==0)/*ARRAY IS EMPTY*/
    3cd0:	20 91 2e 03 	lds	r18, 0x032E
    3cd4:	22 23       	and	r18, r18
    3cd6:	09 f4       	brne	.+2      	; 0x3cda <FIND_SENSOR+0x18>
    3cd8:	42 c0       	rjmp	.+132    	; 0x3d5e <FIND_SENSOR+0x9c>
    3cda:	40 e0       	ldi	r20, 0x00	; 0
    3cdc:	50 e0       	ldi	r21, 0x00	; 0
		return -1;
	}
	
	for (index=0;index<NUMBER_OF_SENSORS_IN_DATA_BASE;++index)
	{
		if (MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED==1)
    3cde:	79 e1       	ldi	r23, 0x19	; 25
    3ce0:	8c 01       	movw	r16, r24
    3ce2:	0f 5f       	subi	r16, 0xFF	; 255
    3ce4:	1f 4f       	sbci	r17, 0xFF	; 255
		{
			miss_match=0;
			for (counter_address=0;counter_address<ADDRESS_LENGTH;++counter_address)
			{
				if (MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS[(unsigned char)counter_address]!=ADDRESS[(unsigned char)counter_address])
    3ce6:	dd 24       	eor	r13, r13
    3ce8:	d3 94       	inc	r13
    3cea:	e1 2c       	mov	r14, r1
    3cec:	f4 2e       	mov	r15, r20
		return -1;
	}
	
	for (index=0;index<NUMBER_OF_SENSORS_IN_DATA_BASE;++index)
	{
		if (MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED==1)
    3cee:	da 01       	movw	r26, r20
    3cf0:	74 9f       	mul	r23, r20
    3cf2:	f0 01       	movw	r30, r0
    3cf4:	75 9f       	mul	r23, r21
    3cf6:	f0 0d       	add	r31, r0
    3cf8:	11 24       	eor	r1, r1
    3cfa:	ef 51       	subi	r30, 0x1F	; 31
    3cfc:	fc 4f       	sbci	r31, 0xFC	; 252
    3cfe:	25 85       	ldd	r18, Z+13	; 0x0d
    3d00:	21 30       	cpi	r18, 0x01	; 1
    3d02:	39 f5       	brne	.+78     	; 0x3d52 <FIND_SENSOR+0x90>
		{
			miss_match=0;
			for (counter_address=0;counter_address<ADDRESS_LENGTH;++counter_address)
    3d04:	66 23       	and	r22, r22
    3d06:	69 f1       	breq	.+90     	; 0x3d62 <FIND_SENSOR+0xa0>
			{
				if (MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS[(unsigned char)counter_address]!=ADDRESS[(unsigned char)counter_address])
    3d08:	7a 9f       	mul	r23, r26
    3d0a:	f0 01       	movw	r30, r0
    3d0c:	7b 9f       	mul	r23, r27
    3d0e:	f0 0d       	add	r31, r0
    3d10:	11 24       	eor	r1, r1
    3d12:	ef 51       	subi	r30, 0x1F	; 31
    3d14:	fc 4f       	sbci	r31, 0xFC	; 252
    3d16:	31 81       	ldd	r19, Z+1	; 0x01
    3d18:	fc 01       	movw	r30, r24
    3d1a:	20 81       	ld	r18, Z
    3d1c:	32 13       	cpse	r19, r18
    3d1e:	19 c0       	rjmp	.+50     	; 0x3d52 <FIND_SENSOR+0x90>
    3d20:	f8 01       	movw	r30, r16
    3d22:	2d 2d       	mov	r18, r13
    3d24:	3e 2d       	mov	r19, r14
    3d26:	7a 9f       	mul	r23, r26
    3d28:	e0 01       	movw	r28, r0
    3d2a:	7b 9f       	mul	r23, r27
    3d2c:	d0 0d       	add	r29, r0
    3d2e:	11 24       	eor	r1, r1
    3d30:	cf 51       	subi	r28, 0x1F	; 31
    3d32:	dc 4f       	sbci	r29, 0xFC	; 252
    3d34:	0a c0       	rjmp	.+20     	; 0x3d4a <FIND_SENSOR+0x88>
    3d36:	de 01       	movw	r26, r28
    3d38:	a2 0f       	add	r26, r18
    3d3a:	b3 1f       	adc	r27, r19
    3d3c:	11 96       	adiw	r26, 0x01	; 1
    3d3e:	bc 91       	ld	r27, X
    3d40:	a1 91       	ld	r26, Z+
    3d42:	2f 5f       	subi	r18, 0xFF	; 255
    3d44:	3f 4f       	sbci	r19, 0xFF	; 255
    3d46:	ba 13       	cpse	r27, r26
    3d48:	04 c0       	rjmp	.+8      	; 0x3d52 <FIND_SENSOR+0x90>
	for (index=0;index<NUMBER_OF_SENSORS_IN_DATA_BASE;++index)
	{
		if (MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED==1)
		{
			miss_match=0;
			for (counter_address=0;counter_address<ADDRESS_LENGTH;++counter_address)
    3d4a:	26 17       	cp	r18, r22
    3d4c:	a0 f3       	brcs	.-24     	; 0x3d36 <FIND_SENSOR+0x74>
    3d4e:	8f 2d       	mov	r24, r15
    3d50:	0b c0       	rjmp	.+22     	; 0x3d68 <FIND_SENSOR+0xa6>
    3d52:	4f 5f       	subi	r20, 0xFF	; 255
    3d54:	5f 4f       	sbci	r21, 0xFF	; 255
	if (NUMBER_OF_SENSORS==0)/*ARRAY IS EMPTY*/
	{
		return -1;
	}
	
	for (index=0;index<NUMBER_OF_SENSORS_IN_DATA_BASE;++index)
    3d56:	4a 30       	cpi	r20, 0x0A	; 10
    3d58:	51 05       	cpc	r21, r1
    3d5a:	41 f6       	brne	.-112    	; 0x3cec <FIND_SENSOR+0x2a>
    3d5c:	04 c0       	rjmp	.+8      	; 0x3d66 <FIND_SENSOR+0xa4>
char FIND_SENSOR(unsigned char* ADDRESS,unsigned char ADDRESS_LENGTH)/*RETURN INDEX OR -1*/
{
	char index=0,counter_address,miss_match=0;
	if (NUMBER_OF_SENSORS==0)/*ARRAY IS EMPTY*/
	{
		return -1;
    3d5e:	8f ef       	ldi	r24, 0xFF	; 255
    3d60:	03 c0       	rjmp	.+6      	; 0x3d68 <FIND_SENSOR+0xa6>
	for (index=0;index<NUMBER_OF_SENSORS_IN_DATA_BASE;++index)
	{
		if (MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED==1)
		{
			miss_match=0;
			for (counter_address=0;counter_address<ADDRESS_LENGTH;++counter_address)
    3d62:	84 2f       	mov	r24, r20
    3d64:	01 c0       	rjmp	.+2      	; 0x3d68 <FIND_SENSOR+0xa6>
			{
				return index;
			}
		}
	}	
	return -1;
    3d66:	8f ef       	ldi	r24, 0xFF	; 255
	
}
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	ff 90       	pop	r15
    3d72:	ef 90       	pop	r14
    3d74:	df 90       	pop	r13
    3d76:	08 95       	ret

00003d78 <ADD_NEW_SENSOR>:
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+index*SIZE_OF_SENSOR_DATA_EEPROM+13,MY_SENSORS[index].SENSOR_OCCUBIED);
	}
}
/*RETURN ITS INDEX OR RETURN -1 OF FAILED*/
char ADD_NEW_SENSOR(SENSOR_DT NEW_SENSOR)
{
    3d78:	1f 93       	push	r17
    3d7a:	cf 93       	push	r28
    3d7c:	df 93       	push	r29
    3d7e:	cd b7       	in	r28, 0x3d	; 61
    3d80:	de b7       	in	r29, 0x3e	; 62
	char index=0;
	if (NUMBER_OF_SENSORS==NUMBER_OF_SENSORS_IN_DATA_BASE)
    3d82:	80 91 2e 03 	lds	r24, 0x032E
    3d86:	8a 30       	cpi	r24, 0x0A	; 10
    3d88:	09 f4       	brne	.+2      	; 0x3d8c <ADD_NEW_SENSOR+0x14>
    3d8a:	4a c0       	rjmp	.+148    	; 0x3e20 <ADD_NEW_SENSOR+0xa8>
	{
		 index=-1;
	}
	else
	{ 
		if (FIND_SENSOR(NEW_SENSOR.SENSOR_ADDRESS,5)==(char)(-1))/*if the same address was found*/
    3d8c:	65 e0       	ldi	r22, 0x05	; 5
    3d8e:	ce 01       	movw	r24, r28
    3d90:	07 96       	adiw	r24, 0x07	; 7
    3d92:	97 df       	rcall	.-210    	; 0x3cc2 <FIND_SENSOR>
    3d94:	8f 3f       	cpi	r24, 0xFF	; 255
    3d96:	09 f0       	breq	.+2      	; 0x3d9a <ADD_NEW_SENSOR+0x22>
    3d98:	45 c0       	rjmp	.+138    	; 0x3e24 <ADD_NEW_SENSOR+0xac>
		{
			while(MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED==1)
    3d9a:	80 91 ee 03 	lds	r24, 0x03EE
    3d9e:	81 30       	cpi	r24, 0x01	; 1
    3da0:	81 f4       	brne	.+32     	; 0x3dc2 <ADD_NEW_SENSOR+0x4a>
    3da2:	10 e0       	ldi	r17, 0x00	; 0
    3da4:	99 e1       	ldi	r25, 0x19	; 25
			{
				++index;
    3da6:	1f 5f       	subi	r17, 0xFF	; 255
	}
	else
	{ 
		if (FIND_SENSOR(NEW_SENSOR.SENSOR_ADDRESS,5)==(char)(-1))/*if the same address was found*/
		{
			while(MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED==1)
    3da8:	21 2f       	mov	r18, r17
    3daa:	30 e0       	ldi	r19, 0x00	; 0
    3dac:	92 9f       	mul	r25, r18
    3dae:	f0 01       	movw	r30, r0
    3db0:	93 9f       	mul	r25, r19
    3db2:	f0 0d       	add	r31, r0
    3db4:	11 24       	eor	r1, r1
    3db6:	ef 51       	subi	r30, 0x1F	; 31
    3db8:	fc 4f       	sbci	r31, 0xFC	; 252
    3dba:	85 85       	ldd	r24, Z+13	; 0x0d
    3dbc:	81 30       	cpi	r24, 0x01	; 1
    3dbe:	99 f3       	breq	.-26     	; 0x3da6 <ADD_NEW_SENSOR+0x2e>
    3dc0:	03 c0       	rjmp	.+6      	; 0x3dc8 <ADD_NEW_SENSOR+0x50>
    3dc2:	20 e0       	ldi	r18, 0x00	; 0
    3dc4:	30 e0       	ldi	r19, 0x00	; 0
    3dc6:	10 e0       	ldi	r17, 0x00	; 0
			{
				++index;
			}
			MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS_LENGTH=5/*NEW_SENSOR.SENSOR_ADDRESS_LENGTH*/;
    3dc8:	89 e1       	ldi	r24, 0x19	; 25
    3dca:	82 9f       	mul	r24, r18
    3dcc:	f0 01       	movw	r30, r0
    3dce:	83 9f       	mul	r24, r19
    3dd0:	f0 0d       	add	r31, r0
    3dd2:	11 24       	eor	r1, r1
    3dd4:	ef 51       	subi	r30, 0x1F	; 31
    3dd6:	fc 4f       	sbci	r31, 0xFC	; 252
    3dd8:	85 e0       	ldi	r24, 0x05	; 5
    3dda:	80 83       	st	Z, r24
			MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS[0]=NEW_SENSOR.SENSOR_ADDRESS[0];
    3ddc:	8f 81       	ldd	r24, Y+7	; 0x07
    3dde:	81 83       	std	Z+1, r24	; 0x01
			MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS[1]=NEW_SENSOR.SENSOR_ADDRESS[1];
    3de0:	88 85       	ldd	r24, Y+8	; 0x08
    3de2:	82 83       	std	Z+2, r24	; 0x02
			MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS[2]=NEW_SENSOR.SENSOR_ADDRESS[2];
    3de4:	89 85       	ldd	r24, Y+9	; 0x09
    3de6:	83 83       	std	Z+3, r24	; 0x03
			MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS[3]=NEW_SENSOR.SENSOR_ADDRESS[3];
    3de8:	8a 85       	ldd	r24, Y+10	; 0x0a
    3dea:	84 83       	std	Z+4, r24	; 0x04
			MY_SENSORS[(unsigned char)index].SENSOR_ADDRESS[4]=NEW_SENSOR.SENSOR_ADDRESS[4];
    3dec:	8b 85       	ldd	r24, Y+11	; 0x0b
    3dee:	85 83       	std	Z+5, r24	; 0x05
		
			MY_SENSORS[(unsigned char)index].SENSOR_PASSWORD[0]=NEW_SENSOR.SENSOR_PASSWORD[0];
    3df0:	8c 85       	ldd	r24, Y+12	; 0x0c
    3df2:	86 83       	std	Z+6, r24	; 0x06
			MY_SENSORS[(unsigned char)index].SENSOR_PASSWORD[1]=NEW_SENSOR.SENSOR_PASSWORD[1];
    3df4:	8d 85       	ldd	r24, Y+13	; 0x0d
    3df6:	87 83       	std	Z+7, r24	; 0x07
			MY_SENSORS[(unsigned char)index].SENSOR_PASSWORD[2]=NEW_SENSOR.SENSOR_PASSWORD[2];
    3df8:	8e 85       	ldd	r24, Y+14	; 0x0e
    3dfa:	80 87       	std	Z+8, r24	; 0x08
			MY_SENSORS[(unsigned char)index].SENSOR_PASSWORD[3]=NEW_SENSOR.SENSOR_PASSWORD[3];
    3dfc:	8f 85       	ldd	r24, Y+15	; 0x0f
    3dfe:	81 87       	std	Z+9, r24	; 0x09
		
			MY_SENSORS[(unsigned char)index].SENSOR_VERSION=NEW_SENSOR.SENSOR_VERSION;
    3e00:	88 89       	ldd	r24, Y+16	; 0x10
    3e02:	82 87       	std	Z+10, r24	; 0x0a
			MY_SENSORS[(unsigned char)index].SENSOR_TYPE=NEW_SENSOR.SENSOR_TYPE;
    3e04:	89 89       	ldd	r24, Y+17	; 0x11
    3e06:	83 87       	std	Z+11, r24	; 0x0b
			MY_SENSORS[(unsigned char)index].SENSOR_STATE=1;
    3e08:	81 e0       	ldi	r24, 0x01	; 1
    3e0a:	84 87       	std	Z+12, r24	; 0x0c
			MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED=1;
    3e0c:	85 87       	std	Z+13, r24	; 0x0d
			++NUMBER_OF_SENSORS;
    3e0e:	80 91 2e 03 	lds	r24, 0x032E
    3e12:	8f 5f       	subi	r24, 0xFF	; 255
    3e14:	80 93 2e 03 	sts	0x032E, r24
			SENSOR_SAVE((unsigned char)index);
    3e18:	81 2f       	mov	r24, r17
    3e1a:	cd de       	rcall	.-614    	; 0x3bb6 <SENSOR_SAVE>
			NUM_SENSOR_SAVE();
    3e1c:	4b df       	rcall	.-362    	; 0x3cb4 <NUM_SENSOR_SAVE>
    3e1e:	03 c0       	rjmp	.+6      	; 0x3e26 <ADD_NEW_SENSOR+0xae>
char ADD_NEW_SENSOR(SENSOR_DT NEW_SENSOR)
{
	char index=0;
	if (NUMBER_OF_SENSORS==NUMBER_OF_SENSORS_IN_DATA_BASE)
	{
		 index=-1;
    3e20:	1f ef       	ldi	r17, 0xFF	; 255
    3e22:	01 c0       	rjmp	.+2      	; 0x3e26 <ADD_NEW_SENSOR+0xae>
			SENSOR_SAVE((unsigned char)index);
			NUM_SENSOR_SAVE();
		}
		else
		{
			 index=-1;
    3e24:	1f ef       	ldi	r17, 0xFF	; 255
		
		
	}
	return index;
	
}
    3e26:	81 2f       	mov	r24, r17
    3e28:	df 91       	pop	r29
    3e2a:	cf 91       	pop	r28
    3e2c:	1f 91       	pop	r17
    3e2e:	08 95       	ret

00003e30 <DELETE_SENSOR>:
	
}

void DELETE_SENSOR(unsigned char* ADDRESS,unsigned char ADDRESS_LENGTH)
{
	char index=FIND_SENSOR(ADDRESS,ADDRESS_LENGTH);
    3e30:	48 df       	rcall	.-368    	; 0x3cc2 <FIND_SENSOR>
	if (index!=-1)
	{
		MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED=0;
    3e32:	28 2f       	mov	r18, r24
    3e34:	30 e0       	ldi	r19, 0x00	; 0
    3e36:	99 e1       	ldi	r25, 0x19	; 25
    3e38:	89 9f       	mul	r24, r25
    3e3a:	f0 01       	movw	r30, r0
    3e3c:	11 24       	eor	r1, r1
    3e3e:	ef 51       	subi	r30, 0x1F	; 31
    3e40:	fc 4f       	sbci	r31, 0xFC	; 252
    3e42:	15 86       	std	Z+13, r1	; 0x0d
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+((unsigned char)index)*SIZE_OF_SENSOR_DATA_EEPROM+13,0);
    3e44:	22 0f       	add	r18, r18
    3e46:	33 1f       	adc	r19, r19
    3e48:	c9 01       	movw	r24, r18
    3e4a:	88 0f       	add	r24, r24
    3e4c:	99 1f       	adc	r25, r25
    3e4e:	88 0f       	add	r24, r24
    3e50:	99 1f       	adc	r25, r25
    3e52:	88 0f       	add	r24, r24
    3e54:	99 1f       	adc	r25, r25
    3e56:	82 1b       	sub	r24, r18
    3e58:	93 0b       	sbc	r25, r19
    3e5a:	60 e0       	ldi	r22, 0x00	; 0
    3e5c:	8e 58       	subi	r24, 0x8E	; 142
    3e5e:	9f 4f       	sbci	r25, 0xFF	; 255
    3e60:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
		--NUMBER_OF_SENSORS;
    3e64:	80 91 2e 03 	lds	r24, 0x032E
    3e68:	81 50       	subi	r24, 0x01	; 1
    3e6a:	80 93 2e 03 	sts	0x032E, r24
		NUM_SENSOR_SAVE();
    3e6e:	22 cf       	rjmp	.-444    	; 0x3cb4 <NUM_SENSOR_SAVE>
    3e70:	08 95       	ret

00003e72 <DELETE_ALL_SENSOR>:
	}
}

void DELETE_ALL_SENSOR()
{
    3e72:	1f 93       	push	r17
    3e74:	cf 93       	push	r28
    3e76:	df 93       	push	r29
    3e78:	1f 92       	push	r1
    3e7a:	cd b7       	in	r28, 0x3d	; 61
    3e7c:	de b7       	in	r29, 0x3e	; 62
	volatile unsigned char index=0;
    3e7e:	19 82       	std	Y+1, r1	; 0x01
	for(index=0;index<NUMBER_OF_SENSORS_IN_DATA_BASE;++index)
    3e80:	19 82       	std	Y+1, r1	; 0x01
    3e82:	89 81       	ldd	r24, Y+1	; 0x01
    3e84:	8a 30       	cpi	r24, 0x0A	; 10
    3e86:	00 f5       	brcc	.+64     	; 0x3ec8 <DELETE_ALL_SENSOR+0x56>
	{
		MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED=0;
    3e88:	19 e1       	ldi	r17, 0x19	; 25
    3e8a:	e9 81       	ldd	r30, Y+1	; 0x01
    3e8c:	1e 9f       	mul	r17, r30
    3e8e:	f0 01       	movw	r30, r0
    3e90:	11 24       	eor	r1, r1
    3e92:	ef 51       	subi	r30, 0x1F	; 31
    3e94:	fc 4f       	sbci	r31, 0xFC	; 252
    3e96:	15 86       	std	Z+13, r1	; 0x0d
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+((unsigned char)index)*SIZE_OF_SENSOR_DATA_EEPROM+13,0);
    3e98:	29 81       	ldd	r18, Y+1	; 0x01
    3e9a:	30 e0       	ldi	r19, 0x00	; 0
    3e9c:	22 0f       	add	r18, r18
    3e9e:	33 1f       	adc	r19, r19
    3ea0:	c9 01       	movw	r24, r18
    3ea2:	88 0f       	add	r24, r24
    3ea4:	99 1f       	adc	r25, r25
    3ea6:	88 0f       	add	r24, r24
    3ea8:	99 1f       	adc	r25, r25
    3eaa:	88 0f       	add	r24, r24
    3eac:	99 1f       	adc	r25, r25
    3eae:	82 1b       	sub	r24, r18
    3eb0:	93 0b       	sbc	r25, r19
    3eb2:	60 e0       	ldi	r22, 0x00	; 0
    3eb4:	8e 58       	subi	r24, 0x8E	; 142
    3eb6:	9f 4f       	sbci	r25, 0xFF	; 255
    3eb8:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
}

void DELETE_ALL_SENSOR()
{
	volatile unsigned char index=0;
	for(index=0;index<NUMBER_OF_SENSORS_IN_DATA_BASE;++index)
    3ebc:	89 81       	ldd	r24, Y+1	; 0x01
    3ebe:	8f 5f       	subi	r24, 0xFF	; 255
    3ec0:	89 83       	std	Y+1, r24	; 0x01
    3ec2:	89 81       	ldd	r24, Y+1	; 0x01
    3ec4:	8a 30       	cpi	r24, 0x0A	; 10
    3ec6:	08 f3       	brcs	.-62     	; 0x3e8a <DELETE_ALL_SENSOR+0x18>
	{
		MY_SENSORS[(unsigned char)index].SENSOR_OCCUBIED=0;
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+((unsigned char)index)*SIZE_OF_SENSOR_DATA_EEPROM+13,0);
	}
	NUMBER_OF_SENSORS=0;
    3ec8:	10 92 2e 03 	sts	0x032E, r1
	NUM_SENSOR_SAVE();
    3ecc:	f3 de       	rcall	.-538    	; 0x3cb4 <NUM_SENSOR_SAVE>
}
    3ece:	0f 90       	pop	r0
    3ed0:	df 91       	pop	r29
    3ed2:	cf 91       	pop	r28
    3ed4:	1f 91       	pop	r17
    3ed6:	08 95       	ret

00003ed8 <SENSOR_STATE_ENABLE>:

void SENSOR_STATE_ENABLE(unsigned char* ADDRESS,unsigned char ADDRESS_LENGTH)
{
	char index=FIND_SENSOR(ADDRESS,ADDRESS_LENGTH);
    3ed8:	f4 de       	rcall	.-536    	; 0x3cc2 <FIND_SENSOR>
	if (index!=-1)
	{
		MY_SENSORS[(unsigned char)index].SENSOR_STATE=1;
    3eda:	28 2f       	mov	r18, r24
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	99 e1       	ldi	r25, 0x19	; 25
    3ee0:	89 9f       	mul	r24, r25
    3ee2:	f0 01       	movw	r30, r0
    3ee4:	11 24       	eor	r1, r1
    3ee6:	ef 51       	subi	r30, 0x1F	; 31
    3ee8:	fc 4f       	sbci	r31, 0xFC	; 252
    3eea:	81 e0       	ldi	r24, 0x01	; 1
    3eec:	84 87       	std	Z+12, r24	; 0x0c
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+((unsigned char)index)*SIZE_OF_SENSOR_DATA_EEPROM+12,1);
    3eee:	22 0f       	add	r18, r18
    3ef0:	33 1f       	adc	r19, r19
    3ef2:	c9 01       	movw	r24, r18
    3ef4:	88 0f       	add	r24, r24
    3ef6:	99 1f       	adc	r25, r25
    3ef8:	88 0f       	add	r24, r24
    3efa:	99 1f       	adc	r25, r25
    3efc:	88 0f       	add	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	82 1b       	sub	r24, r18
    3f02:	93 0b       	sbc	r25, r19
    3f04:	61 e0       	ldi	r22, 0x01	; 1
    3f06:	8f 58       	subi	r24, 0x8F	; 143
    3f08:	9f 4f       	sbci	r25, 0xFF	; 255
    3f0a:	0c 94 37 11 	jmp	0x226e	; 0x226e <writeeeprom>
    3f0e:	08 95       	ret

00003f10 <SENSOR_STATE_DISABLE>:
	}
}

void SENSOR_STATE_DISABLE(unsigned char* ADDRESS,unsigned char ADDRESS_LENGTH)
{
	char index=FIND_SENSOR(ADDRESS,ADDRESS_LENGTH);
    3f10:	d8 de       	rcall	.-592    	; 0x3cc2 <FIND_SENSOR>
	if (index!=-1)
	{
		MY_SENSORS[(unsigned char)index].SENSOR_STATE=0;
    3f12:	28 2f       	mov	r18, r24
    3f14:	30 e0       	ldi	r19, 0x00	; 0
    3f16:	99 e1       	ldi	r25, 0x19	; 25
    3f18:	89 9f       	mul	r24, r25
    3f1a:	f0 01       	movw	r30, r0
    3f1c:	11 24       	eor	r1, r1
    3f1e:	ef 51       	subi	r30, 0x1F	; 31
    3f20:	fc 4f       	sbci	r31, 0xFC	; 252
    3f22:	14 86       	std	Z+12, r1	; 0x0c
		writeeeprom(MY_EEPROM_START_OF_SENSOR_ARRAY+((unsigned char)index)*SIZE_OF_SENSOR_DATA_EEPROM+12,0);
    3f24:	22 0f       	add	r18, r18
    3f26:	33 1f       	adc	r19, r19
    3f28:	c9 01       	movw	r24, r18
    3f2a:	88 0f       	add	r24, r24
    3f2c:	99 1f       	adc	r25, r25
    3f2e:	88 0f       	add	r24, r24
    3f30:	99 1f       	adc	r25, r25
    3f32:	88 0f       	add	r24, r24
    3f34:	99 1f       	adc	r25, r25
    3f36:	82 1b       	sub	r24, r18
    3f38:	93 0b       	sbc	r25, r19
    3f3a:	60 e0       	ldi	r22, 0x00	; 0
    3f3c:	8f 58       	subi	r24, 0x8F	; 143
    3f3e:	9f 4f       	sbci	r25, 0xFF	; 255
    3f40:	0c 94 37 11 	jmp	0x226e	; 0x226e <writeeeprom>
    3f44:	08 95       	ret

00003f46 <SENSORS_CONNECT>:
}



void SENSORS_CONNECT()
{	
    3f46:	2f 92       	push	r2
    3f48:	3f 92       	push	r3
    3f4a:	4f 92       	push	r4
    3f4c:	5f 92       	push	r5
    3f4e:	6f 92       	push	r6
    3f50:	7f 92       	push	r7
    3f52:	8f 92       	push	r8
    3f54:	9f 92       	push	r9
    3f56:	af 92       	push	r10
    3f58:	bf 92       	push	r11
    3f5a:	cf 92       	push	r12
    3f5c:	df 92       	push	r13
    3f5e:	ef 92       	push	r14
    3f60:	ff 92       	push	r15
    3f62:	0f 93       	push	r16
    3f64:	1f 93       	push	r17
    3f66:	cf 93       	push	r28
    3f68:	df 93       	push	r29
    3f6a:	00 d0       	rcall	.+0      	; 0x3f6c <SENSORS_CONNECT+0x26>
    3f6c:	00 d0       	rcall	.+0      	; 0x3f6e <SENSORS_CONNECT+0x28>
    3f6e:	cd b7       	in	r28, 0x3d	; 61
    3f70:	de b7       	in	r29, 0x3e	; 62
    3f72:	22 ee       	ldi	r18, 0xE2	; 226
    3f74:	33 e0       	ldi	r19, 0x03	; 3
    3f76:	3c 83       	std	Y+4, r19	; 0x04
    3f78:	2b 83       	std	Y+3, r18	; 0x03
    3f7a:	0f 2e       	mov	r0, r31
    3f7c:	fc ed       	ldi	r31, 0xDC	; 220
    3f7e:	ef 2e       	mov	r14, r31
    3f80:	f4 e0       	ldi	r31, 0x04	; 4
    3f82:	ff 2e       	mov	r15, r31
    3f84:	f0 2d       	mov	r31, r0
    3f86:	a1 2c       	mov	r10, r1
    3f88:	b1 2c       	mov	r11, r1
    3f8a:	41 2c       	mov	r4, r1
    3f8c:	51 2c       	mov	r5, r1
    3f8e:	61 2c       	mov	r6, r1
    3f90:	71 2c       	mov	r7, r1
    3f92:	81 2c       	mov	r8, r1
    3f94:	91 2c       	mov	r9, r1
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
	{
		if (MY_SENSORS[i].SENSOR_OCCUBIED==1)
    3f96:	0f 2e       	mov	r0, r31
    3f98:	f9 e1       	ldi	r31, 0x19	; 25
    3f9a:	3f 2e       	mov	r3, r31
    3f9c:	f0 2d       	mov	r31, r0
					if (MY_SENSORS[i].C_T_TRY_CONNECTED==MAX_TIMER_CONNECT_COUNT_SENSOR)
					{
						global_interupt_disable();
						MY_SENSORS[i].C_T_TRY_CONNECTED=0;
						global_interupt_enable();
						NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[CONTROL_CHANNEL_INDEX]);
    3f9e:	0f 2e       	mov	r0, r31
    3fa0:	f2 e1       	ldi	r31, 0x12	; 18
    3fa2:	cf 2e       	mov	r12, r31
    3fa4:	f1 e0       	ldi	r31, 0x01	; 1
    3fa6:	df 2e       	mov	r13, r31
    3fa8:	f0 2d       	mov	r31, r0
							TEST_UART_SEND_VALUE(i);
							TEST_UART_SEND_byte('\n');
							/*TESTING*/
							MY_SENSORS[i].READ_FAIL_COUNTER=0;
							MY_SENSORS[i].SEND_FAIL_COUNTER=0;
							MY_SENSORS[i].F_CONNECTED=1;
    3faa:	22 24       	eor	r2, r2
    3fac:	23 94       	inc	r2
void SENSORS_CONNECT()
{	
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
	{
		if (MY_SENSORS[i].SENSOR_OCCUBIED==1)
    3fae:	8a 2d       	mov	r24, r10
    3fb0:	9b 2d       	mov	r25, r11
    3fb2:	8c 01       	movw	r16, r24
    3fb4:	38 9e       	mul	r3, r24
    3fb6:	f0 01       	movw	r30, r0
    3fb8:	39 9e       	mul	r3, r25
    3fba:	f0 0d       	add	r31, r0
    3fbc:	11 24       	eor	r1, r1
    3fbe:	ef 51       	subi	r30, 0x1F	; 31
    3fc0:	fc 4f       	sbci	r31, 0xFC	; 252
    3fc2:	25 85       	ldd	r18, Z+13	; 0x0d
    3fc4:	21 30       	cpi	r18, 0x01	; 1
    3fc6:	09 f0       	breq	.+2      	; 0x3fca <SENSORS_CONNECT+0x84>
    3fc8:	06 c1       	rjmp	.+524    	; 0x41d6 <SENSORS_CONNECT+0x290>
		{
			if (MY_SENSORS[i].SENSOR_STATE==1)
    3fca:	38 9e       	mul	r3, r24
    3fcc:	f0 01       	movw	r30, r0
    3fce:	39 9e       	mul	r3, r25
    3fd0:	f0 0d       	add	r31, r0
    3fd2:	11 24       	eor	r1, r1
    3fd4:	ef 51       	subi	r30, 0x1F	; 31
    3fd6:	fc 4f       	sbci	r31, 0xFC	; 252
    3fd8:	84 85       	ldd	r24, Z+12	; 0x0c
    3fda:	81 30       	cpi	r24, 0x01	; 1
    3fdc:	09 f0       	breq	.+2      	; 0x3fe0 <SENSORS_CONNECT+0x9a>
    3fde:	fb c0       	rjmp	.+502    	; 0x41d6 <SENSORS_CONNECT+0x290>
			{
				if (MY_SENSORS[i].F_CONNECTED!=1)
    3fe0:	30 9e       	mul	r3, r16
    3fe2:	f0 01       	movw	r30, r0
    3fe4:	31 9e       	mul	r3, r17
    3fe6:	f0 0d       	add	r31, r0
    3fe8:	11 24       	eor	r1, r1
    3fea:	ef 51       	subi	r30, 0x1F	; 31
    3fec:	fc 4f       	sbci	r31, 0xFC	; 252
    3fee:	86 85       	ldd	r24, Z+14	; 0x0e
    3ff0:	81 30       	cpi	r24, 0x01	; 1
    3ff2:	09 f4       	brne	.+2      	; 0x3ff6 <SENSORS_CONNECT+0xb0>
    3ff4:	f0 c0       	rjmp	.+480    	; 0x41d6 <SENSORS_CONNECT+0x290>
				{
					if (MY_SENSORS[i].C_T_TRY_CONNECTED==MAX_TIMER_CONNECT_COUNT_SENSOR)
    3ff6:	30 9e       	mul	r3, r16
    3ff8:	f0 01       	movw	r30, r0
    3ffa:	31 9e       	mul	r3, r17
    3ffc:	f0 0d       	add	r31, r0
    3ffe:	11 24       	eor	r1, r1
    4000:	ef 51       	subi	r30, 0x1F	; 31
    4002:	fc 4f       	sbci	r31, 0xFC	; 252
    4004:	87 85       	ldd	r24, Z+15	; 0x0f
    4006:	84 31       	cpi	r24, 0x14	; 20
    4008:	09 f0       	breq	.+2      	; 0x400c <SENSORS_CONNECT+0xc6>
    400a:	e5 c0       	rjmp	.+458    	; 0x41d6 <SENSORS_CONNECT+0x290>
					{
						global_interupt_disable();
    400c:	8f b7       	in	r24, 0x3f	; 63
    400e:	8f 77       	andi	r24, 0x7F	; 127
    4010:	8f bf       	out	0x3f, r24	; 63
						MY_SENSORS[i].C_T_TRY_CONNECTED=0;
    4012:	30 9e       	mul	r3, r16
    4014:	c0 01       	movw	r24, r0
    4016:	31 9e       	mul	r3, r17
    4018:	90 0d       	add	r25, r0
    401a:	11 24       	eor	r1, r1
    401c:	fc 01       	movw	r30, r24
    401e:	ef 51       	subi	r30, 0x1F	; 31
    4020:	fc 4f       	sbci	r31, 0xFC	; 252
    4022:	fa 83       	std	Y+2, r31	; 0x02
    4024:	e9 83       	std	Y+1, r30	; 0x01
    4026:	17 86       	std	Z+15, r1	; 0x0f
						global_interupt_enable();
    4028:	8f b7       	in	r24, 0x3f	; 63
    402a:	80 68       	ori	r24, 0x80	; 128
    402c:	8f bf       	out	0x3f, r24	; 63
						NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[CONTROL_CHANNEL_INDEX]);
    402e:	f6 01       	movw	r30, r12
    4030:	80 81       	ld	r24, Z
    4032:	0e 94 2c 10 	call	0x2058	; 0x2058 <NRF_UPDATE_USED_CHANNEL>
						/*TESTING*/
						TEST_UART_SEND_str("try CONNECT\n");
    4036:	82 e5       	ldi	r24, 0x52	; 82
    4038:	92 e0       	ldi	r25, 0x02	; 2
    403a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
						TEST_UART_SEND_str("ADDRESS: ");
    403e:	8f e5       	ldi	r24, 0x5F	; 95
    4040:	92 e0       	ldi	r25, 0x02	; 2
    4042:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_ADDRESS[0]);
    4046:	e9 81       	ldd	r30, Y+1	; 0x01
    4048:	fa 81       	ldd	r31, Y+2	; 0x02
    404a:	21 81       	ldd	r18, Z+1	; 0x01
    404c:	30 e0       	ldi	r19, 0x00	; 0
    404e:	40 e0       	ldi	r20, 0x00	; 0
    4050:	50 e0       	ldi	r21, 0x00	; 0
    4052:	60 e0       	ldi	r22, 0x00	; 0
    4054:	70 e0       	ldi	r23, 0x00	; 0
    4056:	80 e0       	ldi	r24, 0x00	; 0
    4058:	90 e0       	ldi	r25, 0x00	; 0
    405a:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte(' ');
    405e:	80 e2       	ldi	r24, 0x20	; 32
    4060:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_ADDRESS[1]);
    4064:	e9 81       	ldd	r30, Y+1	; 0x01
    4066:	fa 81       	ldd	r31, Y+2	; 0x02
    4068:	22 81       	ldd	r18, Z+2	; 0x02
    406a:	30 e0       	ldi	r19, 0x00	; 0
    406c:	40 e0       	ldi	r20, 0x00	; 0
    406e:	50 e0       	ldi	r21, 0x00	; 0
    4070:	60 e0       	ldi	r22, 0x00	; 0
    4072:	70 e0       	ldi	r23, 0x00	; 0
    4074:	80 e0       	ldi	r24, 0x00	; 0
    4076:	90 e0       	ldi	r25, 0x00	; 0
    4078:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte(' ');
    407c:	80 e2       	ldi	r24, 0x20	; 32
    407e:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_ADDRESS[2]);
    4082:	e9 81       	ldd	r30, Y+1	; 0x01
    4084:	fa 81       	ldd	r31, Y+2	; 0x02
    4086:	23 81       	ldd	r18, Z+3	; 0x03
    4088:	30 e0       	ldi	r19, 0x00	; 0
    408a:	40 e0       	ldi	r20, 0x00	; 0
    408c:	50 e0       	ldi	r21, 0x00	; 0
    408e:	60 e0       	ldi	r22, 0x00	; 0
    4090:	70 e0       	ldi	r23, 0x00	; 0
    4092:	80 e0       	ldi	r24, 0x00	; 0
    4094:	90 e0       	ldi	r25, 0x00	; 0
    4096:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte(' ');
    409a:	80 e2       	ldi	r24, 0x20	; 32
    409c:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_ADDRESS[3]);
    40a0:	e9 81       	ldd	r30, Y+1	; 0x01
    40a2:	fa 81       	ldd	r31, Y+2	; 0x02
    40a4:	24 81       	ldd	r18, Z+4	; 0x04
    40a6:	30 e0       	ldi	r19, 0x00	; 0
    40a8:	40 e0       	ldi	r20, 0x00	; 0
    40aa:	50 e0       	ldi	r21, 0x00	; 0
    40ac:	60 e0       	ldi	r22, 0x00	; 0
    40ae:	70 e0       	ldi	r23, 0x00	; 0
    40b0:	80 e0       	ldi	r24, 0x00	; 0
    40b2:	90 e0       	ldi	r25, 0x00	; 0
    40b4:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte(' ');
    40b8:	80 e2       	ldi	r24, 0x20	; 32
    40ba:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_ADDRESS[4]);
    40be:	e9 81       	ldd	r30, Y+1	; 0x01
    40c0:	fa 81       	ldd	r31, Y+2	; 0x02
    40c2:	25 81       	ldd	r18, Z+5	; 0x05
    40c4:	30 e0       	ldi	r19, 0x00	; 0
    40c6:	40 e0       	ldi	r20, 0x00	; 0
    40c8:	50 e0       	ldi	r21, 0x00	; 0
    40ca:	60 e0       	ldi	r22, 0x00	; 0
    40cc:	70 e0       	ldi	r23, 0x00	; 0
    40ce:	80 e0       	ldi	r24, 0x00	; 0
    40d0:	90 e0       	ldi	r25, 0x00	; 0
    40d2:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_str("\n");
    40d6:	8e e7       	ldi	r24, 0x7E	; 126
    40d8:	91 e0       	ldi	r25, 0x01	; 1
    40da:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
						TEST_UART_SEND_str("PASS: ");
    40de:	89 e6       	ldi	r24, 0x69	; 105
    40e0:	92 e0       	ldi	r25, 0x02	; 2
    40e2:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_PASSWORD[0]);
    40e6:	e9 81       	ldd	r30, Y+1	; 0x01
    40e8:	fa 81       	ldd	r31, Y+2	; 0x02
    40ea:	26 81       	ldd	r18, Z+6	; 0x06
    40ec:	30 e0       	ldi	r19, 0x00	; 0
    40ee:	40 e0       	ldi	r20, 0x00	; 0
    40f0:	50 e0       	ldi	r21, 0x00	; 0
    40f2:	60 e0       	ldi	r22, 0x00	; 0
    40f4:	70 e0       	ldi	r23, 0x00	; 0
    40f6:	80 e0       	ldi	r24, 0x00	; 0
    40f8:	90 e0       	ldi	r25, 0x00	; 0
    40fa:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte(' ');
    40fe:	80 e2       	ldi	r24, 0x20	; 32
    4100:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_PASSWORD[1]);
    4104:	e9 81       	ldd	r30, Y+1	; 0x01
    4106:	fa 81       	ldd	r31, Y+2	; 0x02
    4108:	27 81       	ldd	r18, Z+7	; 0x07
    410a:	30 e0       	ldi	r19, 0x00	; 0
    410c:	40 e0       	ldi	r20, 0x00	; 0
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	60 e0       	ldi	r22, 0x00	; 0
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	80 e0       	ldi	r24, 0x00	; 0
    4116:	90 e0       	ldi	r25, 0x00	; 0
    4118:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte(' ');
    411c:	80 e2       	ldi	r24, 0x20	; 32
    411e:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_PASSWORD[2]);
    4122:	e9 81       	ldd	r30, Y+1	; 0x01
    4124:	fa 81       	ldd	r31, Y+2	; 0x02
    4126:	20 85       	ldd	r18, Z+8	; 0x08
    4128:	30 e0       	ldi	r19, 0x00	; 0
    412a:	40 e0       	ldi	r20, 0x00	; 0
    412c:	50 e0       	ldi	r21, 0x00	; 0
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	70 e0       	ldi	r23, 0x00	; 0
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte(' ');
    413a:	80 e2       	ldi	r24, 0x20	; 32
    413c:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						TEST_UART_SEND_VALUE(MY_SENSORS[i].SENSOR_PASSWORD[3]);
    4140:	e9 81       	ldd	r30, Y+1	; 0x01
    4142:	fa 81       	ldd	r31, Y+2	; 0x02
    4144:	21 85       	ldd	r18, Z+9	; 0x09
    4146:	30 e0       	ldi	r19, 0x00	; 0
    4148:	40 e0       	ldi	r20, 0x00	; 0
    414a:	50 e0       	ldi	r21, 0x00	; 0
    414c:	60 e0       	ldi	r22, 0x00	; 0
    414e:	70 e0       	ldi	r23, 0x00	; 0
    4150:	80 e0       	ldi	r24, 0x00	; 0
    4152:	90 e0       	ldi	r25, 0x00	; 0
    4154:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_str("\nNUMBER: ");
    4158:	80 e7       	ldi	r24, 0x70	; 112
    415a:	92 e0       	ldi	r25, 0x02	; 2
    415c:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
						TEST_UART_SEND_VALUE(i);
    4160:	2a 2d       	mov	r18, r10
    4162:	3b 2d       	mov	r19, r11
    4164:	44 2d       	mov	r20, r4
    4166:	55 2d       	mov	r21, r5
    4168:	66 2d       	mov	r22, r6
    416a:	77 2d       	mov	r23, r7
    416c:	88 2d       	mov	r24, r8
    416e:	99 2d       	mov	r25, r9
    4170:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte('\n');
    4174:	8a e0       	ldi	r24, 0x0A	; 10
    4176:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						/*TESTING*/
						if (PROTOCOL_MASTER_CONNECT_TO_SENSOR(MY_SENSORS[i].SENSOR_ADDRESS,MY_SENSORS[i].SENSOR_VERSION,MY_SENSORS[i].SENSOR_ADDRESS_LENGTH,MY_SENSORS[i].SENSOR_PASSWORD))
    417a:	e9 81       	ldd	r30, Y+1	; 0x01
    417c:	fa 81       	ldd	r31, Y+2	; 0x02
    417e:	40 81       	ld	r20, Z
    4180:	62 85       	ldd	r22, Z+10	; 0x0a
    4182:	2b 81       	ldd	r18, Y+3	; 0x03
    4184:	3c 81       	ldd	r19, Y+4	; 0x04
    4186:	2b 5f       	subi	r18, 0xFB	; 251
    4188:	3f 4f       	sbci	r19, 0xFF	; 255
    418a:	8b 81       	ldd	r24, Y+3	; 0x03
    418c:	9c 81       	ldd	r25, Y+4	; 0x04
    418e:	0e 94 33 15 	call	0x2a66	; 0x2a66 <PROTOCOL_MASTER_CONNECT_TO_SENSOR>
    4192:	88 23       	and	r24, r24
    4194:	01 f1       	breq	.+64     	; 0x41d6 <SENSORS_CONNECT+0x290>
						{
							/*TESTING*/
							TEST_UART_SEND_str("CONNECTED ");
    4196:	81 e9       	ldi	r24, 0x91	; 145
    4198:	92 e0       	ldi	r25, 0x02	; 2
    419a:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE(i);
    419e:	2a 2d       	mov	r18, r10
    41a0:	3b 2d       	mov	r19, r11
    41a2:	44 2d       	mov	r20, r4
    41a4:	55 2d       	mov	r21, r5
    41a6:	66 2d       	mov	r22, r6
    41a8:	77 2d       	mov	r23, r7
    41aa:	88 2d       	mov	r24, r8
    41ac:	99 2d       	mov	r25, r9
    41ae:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_byte('\n');
    41b2:	8a e0       	ldi	r24, 0x0A	; 10
    41b4:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
							/*TESTING*/
							MY_SENSORS[i].READ_FAIL_COUNTER=0;
    41b8:	30 9e       	mul	r3, r16
    41ba:	f0 01       	movw	r30, r0
    41bc:	31 9e       	mul	r3, r17
    41be:	f0 0d       	add	r31, r0
    41c0:	11 24       	eor	r1, r1
    41c2:	ef 51       	subi	r30, 0x1F	; 31
    41c4:	fc 4f       	sbci	r31, 0xFC	; 252
    41c6:	10 8e       	std	Z+24, r1	; 0x18
							MY_SENSORS[i].SEND_FAIL_COUNTER=0;
    41c8:	17 8a       	std	Z+23, r1	; 0x17
							MY_SENSORS[i].F_CONNECTED=1;
    41ca:	26 86       	std	Z+14, r2	; 0x0e
							MY_SENSORS[i].USED_CHANNEL=CONTROL_CHANNEL_INDEX;
    41cc:	13 8a       	std	Z+19, r1	; 0x13
							MY_SENSORS[i].C_T_BEACON=0;
    41ce:	10 8a       	std	Z+16, r1	; 0x10
							MY_SENSORS[i].F_HAVE_SESSION_KEY=0;
    41d0:	14 8a       	std	Z+20, r1	; 0x14
							MY_SENSORS[i].C_FAILED_BEACON=0;
    41d2:	11 8a       	std	Z+17, r1	; 0x11
							MY_SENSORS[i].C_T_SESSION_KEY=0;
    41d4:	12 8a       	std	Z+18, r1	; 0x12
    41d6:	2a 2d       	mov	r18, r10
    41d8:	3b 2d       	mov	r19, r11
    41da:	44 2d       	mov	r20, r4
    41dc:	55 2d       	mov	r21, r5
    41de:	66 2d       	mov	r22, r6
    41e0:	77 2d       	mov	r23, r7
    41e2:	88 2d       	mov	r24, r8
    41e4:	99 2d       	mov	r25, r9
    41e6:	a2 2d       	mov	r26, r2
    41e8:	0e 94 11 34 	call	0x6822	; 0x6822 <__adddi3_s8>
    41ec:	a2 2e       	mov	r10, r18
    41ee:	b3 2e       	mov	r11, r19
    41f0:	44 2e       	mov	r4, r20
    41f2:	55 2e       	mov	r5, r21
    41f4:	66 2e       	mov	r6, r22
    41f6:	77 2e       	mov	r7, r23
    41f8:	88 2e       	mov	r8, r24
    41fa:	99 2e       	mov	r9, r25
    41fc:	2b 81       	ldd	r18, Y+3	; 0x03
    41fe:	3c 81       	ldd	r19, Y+4	; 0x04
    4200:	27 5e       	subi	r18, 0xE7	; 231
    4202:	3f 4f       	sbci	r19, 0xFF	; 255
    4204:	3c 83       	std	Y+4, r19	; 0x04
    4206:	2b 83       	std	Y+3, r18	; 0x03


void SENSORS_CONNECT()
{	
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
    4208:	2e 15       	cp	r18, r14
    420a:	3f 05       	cpc	r19, r15
    420c:	09 f0       	breq	.+2      	; 0x4210 <SENSORS_CONNECT+0x2ca>
    420e:	cf ce       	rjmp	.-610    	; 0x3fae <SENSORS_CONNECT+0x68>
					}			
				}	
			}
		}
	}
}
    4210:	0f 90       	pop	r0
    4212:	0f 90       	pop	r0
    4214:	0f 90       	pop	r0
    4216:	0f 90       	pop	r0
    4218:	df 91       	pop	r29
    421a:	cf 91       	pop	r28
    421c:	1f 91       	pop	r17
    421e:	0f 91       	pop	r16
    4220:	ff 90       	pop	r15
    4222:	ef 90       	pop	r14
    4224:	df 90       	pop	r13
    4226:	cf 90       	pop	r12
    4228:	bf 90       	pop	r11
    422a:	af 90       	pop	r10
    422c:	9f 90       	pop	r9
    422e:	8f 90       	pop	r8
    4230:	7f 90       	pop	r7
    4232:	6f 90       	pop	r6
    4234:	5f 90       	pop	r5
    4236:	4f 90       	pop	r4
    4238:	3f 90       	pop	r3
    423a:	2f 90       	pop	r2
    423c:	08 95       	ret

0000423e <SENSORS_BEACON>:

void SENSORS_BEACON()
{
    423e:	3f 92       	push	r3
    4240:	4f 92       	push	r4
    4242:	5f 92       	push	r5
    4244:	6f 92       	push	r6
    4246:	7f 92       	push	r7
    4248:	8f 92       	push	r8
    424a:	9f 92       	push	r9
    424c:	af 92       	push	r10
    424e:	bf 92       	push	r11
    4250:	cf 92       	push	r12
    4252:	df 92       	push	r13
    4254:	ef 92       	push	r14
    4256:	ff 92       	push	r15
    4258:	0f 93       	push	r16
    425a:	1f 93       	push	r17
    425c:	cf 93       	push	r28
    425e:	df 93       	push	r29
    4260:	c2 ee       	ldi	r28, 0xE2	; 226
    4262:	d3 e0       	ldi	r29, 0x03	; 3
    4264:	0f 2e       	mov	r0, r31
    4266:	fc ed       	ldi	r31, 0xDC	; 220
    4268:	ef 2e       	mov	r14, r31
    426a:	f4 e0       	ldi	r31, 0x04	; 4
    426c:	ff 2e       	mov	r15, r31
    426e:	f0 2d       	mov	r31, r0
    4270:	a1 2c       	mov	r10, r1
    4272:	b1 2c       	mov	r11, r1
    4274:	41 2c       	mov	r4, r1
    4276:	51 2c       	mov	r5, r1
    4278:	61 2c       	mov	r6, r1
    427a:	71 2c       	mov	r7, r1
    427c:	81 2c       	mov	r8, r1
    427e:	91 2c       	mov	r9, r1
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
	{
		if (MY_SENSORS[i].SENSOR_OCCUBIED==1)
    4280:	0f 2e       	mov	r0, r31
    4282:	f9 e1       	ldi	r31, 0x19	; 25
    4284:	3f 2e       	mov	r3, r31
    4286:	f0 2d       	mov	r31, r0
    4288:	8a 2d       	mov	r24, r10
    428a:	9b 2d       	mov	r25, r11
    428c:	8c 01       	movw	r16, r24
    428e:	38 9e       	mul	r3, r24
    4290:	f0 01       	movw	r30, r0
    4292:	39 9e       	mul	r3, r25
    4294:	f0 0d       	add	r31, r0
    4296:	11 24       	eor	r1, r1
    4298:	ef 51       	subi	r30, 0x1F	; 31
    429a:	fc 4f       	sbci	r31, 0xFC	; 252
    429c:	25 85       	ldd	r18, Z+13	; 0x0d
    429e:	21 30       	cpi	r18, 0x01	; 1
    42a0:	09 f0       	breq	.+2      	; 0x42a4 <SENSORS_BEACON+0x66>
    42a2:	a9 c0       	rjmp	.+338    	; 0x43f6 <SENSORS_BEACON+0x1b8>
		{
			if (MY_SENSORS[i].SENSOR_STATE==1)
    42a4:	38 9e       	mul	r3, r24
    42a6:	f0 01       	movw	r30, r0
    42a8:	39 9e       	mul	r3, r25
    42aa:	f0 0d       	add	r31, r0
    42ac:	11 24       	eor	r1, r1
    42ae:	ef 51       	subi	r30, 0x1F	; 31
    42b0:	fc 4f       	sbci	r31, 0xFC	; 252
    42b2:	84 85       	ldd	r24, Z+12	; 0x0c
    42b4:	81 30       	cpi	r24, 0x01	; 1
    42b6:	09 f0       	breq	.+2      	; 0x42ba <SENSORS_BEACON+0x7c>
    42b8:	9e c0       	rjmp	.+316    	; 0x43f6 <SENSORS_BEACON+0x1b8>
			{
				if (MY_SENSORS[i].F_CONNECTED==1)
    42ba:	30 9e       	mul	r3, r16
    42bc:	f0 01       	movw	r30, r0
    42be:	31 9e       	mul	r3, r17
    42c0:	f0 0d       	add	r31, r0
    42c2:	11 24       	eor	r1, r1
    42c4:	ef 51       	subi	r30, 0x1F	; 31
    42c6:	fc 4f       	sbci	r31, 0xFC	; 252
    42c8:	86 85       	ldd	r24, Z+14	; 0x0e
    42ca:	81 30       	cpi	r24, 0x01	; 1
    42cc:	09 f0       	breq	.+2      	; 0x42d0 <SENSORS_BEACON+0x92>
    42ce:	93 c0       	rjmp	.+294    	; 0x43f6 <SENSORS_BEACON+0x1b8>
				{
					if (MY_SENSORS[i].C_T_BEACON==MAX_TIMER_BEACON_COUNTER)
    42d0:	30 9e       	mul	r3, r16
    42d2:	f0 01       	movw	r30, r0
    42d4:	31 9e       	mul	r3, r17
    42d6:	f0 0d       	add	r31, r0
    42d8:	11 24       	eor	r1, r1
    42da:	ef 51       	subi	r30, 0x1F	; 31
    42dc:	fc 4f       	sbci	r31, 0xFC	; 252
    42de:	80 89       	ldd	r24, Z+16	; 0x10
    42e0:	88 30       	cpi	r24, 0x08	; 8
    42e2:	09 f0       	breq	.+2      	; 0x42e6 <SENSORS_BEACON+0xa8>
    42e4:	88 c0       	rjmp	.+272    	; 0x43f6 <SENSORS_BEACON+0x1b8>
					{
							global_interupt_disable();
    42e6:	8f b7       	in	r24, 0x3f	; 63
    42e8:	8f 77       	andi	r24, 0x7F	; 127
    42ea:	8f bf       	out	0x3f, r24	; 63
							MY_SENSORS[i].C_T_BEACON=0;
    42ec:	30 9e       	mul	r3, r16
    42ee:	f0 01       	movw	r30, r0
    42f0:	31 9e       	mul	r3, r17
    42f2:	f0 0d       	add	r31, r0
    42f4:	11 24       	eor	r1, r1
    42f6:	ef 51       	subi	r30, 0x1F	; 31
    42f8:	fc 4f       	sbci	r31, 0xFC	; 252
    42fa:	10 8a       	std	Z+16, r1	; 0x10
							global_interupt_enable();
    42fc:	8f b7       	in	r24, 0x3f	; 63
    42fe:	80 68       	ori	r24, 0x80	; 128
    4300:	8f bf       	out	0x3f, r24	; 63
						if (MY_SENSORS[i].F_HAVE_SESSION_KEY==1)
    4302:	84 89       	ldd	r24, Z+20	; 0x14
    4304:	81 30       	cpi	r24, 0x01	; 1
    4306:	09 f0       	breq	.+2      	; 0x430a <SENSORS_BEACON+0xcc>
    4308:	43 c0       	rjmp	.+134    	; 0x4390 <SENSORS_BEACON+0x152>
						{
							NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[MY_SENSORS[i].USED_CHANNEL]);
    430a:	6f 01       	movw	r12, r30
    430c:	e3 89       	ldd	r30, Z+19	; 0x13
    430e:	f0 e0       	ldi	r31, 0x00	; 0
    4310:	ee 5e       	subi	r30, 0xEE	; 238
    4312:	fe 4f       	sbci	r31, 0xFE	; 254
    4314:	80 81       	ld	r24, Z
    4316:	0e 94 2c 10 	call	0x2058	; 0x2058 <NRF_UPDATE_USED_CHANNEL>
							/*TESTING*/
							TEST_UART_SEND_str("try BEACON: ");
    431a:	8a e7       	ldi	r24, 0x7A	; 122
    431c:	92 e0       	ldi	r25, 0x02	; 2
    431e:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE(i);
    4322:	2a 2d       	mov	r18, r10
    4324:	3b 2d       	mov	r19, r11
    4326:	44 2d       	mov	r20, r4
    4328:	55 2d       	mov	r21, r5
    432a:	66 2d       	mov	r22, r6
    432c:	77 2d       	mov	r23, r7
    432e:	88 2d       	mov	r24, r8
    4330:	99 2d       	mov	r25, r9
    4332:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_byte('\n');
    4336:	8a e0       	ldi	r24, 0x0A	; 10
    4338:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
							/*TESTING*/
							if (PROTOCOL_SEND_BEACON(MY_SENSORS[i].SENSOR_ADDRESS,MY_SENSORS[i].SENSOR_VERSION,MY_SENSORS[i].SENSOR_ADDRESS_LENGTH,MY_SENSORS[i].SESSION_KEY))
    433c:	f6 01       	movw	r30, r12
    433e:	40 81       	ld	r20, Z
    4340:	62 85       	ldd	r22, Z+10	; 0x0a
    4342:	9e 01       	movw	r18, r28
    4344:	2c 5e       	subi	r18, 0xEC	; 236
    4346:	3f 4f       	sbci	r19, 0xFF	; 255
    4348:	ce 01       	movw	r24, r28
    434a:	0e 94 87 16 	call	0x2d0e	; 0x2d0e <PROTOCOL_SEND_BEACON>
    434e:	88 23       	and	r24, r24
    4350:	a1 f0       	breq	.+40     	; 0x437a <SENSORS_BEACON+0x13c>
							{
								/*TESTING*/
								TEST_UART_SEND_str("BEACON: ");
    4352:	8e e7       	ldi	r24, 0x7E	; 126
    4354:	92 e0       	ldi	r25, 0x02	; 2
    4356:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
								TEST_UART_SEND_VALUE(i);
    435a:	2a 2d       	mov	r18, r10
    435c:	3b 2d       	mov	r19, r11
    435e:	44 2d       	mov	r20, r4
    4360:	55 2d       	mov	r21, r5
    4362:	66 2d       	mov	r22, r6
    4364:	77 2d       	mov	r23, r7
    4366:	88 2d       	mov	r24, r8
    4368:	99 2d       	mov	r25, r9
    436a:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
								TEST_UART_SEND_byte('\n');
    436e:	8a e0       	ldi	r24, 0x0A	; 10
    4370:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
								/*TESTING*/
								MY_SENSORS[i].C_FAILED_BEACON=0;
    4374:	f6 01       	movw	r30, r12
    4376:	11 8a       	std	Z+17, r1	; 0x11
    4378:	15 c0       	rjmp	.+42     	; 0x43a4 <SENSORS_BEACON+0x166>
							}
							else
							{
								MY_SENSORS[i].C_FAILED_BEACON++;
    437a:	30 9e       	mul	r3, r16
    437c:	f0 01       	movw	r30, r0
    437e:	31 9e       	mul	r3, r17
    4380:	f0 0d       	add	r31, r0
    4382:	11 24       	eor	r1, r1
    4384:	ef 51       	subi	r30, 0x1F	; 31
    4386:	fc 4f       	sbci	r31, 0xFC	; 252
    4388:	81 89       	ldd	r24, Z+17	; 0x11
    438a:	8f 5f       	subi	r24, 0xFF	; 255
    438c:	81 8b       	std	Z+17, r24	; 0x11
    438e:	0a c0       	rjmp	.+20     	; 0x43a4 <SENSORS_BEACON+0x166>
							}
						}
						else
						{
							MY_SENSORS[i].C_FAILED_BEACON++;
    4390:	30 9e       	mul	r3, r16
    4392:	f0 01       	movw	r30, r0
    4394:	31 9e       	mul	r3, r17
    4396:	f0 0d       	add	r31, r0
    4398:	11 24       	eor	r1, r1
    439a:	ef 51       	subi	r30, 0x1F	; 31
    439c:	fc 4f       	sbci	r31, 0xFC	; 252
    439e:	81 89       	ldd	r24, Z+17	; 0x11
    43a0:	8f 5f       	subi	r24, 0xFF	; 255
    43a2:	81 8b       	std	Z+17, r24	; 0x11
						}
						
						
						if (MY_SENSORS[i].C_FAILED_BEACON==MAX_FAILED_BEACON_COUNTER)
    43a4:	30 9e       	mul	r3, r16
    43a6:	f0 01       	movw	r30, r0
    43a8:	31 9e       	mul	r3, r17
    43aa:	f0 0d       	add	r31, r0
    43ac:	11 24       	eor	r1, r1
    43ae:	ef 51       	subi	r30, 0x1F	; 31
    43b0:	fc 4f       	sbci	r31, 0xFC	; 252
    43b2:	81 89       	ldd	r24, Z+17	; 0x11
    43b4:	85 30       	cpi	r24, 0x05	; 5
    43b6:	f9 f4       	brne	.+62     	; 0x43f6 <SENSORS_BEACON+0x1b8>
						{
							/*SENSOR DISCONNECT*/
							MY_SENSORS[i].C_FAILED_BEACON=0;
    43b8:	30 9e       	mul	r3, r16
    43ba:	f0 01       	movw	r30, r0
    43bc:	31 9e       	mul	r3, r17
    43be:	f0 0d       	add	r31, r0
    43c0:	11 24       	eor	r1, r1
    43c2:	ef 51       	subi	r30, 0x1F	; 31
    43c4:	fc 4f       	sbci	r31, 0xFC	; 252
    43c6:	11 8a       	std	Z+17, r1	; 0x11
							MY_SENSORS[i].F_CONNECTED=0;
    43c8:	16 86       	std	Z+14, r1	; 0x0e
							MY_SENSORS[i].USED_CHANNEL=0;
    43ca:	13 8a       	std	Z+19, r1	; 0x13
							MY_SENSORS[i].C_T_BEACON=0;
    43cc:	10 8a       	std	Z+16, r1	; 0x10
							MY_SENSORS[i].C_T_TRY_CONNECTED=0;
    43ce:	17 86       	std	Z+15, r1	; 0x0f
							MY_SENSORS[i].C_T_SESSION_KEY=0;
    43d0:	12 8a       	std	Z+18, r1	; 0x12
							MY_SENSORS[i].F_HAVE_SESSION_KEY=0;
    43d2:	14 8a       	std	Z+20, r1	; 0x14
							/*TESTING*/
							TEST_UART_SEND_str("SENSOR DISCONNECTED ");
    43d4:	87 e8       	ldi	r24, 0x87	; 135
    43d6:	92 e0       	ldi	r25, 0x02	; 2
    43d8:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE(i);
    43dc:	2a 2d       	mov	r18, r10
    43de:	3b 2d       	mov	r19, r11
    43e0:	44 2d       	mov	r20, r4
    43e2:	55 2d       	mov	r21, r5
    43e4:	66 2d       	mov	r22, r6
    43e6:	77 2d       	mov	r23, r7
    43e8:	88 2d       	mov	r24, r8
    43ea:	99 2d       	mov	r25, r9
    43ec:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_byte('\n');
    43f0:	8a e0       	ldi	r24, 0x0A	; 10
    43f2:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
    43f6:	2a 2d       	mov	r18, r10
    43f8:	3b 2d       	mov	r19, r11
    43fa:	44 2d       	mov	r20, r4
    43fc:	55 2d       	mov	r21, r5
    43fe:	66 2d       	mov	r22, r6
    4400:	77 2d       	mov	r23, r7
    4402:	88 2d       	mov	r24, r8
    4404:	99 2d       	mov	r25, r9
    4406:	a1 e0       	ldi	r26, 0x01	; 1
    4408:	0e 94 11 34 	call	0x6822	; 0x6822 <__adddi3_s8>
    440c:	a2 2e       	mov	r10, r18
    440e:	b3 2e       	mov	r11, r19
    4410:	44 2e       	mov	r4, r20
    4412:	55 2e       	mov	r5, r21
    4414:	66 2e       	mov	r6, r22
    4416:	77 2e       	mov	r7, r23
    4418:	88 2e       	mov	r8, r24
    441a:	99 2e       	mov	r9, r25
    441c:	69 96       	adiw	r28, 0x19	; 25
}

void SENSORS_BEACON()
{
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
    441e:	ce 15       	cp	r28, r14
    4420:	df 05       	cpc	r29, r15
    4422:	09 f0       	breq	.+2      	; 0x4426 <SENSORS_BEACON+0x1e8>
    4424:	31 cf       	rjmp	.-414    	; 0x4288 <SENSORS_BEACON+0x4a>
					}
				}
			}
		}
	}
}
    4426:	df 91       	pop	r29
    4428:	cf 91       	pop	r28
    442a:	1f 91       	pop	r17
    442c:	0f 91       	pop	r16
    442e:	ff 90       	pop	r15
    4430:	ef 90       	pop	r14
    4432:	df 90       	pop	r13
    4434:	cf 90       	pop	r12
    4436:	bf 90       	pop	r11
    4438:	af 90       	pop	r10
    443a:	9f 90       	pop	r9
    443c:	8f 90       	pop	r8
    443e:	7f 90       	pop	r7
    4440:	6f 90       	pop	r6
    4442:	5f 90       	pop	r5
    4444:	4f 90       	pop	r4
    4446:	3f 90       	pop	r3
    4448:	08 95       	ret

0000444a <SENSORS_NEW_SESSIONS>:
void SENSORS_NEW_SESSIONS()
{
    444a:	2f 92       	push	r2
    444c:	3f 92       	push	r3
    444e:	4f 92       	push	r4
    4450:	5f 92       	push	r5
    4452:	6f 92       	push	r6
    4454:	7f 92       	push	r7
    4456:	8f 92       	push	r8
    4458:	9f 92       	push	r9
    445a:	af 92       	push	r10
    445c:	bf 92       	push	r11
    445e:	cf 92       	push	r12
    4460:	df 92       	push	r13
    4462:	ef 92       	push	r14
    4464:	ff 92       	push	r15
    4466:	0f 93       	push	r16
    4468:	1f 93       	push	r17
    446a:	cf 93       	push	r28
    446c:	df 93       	push	r29
    446e:	00 d0       	rcall	.+0      	; 0x4470 <SENSORS_NEW_SESSIONS+0x26>
    4470:	00 d0       	rcall	.+0      	; 0x4472 <SENSORS_NEW_SESSIONS+0x28>
    4472:	cd b7       	in	r28, 0x3d	; 61
    4474:	de b7       	in	r29, 0x3e	; 62
    4476:	0f 2e       	mov	r0, r31
    4478:	f2 ee       	ldi	r31, 0xE2	; 226
    447a:	ef 2e       	mov	r14, r31
    447c:	f3 e0       	ldi	r31, 0x03	; 3
    447e:	ff 2e       	mov	r15, r31
    4480:	f0 2d       	mov	r31, r0
    4482:	0f 2e       	mov	r0, r31
    4484:	fc ed       	ldi	r31, 0xDC	; 220
    4486:	af 2e       	mov	r10, r31
    4488:	f4 e0       	ldi	r31, 0x04	; 4
    448a:	bf 2e       	mov	r11, r31
    448c:	f0 2d       	mov	r31, r0
    448e:	81 2c       	mov	r8, r1
    4490:	91 2c       	mov	r9, r1
    4492:	21 2c       	mov	r2, r1
    4494:	31 2c       	mov	r3, r1
    4496:	41 2c       	mov	r4, r1
    4498:	51 2c       	mov	r5, r1
    449a:	61 2c       	mov	r6, r1
    449c:	71 2c       	mov	r7, r1
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
	{
		if (MY_SENSORS[i].SENSOR_OCCUBIED==1)
    449e:	88 2d       	mov	r24, r8
    44a0:	99 2d       	mov	r25, r9
    44a2:	6c 01       	movw	r12, r24
    44a4:	29 e1       	ldi	r18, 0x19	; 25
    44a6:	28 9f       	mul	r18, r24
    44a8:	f0 01       	movw	r30, r0
    44aa:	29 9f       	mul	r18, r25
    44ac:	f0 0d       	add	r31, r0
    44ae:	11 24       	eor	r1, r1
    44b0:	ef 51       	subi	r30, 0x1F	; 31
    44b2:	fc 4f       	sbci	r31, 0xFC	; 252
    44b4:	25 85       	ldd	r18, Z+13	; 0x0d
    44b6:	21 30       	cpi	r18, 0x01	; 1
    44b8:	09 f0       	breq	.+2      	; 0x44bc <SENSORS_NEW_SESSIONS+0x72>
    44ba:	a7 c0       	rjmp	.+334    	; 0x460a <SENSORS_NEW_SESSIONS+0x1c0>
		{
			if (MY_SENSORS[i].SENSOR_STATE==1)
    44bc:	a9 e1       	ldi	r26, 0x19	; 25
    44be:	a8 9f       	mul	r26, r24
    44c0:	f0 01       	movw	r30, r0
    44c2:	a9 9f       	mul	r26, r25
    44c4:	f0 0d       	add	r31, r0
    44c6:	11 24       	eor	r1, r1
    44c8:	ef 51       	subi	r30, 0x1F	; 31
    44ca:	fc 4f       	sbci	r31, 0xFC	; 252
    44cc:	84 85       	ldd	r24, Z+12	; 0x0c
    44ce:	81 30       	cpi	r24, 0x01	; 1
    44d0:	09 f0       	breq	.+2      	; 0x44d4 <SENSORS_NEW_SESSIONS+0x8a>
    44d2:	9b c0       	rjmp	.+310    	; 0x460a <SENSORS_NEW_SESSIONS+0x1c0>
			{
				if (MY_SENSORS[i].F_CONNECTED==1)
    44d4:	ac 9d       	mul	r26, r12
    44d6:	f0 01       	movw	r30, r0
    44d8:	ad 9d       	mul	r26, r13
    44da:	f0 0d       	add	r31, r0
    44dc:	11 24       	eor	r1, r1
    44de:	ef 51       	subi	r30, 0x1F	; 31
    44e0:	fc 4f       	sbci	r31, 0xFC	; 252
    44e2:	86 85       	ldd	r24, Z+14	; 0x0e
    44e4:	81 30       	cpi	r24, 0x01	; 1
    44e6:	09 f0       	breq	.+2      	; 0x44ea <SENSORS_NEW_SESSIONS+0xa0>
    44e8:	90 c0       	rjmp	.+288    	; 0x460a <SENSORS_NEW_SESSIONS+0x1c0>
				{
					if ((MY_SENSORS[i].F_HAVE_SESSION_KEY==0)||(MY_SENSORS[i].C_T_SESSION_KEY==MAX_SESSION_KEY_TIMER_COUNT))
    44ea:	ac 9d       	mul	r26, r12
    44ec:	f0 01       	movw	r30, r0
    44ee:	ad 9d       	mul	r26, r13
    44f0:	f0 0d       	add	r31, r0
    44f2:	11 24       	eor	r1, r1
    44f4:	ef 51       	subi	r30, 0x1F	; 31
    44f6:	fc 4f       	sbci	r31, 0xFC	; 252
    44f8:	84 89       	ldd	r24, Z+20	; 0x14
    44fa:	88 23       	and	r24, r24
    44fc:	59 f0       	breq	.+22     	; 0x4514 <SENSORS_NEW_SESSIONS+0xca>
    44fe:	ac 9d       	mul	r26, r12
    4500:	f0 01       	movw	r30, r0
    4502:	ad 9d       	mul	r26, r13
    4504:	f0 0d       	add	r31, r0
    4506:	11 24       	eor	r1, r1
    4508:	ef 51       	subi	r30, 0x1F	; 31
    450a:	fc 4f       	sbci	r31, 0xFC	; 252
    450c:	82 89       	ldd	r24, Z+18	; 0x12
    450e:	88 32       	cpi	r24, 0x28	; 40
    4510:	09 f0       	breq	.+2      	; 0x4514 <SENSORS_NEW_SESSIONS+0xca>
    4512:	7b c0       	rjmp	.+246    	; 0x460a <SENSORS_NEW_SESSIONS+0x1c0>
					{
						NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[MY_SENSORS[i].USED_CHANNEL]);
    4514:	b9 e1       	ldi	r27, 0x19	; 25
    4516:	bc 9d       	mul	r27, r12
    4518:	80 01       	movw	r16, r0
    451a:	bd 9d       	mul	r27, r13
    451c:	10 0d       	add	r17, r0
    451e:	11 24       	eor	r1, r1
    4520:	0f 51       	subi	r16, 0x1F	; 31
    4522:	1c 4f       	sbci	r17, 0xFC	; 252
    4524:	d8 01       	movw	r26, r16
    4526:	53 96       	adiw	r26, 0x13	; 19
    4528:	ec 91       	ld	r30, X
    452a:	f0 e0       	ldi	r31, 0x00	; 0
    452c:	ee 5e       	subi	r30, 0xEE	; 238
    452e:	fe 4f       	sbci	r31, 0xFE	; 254
    4530:	80 81       	ld	r24, Z
    4532:	0e 94 2c 10 	call	0x2058	; 0x2058 <NRF_UPDATE_USED_CHANNEL>
						volatile unsigned short SESSION_KEY_BUFFER;
						volatile unsigned char SESSION_KEY_ARRAY[2];
						SESSION_KEY_BUFFER=GENNERATE_RANDOM_NUMBER();
    4536:	45 d9       	rcall	.-3446   	; 0x37c2 <GENNERATE_RANDOM_NUMBER>
    4538:	9c 83       	std	Y+4, r25	; 0x04
    453a:	8b 83       	std	Y+3, r24	; 0x03
						SESSION_KEY_ARRAY[0]=SESSION_KEY_BUFFER>>8;
    453c:	8b 81       	ldd	r24, Y+3	; 0x03
    453e:	9c 81       	ldd	r25, Y+4	; 0x04
    4540:	99 83       	std	Y+1, r25	; 0x01
						SESSION_KEY_ARRAY[1]=SESSION_KEY_BUFFER&0X00FF;
    4542:	8b 81       	ldd	r24, Y+3	; 0x03
    4544:	9c 81       	ldd	r25, Y+4	; 0x04
    4546:	8a 83       	std	Y+2, r24	; 0x02
						/*TESTING*/
						TEST_UART_SEND_str("try new session: ");
    4548:	8c e9       	ldi	r24, 0x9C	; 156
    454a:	92 e0       	ldi	r25, 0x02	; 2
    454c:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
						TEST_UART_SEND_VALUE(i);
    4550:	28 2d       	mov	r18, r8
    4552:	39 2d       	mov	r19, r9
    4554:	42 2d       	mov	r20, r2
    4556:	53 2d       	mov	r21, r3
    4558:	64 2d       	mov	r22, r4
    455a:	75 2d       	mov	r23, r5
    455c:	86 2d       	mov	r24, r6
    455e:	97 2d       	mov	r25, r7
    4560:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
						TEST_UART_SEND_byte('\n');
    4564:	8a e0       	ldi	r24, 0x0A	; 10
    4566:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
						/*TESTING*/
						
						if (PROTOCOL_SEND_SESSION_KEY(MY_SENSORS[i].SENSOR_ADDRESS,MY_SENSORS[i].SENSOR_VERSION,MY_SENSORS[i].SENSOR_ADDRESS_LENGTH,SESSION_KEY_ARRAY,MY_SENSORS[i].SENSOR_PASSWORD))
    456a:	f8 01       	movw	r30, r16
    456c:	40 81       	ld	r20, Z
    456e:	62 85       	ldd	r22, Z+10	; 0x0a
    4570:	87 01       	movw	r16, r14
    4572:	0b 5f       	subi	r16, 0xFB	; 251
    4574:	1f 4f       	sbci	r17, 0xFF	; 255
    4576:	9e 01       	movw	r18, r28
    4578:	2f 5f       	subi	r18, 0xFF	; 255
    457a:	3f 4f       	sbci	r19, 0xFF	; 255
    457c:	c7 01       	movw	r24, r14
    457e:	0e 94 2d 17 	call	0x2e5a	; 0x2e5a <PROTOCOL_SEND_SESSION_KEY>
    4582:	88 23       	and	r24, r24
    4584:	09 f4       	brne	.+2      	; 0x4588 <SENSORS_NEW_SESSIONS+0x13e>
    4586:	41 c0       	rjmp	.+130    	; 0x460a <SENSORS_NEW_SESSIONS+0x1c0>
						{
							
						
							
							MY_SENSORS[i].F_HAVE_SESSION_KEY=1;
    4588:	f9 e1       	ldi	r31, 0x19	; 25
    458a:	fc 9d       	mul	r31, r12
    458c:	80 01       	movw	r16, r0
    458e:	fd 9d       	mul	r31, r13
    4590:	10 0d       	add	r17, r0
    4592:	11 24       	eor	r1, r1
    4594:	0f 51       	subi	r16, 0x1F	; 31
    4596:	1c 4f       	sbci	r17, 0xFC	; 252
    4598:	e1 e0       	ldi	r30, 0x01	; 1
    459a:	d8 01       	movw	r26, r16
    459c:	54 96       	adiw	r26, 0x14	; 20
    459e:	ec 93       	st	X, r30
    45a0:	54 97       	sbiw	r26, 0x14	; 20
							MY_SENSORS[i].C_T_SESSION_KEY=0;
    45a2:	52 96       	adiw	r26, 0x12	; 18
    45a4:	1c 92       	st	X, r1
    45a6:	52 97       	sbiw	r26, 0x12	; 18
							MY_SENSORS[i].SESSION_KEY[0]=SESSION_KEY_ARRAY[0];
    45a8:	89 81       	ldd	r24, Y+1	; 0x01
    45aa:	55 96       	adiw	r26, 0x15	; 21
    45ac:	8c 93       	st	X, r24
    45ae:	55 97       	sbiw	r26, 0x15	; 21
							MY_SENSORS[i].SESSION_KEY[1]=SESSION_KEY_ARRAY[1];
    45b0:	8a 81       	ldd	r24, Y+2	; 0x02
    45b2:	56 96       	adiw	r26, 0x16	; 22
    45b4:	8c 93       	st	X, r24
    45b6:	56 97       	sbiw	r26, 0x16	; 22
							MY_SENSORS[i].C_FAILED_BEACON=0;
    45b8:	51 96       	adiw	r26, 0x11	; 17
    45ba:	1c 92       	st	X, r1
							/*TESTING*/
							TEST_UART_SEND_str("SESSION: ");
    45bc:	8e ea       	ldi	r24, 0xAE	; 174
    45be:	92 e0       	ldi	r25, 0x02	; 2
    45c0:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE((unsigned short)((MY_SENSORS[i].SESSION_KEY[0]<<8)|MY_SENSORS[i].SESSION_KEY[1]));
    45c4:	d8 01       	movw	r26, r16
    45c6:	55 96       	adiw	r26, 0x15	; 21
    45c8:	8c 91       	ld	r24, X
    45ca:	55 97       	sbiw	r26, 0x15	; 21
    45cc:	56 96       	adiw	r26, 0x16	; 22
    45ce:	4c 91       	ld	r20, X
    45d0:	50 e0       	ldi	r21, 0x00	; 0
    45d2:	58 2b       	or	r21, r24
    45d4:	24 2f       	mov	r18, r20
    45d6:	35 2f       	mov	r19, r21
    45d8:	40 e0       	ldi	r20, 0x00	; 0
    45da:	50 e0       	ldi	r21, 0x00	; 0
    45dc:	60 e0       	ldi	r22, 0x00	; 0
    45de:	70 e0       	ldi	r23, 0x00	; 0
    45e0:	80 e0       	ldi	r24, 0x00	; 0
    45e2:	90 e0       	ldi	r25, 0x00	; 0
    45e4:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_str(" NUM: ");
    45e8:	88 eb       	ldi	r24, 0xB8	; 184
    45ea:	92 e0       	ldi	r25, 0x02	; 2
    45ec:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE(i);
    45f0:	28 2d       	mov	r18, r8
    45f2:	39 2d       	mov	r19, r9
    45f4:	42 2d       	mov	r20, r2
    45f6:	53 2d       	mov	r21, r3
    45f8:	64 2d       	mov	r22, r4
    45fa:	75 2d       	mov	r23, r5
    45fc:	86 2d       	mov	r24, r6
    45fe:	97 2d       	mov	r25, r7
    4600:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_byte('\n');
    4604:	8a e0       	ldi	r24, 0x0A	; 10
    4606:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
    460a:	28 2d       	mov	r18, r8
    460c:	39 2d       	mov	r19, r9
    460e:	42 2d       	mov	r20, r2
    4610:	53 2d       	mov	r21, r3
    4612:	64 2d       	mov	r22, r4
    4614:	75 2d       	mov	r23, r5
    4616:	86 2d       	mov	r24, r6
    4618:	97 2d       	mov	r25, r7
    461a:	a1 e0       	ldi	r26, 0x01	; 1
    461c:	0e 94 11 34 	call	0x6822	; 0x6822 <__adddi3_s8>
    4620:	82 2e       	mov	r8, r18
    4622:	93 2e       	mov	r9, r19
    4624:	24 2e       	mov	r2, r20
    4626:	35 2e       	mov	r3, r21
    4628:	46 2e       	mov	r4, r22
    462a:	57 2e       	mov	r5, r23
    462c:	68 2e       	mov	r6, r24
    462e:	79 2e       	mov	r7, r25
    4630:	b9 e1       	ldi	r27, 0x19	; 25
    4632:	eb 0e       	add	r14, r27
    4634:	f1 1c       	adc	r15, r1
	}
}
void SENSORS_NEW_SESSIONS()
{
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
    4636:	ea 14       	cp	r14, r10
    4638:	fb 04       	cpc	r15, r11
    463a:	09 f0       	breq	.+2      	; 0x463e <SENSORS_NEW_SESSIONS+0x1f4>
    463c:	30 cf       	rjmp	.-416    	; 0x449e <SENSORS_NEW_SESSIONS+0x54>
	}
					
					
					
					
}
    463e:	0f 90       	pop	r0
    4640:	0f 90       	pop	r0
    4642:	0f 90       	pop	r0
    4644:	0f 90       	pop	r0
    4646:	df 91       	pop	r29
    4648:	cf 91       	pop	r28
    464a:	1f 91       	pop	r17
    464c:	0f 91       	pop	r16
    464e:	ff 90       	pop	r15
    4650:	ef 90       	pop	r14
    4652:	df 90       	pop	r13
    4654:	cf 90       	pop	r12
    4656:	bf 90       	pop	r11
    4658:	af 90       	pop	r10
    465a:	9f 90       	pop	r9
    465c:	8f 90       	pop	r8
    465e:	7f 90       	pop	r7
    4660:	6f 90       	pop	r6
    4662:	5f 90       	pop	r5
    4664:	4f 90       	pop	r4
    4666:	3f 90       	pop	r3
    4668:	2f 90       	pop	r2
    466a:	08 95       	ret

0000466c <SENSORS_CHANGE_CHANNEL>:

void SENSORS_CHANGE_CHANNEL()
{
    466c:	2f 92       	push	r2
    466e:	3f 92       	push	r3
    4670:	4f 92       	push	r4
    4672:	5f 92       	push	r5
    4674:	6f 92       	push	r6
    4676:	7f 92       	push	r7
    4678:	8f 92       	push	r8
    467a:	9f 92       	push	r9
    467c:	af 92       	push	r10
    467e:	bf 92       	push	r11
    4680:	cf 92       	push	r12
    4682:	df 92       	push	r13
    4684:	ef 92       	push	r14
    4686:	ff 92       	push	r15
    4688:	0f 93       	push	r16
    468a:	1f 93       	push	r17
    468c:	cf 93       	push	r28
    468e:	df 93       	push	r29
    4690:	00 d0       	rcall	.+0      	; 0x4692 <SENSORS_CHANGE_CHANNEL+0x26>
    4692:	00 d0       	rcall	.+0      	; 0x4694 <SENSORS_CHANGE_CHANNEL+0x28>
    4694:	cd b7       	in	r28, 0x3d	; 61
    4696:	de b7       	in	r29, 0x3e	; 62
    4698:	22 ee       	ldi	r18, 0xE2	; 226
    469a:	33 e0       	ldi	r19, 0x03	; 3
    469c:	3c 83       	std	Y+4, r19	; 0x04
    469e:	2b 83       	std	Y+3, r18	; 0x03
    46a0:	0f 2e       	mov	r0, r31
    46a2:	fc ed       	ldi	r31, 0xDC	; 220
    46a4:	cf 2e       	mov	r12, r31
    46a6:	f4 e0       	ldi	r31, 0x04	; 4
    46a8:	df 2e       	mov	r13, r31
    46aa:	f0 2d       	mov	r31, r0
    46ac:	91 2c       	mov	r9, r1
    46ae:	10 e0       	ldi	r17, 0x00	; 0
    46b0:	31 2c       	mov	r3, r1
    46b2:	41 2c       	mov	r4, r1
    46b4:	51 2c       	mov	r5, r1
    46b6:	61 2c       	mov	r6, r1
    46b8:	71 2c       	mov	r7, r1
    46ba:	81 2c       	mov	r8, r1
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
	{
		if (MY_SENSORS[i].SENSOR_OCCUBIED==1)
    46bc:	0f 2e       	mov	r0, r31
    46be:	f9 e1       	ldi	r31, 0x19	; 25
    46c0:	2f 2e       	mov	r2, r31
    46c2:	f0 2d       	mov	r31, r0
				{
					if ((MY_SENSORS[i].F_HAVE_SESSION_KEY==1))
					{
						if ((MY_SENSORS[i].USED_CHANNEL==0))/*CONTROL CHANNEL*/
						{
							NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[0]);
    46c4:	0f 2e       	mov	r0, r31
    46c6:	f2 e1       	ldi	r31, 0x12	; 18
    46c8:	af 2e       	mov	r10, r31
    46ca:	f1 e0       	ldi	r31, 0x01	; 1
    46cc:	bf 2e       	mov	r11, r31
    46ce:	f0 2d       	mov	r31, r0
void SENSORS_CHANGE_CHANNEL()
{
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
	{
		if (MY_SENSORS[i].SENSOR_OCCUBIED==1)
    46d0:	89 2d       	mov	r24, r9
    46d2:	91 2f       	mov	r25, r17
    46d4:	7c 01       	movw	r14, r24
    46d6:	28 9e       	mul	r2, r24
    46d8:	f0 01       	movw	r30, r0
    46da:	29 9e       	mul	r2, r25
    46dc:	f0 0d       	add	r31, r0
    46de:	11 24       	eor	r1, r1
    46e0:	ef 51       	subi	r30, 0x1F	; 31
    46e2:	fc 4f       	sbci	r31, 0xFC	; 252
    46e4:	25 85       	ldd	r18, Z+13	; 0x0d
    46e6:	21 30       	cpi	r18, 0x01	; 1
    46e8:	09 f0       	breq	.+2      	; 0x46ec <SENSORS_CHANGE_CHANNEL+0x80>
    46ea:	a2 c0       	rjmp	.+324    	; 0x4830 <SENSORS_CHANGE_CHANNEL+0x1c4>
		{
			if (MY_SENSORS[i].SENSOR_STATE==1)
    46ec:	28 9e       	mul	r2, r24
    46ee:	f0 01       	movw	r30, r0
    46f0:	29 9e       	mul	r2, r25
    46f2:	f0 0d       	add	r31, r0
    46f4:	11 24       	eor	r1, r1
    46f6:	ef 51       	subi	r30, 0x1F	; 31
    46f8:	fc 4f       	sbci	r31, 0xFC	; 252
    46fa:	84 85       	ldd	r24, Z+12	; 0x0c
    46fc:	81 30       	cpi	r24, 0x01	; 1
    46fe:	09 f0       	breq	.+2      	; 0x4702 <SENSORS_CHANGE_CHANNEL+0x96>
    4700:	97 c0       	rjmp	.+302    	; 0x4830 <SENSORS_CHANGE_CHANNEL+0x1c4>
			{
				if (MY_SENSORS[i].F_CONNECTED==1)
    4702:	2e 9c       	mul	r2, r14
    4704:	f0 01       	movw	r30, r0
    4706:	2f 9c       	mul	r2, r15
    4708:	f0 0d       	add	r31, r0
    470a:	11 24       	eor	r1, r1
    470c:	ef 51       	subi	r30, 0x1F	; 31
    470e:	fc 4f       	sbci	r31, 0xFC	; 252
    4710:	86 85       	ldd	r24, Z+14	; 0x0e
    4712:	81 30       	cpi	r24, 0x01	; 1
    4714:	09 f0       	breq	.+2      	; 0x4718 <SENSORS_CHANGE_CHANNEL+0xac>
    4716:	8c c0       	rjmp	.+280    	; 0x4830 <SENSORS_CHANGE_CHANNEL+0x1c4>
				{
					if ((MY_SENSORS[i].F_HAVE_SESSION_KEY==1))
    4718:	2e 9c       	mul	r2, r14
    471a:	f0 01       	movw	r30, r0
    471c:	2f 9c       	mul	r2, r15
    471e:	f0 0d       	add	r31, r0
    4720:	11 24       	eor	r1, r1
    4722:	ef 51       	subi	r30, 0x1F	; 31
    4724:	fc 4f       	sbci	r31, 0xFC	; 252
    4726:	84 89       	ldd	r24, Z+20	; 0x14
    4728:	81 30       	cpi	r24, 0x01	; 1
    472a:	09 f0       	breq	.+2      	; 0x472e <SENSORS_CHANGE_CHANNEL+0xc2>
    472c:	81 c0       	rjmp	.+258    	; 0x4830 <SENSORS_CHANGE_CHANNEL+0x1c4>
					{
						if ((MY_SENSORS[i].USED_CHANNEL==0))/*CONTROL CHANNEL*/
    472e:	2e 9c       	mul	r2, r14
    4730:	f0 01       	movw	r30, r0
    4732:	2f 9c       	mul	r2, r15
    4734:	f0 0d       	add	r31, r0
    4736:	11 24       	eor	r1, r1
    4738:	ef 51       	subi	r30, 0x1F	; 31
    473a:	fc 4f       	sbci	r31, 0xFC	; 252
    473c:	83 89       	ldd	r24, Z+19	; 0x13
    473e:	81 11       	cpse	r24, r1
    4740:	77 c0       	rjmp	.+238    	; 0x4830 <SENSORS_CHANGE_CHANNEL+0x1c4>
						{
							NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[0]);
    4742:	d5 01       	movw	r26, r10
    4744:	8c 91       	ld	r24, X
    4746:	0e 94 2c 10 	call	0x2058	; 0x2058 <NRF_UPDATE_USED_CHANNEL>
							unsigned short new_ch= GENNERATE_RANDOM_NUMBER();
    474a:	3b d8       	rcall	.-3978   	; 0x37c2 <GENNERATE_RANDOM_NUMBER>
    474c:	fc 01       	movw	r30, r24
							new_ch=(new_ch%7)+1;/*random from 1 to 7*/
    474e:	9c 01       	movw	r18, r24
    4750:	a3 e9       	ldi	r26, 0x93	; 147
    4752:	b4 e2       	ldi	r27, 0x24	; 36
    4754:	0e 94 4a 33 	call	0x6694	; 0x6694 <__umulhisi3>
    4758:	28 1b       	sub	r18, r24
    475a:	39 0b       	sbc	r19, r25
    475c:	36 95       	lsr	r19
    475e:	27 95       	ror	r18
    4760:	82 0f       	add	r24, r18
    4762:	93 1f       	adc	r25, r19
    4764:	ac 01       	movw	r20, r24
    4766:	56 95       	lsr	r21
    4768:	47 95       	ror	r20
    476a:	56 95       	lsr	r21
    476c:	47 95       	ror	r20
    476e:	ca 01       	movw	r24, r20
    4770:	88 0f       	add	r24, r24
    4772:	99 1f       	adc	r25, r25
    4774:	88 0f       	add	r24, r24
    4776:	99 1f       	adc	r25, r25
    4778:	88 0f       	add	r24, r24
    477a:	99 1f       	adc	r25, r25
    477c:	84 1b       	sub	r24, r20
    477e:	95 0b       	sbc	r25, r21
    4780:	af 01       	movw	r20, r30
    4782:	48 1b       	sub	r20, r24
    4784:	59 0b       	sbc	r21, r25
    4786:	fa 01       	movw	r30, r20
    4788:	31 96       	adiw	r30, 0x01	; 1
    478a:	fa 83       	std	Y+2, r31	; 0x02
    478c:	e9 83       	std	Y+1, r30	; 0x01
							/*TESTING*/
							TEST_UART_SEND_str("try channel: ");
    478e:	8f eb       	ldi	r24, 0xBF	; 191
    4790:	92 e0       	ldi	r25, 0x02	; 2
    4792:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE(i);
    4796:	29 2d       	mov	r18, r9
    4798:	31 2f       	mov	r19, r17
    479a:	43 2d       	mov	r20, r3
    479c:	54 2d       	mov	r21, r4
    479e:	65 2d       	mov	r22, r5
    47a0:	76 2d       	mov	r23, r6
    47a2:	87 2d       	mov	r24, r7
    47a4:	98 2d       	mov	r25, r8
    47a6:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_byte('\n');
    47aa:	8a e0       	ldi	r24, 0x0A	; 10
    47ac:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
							/*TESTING*/
							if (PROTOCOL_CHANGE_CHANNEL(MY_SENSORS[i].SENSOR_ADDRESS,MY_SENSORS[i].SENSOR_VERSION,MY_SENSORS[i].SENSOR_ADDRESS_LENGTH,MY_SENSORS[i].SESSION_KEY,(unsigned char)new_ch))
    47b0:	2e 9c       	mul	r2, r14
    47b2:	f0 01       	movw	r30, r0
    47b4:	2f 9c       	mul	r2, r15
    47b6:	f0 0d       	add	r31, r0
    47b8:	11 24       	eor	r1, r1
    47ba:	ef 51       	subi	r30, 0x1F	; 31
    47bc:	fc 4f       	sbci	r31, 0xFC	; 252
    47be:	40 81       	ld	r20, Z
    47c0:	62 85       	ldd	r22, Z+10	; 0x0a
    47c2:	09 81       	ldd	r16, Y+1	; 0x01
    47c4:	2b 81       	ldd	r18, Y+3	; 0x03
    47c6:	3c 81       	ldd	r19, Y+4	; 0x04
    47c8:	2c 5e       	subi	r18, 0xEC	; 236
    47ca:	3f 4f       	sbci	r19, 0xFF	; 255
    47cc:	8b 81       	ldd	r24, Y+3	; 0x03
    47ce:	9c 81       	ldd	r25, Y+4	; 0x04
    47d0:	0e 94 eb 17 	call	0x2fd6	; 0x2fd6 <PROTOCOL_CHANGE_CHANNEL>
    47d4:	88 23       	and	r24, r24
    47d6:	61 f1       	breq	.+88     	; 0x4830 <SENSORS_CHANGE_CHANNEL+0x1c4>
							{
								
								MY_SENSORS[i].USED_CHANNEL=(unsigned char)new_ch;
    47d8:	2e 9c       	mul	r2, r14
    47da:	f0 01       	movw	r30, r0
    47dc:	2f 9c       	mul	r2, r15
    47de:	f0 0d       	add	r31, r0
    47e0:	11 24       	eor	r1, r1
    47e2:	ef 51       	subi	r30, 0x1F	; 31
    47e4:	fc 4f       	sbci	r31, 0xFC	; 252
    47e6:	29 81       	ldd	r18, Y+1	; 0x01
    47e8:	23 8b       	std	Z+19, r18	; 0x13
								MY_SENSORS[i].C_FAILED_BEACON=0;
    47ea:	11 8a       	std	Z+17, r1	; 0x11
								
								/*TESTING*/
								TEST_UART_SEND_str("CHANNEL: ");
    47ec:	8d ec       	ldi	r24, 0xCD	; 205
    47ee:	92 e0       	ldi	r25, 0x02	; 2
    47f0:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
								TEST_UART_SEND_VALUE(new_ch);
    47f4:	e9 81       	ldd	r30, Y+1	; 0x01
    47f6:	fa 81       	ldd	r31, Y+2	; 0x02
    47f8:	af 01       	movw	r20, r30
    47fa:	2e 2f       	mov	r18, r30
    47fc:	35 2f       	mov	r19, r21
    47fe:	40 e0       	ldi	r20, 0x00	; 0
    4800:	50 e0       	ldi	r21, 0x00	; 0
    4802:	60 e0       	ldi	r22, 0x00	; 0
    4804:	70 e0       	ldi	r23, 0x00	; 0
    4806:	80 e0       	ldi	r24, 0x00	; 0
    4808:	90 e0       	ldi	r25, 0x00	; 0
    480a:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
								TEST_UART_SEND_str(" NUM: ");
    480e:	88 eb       	ldi	r24, 0xB8	; 184
    4810:	92 e0       	ldi	r25, 0x02	; 2
    4812:	0e 94 06 2f 	call	0x5e0c	; 0x5e0c <TEST_UART_SEND_str>
								TEST_UART_SEND_VALUE(i);
    4816:	29 2d       	mov	r18, r9
    4818:	31 2f       	mov	r19, r17
    481a:	43 2d       	mov	r20, r3
    481c:	54 2d       	mov	r21, r4
    481e:	65 2d       	mov	r22, r5
    4820:	76 2d       	mov	r23, r6
    4822:	87 2d       	mov	r24, r7
    4824:	98 2d       	mov	r25, r8
    4826:	0e 94 11 2f 	call	0x5e22	; 0x5e22 <TEST_UART_SEND_VALUE>
								TEST_UART_SEND_byte('\n');
    482a:	8a e0       	ldi	r24, 0x0A	; 10
    482c:	0e 94 07 2f 	call	0x5e0e	; 0x5e0e <TEST_UART_SEND_byte>
    4830:	29 2d       	mov	r18, r9
    4832:	31 2f       	mov	r19, r17
    4834:	43 2d       	mov	r20, r3
    4836:	54 2d       	mov	r21, r4
    4838:	65 2d       	mov	r22, r5
    483a:	76 2d       	mov	r23, r6
    483c:	87 2d       	mov	r24, r7
    483e:	98 2d       	mov	r25, r8
    4840:	a1 e0       	ldi	r26, 0x01	; 1
    4842:	0e 94 11 34 	call	0x6822	; 0x6822 <__adddi3_s8>
    4846:	92 2e       	mov	r9, r18
    4848:	13 2f       	mov	r17, r19
    484a:	34 2e       	mov	r3, r20
    484c:	45 2e       	mov	r4, r21
    484e:	56 2e       	mov	r5, r22
    4850:	67 2e       	mov	r6, r23
    4852:	78 2e       	mov	r7, r24
    4854:	89 2e       	mov	r8, r25
    4856:	2b 81       	ldd	r18, Y+3	; 0x03
    4858:	3c 81       	ldd	r19, Y+4	; 0x04
    485a:	27 5e       	subi	r18, 0xE7	; 231
    485c:	3f 4f       	sbci	r19, 0xFF	; 255
    485e:	3c 83       	std	Y+4, r19	; 0x04
    4860:	2b 83       	std	Y+3, r18	; 0x03
}

void SENSORS_CHANGE_CHANNEL()
{
	unsigned char i;
	for (i=0;i<NUMBER_OF_SENSORS_IN_DATA_BASE;i++)
    4862:	2c 15       	cp	r18, r12
    4864:	3d 05       	cpc	r19, r13
    4866:	09 f0       	breq	.+2      	; 0x486a <SENSORS_CHANGE_CHANNEL+0x1fe>
    4868:	33 cf       	rjmp	.-410    	; 0x46d0 <SENSORS_CHANGE_CHANNEL+0x64>
					}
				}
			}
		}
	}
}
    486a:	0f 90       	pop	r0
    486c:	0f 90       	pop	r0
    486e:	0f 90       	pop	r0
    4870:	0f 90       	pop	r0
    4872:	df 91       	pop	r29
    4874:	cf 91       	pop	r28
    4876:	1f 91       	pop	r17
    4878:	0f 91       	pop	r16
    487a:	ff 90       	pop	r15
    487c:	ef 90       	pop	r14
    487e:	df 90       	pop	r13
    4880:	cf 90       	pop	r12
    4882:	bf 90       	pop	r11
    4884:	af 90       	pop	r10
    4886:	9f 90       	pop	r9
    4888:	8f 90       	pop	r8
    488a:	7f 90       	pop	r7
    488c:	6f 90       	pop	r6
    488e:	5f 90       	pop	r5
    4890:	4f 90       	pop	r4
    4892:	3f 90       	pop	r3
    4894:	2f 90       	pop	r2
    4896:	08 95       	ret

00004898 <SENSORS_FILL_SENSOR_BUFFERS>:

void SENSORS_FILL_SENSOR_BUFFERS()
{
    4898:	2f 92       	push	r2
    489a:	3f 92       	push	r3
    489c:	4f 92       	push	r4
    489e:	5f 92       	push	r5
    48a0:	6f 92       	push	r6
    48a2:	7f 92       	push	r7
    48a4:	8f 92       	push	r8
    48a6:	9f 92       	push	r9
    48a8:	af 92       	push	r10
    48aa:	bf 92       	push	r11
    48ac:	cf 92       	push	r12
    48ae:	df 92       	push	r13
    48b0:	ef 92       	push	r14
    48b2:	ff 92       	push	r15
    48b4:	0f 93       	push	r16
    48b6:	1f 93       	push	r17
    48b8:	cf 93       	push	r28
    48ba:	df 93       	push	r29
    48bc:	cd b7       	in	r28, 0x3d	; 61
    48be:	de b7       	in	r29, 0x3e	; 62
    48c0:	69 97       	sbiw	r28, 0x19	; 25
    48c2:	0f b6       	in	r0, 0x3f	; 63
    48c4:	f8 94       	cli
    48c6:	de bf       	out	0x3e, r29	; 62
    48c8:	0f be       	out	0x3f, r0	; 63
    48ca:	cd bf       	out	0x3d, r28	; 61
	if(F_LAST_RECIVED_DATA_NOT_HANDLED)   /*MAKE SENSOR WORK ON IT*/
    48cc:	80 91 8c 07 	lds	r24, 0x078C
    48d0:	88 23       	and	r24, r24
    48d2:	09 f4       	brne	.+2      	; 0x48d6 <SENSORS_FILL_SENSOR_BUFFERS+0x3e>
    48d4:	61 c2       	rjmp	.+1218   	; 0x4d98 <SENSORS_FILL_SENSOR_BUFFERS+0x500>
	{
		
		if (FIRST_READ_FLAG)
    48d6:	80 91 11 01 	lds	r24, 0x0111
    48da:	88 23       	and	r24, r24
    48dc:	91 f0       	breq	.+36     	; 0x4902 <SENSORS_FILL_SENSOR_BUFFERS+0x6a>
		{
			OLD_LAST_ENTRY=NEW_LAST_ENTRY;
    48de:	80 91 83 03 	lds	r24, 0x0383
    48e2:	90 91 84 03 	lds	r25, 0x0384
    48e6:	a0 91 85 03 	lds	r26, 0x0385
    48ea:	b0 91 86 03 	lds	r27, 0x0386
    48ee:	80 93 fb 04 	sts	0x04FB, r24
    48f2:	90 93 fc 04 	sts	0x04FC, r25
    48f6:	a0 93 fd 04 	sts	0x04FD, r26
    48fa:	b0 93 fe 04 	sts	0x04FE, r27
			FIRST_READ_FLAG=0;
    48fe:	10 92 11 01 	sts	0x0111, r1
		}
		
		if (OLD_LAST_ENTRY<NEW_LAST_ENTRY)
    4902:	40 91 fb 04 	lds	r20, 0x04FB
    4906:	50 91 fc 04 	lds	r21, 0x04FC
    490a:	60 91 fd 04 	lds	r22, 0x04FD
    490e:	70 91 fe 04 	lds	r23, 0x04FE
    4912:	80 91 83 03 	lds	r24, 0x0383
    4916:	90 91 84 03 	lds	r25, 0x0384
    491a:	a0 91 85 03 	lds	r26, 0x0385
    491e:	b0 91 86 03 	lds	r27, 0x0386
    4922:	48 17       	cp	r20, r24
    4924:	59 07       	cpc	r21, r25
    4926:	6a 07       	cpc	r22, r26
    4928:	7b 07       	cpc	r23, r27
    492a:	08 f0       	brcs	.+2      	; 0x492e <SENSORS_FILL_SENSOR_BUFFERS+0x96>
    492c:	33 c2       	rjmp	.+1126   	; 0x4d94 <SENSORS_FILL_SENSOR_BUFFERS+0x4fc>
		{
			unsigned long TEMP_DIFF=NEW_LAST_ENTRY-OLD_LAST_ENTRY;
    492e:	c0 90 83 03 	lds	r12, 0x0383
    4932:	d0 90 84 03 	lds	r13, 0x0384
    4936:	e0 90 85 03 	lds	r14, 0x0385
    493a:	f0 90 86 03 	lds	r15, 0x0386
    493e:	40 91 fb 04 	lds	r20, 0x04FB
    4942:	50 91 fc 04 	lds	r21, 0x04FC
    4946:	60 91 fd 04 	lds	r22, 0x04FD
    494a:	70 91 fe 04 	lds	r23, 0x04FE
    494e:	c4 1a       	sub	r12, r20
    4950:	d5 0a       	sbc	r13, r21
    4952:	e6 0a       	sbc	r14, r22
    4954:	f7 0a       	sbc	r15, r23
			OLD_LAST_ENTRY=NEW_LAST_ENTRY;
    4956:	80 91 83 03 	lds	r24, 0x0383
    495a:	90 91 84 03 	lds	r25, 0x0384
    495e:	a0 91 85 03 	lds	r26, 0x0385
    4962:	b0 91 86 03 	lds	r27, 0x0386
    4966:	80 93 fb 04 	sts	0x04FB, r24
    496a:	90 93 fc 04 	sts	0x04FC, r25
    496e:	a0 93 fd 04 	sts	0x04FD, r26
    4972:	b0 93 fe 04 	sts	0x04FE, r27
			SAVE_OLD_LAST_ENTRY();
    4976:	84 d8       	rcall	.-3832   	; 0x3a80 <SAVE_OLD_LAST_ENTRY>
    4978:	d7 01       	movw	r26, r14
    497a:	c6 01       	movw	r24, r12
    497c:	86 30       	cpi	r24, 0x06	; 6
    497e:	91 05       	cpc	r25, r1
    4980:	a1 05       	cpc	r26, r1
    4982:	b1 05       	cpc	r27, r1
    4984:	20 f0       	brcs	.+8      	; 0x498e <SENSORS_FILL_SENSOR_BUFFERS+0xf6>
    4986:	85 e0       	ldi	r24, 0x05	; 5
    4988:	90 e0       	ldi	r25, 0x00	; 0
    498a:	a0 e0       	ldi	r26, 0x00	; 0
    498c:	b0 e0       	ldi	r27, 0x00	; 0
			unsigned char i=0,k=0,J=0;
			unsigned char NUMBER_STRING_BUFFER[20];
			unsigned long long NUMBER_BUFFER=0;
			/*M:ADDRESS SENSOR(decimal):COMMAND(W or R):DATA1:DATA2:*/
			/*M:ADDRESS SENSOR:COMMAND:DATA1:*/
			for (i=5-TEMP_DIFF;i<5;++i)
    498e:	15 e0       	ldi	r17, 0x05	; 5
    4990:	18 1b       	sub	r17, r24
    4992:	15 30       	cpi	r17, 0x05	; 5
    4994:	08 f0       	brcs	.+2      	; 0x4998 <SENSORS_FILL_SENSOR_BUFFERS+0x100>
    4996:	00 c2       	rjmp	.+1024   	; 0x4d98 <SENSORS_FILL_SENSOR_BUFFERS+0x500>
			{	
				if (G_RECIVED_DATA[i].DATA_ELEMENT[0]=='M')/*MEANS THAT ANDROID SEND THIS TO MASTER*/
    4998:	0f 2e       	mov	r0, r31
    499a:	ff e1       	ldi	r31, 0x1F	; 31
    499c:	af 2e       	mov	r10, r31
    499e:	f0 2d       	mov	r31, r0
								
									if (G_RECIVED_DATA[i].DATA_ELEMENT[4+k]==':')
									{
										k=5+k;
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
										J=0;
    49a0:	91 2c       	mov	r9, r1
										/*ADDRESS REGISTER*/
										while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')
    49a2:	71 2c       	mov	r7, r1
    49a4:	81 2c       	mov	r8, r1
				{
					if (G_RECIVED_DATA[i].DATA_ELEMENT[1]==':')/*COTATION*/
					{
						k=0;
						/*ADDRESS SENSOR*/
						while(G_RECIVED_DATA[i].DATA_ELEMENT[2+k]!=':')/*COTATION*/
    49a6:	61 2c       	mov	r6, r1
			unsigned long long NUMBER_BUFFER=0;
			/*M:ADDRESS SENSOR(decimal):COMMAND(W or R):DATA1:DATA2:*/
			/*M:ADDRESS SENSOR:COMMAND:DATA1:*/
			for (i=5-TEMP_DIFF;i<5;++i)
			{	
				if (G_RECIVED_DATA[i].DATA_ELEMENT[0]=='M')/*MEANS THAT ANDROID SEND THIS TO MASTER*/
    49a8:	c1 2e       	mov	r12, r17
    49aa:	d1 2c       	mov	r13, r1
    49ac:	ac 9c       	mul	r10, r12
    49ae:	f0 01       	movw	r30, r0
    49b0:	ad 9c       	mul	r10, r13
    49b2:	f0 0d       	add	r31, r0
    49b4:	11 24       	eor	r1, r1
    49b6:	e1 5c       	subi	r30, 0xC1	; 193
    49b8:	fa 4f       	sbci	r31, 0xFA	; 250
    49ba:	80 81       	ld	r24, Z
    49bc:	8d 34       	cpi	r24, 0x4D	; 77
    49be:	09 f0       	breq	.+2      	; 0x49c2 <SENSORS_FILL_SENSOR_BUFFERS+0x12a>
    49c0:	e4 c1       	rjmp	.+968    	; 0x4d8a <SENSORS_FILL_SENSOR_BUFFERS+0x4f2>
				{
					if (G_RECIVED_DATA[i].DATA_ELEMENT[1]==':')/*COTATION*/
    49c2:	ac 9c       	mul	r10, r12
    49c4:	f0 01       	movw	r30, r0
    49c6:	ad 9c       	mul	r10, r13
    49c8:	f0 0d       	add	r31, r0
    49ca:	11 24       	eor	r1, r1
    49cc:	e1 5c       	subi	r30, 0xC1	; 193
    49ce:	fa 4f       	sbci	r31, 0xFA	; 250
    49d0:	81 81       	ldd	r24, Z+1	; 0x01
    49d2:	8a 33       	cpi	r24, 0x3A	; 58
    49d4:	09 f0       	breq	.+2      	; 0x49d8 <SENSORS_FILL_SENSOR_BUFFERS+0x140>
    49d6:	d9 c1       	rjmp	.+946    	; 0x4d8a <SENSORS_FILL_SENSOR_BUFFERS+0x4f2>
					{
						k=0;
						/*ADDRESS SENSOR*/
						while(G_RECIVED_DATA[i].DATA_ELEMENT[2+k]!=':')/*COTATION*/
    49d8:	ac 9c       	mul	r10, r12
    49da:	f0 01       	movw	r30, r0
    49dc:	ad 9c       	mul	r10, r13
    49de:	f0 0d       	add	r31, r0
    49e0:	11 24       	eor	r1, r1
    49e2:	e1 5c       	subi	r30, 0xC1	; 193
    49e4:	fa 4f       	sbci	r31, 0xFA	; 250
    49e6:	82 81       	ldd	r24, Z+2	; 0x02
    49e8:	8a 33       	cpi	r24, 0x3A	; 58
    49ea:	29 f1       	breq	.+74     	; 0x4a36 <SENSORS_FILL_SENSOR_BUFFERS+0x19e>
    49ec:	82 e0       	ldi	r24, 0x02	; 2
    49ee:	96 2d       	mov	r25, r6
    49f0:	e7 2c       	mov	r14, r7
    49f2:	f8 2c       	mov	r15, r8
    49f4:	b9 2c       	mov	r11, r9
						{
							NUMBER_STRING_BUFFER[k]=G_RECIVED_DATA[i].DATA_ELEMENT[2+k];
    49f6:	ac 9c       	mul	r10, r12
    49f8:	90 01       	movw	r18, r0
    49fa:	ad 9c       	mul	r10, r13
    49fc:	30 0d       	add	r19, r0
    49fe:	11 24       	eor	r1, r1
    4a00:	82 0f       	add	r24, r18
    4a02:	93 1f       	adc	r25, r19
    4a04:	fc 01       	movw	r30, r24
    4a06:	e1 5c       	subi	r30, 0xC1	; 193
    4a08:	fa 4f       	sbci	r31, 0xFA	; 250
    4a0a:	80 81       	ld	r24, Z
    4a0c:	e1 e0       	ldi	r30, 0x01	; 1
    4a0e:	f0 e0       	ldi	r31, 0x00	; 0
    4a10:	ec 0f       	add	r30, r28
    4a12:	fd 1f       	adc	r31, r29
    4a14:	ee 0d       	add	r30, r14
    4a16:	ff 1d       	adc	r31, r15
    4a18:	80 83       	st	Z, r24
							k++;
    4a1a:	b3 94       	inc	r11
				{
					if (G_RECIVED_DATA[i].DATA_ELEMENT[1]==':')/*COTATION*/
					{
						k=0;
						/*ADDRESS SENSOR*/
						while(G_RECIVED_DATA[i].DATA_ELEMENT[2+k]!=':')/*COTATION*/
    4a1c:	eb 2c       	mov	r14, r11
    4a1e:	f1 2c       	mov	r15, r1
    4a20:	c7 01       	movw	r24, r14
    4a22:	02 96       	adiw	r24, 0x02	; 2
    4a24:	f9 01       	movw	r30, r18
    4a26:	e8 0f       	add	r30, r24
    4a28:	f9 1f       	adc	r31, r25
    4a2a:	e1 5c       	subi	r30, 0xC1	; 193
    4a2c:	fa 4f       	sbci	r31, 0xFA	; 250
    4a2e:	40 81       	ld	r20, Z
    4a30:	4a 33       	cpi	r20, 0x3A	; 58
    4a32:	31 f7       	brne	.-52     	; 0x4a00 <SENSORS_FILL_SENSOR_BUFFERS+0x168>
    4a34:	03 c0       	rjmp	.+6      	; 0x4a3c <SENSORS_FILL_SENSOR_BUFFERS+0x1a4>
    4a36:	e7 2c       	mov	r14, r7
    4a38:	f8 2c       	mov	r15, r8
    4a3a:	b9 2c       	mov	r11, r9
						{
							NUMBER_STRING_BUFFER[k]=G_RECIVED_DATA[i].DATA_ELEMENT[2+k];
							k++;
							
						}
						NUMBER_BUFFER=STRINGTOINT(NUMBER_STRING_BUFFER,k);
    4a3c:	6b 2d       	mov	r22, r11
    4a3e:	ce 01       	movw	r24, r28
    4a40:	01 96       	adiw	r24, 0x01	; 1
    4a42:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <STRINGTOINT>
    4a46:	e2 2f       	mov	r30, r18
    4a48:	23 2e       	mov	r2, r19
    4a4a:	34 2e       	mov	r3, r20
    4a4c:	45 2e       	mov	r4, r21
    4a4e:	56 2e       	mov	r5, r22
    4a50:	b7 2f       	mov	r27, r23
    4a52:	a8 2f       	mov	r26, r24
    4a54:	f9 2f       	mov	r31, r25
						
							unsigned char ARRAY_BUFFER[5];
							ARRAY_BUFFER[0]=NUMBER_BUFFER&0XFF;
    4a56:	2d 8b       	std	Y+21, r18	; 0x15
							ARRAY_BUFFER[1]=(NUMBER_BUFFER>>8)&0XFF;
    4a58:	08 e0       	ldi	r16, 0x08	; 8
    4a5a:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__lshrdi3>
    4a5e:	2e 8b       	std	Y+22, r18	; 0x16
							ARRAY_BUFFER[2]=(NUMBER_BUFFER>>16)&0XFF;
    4a60:	2e 2f       	mov	r18, r30
    4a62:	32 2d       	mov	r19, r2
    4a64:	43 2d       	mov	r20, r3
    4a66:	54 2d       	mov	r21, r4
    4a68:	65 2d       	mov	r22, r5
    4a6a:	7b 2f       	mov	r23, r27
    4a6c:	8a 2f       	mov	r24, r26
    4a6e:	9f 2f       	mov	r25, r31
    4a70:	00 e1       	ldi	r16, 0x10	; 16
    4a72:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__lshrdi3>
    4a76:	2f 8b       	std	Y+23, r18	; 0x17
							ARRAY_BUFFER[3]=(NUMBER_BUFFER>>24)&0XFF;
    4a78:	2e 2f       	mov	r18, r30
    4a7a:	32 2d       	mov	r19, r2
    4a7c:	43 2d       	mov	r20, r3
    4a7e:	54 2d       	mov	r21, r4
    4a80:	65 2d       	mov	r22, r5
    4a82:	7b 2f       	mov	r23, r27
    4a84:	8a 2f       	mov	r24, r26
    4a86:	9f 2f       	mov	r25, r31
    4a88:	08 e1       	ldi	r16, 0x18	; 24
    4a8a:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__lshrdi3>
    4a8e:	28 8f       	std	Y+24, r18	; 0x18
							ARRAY_BUFFER[4]=(NUMBER_BUFFER>>32)&0XFF;
    4a90:	2e 2f       	mov	r18, r30
    4a92:	32 2d       	mov	r19, r2
    4a94:	43 2d       	mov	r20, r3
    4a96:	54 2d       	mov	r21, r4
    4a98:	65 2d       	mov	r22, r5
    4a9a:	7b 2f       	mov	r23, r27
    4a9c:	8a 2f       	mov	r24, r26
    4a9e:	9f 2f       	mov	r25, r31
    4aa0:	00 e2       	ldi	r16, 0x20	; 32
    4aa2:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__lshrdi3>
    4aa6:	29 8f       	std	Y+25, r18	; 0x19
						char SENSOR_INDEX_BUFFER=FIND_SENSOR(ARRAY_BUFFER,5);
    4aa8:	65 e0       	ldi	r22, 0x05	; 5
    4aaa:	ce 01       	movw	r24, r28
    4aac:	45 96       	adiw	r24, 0x15	; 21
    4aae:	09 d9       	rcall	.-3566   	; 0x3cc2 <FIND_SENSOR>
						if (SENSOR_INDEX_BUFFER!=(char)(-1))
    4ab0:	8f 3f       	cpi	r24, 0xFF	; 255
    4ab2:	09 f4       	brne	.+2      	; 0x4ab6 <SENSORS_FILL_SENSOR_BUFFERS+0x21e>
    4ab4:	6a c1       	rjmp	.+724    	; 0x4d8a <SENSORS_FILL_SENSOR_BUFFERS+0x4f2>
						{
							
					
						
						
						if(G_RECIVED_DATA[i].DATA_ELEMENT[3+k]=='W')/*MEANS ANDROID NEED TO CHANGE DATA*/
    4ab6:	97 01       	movw	r18, r14
    4ab8:	2d 5f       	subi	r18, 0xFD	; 253
    4aba:	3f 4f       	sbci	r19, 0xFF	; 255
    4abc:	ac 9c       	mul	r10, r12
    4abe:	f0 01       	movw	r30, r0
    4ac0:	ad 9c       	mul	r10, r13
    4ac2:	f0 0d       	add	r31, r0
    4ac4:	11 24       	eor	r1, r1
    4ac6:	e2 0f       	add	r30, r18
    4ac8:	f3 1f       	adc	r31, r19
    4aca:	e1 5c       	subi	r30, 0xC1	; 193
    4acc:	fa 4f       	sbci	r31, 0xFA	; 250
    4ace:	90 81       	ld	r25, Z
    4ad0:	97 35       	cpi	r25, 0x57	; 87
    4ad2:	09 f0       	breq	.+2      	; 0x4ad6 <SENSORS_FILL_SENSOR_BUFFERS+0x23e>
    4ad4:	d4 c0       	rjmp	.+424    	; 0x4c7e <SENSORS_FILL_SENSOR_BUFFERS+0x3e6>
						{
							if (G_RECIVED_DATA[i].DATA_ELEMENT[4+k]==':')/*COTATION*/
    4ad6:	ac 9c       	mul	r10, r12
    4ad8:	f0 01       	movw	r30, r0
    4ada:	ad 9c       	mul	r10, r13
    4adc:	f0 0d       	add	r31, r0
    4ade:	11 24       	eor	r1, r1
    4ae0:	ee 0d       	add	r30, r14
    4ae2:	ff 1d       	adc	r31, r15
    4ae4:	ed 5b       	subi	r30, 0xBD	; 189
    4ae6:	fa 4f       	sbci	r31, 0xFA	; 250
    4ae8:	90 81       	ld	r25, Z
    4aea:	9a 33       	cpi	r25, 0x3A	; 58
    4aec:	09 f0       	breq	.+2      	; 0x4af0 <SENSORS_FILL_SENSOR_BUFFERS+0x258>
    4aee:	4d c1       	rjmp	.+666    	; 0x4d8a <SENSORS_FILL_SENSOR_BUFFERS+0x4f2>
							{
								k=5+k;
								
								
								SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
    4af0:	20 91 2a 03 	lds	r18, 0x032A
    4af4:	30 e0       	ldi	r19, 0x00	; 0
    4af6:	f9 01       	movw	r30, r18
    4af8:	ee 0f       	add	r30, r30
    4afa:	ff 1f       	adc	r31, r31
    4afc:	ee 0f       	add	r30, r30
    4afe:	ff 1f       	adc	r31, r31
    4b00:	2e 0f       	add	r18, r30
    4b02:	3f 1f       	adc	r19, r31
    4b04:	f9 01       	movw	r30, r18
    4b06:	e2 55       	subi	r30, 0x52	; 82
    4b08:	fc 4f       	sbci	r31, 0xFC	; 252
    4b0a:	80 83       	st	Z, r24
						
						if(G_RECIVED_DATA[i].DATA_ELEMENT[3+k]=='W')/*MEANS ANDROID NEED TO CHANGE DATA*/
						{
							if (G_RECIVED_DATA[i].DATA_ELEMENT[4+k]==':')/*COTATION*/
							{
								k=5+k;
    4b0c:	65 e0       	ldi	r22, 0x05	; 5
    4b0e:	6b 0d       	add	r22, r11
								
								SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
								
									J=0;
									/*ADDRESS REGISTER*/
									while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')/*COTATION*/
    4b10:	70 e0       	ldi	r23, 0x00	; 0
    4b12:	ac 9c       	mul	r10, r12
    4b14:	f0 01       	movw	r30, r0
    4b16:	ad 9c       	mul	r10, r13
    4b18:	f0 0d       	add	r31, r0
    4b1a:	11 24       	eor	r1, r1
    4b1c:	e6 0f       	add	r30, r22
    4b1e:	f7 1f       	adc	r31, r23
    4b20:	e1 5c       	subi	r30, 0xC1	; 193
    4b22:	fa 4f       	sbci	r31, 0xFA	; 250
    4b24:	80 81       	ld	r24, Z
    4b26:	8a 33       	cpi	r24, 0x3A	; 58
    4b28:	29 f1       	breq	.+74     	; 0x4b74 <SENSORS_FILL_SENSOR_BUFFERS+0x2dc>
    4b2a:	9b 01       	movw	r18, r22
    4b2c:	87 2d       	mov	r24, r7
    4b2e:	98 2d       	mov	r25, r8
								k=5+k;
								
								
								SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
								
									J=0;
    4b30:	f9 2c       	mov	r15, r9
									/*ADDRESS REGISTER*/
									while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')/*COTATION*/
									{
										NUMBER_STRING_BUFFER[J]=G_RECIVED_DATA[i].DATA_ELEMENT[J+k];
    4b32:	ac 9c       	mul	r10, r12
    4b34:	a0 01       	movw	r20, r0
    4b36:	ad 9c       	mul	r10, r13
    4b38:	50 0d       	add	r21, r0
    4b3a:	11 24       	eor	r1, r1
    4b3c:	24 0f       	add	r18, r20
    4b3e:	35 1f       	adc	r19, r21
    4b40:	f9 01       	movw	r30, r18
    4b42:	e1 5c       	subi	r30, 0xC1	; 193
    4b44:	fa 4f       	sbci	r31, 0xFA	; 250
    4b46:	20 81       	ld	r18, Z
    4b48:	e1 e0       	ldi	r30, 0x01	; 1
    4b4a:	f0 e0       	ldi	r31, 0x00	; 0
    4b4c:	ec 0f       	add	r30, r28
    4b4e:	fd 1f       	adc	r31, r29
    4b50:	e8 0f       	add	r30, r24
    4b52:	f9 1f       	adc	r31, r25
    4b54:	20 83       	st	Z, r18
										J++;
    4b56:	f3 94       	inc	r15
								
								SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
								
									J=0;
									/*ADDRESS REGISTER*/
									while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')/*COTATION*/
    4b58:	8f 2d       	mov	r24, r15
    4b5a:	90 e0       	ldi	r25, 0x00	; 0
    4b5c:	9c 01       	movw	r18, r24
    4b5e:	26 0f       	add	r18, r22
    4b60:	37 1f       	adc	r19, r23
    4b62:	fa 01       	movw	r30, r20
    4b64:	e2 0f       	add	r30, r18
    4b66:	f3 1f       	adc	r31, r19
    4b68:	e1 5c       	subi	r30, 0xC1	; 193
    4b6a:	fa 4f       	sbci	r31, 0xFA	; 250
    4b6c:	e0 81       	ld	r30, Z
    4b6e:	ea 33       	cpi	r30, 0x3A	; 58
    4b70:	29 f7       	brne	.-54     	; 0x4b3c <SENSORS_FILL_SENSOR_BUFFERS+0x2a4>
    4b72:	01 c0       	rjmp	.+2      	; 0x4b76 <SENSORS_FILL_SENSOR_BUFFERS+0x2de>
								k=5+k;
								
								
								SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
								
									J=0;
    4b74:	f9 2c       	mov	r15, r9
									{
										NUMBER_STRING_BUFFER[J]=G_RECIVED_DATA[i].DATA_ELEMENT[J+k];
										J++;
										
									}
									NUMBER_BUFFER=STRINGTOINT(NUMBER_STRING_BUFFER,J);
    4b76:	6f 2d       	mov	r22, r15
    4b78:	ce 01       	movw	r24, r28
    4b7a:	01 96       	adiw	r24, 0x01	; 1
    4b7c:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <STRINGTOINT>
    4b80:	a2 2f       	mov	r26, r18
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[0]=NUMBER_BUFFER>>8;
    4b82:	e0 91 2a 03 	lds	r30, 0x032A
    4b86:	f0 e0       	ldi	r31, 0x00	; 0
    4b88:	08 e0       	ldi	r16, 0x08	; 8
    4b8a:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__lshrdi3>
    4b8e:	cf 01       	movw	r24, r30
    4b90:	88 0f       	add	r24, r24
    4b92:	99 1f       	adc	r25, r25
    4b94:	88 0f       	add	r24, r24
    4b96:	99 1f       	adc	r25, r25
    4b98:	e8 0f       	add	r30, r24
    4b9a:	f9 1f       	adc	r31, r25
    4b9c:	e2 55       	subi	r30, 0x52	; 82
    4b9e:	fc 4f       	sbci	r31, 0xFC	; 252
    4ba0:	21 83       	std	Z+1, r18	; 0x01
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[1]=NUMBER_BUFFER;
    4ba2:	80 91 2a 03 	lds	r24, 0x032A
    4ba6:	90 e0       	ldi	r25, 0x00	; 0
    4ba8:	fc 01       	movw	r30, r24
    4baa:	ee 0f       	add	r30, r30
    4bac:	ff 1f       	adc	r31, r31
    4bae:	ee 0f       	add	r30, r30
    4bb0:	ff 1f       	adc	r31, r31
    4bb2:	8e 0f       	add	r24, r30
    4bb4:	9f 1f       	adc	r25, r31
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	e2 55       	subi	r30, 0x52	; 82
    4bba:	fc 4f       	sbci	r31, 0xFC	; 252
    4bbc:	a2 83       	std	Z+2, r26	; 0x02
									k=J+k+1;
    4bbe:	e6 e0       	ldi	r30, 0x06	; 6
    4bc0:	eb 0d       	add	r30, r11
    4bc2:	fe 0e       	add	r15, r30
									J=0;
									/*DATA VALUE*/
									while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')
    4bc4:	ef 2d       	mov	r30, r15
    4bc6:	f0 e0       	ldi	r31, 0x00	; 0
    4bc8:	ac 9c       	mul	r10, r12
    4bca:	d0 01       	movw	r26, r0
    4bcc:	ad 9c       	mul	r10, r13
    4bce:	b0 0d       	add	r27, r0
    4bd0:	11 24       	eor	r1, r1
    4bd2:	ae 0f       	add	r26, r30
    4bd4:	bf 1f       	adc	r27, r31
    4bd6:	a1 5c       	subi	r26, 0xC1	; 193
    4bd8:	ba 4f       	sbci	r27, 0xFA	; 250
    4bda:	8c 91       	ld	r24, X
    4bdc:	8a 33       	cpi	r24, 0x3A	; 58
    4bde:	29 f1       	breq	.+74     	; 0x4c2a <SENSORS_FILL_SENSOR_BUFFERS+0x392>
    4be0:	9f 01       	movw	r18, r30
    4be2:	87 2d       	mov	r24, r7
    4be4:	98 2d       	mov	r25, r8
									}
									NUMBER_BUFFER=STRINGTOINT(NUMBER_STRING_BUFFER,J);
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[0]=NUMBER_BUFFER>>8;
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[1]=NUMBER_BUFFER;
									k=J+k+1;
									J=0;
    4be6:	69 2d       	mov	r22, r9
									/*DATA VALUE*/
									while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')
									{
										NUMBER_STRING_BUFFER[J]=G_RECIVED_DATA[i].DATA_ELEMENT[J+k];
    4be8:	ac 9c       	mul	r10, r12
    4bea:	a0 01       	movw	r20, r0
    4bec:	ad 9c       	mul	r10, r13
    4bee:	50 0d       	add	r21, r0
    4bf0:	11 24       	eor	r1, r1
    4bf2:	24 0f       	add	r18, r20
    4bf4:	35 1f       	adc	r19, r21
    4bf6:	d9 01       	movw	r26, r18
    4bf8:	a1 5c       	subi	r26, 0xC1	; 193
    4bfa:	ba 4f       	sbci	r27, 0xFA	; 250
    4bfc:	2c 91       	ld	r18, X
    4bfe:	a1 e0       	ldi	r26, 0x01	; 1
    4c00:	b0 e0       	ldi	r27, 0x00	; 0
    4c02:	ac 0f       	add	r26, r28
    4c04:	bd 1f       	adc	r27, r29
    4c06:	a8 0f       	add	r26, r24
    4c08:	b9 1f       	adc	r27, r25
    4c0a:	2c 93       	st	X, r18
										J++;
    4c0c:	6f 5f       	subi	r22, 0xFF	; 255
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[0]=NUMBER_BUFFER>>8;
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[1]=NUMBER_BUFFER;
									k=J+k+1;
									J=0;
									/*DATA VALUE*/
									while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')
    4c0e:	86 2f       	mov	r24, r22
    4c10:	90 e0       	ldi	r25, 0x00	; 0
    4c12:	9c 01       	movw	r18, r24
    4c14:	2e 0f       	add	r18, r30
    4c16:	3f 1f       	adc	r19, r31
    4c18:	da 01       	movw	r26, r20
    4c1a:	a2 0f       	add	r26, r18
    4c1c:	b3 1f       	adc	r27, r19
    4c1e:	a1 5c       	subi	r26, 0xC1	; 193
    4c20:	ba 4f       	sbci	r27, 0xFA	; 250
    4c22:	7c 91       	ld	r23, X
    4c24:	7a 33       	cpi	r23, 0x3A	; 58
    4c26:	29 f7       	brne	.-54     	; 0x4bf2 <SENSORS_FILL_SENSOR_BUFFERS+0x35a>
    4c28:	01 c0       	rjmp	.+2      	; 0x4c2c <SENSORS_FILL_SENSOR_BUFFERS+0x394>
									}
									NUMBER_BUFFER=STRINGTOINT(NUMBER_STRING_BUFFER,J);
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[0]=NUMBER_BUFFER>>8;
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].ADDRESS_REGISTER[1]=NUMBER_BUFFER;
									k=J+k+1;
									J=0;
    4c2a:	69 2d       	mov	r22, r9
									{
										NUMBER_STRING_BUFFER[J]=G_RECIVED_DATA[i].DATA_ELEMENT[J+k];
										J++;
										
									}
									NUMBER_BUFFER=STRINGTOINT(NUMBER_STRING_BUFFER,J);
    4c2c:	ce 01       	movw	r24, r28
    4c2e:	01 96       	adiw	r24, 0x01	; 1
    4c30:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <STRINGTOINT>
    4c34:	a2 2f       	mov	r26, r18
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].NEW_VALUE[0]=NUMBER_BUFFER>>8;
    4c36:	e0 91 2a 03 	lds	r30, 0x032A
    4c3a:	f0 e0       	ldi	r31, 0x00	; 0
    4c3c:	08 e0       	ldi	r16, 0x08	; 8
    4c3e:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__lshrdi3>
    4c42:	cf 01       	movw	r24, r30
    4c44:	88 0f       	add	r24, r24
    4c46:	99 1f       	adc	r25, r25
    4c48:	88 0f       	add	r24, r24
    4c4a:	99 1f       	adc	r25, r25
    4c4c:	e8 0f       	add	r30, r24
    4c4e:	f9 1f       	adc	r31, r25
    4c50:	e2 55       	subi	r30, 0x52	; 82
    4c52:	fc 4f       	sbci	r31, 0xFC	; 252
    4c54:	23 83       	std	Z+3, r18	; 0x03
									SENSOR_SEND_BUFFER[SENSOR_SEND_BUFFER_LENGTH].NEW_VALUE[1]=NUMBER_BUFFER;
    4c56:	80 91 2a 03 	lds	r24, 0x032A
    4c5a:	90 e0       	ldi	r25, 0x00	; 0
    4c5c:	fc 01       	movw	r30, r24
    4c5e:	ee 0f       	add	r30, r30
    4c60:	ff 1f       	adc	r31, r31
    4c62:	ee 0f       	add	r30, r30
    4c64:	ff 1f       	adc	r31, r31
    4c66:	8e 0f       	add	r24, r30
    4c68:	9f 1f       	adc	r25, r31
    4c6a:	fc 01       	movw	r30, r24
    4c6c:	e2 55       	subi	r30, 0x52	; 82
    4c6e:	fc 4f       	sbci	r31, 0xFC	; 252
    4c70:	a4 83       	std	Z+4, r26	; 0x04
									
									SENSOR_SEND_BUFFER_LENGTH++;
    4c72:	80 91 2a 03 	lds	r24, 0x032A
    4c76:	8f 5f       	subi	r24, 0xFF	; 255
    4c78:	80 93 2a 03 	sts	0x032A, r24
    4c7c:	86 c0       	rjmp	.+268    	; 0x4d8a <SENSORS_FILL_SENSOR_BUFFERS+0x4f2>
								
							}
						}
						else
						{
							if(G_RECIVED_DATA[i].DATA_ELEMENT[3+k]=='R')/*MEANS ANDROID NEED TO READ DATA*/
    4c7e:	ac 9c       	mul	r10, r12
    4c80:	f0 01       	movw	r30, r0
    4c82:	ad 9c       	mul	r10, r13
    4c84:	f0 0d       	add	r31, r0
    4c86:	11 24       	eor	r1, r1
    4c88:	2e 0f       	add	r18, r30
    4c8a:	3f 1f       	adc	r19, r31
    4c8c:	f9 01       	movw	r30, r18
    4c8e:	e1 5c       	subi	r30, 0xC1	; 193
    4c90:	fa 4f       	sbci	r31, 0xFA	; 250
    4c92:	90 81       	ld	r25, Z
    4c94:	92 35       	cpi	r25, 0x52	; 82
    4c96:	09 f0       	breq	.+2      	; 0x4c9a <SENSORS_FILL_SENSOR_BUFFERS+0x402>
    4c98:	78 c0       	rjmp	.+240    	; 0x4d8a <SENSORS_FILL_SENSOR_BUFFERS+0x4f2>
							{
								
									if (G_RECIVED_DATA[i].DATA_ELEMENT[4+k]==':')
    4c9a:	ac 9c       	mul	r10, r12
    4c9c:	f0 01       	movw	r30, r0
    4c9e:	ad 9c       	mul	r10, r13
    4ca0:	f0 0d       	add	r31, r0
    4ca2:	11 24       	eor	r1, r1
    4ca4:	ee 0d       	add	r30, r14
    4ca6:	ff 1d       	adc	r31, r15
    4ca8:	ed 5b       	subi	r30, 0xBD	; 189
    4caa:	fa 4f       	sbci	r31, 0xFA	; 250
    4cac:	90 81       	ld	r25, Z
    4cae:	9a 33       	cpi	r25, 0x3A	; 58
    4cb0:	09 f0       	breq	.+2      	; 0x4cb4 <SENSORS_FILL_SENSOR_BUFFERS+0x41c>
    4cb2:	6b c0       	rjmp	.+214    	; 0x4d8a <SENSORS_FILL_SENSOR_BUFFERS+0x4f2>
									{
										k=5+k;
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
    4cb4:	20 91 29 03 	lds	r18, 0x0329
    4cb8:	30 e0       	ldi	r19, 0x00	; 0
    4cba:	f9 01       	movw	r30, r18
    4cbc:	ee 0f       	add	r30, r30
    4cbe:	ff 1f       	adc	r31, r31
    4cc0:	ee 0f       	add	r30, r30
    4cc2:	ff 1f       	adc	r31, r31
    4cc4:	2e 0f       	add	r18, r30
    4cc6:	3f 1f       	adc	r19, r31
    4cc8:	f9 01       	movw	r30, r18
    4cca:	ef 5f       	subi	r30, 0xFF	; 255
    4ccc:	fa 4f       	sbci	r31, 0xFA	; 250
    4cce:	80 83       	st	Z, r24
							if(G_RECIVED_DATA[i].DATA_ELEMENT[3+k]=='R')/*MEANS ANDROID NEED TO READ DATA*/
							{
								
									if (G_RECIVED_DATA[i].DATA_ELEMENT[4+k]==':')
									{
										k=5+k;
    4cd0:	e5 e0       	ldi	r30, 0x05	; 5
    4cd2:	eb 0d       	add	r30, r11
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
										J=0;
										/*ADDRESS REGISTER*/
										while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')
    4cd4:	f0 e0       	ldi	r31, 0x00	; 0
    4cd6:	ac 9c       	mul	r10, r12
    4cd8:	d0 01       	movw	r26, r0
    4cda:	ad 9c       	mul	r10, r13
    4cdc:	b0 0d       	add	r27, r0
    4cde:	11 24       	eor	r1, r1
    4ce0:	ae 0f       	add	r26, r30
    4ce2:	bf 1f       	adc	r27, r31
    4ce4:	a1 5c       	subi	r26, 0xC1	; 193
    4ce6:	ba 4f       	sbci	r27, 0xFA	; 250
    4ce8:	8c 91       	ld	r24, X
    4cea:	8a 33       	cpi	r24, 0x3A	; 58
    4cec:	29 f1       	breq	.+74     	; 0x4d38 <SENSORS_FILL_SENSOR_BUFFERS+0x4a0>
    4cee:	9f 01       	movw	r18, r30
    4cf0:	87 2d       	mov	r24, r7
    4cf2:	98 2d       	mov	r25, r8
								
									if (G_RECIVED_DATA[i].DATA_ELEMENT[4+k]==':')
									{
										k=5+k;
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
										J=0;
    4cf4:	69 2d       	mov	r22, r9
										/*ADDRESS REGISTER*/
										while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')
										{
											NUMBER_STRING_BUFFER[J]=G_RECIVED_DATA[i].DATA_ELEMENT[J+k];
    4cf6:	ac 9c       	mul	r10, r12
    4cf8:	a0 01       	movw	r20, r0
    4cfa:	ad 9c       	mul	r10, r13
    4cfc:	50 0d       	add	r21, r0
    4cfe:	11 24       	eor	r1, r1
    4d00:	24 0f       	add	r18, r20
    4d02:	35 1f       	adc	r19, r21
    4d04:	d9 01       	movw	r26, r18
    4d06:	a1 5c       	subi	r26, 0xC1	; 193
    4d08:	ba 4f       	sbci	r27, 0xFA	; 250
    4d0a:	2c 91       	ld	r18, X
    4d0c:	a1 e0       	ldi	r26, 0x01	; 1
    4d0e:	b0 e0       	ldi	r27, 0x00	; 0
    4d10:	ac 0f       	add	r26, r28
    4d12:	bd 1f       	adc	r27, r29
    4d14:	a8 0f       	add	r26, r24
    4d16:	b9 1f       	adc	r27, r25
    4d18:	2c 93       	st	X, r18
											J++;
    4d1a:	6f 5f       	subi	r22, 0xFF	; 255
									{
										k=5+k;
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
										J=0;
										/*ADDRESS REGISTER*/
										while(G_RECIVED_DATA[i].DATA_ELEMENT[k+J]!=':')
    4d1c:	86 2f       	mov	r24, r22
    4d1e:	90 e0       	ldi	r25, 0x00	; 0
    4d20:	9c 01       	movw	r18, r24
    4d22:	2e 0f       	add	r18, r30
    4d24:	3f 1f       	adc	r19, r31
    4d26:	da 01       	movw	r26, r20
    4d28:	a2 0f       	add	r26, r18
    4d2a:	b3 1f       	adc	r27, r19
    4d2c:	a1 5c       	subi	r26, 0xC1	; 193
    4d2e:	ba 4f       	sbci	r27, 0xFA	; 250
    4d30:	7c 91       	ld	r23, X
    4d32:	7a 33       	cpi	r23, 0x3A	; 58
    4d34:	29 f7       	brne	.-54     	; 0x4d00 <SENSORS_FILL_SENSOR_BUFFERS+0x468>
    4d36:	01 c0       	rjmp	.+2      	; 0x4d3a <SENSORS_FILL_SENSOR_BUFFERS+0x4a2>
								
									if (G_RECIVED_DATA[i].DATA_ELEMENT[4+k]==':')
									{
										k=5+k;
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].SENSOR_INDEX=SENSOR_INDEX_BUFFER;
										J=0;
    4d38:	69 2d       	mov	r22, r9
										{
											NUMBER_STRING_BUFFER[J]=G_RECIVED_DATA[i].DATA_ELEMENT[J+k];
											J++;
										
										}
										NUMBER_BUFFER=STRINGTOINT(NUMBER_STRING_BUFFER,J);
    4d3a:	ce 01       	movw	r24, r28
    4d3c:	01 96       	adiw	r24, 0x01	; 1
    4d3e:	0e 94 9f 0e 	call	0x1d3e	; 0x1d3e <STRINGTOINT>
    4d42:	a2 2f       	mov	r26, r18
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].ADDRESS_REGISTER[0]=NUMBER_BUFFER>>8;
    4d44:	e0 91 29 03 	lds	r30, 0x0329
    4d48:	f0 e0       	ldi	r31, 0x00	; 0
    4d4a:	08 e0       	ldi	r16, 0x08	; 8
    4d4c:	0e 94 ec 33 	call	0x67d8	; 0x67d8 <__lshrdi3>
    4d50:	cf 01       	movw	r24, r30
    4d52:	88 0f       	add	r24, r24
    4d54:	99 1f       	adc	r25, r25
    4d56:	88 0f       	add	r24, r24
    4d58:	99 1f       	adc	r25, r25
    4d5a:	e8 0f       	add	r30, r24
    4d5c:	f9 1f       	adc	r31, r25
    4d5e:	ef 5f       	subi	r30, 0xFF	; 255
    4d60:	fa 4f       	sbci	r31, 0xFA	; 250
    4d62:	21 83       	std	Z+1, r18	; 0x01
										SENSOR_READ_BUFFER[SENSOR_READ_BUFFER_LENGTH].ADDRESS_REGISTER[1]=NUMBER_BUFFER;
    4d64:	80 91 29 03 	lds	r24, 0x0329
    4d68:	90 e0       	ldi	r25, 0x00	; 0
    4d6a:	fc 01       	movw	r30, r24
    4d6c:	ee 0f       	add	r30, r30
    4d6e:	ff 1f       	adc	r31, r31
    4d70:	ee 0f       	add	r30, r30
    4d72:	ff 1f       	adc	r31, r31
    4d74:	8e 0f       	add	r24, r30
    4d76:	9f 1f       	adc	r25, r31
    4d78:	fc 01       	movw	r30, r24
    4d7a:	ef 5f       	subi	r30, 0xFF	; 255
    4d7c:	fa 4f       	sbci	r31, 0xFA	; 250
    4d7e:	a2 83       	std	Z+2, r26	; 0x02
									
										SENSOR_READ_BUFFER_LENGTH++;
    4d80:	80 91 29 03 	lds	r24, 0x0329
    4d84:	8f 5f       	subi	r24, 0xFF	; 255
    4d86:	80 93 29 03 	sts	0x0329, r24
			unsigned char i=0,k=0,J=0;
			unsigned char NUMBER_STRING_BUFFER[20];
			unsigned long long NUMBER_BUFFER=0;
			/*M:ADDRESS SENSOR(decimal):COMMAND(W or R):DATA1:DATA2:*/
			/*M:ADDRESS SENSOR:COMMAND:DATA1:*/
			for (i=5-TEMP_DIFF;i<5;++i)
    4d8a:	1f 5f       	subi	r17, 0xFF	; 255
    4d8c:	15 30       	cpi	r17, 0x05	; 5
    4d8e:	09 f0       	breq	.+2      	; 0x4d92 <SENSORS_FILL_SENSOR_BUFFERS+0x4fa>
    4d90:	0b ce       	rjmp	.-1002   	; 0x49a8 <SENSORS_FILL_SENSOR_BUFFERS+0x110>
    4d92:	02 c0       	rjmp	.+4      	; 0x4d98 <SENSORS_FILL_SENSOR_BUFFERS+0x500>
				}	
			}
		}	
		else
		{
			F_LAST_RECIVED_DATA_NOT_HANDLED=0;
    4d94:	10 92 8c 07 	sts	0x078C, r1
		}
		
		
		
	}
}
    4d98:	69 96       	adiw	r28, 0x19	; 25
    4d9a:	0f b6       	in	r0, 0x3f	; 63
    4d9c:	f8 94       	cli
    4d9e:	de bf       	out	0x3e, r29	; 62
    4da0:	0f be       	out	0x3f, r0	; 63
    4da2:	cd bf       	out	0x3d, r28	; 61
    4da4:	df 91       	pop	r29
    4da6:	cf 91       	pop	r28
    4da8:	1f 91       	pop	r17
    4daa:	0f 91       	pop	r16
    4dac:	ff 90       	pop	r15
    4dae:	ef 90       	pop	r14
    4db0:	df 90       	pop	r13
    4db2:	cf 90       	pop	r12
    4db4:	bf 90       	pop	r11
    4db6:	af 90       	pop	r10
    4db8:	9f 90       	pop	r9
    4dba:	8f 90       	pop	r8
    4dbc:	7f 90       	pop	r7
    4dbe:	6f 90       	pop	r6
    4dc0:	5f 90       	pop	r5
    4dc2:	4f 90       	pop	r4
    4dc4:	3f 90       	pop	r3
    4dc6:	2f 90       	pop	r2
    4dc8:	08 95       	ret

00004dca <SENSORS_APPLY_SEND_BUFFER>:

void SENSORS_APPLY_SEND_BUFFER()
{
    4dca:	6f 92       	push	r6
    4dcc:	7f 92       	push	r7
    4dce:	8f 92       	push	r8
    4dd0:	9f 92       	push	r9
    4dd2:	af 92       	push	r10
    4dd4:	bf 92       	push	r11
    4dd6:	cf 92       	push	r12
    4dd8:	df 92       	push	r13
    4dda:	ef 92       	push	r14
    4ddc:	ff 92       	push	r15
    4dde:	0f 93       	push	r16
    4de0:	1f 93       	push	r17
    4de2:	cf 93       	push	r28
    4de4:	df 93       	push	r29
    4de6:	cd b7       	in	r28, 0x3d	; 61
    4de8:	de b7       	in	r29, 0x3e	; 62
    4dea:	ef 97       	sbiw	r28, 0x3f	; 63
    4dec:	0f b6       	in	r0, 0x3f	; 63
    4dee:	f8 94       	cli
    4df0:	de bf       	out	0x3e, r29	; 62
    4df2:	0f be       	out	0x3f, r0	; 63
    4df4:	cd bf       	out	0x3d, r28	; 61
	if (SENSOR_SEND_BUFFER_LENGTH!=0)
    4df6:	80 91 2a 03 	lds	r24, 0x032A
    4dfa:	88 23       	and	r24, r24
    4dfc:	09 f4       	brne	.+2      	; 0x4e00 <SENSORS_APPLY_SEND_BUFFER+0x36>
    4dfe:	23 c4       	rjmp	.+2118   	; 0x5646 <SENSORS_APPLY_SEND_BUFFER+0x87c>
	{	
		volatile unsigned char DATA_SEND_BUFFER[30],LENGTH;
		volatile unsigned char i=0,BUFFER_INDEX,RESULT_STATE=0;
    4e00:	1e ae       	std	Y+62, r1	; 0x3e
    4e02:	1c ae       	std	Y+60, r1	; 0x3c
		volatile unsigned long long NUMBER_BUFFER=0;
    4e04:	1b aa       	std	Y+51, r1	; 0x33
    4e06:	1c aa       	std	Y+52, r1	; 0x34
    4e08:	1d aa       	std	Y+53, r1	; 0x35
    4e0a:	1e aa       	std	Y+54, r1	; 0x36
    4e0c:	1f aa       	std	Y+55, r1	; 0x37
    4e0e:	18 ae       	std	Y+56, r1	; 0x38
    4e10:	19 ae       	std	Y+57, r1	; 0x39
    4e12:	1a ae       	std	Y+58, r1	; 0x3a
		volatile unsigned char NUMBER_STRING_BUFFER[20];
		
		for(i=0;i<SENSOR_SEND_BUFFER_LENGTH;i++)
    4e14:	1e ae       	std	Y+62, r1	; 0x3e
    4e16:	9e ad       	ldd	r25, Y+62	; 0x3e
    4e18:	80 91 2a 03 	lds	r24, 0x032A
    4e1c:	98 17       	cp	r25, r24
    4e1e:	08 f0       	brcs	.+2      	; 0x4e22 <SENSORS_APPLY_SEND_BUFFER+0x58>
    4e20:	10 c4       	rjmp	.+2080   	; 0x5642 <SENSORS_APPLY_SEND_BUFFER+0x878>
		{
			BUFFER_INDEX=SENSOR_SEND_BUFFER[i].SENSOR_INDEX;
			if (MY_SENSORS[BUFFER_INDEX].SENSOR_STATE)
    4e22:	0f 2e       	mov	r0, r31
    4e24:	f9 e1       	ldi	r31, 0x19	; 25
    4e26:	df 2e       	mov	r13, r31
    4e28:	f0 2d       	mov	r31, r0
							
							
							MY_SENSORS[BUFFER_INDEX].C_FAILED_BEACON=0;
							MY_SENSORS[BUFFER_INDEX].SEND_FAIL_COUNTER=0;
							
							RESULT_STATE=1;
    4e2a:	66 24       	eor	r6, r6
    4e2c:	63 94       	inc	r6
							
							
							DATA_SEND_BUFFER[0]='A';/*MEANS THE MASTER SEND TO ANDROID*/
    4e2e:	0f 2e       	mov	r0, r31
    4e30:	f1 e4       	ldi	r31, 0x41	; 65
    4e32:	9f 2e       	mov	r9, r31
    4e34:	f0 2d       	mov	r31, r0
							DATA_SEND_BUFFER[1]=':';/*COTATION*/
    4e36:	0f 2e       	mov	r0, r31
    4e38:	fa e3       	ldi	r31, 0x3A	; 58
    4e3a:	cf 2e       	mov	r12, r31
    4e3c:	f0 2d       	mov	r31, r0
							{
								DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
							}
							LENGTH=2+count;
							DATA_SEND_BUFFER[LENGTH]=':';
							DATA_SEND_BUFFER[LENGTH+1]='D';/*MASTER RETURN WRITE DONE TO ANDROID*/
    4e3e:	0f 2e       	mov	r0, r31
    4e40:	f4 e4       	ldi	r31, 0x44	; 68
    4e42:	7f 2e       	mov	r7, r31
    4e44:	f0 2d       	mov	r31, r0
					{
						DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
					}
					LENGTH=2+count;
					DATA_SEND_BUFFER[LENGTH]=':';
					DATA_SEND_BUFFER[LENGTH+1]='T';/*MASTER RETURN WRITE FAILED TO ANDROID*/
    4e46:	0f 2e       	mov	r0, r31
    4e48:	f4 e5       	ldi	r31, 0x54	; 84
    4e4a:	8f 2e       	mov	r8, r31
    4e4c:	f0 2d       	mov	r31, r0
						NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].NEW_VALUE[(unsigned char)count];
					}
				
					unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
					/*DATA*/
					for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    4e4e:	a1 2c       	mov	r10, r1
    4e50:	b1 2c       	mov	r11, r1
		volatile unsigned long long NUMBER_BUFFER=0;
		volatile unsigned char NUMBER_STRING_BUFFER[20];
		
		for(i=0;i<SENSOR_SEND_BUFFER_LENGTH;i++)
		{
			BUFFER_INDEX=SENSOR_SEND_BUFFER[i].SENSOR_INDEX;
    4e52:	8e ad       	ldd	r24, Y+62	; 0x3e
    4e54:	90 e0       	ldi	r25, 0x00	; 0
    4e56:	fc 01       	movw	r30, r24
    4e58:	ee 0f       	add	r30, r30
    4e5a:	ff 1f       	adc	r31, r31
    4e5c:	ee 0f       	add	r30, r30
    4e5e:	ff 1f       	adc	r31, r31
    4e60:	8e 0f       	add	r24, r30
    4e62:	9f 1f       	adc	r25, r31
    4e64:	fc 01       	movw	r30, r24
    4e66:	e2 55       	subi	r30, 0x52	; 82
    4e68:	fc 4f       	sbci	r31, 0xFC	; 252
    4e6a:	80 81       	ld	r24, Z
    4e6c:	8d af       	std	Y+61, r24	; 0x3d
			if (MY_SENSORS[BUFFER_INDEX].SENSOR_STATE)
    4e6e:	ed ad       	ldd	r30, Y+61	; 0x3d
    4e70:	de 9e       	mul	r13, r30
    4e72:	f0 01       	movw	r30, r0
    4e74:	11 24       	eor	r1, r1
    4e76:	ef 51       	subi	r30, 0x1F	; 31
    4e78:	fc 4f       	sbci	r31, 0xFC	; 252
    4e7a:	84 85       	ldd	r24, Z+12	; 0x0c
    4e7c:	88 23       	and	r24, r24
    4e7e:	09 f4       	brne	.+2      	; 0x4e82 <SENSORS_APPLY_SEND_BUFFER+0xb8>
    4e80:	06 c2       	rjmp	.+1036   	; 0x528e <SENSORS_APPLY_SEND_BUFFER+0x4c4>
			{
				if (MY_SENSORS[BUFFER_INDEX].F_CONNECTED)
    4e82:	ed ad       	ldd	r30, Y+61	; 0x3d
    4e84:	de 9e       	mul	r13, r30
    4e86:	f0 01       	movw	r30, r0
    4e88:	11 24       	eor	r1, r1
    4e8a:	ef 51       	subi	r30, 0x1F	; 31
    4e8c:	fc 4f       	sbci	r31, 0xFC	; 252
    4e8e:	86 85       	ldd	r24, Z+14	; 0x0e
    4e90:	88 23       	and	r24, r24
    4e92:	09 f4       	brne	.+2      	; 0x4e96 <SENSORS_APPLY_SEND_BUFFER+0xcc>
    4e94:	fc c1       	rjmp	.+1016   	; 0x528e <SENSORS_APPLY_SEND_BUFFER+0x4c4>
				{
					if (MY_SENSORS[BUFFER_INDEX].F_HAVE_SESSION_KEY)
    4e96:	ed ad       	ldd	r30, Y+61	; 0x3d
    4e98:	de 9e       	mul	r13, r30
    4e9a:	f0 01       	movw	r30, r0
    4e9c:	11 24       	eor	r1, r1
    4e9e:	ef 51       	subi	r30, 0x1F	; 31
    4ea0:	fc 4f       	sbci	r31, 0xFC	; 252
    4ea2:	84 89       	ldd	r24, Z+20	; 0x14
    4ea4:	88 23       	and	r24, r24
    4ea6:	09 f4       	brne	.+2      	; 0x4eaa <SENSORS_APPLY_SEND_BUFFER+0xe0>
    4ea8:	f2 c1       	rjmp	.+996    	; 0x528e <SENSORS_APPLY_SEND_BUFFER+0x4c4>
						
						
						/**************/
						
						
						NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[MY_SENSORS[BUFFER_INDEX].USED_CHANNEL]);
    4eaa:	ed ad       	ldd	r30, Y+61	; 0x3d
    4eac:	de 9e       	mul	r13, r30
    4eae:	f0 01       	movw	r30, r0
    4eb0:	11 24       	eor	r1, r1
    4eb2:	ef 51       	subi	r30, 0x1F	; 31
    4eb4:	fc 4f       	sbci	r31, 0xFC	; 252
    4eb6:	e3 89       	ldd	r30, Z+19	; 0x13
    4eb8:	f0 e0       	ldi	r31, 0x00	; 0
    4eba:	ee 5e       	subi	r30, 0xEE	; 238
    4ebc:	fe 4f       	sbci	r31, 0xFE	; 254
    4ebe:	80 81       	ld	r24, Z
    4ec0:	0e 94 2c 10 	call	0x2058	; 0x2058 <NRF_UPDATE_USED_CHANNEL>
						if (PROTOCOL_DATA_SEND(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS,MY_SENSORS[BUFFER_INDEX].SENSOR_VERSION,MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH,MY_SENSORS[BUFFER_INDEX].SESSION_KEY,SENSOR_SEND_BUFFER[i].ADDRESS_REGISTER,SENSOR_SEND_BUFFER[i].NEW_VALUE))
    4ec4:	ae ad       	ldd	r26, Y+62	; 0x3e
    4ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
    4ec8:	2d ad       	ldd	r18, Y+61	; 0x3d
    4eca:	ed ad       	ldd	r30, Y+61	; 0x3d
    4ecc:	de 9e       	mul	r13, r30
    4ece:	f0 01       	movw	r30, r0
    4ed0:	11 24       	eor	r1, r1
    4ed2:	ef 51       	subi	r30, 0x1F	; 31
    4ed4:	fc 4f       	sbci	r31, 0xFC	; 252
    4ed6:	40 81       	ld	r20, Z
    4ed8:	ed ad       	ldd	r30, Y+61	; 0x3d
    4eda:	de 9e       	mul	r13, r30
    4edc:	f0 01       	movw	r30, r0
    4ede:	11 24       	eor	r1, r1
    4ee0:	ef 51       	subi	r30, 0x1F	; 31
    4ee2:	fc 4f       	sbci	r31, 0xFC	; 252
    4ee4:	62 85       	ldd	r22, Z+10	; 0x0a
    4ee6:	8d ad       	ldd	r24, Y+61	; 0x3d
    4ee8:	b0 e0       	ldi	r27, 0x00	; 0
    4eea:	7d 01       	movw	r14, r26
    4eec:	ee 0c       	add	r14, r14
    4eee:	ff 1c       	adc	r15, r15
    4ef0:	ee 0c       	add	r14, r14
    4ef2:	ff 1c       	adc	r15, r15
    4ef4:	ae 0d       	add	r26, r14
    4ef6:	bf 1d       	adc	r27, r15
    4ef8:	fd 01       	movw	r30, r26
    4efa:	ef 54       	subi	r30, 0x4F	; 79
    4efc:	fc 4f       	sbci	r31, 0xFC	; 252
    4efe:	7f 01       	movw	r14, r30
    4f00:	e9 2f       	mov	r30, r25
    4f02:	f0 e0       	ldi	r31, 0x00	; 0
    4f04:	8f 01       	movw	r16, r30
    4f06:	00 0f       	add	r16, r16
    4f08:	11 1f       	adc	r17, r17
    4f0a:	00 0f       	add	r16, r16
    4f0c:	11 1f       	adc	r17, r17
    4f0e:	e0 0f       	add	r30, r16
    4f10:	f1 1f       	adc	r31, r17
    4f12:	8f 01       	movw	r16, r30
    4f14:	01 55       	subi	r16, 0x51	; 81
    4f16:	1c 4f       	sbci	r17, 0xFC	; 252
    4f18:	d2 9e       	mul	r13, r18
    4f1a:	90 01       	movw	r18, r0
    4f1c:	11 24       	eor	r1, r1
    4f1e:	2a 50       	subi	r18, 0x0A	; 10
    4f20:	3c 4f       	sbci	r19, 0xFC	; 252
    4f22:	d8 9e       	mul	r13, r24
    4f24:	c0 01       	movw	r24, r0
    4f26:	11 24       	eor	r1, r1
    4f28:	8e 51       	subi	r24, 0x1E	; 30
    4f2a:	9c 4f       	sbci	r25, 0xFC	; 252
    4f2c:	0e 94 b2 18 	call	0x3164	; 0x3164 <PROTOCOL_DATA_SEND>
    4f30:	88 23       	and	r24, r24
    4f32:	09 f4       	brne	.+2      	; 0x4f36 <SENSORS_APPLY_SEND_BUFFER+0x16c>
    4f34:	ac c1       	rjmp	.+856    	; 0x528e <SENSORS_APPLY_SEND_BUFFER+0x4c4>
						{
							/*TESTING*/
							TEST_UART_SEND_str("\n");
    4f36:	8e e7       	ldi	r24, 0x7E	; 126
    4f38:	91 e0       	ldi	r25, 0x01	; 1
    4f3a:	68 d7       	rcall	.+3792   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f3c:	8e e7       	ldi	r24, 0x7E	; 126
    4f3e:	91 e0       	ldi	r25, 0x01	; 1
    4f40:	65 d7       	rcall	.+3786   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f42:	8e e7       	ldi	r24, 0x7E	; 126
    4f44:	91 e0       	ldi	r25, 0x01	; 1
    4f46:	62 d7       	rcall	.+3780   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f48:	8e e7       	ldi	r24, 0x7E	; 126
    4f4a:	91 e0       	ldi	r25, 0x01	; 1
    4f4c:	5f d7       	rcall	.+3774   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f4e:	8e e7       	ldi	r24, 0x7E	; 126
    4f50:	91 e0       	ldi	r25, 0x01	; 1
    4f52:	5c d7       	rcall	.+3768   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f54:	8e e7       	ldi	r24, 0x7E	; 126
    4f56:	91 e0       	ldi	r25, 0x01	; 1
    4f58:	59 d7       	rcall	.+3762   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f5a:	8e e7       	ldi	r24, 0x7E	; 126
    4f5c:	91 e0       	ldi	r25, 0x01	; 1
    4f5e:	56 d7       	rcall	.+3756   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f60:	8e e7       	ldi	r24, 0x7E	; 126
    4f62:	91 e0       	ldi	r25, 0x01	; 1
    4f64:	53 d7       	rcall	.+3750   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("DATA SEND DONE ");
    4f66:	87 ed       	ldi	r24, 0xD7	; 215
    4f68:	92 e0       	ldi	r25, 0x02	; 2
    4f6a:	50 d7       	rcall	.+3744   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE(BUFFER_INDEX);
    4f6c:	2d ad       	ldd	r18, Y+61	; 0x3d
    4f6e:	30 e0       	ldi	r19, 0x00	; 0
    4f70:	40 e0       	ldi	r20, 0x00	; 0
    4f72:	50 e0       	ldi	r21, 0x00	; 0
    4f74:	60 e0       	ldi	r22, 0x00	; 0
    4f76:	70 e0       	ldi	r23, 0x00	; 0
    4f78:	80 e0       	ldi	r24, 0x00	; 0
    4f7a:	90 e0       	ldi	r25, 0x00	; 0
    4f7c:	52 d7       	rcall	.+3748   	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_str("\n");
    4f7e:	8e e7       	ldi	r24, 0x7E	; 126
    4f80:	91 e0       	ldi	r25, 0x01	; 1
    4f82:	44 d7       	rcall	.+3720   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f84:	8e e7       	ldi	r24, 0x7E	; 126
    4f86:	91 e0       	ldi	r25, 0x01	; 1
    4f88:	41 d7       	rcall	.+3714   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f8a:	8e e7       	ldi	r24, 0x7E	; 126
    4f8c:	91 e0       	ldi	r25, 0x01	; 1
    4f8e:	3e d7       	rcall	.+3708   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f90:	8e e7       	ldi	r24, 0x7E	; 126
    4f92:	91 e0       	ldi	r25, 0x01	; 1
    4f94:	3b d7       	rcall	.+3702   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f96:	8e e7       	ldi	r24, 0x7E	; 126
    4f98:	91 e0       	ldi	r25, 0x01	; 1
    4f9a:	38 d7       	rcall	.+3696   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4f9c:	8e e7       	ldi	r24, 0x7E	; 126
    4f9e:	91 e0       	ldi	r25, 0x01	; 1
    4fa0:	35 d7       	rcall	.+3690   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4fa2:	8e e7       	ldi	r24, 0x7E	; 126
    4fa4:	91 e0       	ldi	r25, 0x01	; 1
    4fa6:	32 d7       	rcall	.+3684   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    4fa8:	8e e7       	ldi	r24, 0x7E	; 126
    4faa:	91 e0       	ldi	r25, 0x01	; 1
    4fac:	2f d7       	rcall	.+3678   	; 0x5e0c <TEST_UART_SEND_str>
							/*TESTING*/
							
							
							MY_SENSORS[BUFFER_INDEX].C_FAILED_BEACON=0;
    4fae:	ed ad       	ldd	r30, Y+61	; 0x3d
    4fb0:	de 9e       	mul	r13, r30
    4fb2:	f0 01       	movw	r30, r0
    4fb4:	11 24       	eor	r1, r1
    4fb6:	ef 51       	subi	r30, 0x1F	; 31
    4fb8:	fc 4f       	sbci	r31, 0xFC	; 252
    4fba:	11 8a       	std	Z+17, r1	; 0x11
							MY_SENSORS[BUFFER_INDEX].SEND_FAIL_COUNTER=0;
    4fbc:	ed ad       	ldd	r30, Y+61	; 0x3d
    4fbe:	de 9e       	mul	r13, r30
    4fc0:	f0 01       	movw	r30, r0
    4fc2:	11 24       	eor	r1, r1
    4fc4:	ef 51       	subi	r30, 0x1F	; 31
    4fc6:	fc 4f       	sbci	r31, 0xFC	; 252
    4fc8:	17 8a       	std	Z+23, r1	; 0x17
							
							RESULT_STATE=1;
    4fca:	6c ae       	std	Y+60, r6	; 0x3c
							
							
							DATA_SEND_BUFFER[0]='A';/*MEANS THE MASTER SEND TO ANDROID*/
    4fcc:	99 82       	std	Y+1, r9	; 0x01
							DATA_SEND_BUFFER[1]=':';/*COTATION*/
    4fce:	ca 82       	std	Y+2, r12	; 0x02
								  ADDRESS[2]
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
							volatile char count;
							for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    4fd0:	ed ad       	ldd	r30, Y+61	; 0x3d
    4fd2:	de 9e       	mul	r13, r30
    4fd4:	f0 01       	movw	r30, r0
    4fd6:	11 24       	eor	r1, r1
    4fd8:	ef 51       	subi	r30, 0x1F	; 31
    4fda:	fc 4f       	sbci	r31, 0xFC	; 252
    4fdc:	80 81       	ld	r24, Z
    4fde:	8b af       	std	Y+59, r24	; 0x3b
    4fe0:	8b ad       	ldd	r24, Y+59	; 0x3b
    4fe2:	88 23       	and	r24, r24
    4fe4:	21 f1       	breq	.+72     	; 0x502e <SENSORS_APPLY_SEND_BUFFER+0x264>
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
    4fe6:	2b a9       	ldd	r18, Y+51	; 0x33
    4fe8:	3c a9       	ldd	r19, Y+52	; 0x34
    4fea:	4d a9       	ldd	r20, Y+53	; 0x35
    4fec:	5e a9       	ldd	r21, Y+54	; 0x36
    4fee:	6f a9       	ldd	r22, Y+55	; 0x37
    4ff0:	78 ad       	ldd	r23, Y+56	; 0x38
    4ff2:	89 ad       	ldd	r24, Y+57	; 0x39
    4ff4:	9a ad       	ldd	r25, Y+58	; 0x3a
    4ff6:	ad ad       	ldd	r26, Y+61	; 0x3d
    4ff8:	eb ad       	ldd	r30, Y+59	; 0x3b
    4ffa:	f0 e0       	ldi	r31, 0x00	; 0
    4ffc:	da 9e       	mul	r13, r26
    4ffe:	e0 0d       	add	r30, r0
    5000:	f1 1d       	adc	r31, r1
    5002:	11 24       	eor	r1, r1
    5004:	e0 52       	subi	r30, 0x20	; 32
    5006:	fc 4f       	sbci	r31, 0xFC	; 252
    5008:	e1 81       	ldd	r30, Z+1	; 0x01
    500a:	08 e0       	ldi	r16, 0x08	; 8
    500c:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    5010:	e2 2b       	or	r30, r18
    5012:	eb ab       	std	Y+51, r30	; 0x33
    5014:	3c ab       	std	Y+52, r19	; 0x34
    5016:	4d ab       	std	Y+53, r20	; 0x35
    5018:	5e ab       	std	Y+54, r21	; 0x36
    501a:	6f ab       	std	Y+55, r22	; 0x37
    501c:	78 af       	std	Y+56, r23	; 0x38
    501e:	89 af       	std	Y+57, r24	; 0x39
    5020:	9a af       	std	Y+58, r25	; 0x3a
								  ADDRESS[2]
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
							volatile char count;
							for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    5022:	8b ad       	ldd	r24, Y+59	; 0x3b
    5024:	81 50       	subi	r24, 0x01	; 1
    5026:	8b af       	std	Y+59, r24	; 0x3b
    5028:	8b ad       	ldd	r24, Y+59	; 0x3b
    502a:	81 11       	cpse	r24, r1
    502c:	dc cf       	rjmp	.-72     	; 0x4fe6 <SENSORS_APPLY_SEND_BUFFER+0x21c>
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
							}
							
							
							
							unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    502e:	0b a9       	ldd	r16, Y+51	; 0x33
    5030:	1c a9       	ldd	r17, Y+52	; 0x34
    5032:	2d a9       	ldd	r18, Y+53	; 0x35
    5034:	3e a9       	ldd	r19, Y+54	; 0x36
    5036:	4f a9       	ldd	r20, Y+55	; 0x37
    5038:	58 ad       	ldd	r21, Y+56	; 0x38
    503a:	69 ad       	ldd	r22, Y+57	; 0x39
    503c:	7a ad       	ldd	r23, Y+58	; 0x3a
    503e:	ce 01       	movw	r24, r28
    5040:	4f 96       	adiw	r24, 0x1f	; 31
    5042:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
							/*SENSOR ADDRESS*/
							for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    5046:	1b ae       	std	Y+59, r1	; 0x3b
    5048:	9b ad       	ldd	r25, Y+59	; 0x3b
    504a:	98 17       	cp	r25, r24
    504c:	c0 f4       	brcc	.+48     	; 0x507e <SENSORS_APPLY_SEND_BUFFER+0x2b4>
							{
								DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    504e:	eb ad       	ldd	r30, Y+59	; 0x3b
    5050:	f0 e0       	ldi	r31, 0x00	; 0
    5052:	32 96       	adiw	r30, 0x02	; 2
    5054:	9b ad       	ldd	r25, Y+59	; 0x3b
    5056:	af e1       	ldi	r26, 0x1F	; 31
    5058:	b0 e0       	ldi	r27, 0x00	; 0
    505a:	ac 0f       	add	r26, r28
    505c:	bd 1f       	adc	r27, r29
    505e:	a9 0f       	add	r26, r25
    5060:	b1 1d       	adc	r27, r1
    5062:	9c 91       	ld	r25, X
    5064:	21 e0       	ldi	r18, 0x01	; 1
    5066:	30 e0       	ldi	r19, 0x00	; 0
    5068:	2c 0f       	add	r18, r28
    506a:	3d 1f       	adc	r19, r29
    506c:	e2 0f       	add	r30, r18
    506e:	f3 1f       	adc	r31, r19
    5070:	90 83       	st	Z, r25
							
							
							
							unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
							/*SENSOR ADDRESS*/
							for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    5072:	9b ad       	ldd	r25, Y+59	; 0x3b
    5074:	9f 5f       	subi	r25, 0xFF	; 255
    5076:	9b af       	std	Y+59, r25	; 0x3b
    5078:	9b ad       	ldd	r25, Y+59	; 0x3b
    507a:	98 17       	cp	r25, r24
    507c:	40 f3       	brcs	.-48     	; 0x504e <SENSORS_APPLY_SEND_BUFFER+0x284>
							{
								DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
							}
							LENGTH=2+count;
    507e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5080:	8e 5f       	subi	r24, 0xFE	; 254
    5082:	8f af       	std	Y+63, r24	; 0x3f
							DATA_SEND_BUFFER[LENGTH]=':';
    5084:	8f ad       	ldd	r24, Y+63	; 0x3f
    5086:	e1 e0       	ldi	r30, 0x01	; 1
    5088:	f0 e0       	ldi	r31, 0x00	; 0
    508a:	ec 0f       	add	r30, r28
    508c:	fd 1f       	adc	r31, r29
    508e:	e8 0f       	add	r30, r24
    5090:	f1 1d       	adc	r31, r1
    5092:	c0 82       	st	Z, r12
							DATA_SEND_BUFFER[LENGTH+1]='D';/*MASTER RETURN WRITE DONE TO ANDROID*/
    5094:	ef ad       	ldd	r30, Y+63	; 0x3f
    5096:	f0 e0       	ldi	r31, 0x00	; 0
    5098:	31 96       	adiw	r30, 0x01	; 1
    509a:	41 e0       	ldi	r20, 0x01	; 1
    509c:	50 e0       	ldi	r21, 0x00	; 0
    509e:	4c 0f       	add	r20, r28
    50a0:	5d 1f       	adc	r21, r29
    50a2:	e4 0f       	add	r30, r20
    50a4:	f5 1f       	adc	r31, r21
    50a6:	70 82       	st	Z, r7
							DATA_SEND_BUFFER[LENGTH+2]=':';
    50a8:	ef ad       	ldd	r30, Y+63	; 0x3f
    50aa:	f0 e0       	ldi	r31, 0x00	; 0
    50ac:	32 96       	adiw	r30, 0x02	; 2
    50ae:	e4 0f       	add	r30, r20
    50b0:	f5 1f       	adc	r31, r21
    50b2:	c0 82       	st	Z, r12
							LENGTH=LENGTH+3;
    50b4:	8f ad       	ldd	r24, Y+63	; 0x3f
    50b6:	8d 5f       	subi	r24, 0xFD	; 253
    50b8:	8f af       	std	Y+63, r24	; 0x3f
							
							NUMBER_BUFFER=0;
    50ba:	1b aa       	std	Y+51, r1	; 0x33
    50bc:	1c aa       	std	Y+52, r1	; 0x34
    50be:	1d aa       	std	Y+53, r1	; 0x35
    50c0:	1e aa       	std	Y+54, r1	; 0x36
    50c2:	1f aa       	std	Y+55, r1	; 0x37
    50c4:	18 ae       	std	Y+56, r1	; 0x38
    50c6:	19 ae       	std	Y+57, r1	; 0x39
    50c8:	1a ae       	std	Y+58, r1	; 0x3a
							for (count=0;count<2;count++)
    50ca:	1b ae       	std	Y+59, r1	; 0x3b
    50cc:	8b ad       	ldd	r24, Y+59	; 0x3b
    50ce:	82 30       	cpi	r24, 0x02	; 2
    50d0:	48 f5       	brcc	.+82     	; 0x5124 <SENSORS_APPLY_SEND_BUFFER+0x35a>
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
    50d2:	2b a9       	ldd	r18, Y+51	; 0x33
    50d4:	3c a9       	ldd	r19, Y+52	; 0x34
    50d6:	4d a9       	ldd	r20, Y+53	; 0x35
    50d8:	5e a9       	ldd	r21, Y+54	; 0x36
    50da:	6f a9       	ldd	r22, Y+55	; 0x37
    50dc:	78 ad       	ldd	r23, Y+56	; 0x38
    50de:	89 ad       	ldd	r24, Y+57	; 0x39
    50e0:	9a ad       	ldd	r25, Y+58	; 0x3a
    50e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    50e4:	f0 e0       	ldi	r31, 0x00	; 0
    50e6:	1b ad       	ldd	r17, Y+59	; 0x3b
    50e8:	df 01       	movw	r26, r30
    50ea:	aa 0f       	add	r26, r26
    50ec:	bb 1f       	adc	r27, r27
    50ee:	aa 0f       	add	r26, r26
    50f0:	bb 1f       	adc	r27, r27
    50f2:	ea 0f       	add	r30, r26
    50f4:	fb 1f       	adc	r31, r27
    50f6:	e2 55       	subi	r30, 0x52	; 82
    50f8:	fc 4f       	sbci	r31, 0xFC	; 252
    50fa:	e1 0f       	add	r30, r17
    50fc:	f1 1d       	adc	r31, r1
    50fe:	e1 81       	ldd	r30, Z+1	; 0x01
    5100:	08 e0       	ldi	r16, 0x08	; 8
    5102:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    5106:	e2 2b       	or	r30, r18
    5108:	eb ab       	std	Y+51, r30	; 0x33
    510a:	3c ab       	std	Y+52, r19	; 0x34
    510c:	4d ab       	std	Y+53, r20	; 0x35
    510e:	5e ab       	std	Y+54, r21	; 0x36
    5110:	6f ab       	std	Y+55, r22	; 0x37
    5112:	78 af       	std	Y+56, r23	; 0x38
    5114:	89 af       	std	Y+57, r24	; 0x39
    5116:	9a af       	std	Y+58, r25	; 0x3a
							DATA_SEND_BUFFER[LENGTH+1]='D';/*MASTER RETURN WRITE DONE TO ANDROID*/
							DATA_SEND_BUFFER[LENGTH+2]=':';
							LENGTH=LENGTH+3;
							
							NUMBER_BUFFER=0;
							for (count=0;count<2;count++)
    5118:	8b ad       	ldd	r24, Y+59	; 0x3b
    511a:	8f 5f       	subi	r24, 0xFF	; 255
    511c:	8b af       	std	Y+59, r24	; 0x3b
    511e:	8b ad       	ldd	r24, Y+59	; 0x3b
    5120:	82 30       	cpi	r24, 0x02	; 2
    5122:	b8 f2       	brcs	.-82     	; 0x50d2 <SENSORS_APPLY_SEND_BUFFER+0x308>
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
							}
							
							unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    5124:	0b a9       	ldd	r16, Y+51	; 0x33
    5126:	1c a9       	ldd	r17, Y+52	; 0x34
    5128:	2d a9       	ldd	r18, Y+53	; 0x35
    512a:	3e a9       	ldd	r19, Y+54	; 0x36
    512c:	4f a9       	ldd	r20, Y+55	; 0x37
    512e:	58 ad       	ldd	r21, Y+56	; 0x38
    5130:	69 ad       	ldd	r22, Y+57	; 0x39
    5132:	7a ad       	ldd	r23, Y+58	; 0x3a
    5134:	ce 01       	movw	r24, r28
    5136:	4f 96       	adiw	r24, 0x1f	; 31
    5138:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
							/*ADDRESS REGISTER*/
							for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    513c:	1b ae       	std	Y+59, r1	; 0x3b
    513e:	9b ad       	ldd	r25, Y+59	; 0x3b
    5140:	98 17       	cp	r25, r24
    5142:	d0 f4       	brcc	.+52     	; 0x5178 <SENSORS_APPLY_SEND_BUFFER+0x3ae>
							{
								DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    5144:	9f ad       	ldd	r25, Y+63	; 0x3f
    5146:	eb ad       	ldd	r30, Y+59	; 0x3b
    5148:	f0 e0       	ldi	r31, 0x00	; 0
    514a:	e9 0f       	add	r30, r25
    514c:	f1 1d       	adc	r31, r1
    514e:	9b ad       	ldd	r25, Y+59	; 0x3b
    5150:	af e1       	ldi	r26, 0x1F	; 31
    5152:	b0 e0       	ldi	r27, 0x00	; 0
    5154:	ac 0f       	add	r26, r28
    5156:	bd 1f       	adc	r27, r29
    5158:	a9 0f       	add	r26, r25
    515a:	b1 1d       	adc	r27, r1
    515c:	9c 91       	ld	r25, X
    515e:	21 e0       	ldi	r18, 0x01	; 1
    5160:	30 e0       	ldi	r19, 0x00	; 0
    5162:	2c 0f       	add	r18, r28
    5164:	3d 1f       	adc	r19, r29
    5166:	e2 0f       	add	r30, r18
    5168:	f3 1f       	adc	r31, r19
    516a:	90 83       	st	Z, r25
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
							}
							
							unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
							/*ADDRESS REGISTER*/
							for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    516c:	9b ad       	ldd	r25, Y+59	; 0x3b
    516e:	9f 5f       	subi	r25, 0xFF	; 255
    5170:	9b af       	std	Y+59, r25	; 0x3b
    5172:	9b ad       	ldd	r25, Y+59	; 0x3b
    5174:	98 17       	cp	r25, r24
    5176:	30 f3       	brcs	.-52     	; 0x5144 <SENSORS_APPLY_SEND_BUFFER+0x37a>
							{
								DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
							}
							LENGTH=LENGTH+count;
    5178:	8f ad       	ldd	r24, Y+63	; 0x3f
    517a:	9b ad       	ldd	r25, Y+59	; 0x3b
    517c:	89 0f       	add	r24, r25
    517e:	8f af       	std	Y+63, r24	; 0x3f
							DATA_SEND_BUFFER[LENGTH]=':';
    5180:	8f ad       	ldd	r24, Y+63	; 0x3f
    5182:	e1 e0       	ldi	r30, 0x01	; 1
    5184:	f0 e0       	ldi	r31, 0x00	; 0
    5186:	ec 0f       	add	r30, r28
    5188:	fd 1f       	adc	r31, r29
    518a:	e8 0f       	add	r30, r24
    518c:	f1 1d       	adc	r31, r1
    518e:	c0 82       	st	Z, r12
							LENGTH++;
    5190:	8f ad       	ldd	r24, Y+63	; 0x3f
    5192:	8f 5f       	subi	r24, 0xFF	; 255
    5194:	8f af       	std	Y+63, r24	; 0x3f
							
							NUMBER_BUFFER=0;
    5196:	1b aa       	std	Y+51, r1	; 0x33
    5198:	1c aa       	std	Y+52, r1	; 0x34
    519a:	1d aa       	std	Y+53, r1	; 0x35
    519c:	1e aa       	std	Y+54, r1	; 0x36
    519e:	1f aa       	std	Y+55, r1	; 0x37
    51a0:	18 ae       	std	Y+56, r1	; 0x38
    51a2:	19 ae       	std	Y+57, r1	; 0x39
    51a4:	1a ae       	std	Y+58, r1	; 0x3a
							for (count=0;count<2;count++)
    51a6:	1b ae       	std	Y+59, r1	; 0x3b
    51a8:	8b ad       	ldd	r24, Y+59	; 0x3b
    51aa:	82 30       	cpi	r24, 0x02	; 2
    51ac:	48 f5       	brcc	.+82     	; 0x5200 <SENSORS_APPLY_SEND_BUFFER+0x436>
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].NEW_VALUE[(unsigned char)count];
    51ae:	2b a9       	ldd	r18, Y+51	; 0x33
    51b0:	3c a9       	ldd	r19, Y+52	; 0x34
    51b2:	4d a9       	ldd	r20, Y+53	; 0x35
    51b4:	5e a9       	ldd	r21, Y+54	; 0x36
    51b6:	6f a9       	ldd	r22, Y+55	; 0x37
    51b8:	78 ad       	ldd	r23, Y+56	; 0x38
    51ba:	89 ad       	ldd	r24, Y+57	; 0x39
    51bc:	9a ad       	ldd	r25, Y+58	; 0x3a
    51be:	ee ad       	ldd	r30, Y+62	; 0x3e
    51c0:	f0 e0       	ldi	r31, 0x00	; 0
    51c2:	1b ad       	ldd	r17, Y+59	; 0x3b
    51c4:	df 01       	movw	r26, r30
    51c6:	aa 0f       	add	r26, r26
    51c8:	bb 1f       	adc	r27, r27
    51ca:	aa 0f       	add	r26, r26
    51cc:	bb 1f       	adc	r27, r27
    51ce:	ea 0f       	add	r30, r26
    51d0:	fb 1f       	adc	r31, r27
    51d2:	e2 55       	subi	r30, 0x52	; 82
    51d4:	fc 4f       	sbci	r31, 0xFC	; 252
    51d6:	e1 0f       	add	r30, r17
    51d8:	f1 1d       	adc	r31, r1
    51da:	e3 81       	ldd	r30, Z+3	; 0x03
    51dc:	08 e0       	ldi	r16, 0x08	; 8
    51de:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    51e2:	e2 2b       	or	r30, r18
    51e4:	eb ab       	std	Y+51, r30	; 0x33
    51e6:	3c ab       	std	Y+52, r19	; 0x34
    51e8:	4d ab       	std	Y+53, r20	; 0x35
    51ea:	5e ab       	std	Y+54, r21	; 0x36
    51ec:	6f ab       	std	Y+55, r22	; 0x37
    51ee:	78 af       	std	Y+56, r23	; 0x38
    51f0:	89 af       	std	Y+57, r24	; 0x39
    51f2:	9a af       	std	Y+58, r25	; 0x3a
							LENGTH=LENGTH+count;
							DATA_SEND_BUFFER[LENGTH]=':';
							LENGTH++;
							
							NUMBER_BUFFER=0;
							for (count=0;count<2;count++)
    51f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    51f6:	8f 5f       	subi	r24, 0xFF	; 255
    51f8:	8b af       	std	Y+59, r24	; 0x3b
    51fa:	8b ad       	ldd	r24, Y+59	; 0x3b
    51fc:	82 30       	cpi	r24, 0x02	; 2
    51fe:	b8 f2       	brcs	.-82     	; 0x51ae <SENSORS_APPLY_SEND_BUFFER+0x3e4>
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].NEW_VALUE[(unsigned char)count];
							}
							
							unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    5200:	0b a9       	ldd	r16, Y+51	; 0x33
    5202:	1c a9       	ldd	r17, Y+52	; 0x34
    5204:	2d a9       	ldd	r18, Y+53	; 0x35
    5206:	3e a9       	ldd	r19, Y+54	; 0x36
    5208:	4f a9       	ldd	r20, Y+55	; 0x37
    520a:	58 ad       	ldd	r21, Y+56	; 0x38
    520c:	69 ad       	ldd	r22, Y+57	; 0x39
    520e:	7a ad       	ldd	r23, Y+58	; 0x3a
    5210:	ce 01       	movw	r24, r28
    5212:	4f 96       	adiw	r24, 0x1f	; 31
    5214:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
							/*DATA*/
							for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    5218:	1b ae       	std	Y+59, r1	; 0x3b
    521a:	9b ad       	ldd	r25, Y+59	; 0x3b
    521c:	98 17       	cp	r25, r24
    521e:	d0 f4       	brcc	.+52     	; 0x5254 <SENSORS_APPLY_SEND_BUFFER+0x48a>
							{
								DATA_SEND_BUFFER[LENGTH+count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    5220:	9f ad       	ldd	r25, Y+63	; 0x3f
    5222:	eb ad       	ldd	r30, Y+59	; 0x3b
    5224:	f0 e0       	ldi	r31, 0x00	; 0
    5226:	e9 0f       	add	r30, r25
    5228:	f1 1d       	adc	r31, r1
    522a:	9b ad       	ldd	r25, Y+59	; 0x3b
    522c:	af e1       	ldi	r26, 0x1F	; 31
    522e:	b0 e0       	ldi	r27, 0x00	; 0
    5230:	ac 0f       	add	r26, r28
    5232:	bd 1f       	adc	r27, r29
    5234:	a9 0f       	add	r26, r25
    5236:	b1 1d       	adc	r27, r1
    5238:	9c 91       	ld	r25, X
    523a:	41 e0       	ldi	r20, 0x01	; 1
    523c:	50 e0       	ldi	r21, 0x00	; 0
    523e:	4c 0f       	add	r20, r28
    5240:	5d 1f       	adc	r21, r29
    5242:	e4 0f       	add	r30, r20
    5244:	f5 1f       	adc	r31, r21
    5246:	90 83       	st	Z, r25
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].NEW_VALUE[(unsigned char)count];
							}
							
							unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
							/*DATA*/
							for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    5248:	9b ad       	ldd	r25, Y+59	; 0x3b
    524a:	9f 5f       	subi	r25, 0xFF	; 255
    524c:	9b af       	std	Y+59, r25	; 0x3b
    524e:	9b ad       	ldd	r25, Y+59	; 0x3b
    5250:	98 17       	cp	r25, r24
    5252:	30 f3       	brcs	.-52     	; 0x5220 <SENSORS_APPLY_SEND_BUFFER+0x456>
							{
								DATA_SEND_BUFFER[LENGTH+count]=NUMBER_STRING_BUFFER[(unsigned char)count];
							}
							LENGTH=LENGTH+count;
    5254:	8f ad       	ldd	r24, Y+63	; 0x3f
    5256:	9b ad       	ldd	r25, Y+59	; 0x3b
    5258:	89 0f       	add	r24, r25
    525a:	8f af       	std	Y+63, r24	; 0x3f
							DATA_SEND_BUFFER[LENGTH]=':';
    525c:	8f ad       	ldd	r24, Y+63	; 0x3f
    525e:	e1 e0       	ldi	r30, 0x01	; 1
    5260:	f0 e0       	ldi	r31, 0x00	; 0
    5262:	ec 0f       	add	r30, r28
    5264:	fd 1f       	adc	r31, r29
    5266:	e8 0f       	add	r30, r24
    5268:	f1 1d       	adc	r31, r1
    526a:	c0 82       	st	Z, r12
							DATA_SEND_BUFFER[LENGTH+1]=0;
    526c:	ef ad       	ldd	r30, Y+63	; 0x3f
    526e:	f0 e0       	ldi	r31, 0x00	; 0
    5270:	31 96       	adiw	r30, 0x01	; 1
    5272:	81 e0       	ldi	r24, 0x01	; 1
    5274:	90 e0       	ldi	r25, 0x00	; 0
    5276:	8c 0f       	add	r24, r28
    5278:	9d 1f       	adc	r25, r29
    527a:	e8 0f       	add	r30, r24
    527c:	f9 1f       	adc	r31, r25
    527e:	10 82       	st	Z, r1
							QUEUE_ADD_ARRAY_U8(&G_SEND_DATA_QUEUE,DATA_SEND_BUFFER,LENGTH+2);
    5280:	4f ad       	ldd	r20, Y+63	; 0x3f
    5282:	4e 5f       	subi	r20, 0xFE	; 254
    5284:	bc 01       	movw	r22, r24
    5286:	83 ef       	ldi	r24, 0xF3	; 243
    5288:	95 e0       	ldi	r25, 0x05	; 5
    528a:	0e 94 76 05 	call	0xaec	; 0xaec <QUEUE_ADD_ARRAY_U8>
							/*SEND DONE*/
						}
					}
				}
			}
			if(!RESULT_STATE)
    528e:	8c ad       	ldd	r24, Y+60	; 0x3c
    5290:	81 11       	cpse	r24, r1
    5292:	ce c1       	rjmp	.+924    	; 0x5630 <SENSORS_APPLY_SEND_BUFFER+0x866>
			{
				MY_SENSORS[BUFFER_INDEX].SEND_FAIL_COUNTER++;
    5294:	ed ad       	ldd	r30, Y+61	; 0x3d
    5296:	de 9e       	mul	r13, r30
    5298:	f0 01       	movw	r30, r0
    529a:	11 24       	eor	r1, r1
    529c:	ef 51       	subi	r30, 0x1F	; 31
    529e:	fc 4f       	sbci	r31, 0xFC	; 252
    52a0:	87 89       	ldd	r24, Z+23	; 0x17
    52a2:	8f 5f       	subi	r24, 0xFF	; 255
    52a4:	87 8b       	std	Z+23, r24	; 0x17
				if(MY_SENSORS[BUFFER_INDEX].SEND_FAIL_COUNTER==MAX_SEND_FAIL_COUNTER)
    52a6:	ed ad       	ldd	r30, Y+61	; 0x3d
    52a8:	de 9e       	mul	r13, r30
    52aa:	f0 01       	movw	r30, r0
    52ac:	11 24       	eor	r1, r1
    52ae:	ef 51       	subi	r30, 0x1F	; 31
    52b0:	fc 4f       	sbci	r31, 0xFC	; 252
    52b2:	87 89       	ldd	r24, Z+23	; 0x17
    52b4:	83 30       	cpi	r24, 0x03	; 3
    52b6:	09 f0       	breq	.+2      	; 0x52ba <SENSORS_APPLY_SEND_BUFFER+0x4f0>
    52b8:	bb c1       	rjmp	.+886    	; 0x5630 <SENSORS_APPLY_SEND_BUFFER+0x866>
				{
					
					MY_SENSORS[BUFFER_INDEX].SEND_FAIL_COUNTER=0;
    52ba:	ed ad       	ldd	r30, Y+61	; 0x3d
    52bc:	de 9e       	mul	r13, r30
    52be:	f0 01       	movw	r30, r0
    52c0:	11 24       	eor	r1, r1
    52c2:	ef 51       	subi	r30, 0x1F	; 31
    52c4:	fc 4f       	sbci	r31, 0xFC	; 252
    52c6:	17 8a       	std	Z+23, r1	; 0x17
					/*TESTING*/
					TEST_UART_SEND_str("\n");
    52c8:	8e e7       	ldi	r24, 0x7E	; 126
    52ca:	91 e0       	ldi	r25, 0x01	; 1
    52cc:	9f d5       	rcall	.+2878   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    52ce:	8e e7       	ldi	r24, 0x7E	; 126
    52d0:	91 e0       	ldi	r25, 0x01	; 1
    52d2:	9c d5       	rcall	.+2872   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    52d4:	8e e7       	ldi	r24, 0x7E	; 126
    52d6:	91 e0       	ldi	r25, 0x01	; 1
    52d8:	99 d5       	rcall	.+2866   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    52da:	8e e7       	ldi	r24, 0x7E	; 126
    52dc:	91 e0       	ldi	r25, 0x01	; 1
    52de:	96 d5       	rcall	.+2860   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    52e0:	8e e7       	ldi	r24, 0x7E	; 126
    52e2:	91 e0       	ldi	r25, 0x01	; 1
    52e4:	93 d5       	rcall	.+2854   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    52e6:	8e e7       	ldi	r24, 0x7E	; 126
    52e8:	91 e0       	ldi	r25, 0x01	; 1
    52ea:	90 d5       	rcall	.+2848   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    52ec:	8e e7       	ldi	r24, 0x7E	; 126
    52ee:	91 e0       	ldi	r25, 0x01	; 1
    52f0:	8d d5       	rcall	.+2842   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    52f2:	8e e7       	ldi	r24, 0x7E	; 126
    52f4:	91 e0       	ldi	r25, 0x01	; 1
    52f6:	8a d5       	rcall	.+2836   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("DATA NOT SEND ");
    52f8:	87 ee       	ldi	r24, 0xE7	; 231
    52fa:	92 e0       	ldi	r25, 0x02	; 2
    52fc:	87 d5       	rcall	.+2830   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_VALUE(BUFFER_INDEX);
    52fe:	2d ad       	ldd	r18, Y+61	; 0x3d
    5300:	30 e0       	ldi	r19, 0x00	; 0
    5302:	40 e0       	ldi	r20, 0x00	; 0
    5304:	50 e0       	ldi	r21, 0x00	; 0
    5306:	60 e0       	ldi	r22, 0x00	; 0
    5308:	70 e0       	ldi	r23, 0x00	; 0
    530a:	80 e0       	ldi	r24, 0x00	; 0
    530c:	90 e0       	ldi	r25, 0x00	; 0
    530e:	89 d5       	rcall	.+2834   	; 0x5e22 <TEST_UART_SEND_VALUE>
					TEST_UART_SEND_str("\n");
    5310:	8e e7       	ldi	r24, 0x7E	; 126
    5312:	91 e0       	ldi	r25, 0x01	; 1
    5314:	7b d5       	rcall	.+2806   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5316:	8e e7       	ldi	r24, 0x7E	; 126
    5318:	91 e0       	ldi	r25, 0x01	; 1
    531a:	78 d5       	rcall	.+2800   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    531c:	8e e7       	ldi	r24, 0x7E	; 126
    531e:	91 e0       	ldi	r25, 0x01	; 1
    5320:	75 d5       	rcall	.+2794   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5322:	8e e7       	ldi	r24, 0x7E	; 126
    5324:	91 e0       	ldi	r25, 0x01	; 1
    5326:	72 d5       	rcall	.+2788   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5328:	8e e7       	ldi	r24, 0x7E	; 126
    532a:	91 e0       	ldi	r25, 0x01	; 1
    532c:	6f d5       	rcall	.+2782   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    532e:	8e e7       	ldi	r24, 0x7E	; 126
    5330:	91 e0       	ldi	r25, 0x01	; 1
    5332:	6c d5       	rcall	.+2776   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5334:	8e e7       	ldi	r24, 0x7E	; 126
    5336:	91 e0       	ldi	r25, 0x01	; 1
    5338:	69 d5       	rcall	.+2770   	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    533a:	8e e7       	ldi	r24, 0x7E	; 126
    533c:	91 e0       	ldi	r25, 0x01	; 1
    533e:	66 d5       	rcall	.+2764   	; 0x5e0c <TEST_UART_SEND_str>
					/*TESTING*/
				
					DATA_SEND_BUFFER[0]='A';/*MEANS THE MASTER SEND TO ANDROID*/
    5340:	99 82       	std	Y+1, r9	; 0x01
					DATA_SEND_BUFFER[1]=':';/*COTATION*/
    5342:	ca 82       	std	Y+2, r12	; 0x02
					NUMBER_BUFFER=0;
    5344:	1b aa       	std	Y+51, r1	; 0x33
    5346:	1c aa       	std	Y+52, r1	; 0x34
    5348:	1d aa       	std	Y+53, r1	; 0x35
    534a:	1e aa       	std	Y+54, r1	; 0x36
    534c:	1f aa       	std	Y+55, r1	; 0x37
    534e:	18 ae       	std	Y+56, r1	; 0x38
    5350:	19 ae       	std	Y+57, r1	; 0x39
    5352:	1a ae       	std	Y+58, r1	; 0x3a
									  ADDRESS[2]
									  ADDRESS[3]
								MOST  ADDRESS[4]
								*/
					char count;
					for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    5354:	ed ad       	ldd	r30, Y+61	; 0x3d
    5356:	de 9e       	mul	r13, r30
    5358:	f0 01       	movw	r30, r0
    535a:	11 24       	eor	r1, r1
    535c:	ef 51       	subi	r30, 0x1F	; 31
    535e:	fc 4f       	sbci	r31, 0xFC	; 252
    5360:	a0 81       	ld	r26, Z
    5362:	aa 23       	and	r26, r26
    5364:	01 f1       	breq	.+64     	; 0x53a6 <SENSORS_APPLY_SEND_BUFFER+0x5dc>
					{
						NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
    5366:	2b a9       	ldd	r18, Y+51	; 0x33
    5368:	3c a9       	ldd	r19, Y+52	; 0x34
    536a:	4d a9       	ldd	r20, Y+53	; 0x35
    536c:	5e a9       	ldd	r21, Y+54	; 0x36
    536e:	6f a9       	ldd	r22, Y+55	; 0x37
    5370:	78 ad       	ldd	r23, Y+56	; 0x38
    5372:	89 ad       	ldd	r24, Y+57	; 0x39
    5374:	9a ad       	ldd	r25, Y+58	; 0x3a
    5376:	bd ad       	ldd	r27, Y+61	; 0x3d
    5378:	ea 2f       	mov	r30, r26
    537a:	f0 e0       	ldi	r31, 0x00	; 0
    537c:	db 9e       	mul	r13, r27
    537e:	e0 0d       	add	r30, r0
    5380:	f1 1d       	adc	r31, r1
    5382:	11 24       	eor	r1, r1
    5384:	e0 52       	subi	r30, 0x20	; 32
    5386:	fc 4f       	sbci	r31, 0xFC	; 252
    5388:	e1 81       	ldd	r30, Z+1	; 0x01
    538a:	08 e0       	ldi	r16, 0x08	; 8
    538c:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    5390:	e2 2b       	or	r30, r18
    5392:	eb ab       	std	Y+51, r30	; 0x33
    5394:	3c ab       	std	Y+52, r19	; 0x34
    5396:	4d ab       	std	Y+53, r20	; 0x35
    5398:	5e ab       	std	Y+54, r21	; 0x36
    539a:	6f ab       	std	Y+55, r22	; 0x37
    539c:	78 af       	std	Y+56, r23	; 0x38
    539e:	89 af       	std	Y+57, r24	; 0x39
    53a0:	9a af       	std	Y+58, r25	; 0x3a
									  ADDRESS[2]
									  ADDRESS[3]
								MOST  ADDRESS[4]
								*/
					char count;
					for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    53a2:	a1 50       	subi	r26, 0x01	; 1
    53a4:	01 f7       	brne	.-64     	; 0x5366 <SENSORS_APPLY_SEND_BUFFER+0x59c>
						NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
					}
				
				
				
					unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    53a6:	0b a9       	ldd	r16, Y+51	; 0x33
    53a8:	1c a9       	ldd	r17, Y+52	; 0x34
    53aa:	2d a9       	ldd	r18, Y+53	; 0x35
    53ac:	3e a9       	ldd	r19, Y+54	; 0x36
    53ae:	4f a9       	ldd	r20, Y+55	; 0x37
    53b0:	58 ad       	ldd	r21, Y+56	; 0x38
    53b2:	69 ad       	ldd	r22, Y+57	; 0x39
    53b4:	7a ad       	ldd	r23, Y+58	; 0x3a
    53b6:	ce 01       	movw	r24, r28
    53b8:	4f 96       	adiw	r24, 0x1f	; 31
    53ba:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
					/*SENSOR ADDRESS*/
					for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    53be:	88 23       	and	r24, r24
    53c0:	b1 f0       	breq	.+44     	; 0x53ee <SENSORS_APPLY_SEND_BUFFER+0x624>
    53c2:	2a 2d       	mov	r18, r10
    53c4:	3b 2d       	mov	r19, r11
    53c6:	f9 01       	movw	r30, r18
    53c8:	32 96       	adiw	r30, 0x02	; 2
					{
						DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    53ca:	af e1       	ldi	r26, 0x1F	; 31
    53cc:	b0 e0       	ldi	r27, 0x00	; 0
    53ce:	ac 0f       	add	r26, r28
    53d0:	bd 1f       	adc	r27, r29
    53d2:	a2 0f       	add	r26, r18
    53d4:	b3 1f       	adc	r27, r19
    53d6:	9c 91       	ld	r25, X
    53d8:	41 e0       	ldi	r20, 0x01	; 1
    53da:	50 e0       	ldi	r21, 0x00	; 0
    53dc:	4c 0f       	add	r20, r28
    53de:	5d 1f       	adc	r21, r29
    53e0:	e4 0f       	add	r30, r20
    53e2:	f5 1f       	adc	r31, r21
    53e4:	90 83       	st	Z, r25
    53e6:	2f 5f       	subi	r18, 0xFF	; 255
    53e8:	3f 4f       	sbci	r19, 0xFF	; 255
				
				
				
					unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
					/*SENSOR ADDRESS*/
					for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    53ea:	28 17       	cp	r18, r24
    53ec:	60 f3       	brcs	.-40     	; 0x53c6 <SENSORS_APPLY_SEND_BUFFER+0x5fc>
					{
						DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
					}
					LENGTH=2+count;
    53ee:	8e 5f       	subi	r24, 0xFE	; 254
    53f0:	8f af       	std	Y+63, r24	; 0x3f
					DATA_SEND_BUFFER[LENGTH]=':';
    53f2:	8f ad       	ldd	r24, Y+63	; 0x3f
    53f4:	e1 e0       	ldi	r30, 0x01	; 1
    53f6:	f0 e0       	ldi	r31, 0x00	; 0
    53f8:	ec 0f       	add	r30, r28
    53fa:	fd 1f       	adc	r31, r29
    53fc:	e8 0f       	add	r30, r24
    53fe:	f1 1d       	adc	r31, r1
    5400:	c0 82       	st	Z, r12
					DATA_SEND_BUFFER[LENGTH+1]='T';/*MASTER RETURN WRITE FAILED TO ANDROID*/
    5402:	ef ad       	ldd	r30, Y+63	; 0x3f
    5404:	f0 e0       	ldi	r31, 0x00	; 0
    5406:	31 96       	adiw	r30, 0x01	; 1
    5408:	81 e0       	ldi	r24, 0x01	; 1
    540a:	90 e0       	ldi	r25, 0x00	; 0
    540c:	8c 0f       	add	r24, r28
    540e:	9d 1f       	adc	r25, r29
    5410:	e8 0f       	add	r30, r24
    5412:	f9 1f       	adc	r31, r25
    5414:	80 82       	st	Z, r8
					DATA_SEND_BUFFER[LENGTH+2]=':';
    5416:	ef ad       	ldd	r30, Y+63	; 0x3f
    5418:	f0 e0       	ldi	r31, 0x00	; 0
    541a:	32 96       	adiw	r30, 0x02	; 2
    541c:	e8 0f       	add	r30, r24
    541e:	f9 1f       	adc	r31, r25
    5420:	c0 82       	st	Z, r12
					LENGTH=LENGTH+3;
    5422:	8f ad       	ldd	r24, Y+63	; 0x3f
    5424:	8d 5f       	subi	r24, 0xFD	; 253
    5426:	8f af       	std	Y+63, r24	; 0x3f
				
					NUMBER_BUFFER=0;
    5428:	1b aa       	std	Y+51, r1	; 0x33
    542a:	1c aa       	std	Y+52, r1	; 0x34
    542c:	1d aa       	std	Y+53, r1	; 0x35
    542e:	1e aa       	std	Y+54, r1	; 0x36
    5430:	1f aa       	std	Y+55, r1	; 0x37
    5432:	18 ae       	std	Y+56, r1	; 0x38
    5434:	19 ae       	std	Y+57, r1	; 0x39
    5436:	1a ae       	std	Y+58, r1	; 0x3a
					for (count=0;count<2;count++)
					{
						NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
    5438:	2b a9       	ldd	r18, Y+51	; 0x33
    543a:	3c a9       	ldd	r19, Y+52	; 0x34
    543c:	4d a9       	ldd	r20, Y+53	; 0x35
    543e:	5e a9       	ldd	r21, Y+54	; 0x36
    5440:	6f a9       	ldd	r22, Y+55	; 0x37
    5442:	78 ad       	ldd	r23, Y+56	; 0x38
    5444:	89 ad       	ldd	r24, Y+57	; 0x39
    5446:	9a ad       	ldd	r25, Y+58	; 0x3a
    5448:	ee ad       	ldd	r30, Y+62	; 0x3e
    544a:	f0 e0       	ldi	r31, 0x00	; 0
    544c:	df 01       	movw	r26, r30
    544e:	aa 0f       	add	r26, r26
    5450:	bb 1f       	adc	r27, r27
    5452:	aa 0f       	add	r26, r26
    5454:	bb 1f       	adc	r27, r27
    5456:	ea 0f       	add	r30, r26
    5458:	fb 1f       	adc	r31, r27
    545a:	e2 55       	subi	r30, 0x52	; 82
    545c:	fc 4f       	sbci	r31, 0xFC	; 252
    545e:	e1 81       	ldd	r30, Z+1	; 0x01
    5460:	08 e0       	ldi	r16, 0x08	; 8
    5462:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    5466:	e2 2b       	or	r30, r18
    5468:	eb ab       	std	Y+51, r30	; 0x33
    546a:	3c ab       	std	Y+52, r19	; 0x34
    546c:	4d ab       	std	Y+53, r20	; 0x35
    546e:	5e ab       	std	Y+54, r21	; 0x36
    5470:	6f ab       	std	Y+55, r22	; 0x37
    5472:	78 af       	std	Y+56, r23	; 0x38
    5474:	89 af       	std	Y+57, r24	; 0x39
    5476:	9a af       	std	Y+58, r25	; 0x3a
    5478:	2b a9       	ldd	r18, Y+51	; 0x33
    547a:	3c a9       	ldd	r19, Y+52	; 0x34
    547c:	4d a9       	ldd	r20, Y+53	; 0x35
    547e:	5e a9       	ldd	r21, Y+54	; 0x36
    5480:	6f a9       	ldd	r22, Y+55	; 0x37
    5482:	78 ad       	ldd	r23, Y+56	; 0x38
    5484:	89 ad       	ldd	r24, Y+57	; 0x39
    5486:	9a ad       	ldd	r25, Y+58	; 0x3a
    5488:	ee ad       	ldd	r30, Y+62	; 0x3e
    548a:	f0 e0       	ldi	r31, 0x00	; 0
    548c:	df 01       	movw	r26, r30
    548e:	aa 0f       	add	r26, r26
    5490:	bb 1f       	adc	r27, r27
    5492:	aa 0f       	add	r26, r26
    5494:	bb 1f       	adc	r27, r27
    5496:	ea 0f       	add	r30, r26
    5498:	fb 1f       	adc	r31, r27
    549a:	e2 55       	subi	r30, 0x52	; 82
    549c:	fc 4f       	sbci	r31, 0xFC	; 252
    549e:	e2 81       	ldd	r30, Z+2	; 0x02
    54a0:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    54a4:	e2 2b       	or	r30, r18
    54a6:	eb ab       	std	Y+51, r30	; 0x33
    54a8:	3c ab       	std	Y+52, r19	; 0x34
    54aa:	4d ab       	std	Y+53, r20	; 0x35
    54ac:	5e ab       	std	Y+54, r21	; 0x36
    54ae:	6f ab       	std	Y+55, r22	; 0x37
    54b0:	78 af       	std	Y+56, r23	; 0x38
    54b2:	89 af       	std	Y+57, r24	; 0x39
    54b4:	9a af       	std	Y+58, r25	; 0x3a
					}
				
					unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    54b6:	0b a9       	ldd	r16, Y+51	; 0x33
    54b8:	1c a9       	ldd	r17, Y+52	; 0x34
    54ba:	2d a9       	ldd	r18, Y+53	; 0x35
    54bc:	3e a9       	ldd	r19, Y+54	; 0x36
    54be:	4f a9       	ldd	r20, Y+55	; 0x37
    54c0:	58 ad       	ldd	r21, Y+56	; 0x38
    54c2:	69 ad       	ldd	r22, Y+57	; 0x39
    54c4:	7a ad       	ldd	r23, Y+58	; 0x3a
    54c6:	ce 01       	movw	r24, r28
    54c8:	4f 96       	adiw	r24, 0x1f	; 31
    54ca:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
					/*ADDRESS REGISTER*/
					for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    54ce:	88 23       	and	r24, r24
    54d0:	c1 f0       	breq	.+48     	; 0x5502 <SENSORS_APPLY_SEND_BUFFER+0x738>
    54d2:	2a 2d       	mov	r18, r10
    54d4:	3b 2d       	mov	r19, r11
					{
						DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    54d6:	9f ad       	ldd	r25, Y+63	; 0x3f
    54d8:	f9 01       	movw	r30, r18
    54da:	e9 0f       	add	r30, r25
    54dc:	f1 1d       	adc	r31, r1
    54de:	af e1       	ldi	r26, 0x1F	; 31
    54e0:	b0 e0       	ldi	r27, 0x00	; 0
    54e2:	ac 0f       	add	r26, r28
    54e4:	bd 1f       	adc	r27, r29
    54e6:	a2 0f       	add	r26, r18
    54e8:	b3 1f       	adc	r27, r19
    54ea:	9c 91       	ld	r25, X
    54ec:	41 e0       	ldi	r20, 0x01	; 1
    54ee:	50 e0       	ldi	r21, 0x00	; 0
    54f0:	4c 0f       	add	r20, r28
    54f2:	5d 1f       	adc	r21, r29
    54f4:	e4 0f       	add	r30, r20
    54f6:	f5 1f       	adc	r31, r21
    54f8:	90 83       	st	Z, r25
    54fa:	2f 5f       	subi	r18, 0xFF	; 255
    54fc:	3f 4f       	sbci	r19, 0xFF	; 255
						NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
					}
				
					unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
					/*ADDRESS REGISTER*/
					for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    54fe:	28 17       	cp	r18, r24
    5500:	50 f3       	brcs	.-44     	; 0x54d6 <SENSORS_APPLY_SEND_BUFFER+0x70c>
					{
						DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
					}
					LENGTH=LENGTH+count;
    5502:	9f ad       	ldd	r25, Y+63	; 0x3f
    5504:	89 0f       	add	r24, r25
    5506:	8f af       	std	Y+63, r24	; 0x3f
					DATA_SEND_BUFFER[LENGTH]=':';
    5508:	8f ad       	ldd	r24, Y+63	; 0x3f
    550a:	e1 e0       	ldi	r30, 0x01	; 1
    550c:	f0 e0       	ldi	r31, 0x00	; 0
    550e:	ec 0f       	add	r30, r28
    5510:	fd 1f       	adc	r31, r29
    5512:	e8 0f       	add	r30, r24
    5514:	f1 1d       	adc	r31, r1
    5516:	c0 82       	st	Z, r12
					LENGTH++;
    5518:	8f ad       	ldd	r24, Y+63	; 0x3f
    551a:	8f 5f       	subi	r24, 0xFF	; 255
    551c:	8f af       	std	Y+63, r24	; 0x3f
					NUMBER_BUFFER=0;
    551e:	1b aa       	std	Y+51, r1	; 0x33
    5520:	1c aa       	std	Y+52, r1	; 0x34
    5522:	1d aa       	std	Y+53, r1	; 0x35
    5524:	1e aa       	std	Y+54, r1	; 0x36
    5526:	1f aa       	std	Y+55, r1	; 0x37
    5528:	18 ae       	std	Y+56, r1	; 0x38
    552a:	19 ae       	std	Y+57, r1	; 0x39
    552c:	1a ae       	std	Y+58, r1	; 0x3a
					for (count=0;count<2;count++)
					{
						NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].NEW_VALUE[(unsigned char)count];
    552e:	2b a9       	ldd	r18, Y+51	; 0x33
    5530:	3c a9       	ldd	r19, Y+52	; 0x34
    5532:	4d a9       	ldd	r20, Y+53	; 0x35
    5534:	5e a9       	ldd	r21, Y+54	; 0x36
    5536:	6f a9       	ldd	r22, Y+55	; 0x37
    5538:	78 ad       	ldd	r23, Y+56	; 0x38
    553a:	89 ad       	ldd	r24, Y+57	; 0x39
    553c:	9a ad       	ldd	r25, Y+58	; 0x3a
    553e:	ee ad       	ldd	r30, Y+62	; 0x3e
    5540:	f0 e0       	ldi	r31, 0x00	; 0
    5542:	df 01       	movw	r26, r30
    5544:	aa 0f       	add	r26, r26
    5546:	bb 1f       	adc	r27, r27
    5548:	aa 0f       	add	r26, r26
    554a:	bb 1f       	adc	r27, r27
    554c:	ea 0f       	add	r30, r26
    554e:	fb 1f       	adc	r31, r27
    5550:	e2 55       	subi	r30, 0x52	; 82
    5552:	fc 4f       	sbci	r31, 0xFC	; 252
    5554:	e3 81       	ldd	r30, Z+3	; 0x03
    5556:	08 e0       	ldi	r16, 0x08	; 8
    5558:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    555c:	e2 2b       	or	r30, r18
    555e:	eb ab       	std	Y+51, r30	; 0x33
    5560:	3c ab       	std	Y+52, r19	; 0x34
    5562:	4d ab       	std	Y+53, r20	; 0x35
    5564:	5e ab       	std	Y+54, r21	; 0x36
    5566:	6f ab       	std	Y+55, r22	; 0x37
    5568:	78 af       	std	Y+56, r23	; 0x38
    556a:	89 af       	std	Y+57, r24	; 0x39
    556c:	9a af       	std	Y+58, r25	; 0x3a
    556e:	2b a9       	ldd	r18, Y+51	; 0x33
    5570:	3c a9       	ldd	r19, Y+52	; 0x34
    5572:	4d a9       	ldd	r20, Y+53	; 0x35
    5574:	5e a9       	ldd	r21, Y+54	; 0x36
    5576:	6f a9       	ldd	r22, Y+55	; 0x37
    5578:	78 ad       	ldd	r23, Y+56	; 0x38
    557a:	89 ad       	ldd	r24, Y+57	; 0x39
    557c:	9a ad       	ldd	r25, Y+58	; 0x3a
    557e:	ee ad       	ldd	r30, Y+62	; 0x3e
    5580:	f0 e0       	ldi	r31, 0x00	; 0
    5582:	df 01       	movw	r26, r30
    5584:	aa 0f       	add	r26, r26
    5586:	bb 1f       	adc	r27, r27
    5588:	aa 0f       	add	r26, r26
    558a:	bb 1f       	adc	r27, r27
    558c:	ea 0f       	add	r30, r26
    558e:	fb 1f       	adc	r31, r27
    5590:	e2 55       	subi	r30, 0x52	; 82
    5592:	fc 4f       	sbci	r31, 0xFC	; 252
    5594:	e4 81       	ldd	r30, Z+4	; 0x04
    5596:	0e 94 d1 33 	call	0x67a2	; 0x67a2 <__ashldi3>
    559a:	e2 2b       	or	r30, r18
    559c:	eb ab       	std	Y+51, r30	; 0x33
    559e:	3c ab       	std	Y+52, r19	; 0x34
    55a0:	4d ab       	std	Y+53, r20	; 0x35
    55a2:	5e ab       	std	Y+54, r21	; 0x36
    55a4:	6f ab       	std	Y+55, r22	; 0x37
    55a6:	78 af       	std	Y+56, r23	; 0x38
    55a8:	89 af       	std	Y+57, r24	; 0x39
    55aa:	9a af       	std	Y+58, r25	; 0x3a
					}
				
					unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    55ac:	0b a9       	ldd	r16, Y+51	; 0x33
    55ae:	1c a9       	ldd	r17, Y+52	; 0x34
    55b0:	2d a9       	ldd	r18, Y+53	; 0x35
    55b2:	3e a9       	ldd	r19, Y+54	; 0x36
    55b4:	4f a9       	ldd	r20, Y+55	; 0x37
    55b6:	58 ad       	ldd	r21, Y+56	; 0x38
    55b8:	69 ad       	ldd	r22, Y+57	; 0x39
    55ba:	7a ad       	ldd	r23, Y+58	; 0x3a
    55bc:	ce 01       	movw	r24, r28
    55be:	4f 96       	adiw	r24, 0x1f	; 31
    55c0:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
					/*DATA*/
					for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    55c4:	88 23       	and	r24, r24
    55c6:	c1 f0       	breq	.+48     	; 0x55f8 <SENSORS_APPLY_SEND_BUFFER+0x82e>
    55c8:	2a 2d       	mov	r18, r10
    55ca:	3b 2d       	mov	r19, r11
					{
						DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    55cc:	9f ad       	ldd	r25, Y+63	; 0x3f
    55ce:	f9 01       	movw	r30, r18
    55d0:	e9 0f       	add	r30, r25
    55d2:	f1 1d       	adc	r31, r1
    55d4:	af e1       	ldi	r26, 0x1F	; 31
    55d6:	b0 e0       	ldi	r27, 0x00	; 0
    55d8:	ac 0f       	add	r26, r28
    55da:	bd 1f       	adc	r27, r29
    55dc:	a2 0f       	add	r26, r18
    55de:	b3 1f       	adc	r27, r19
    55e0:	9c 91       	ld	r25, X
    55e2:	41 e0       	ldi	r20, 0x01	; 1
    55e4:	50 e0       	ldi	r21, 0x00	; 0
    55e6:	4c 0f       	add	r20, r28
    55e8:	5d 1f       	adc	r21, r29
    55ea:	e4 0f       	add	r30, r20
    55ec:	f5 1f       	adc	r31, r21
    55ee:	90 83       	st	Z, r25
    55f0:	2f 5f       	subi	r18, 0xFF	; 255
    55f2:	3f 4f       	sbci	r19, 0xFF	; 255
						NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_SEND_BUFFER[i].NEW_VALUE[(unsigned char)count];
					}
				
					unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
					/*DATA*/
					for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    55f4:	28 17       	cp	r18, r24
    55f6:	50 f3       	brcs	.-44     	; 0x55cc <SENSORS_APPLY_SEND_BUFFER+0x802>
					{
						DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
					}
					LENGTH=LENGTH+count;
    55f8:	9f ad       	ldd	r25, Y+63	; 0x3f
    55fa:	89 0f       	add	r24, r25
    55fc:	8f af       	std	Y+63, r24	; 0x3f
					DATA_SEND_BUFFER[LENGTH]=':';
    55fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    5600:	e1 e0       	ldi	r30, 0x01	; 1
    5602:	f0 e0       	ldi	r31, 0x00	; 0
    5604:	ec 0f       	add	r30, r28
    5606:	fd 1f       	adc	r31, r29
    5608:	e8 0f       	add	r30, r24
    560a:	f1 1d       	adc	r31, r1
    560c:	c0 82       	st	Z, r12
					DATA_SEND_BUFFER[LENGTH+1]=0;
    560e:	ef ad       	ldd	r30, Y+63	; 0x3f
    5610:	f0 e0       	ldi	r31, 0x00	; 0
    5612:	31 96       	adiw	r30, 0x01	; 1
    5614:	81 e0       	ldi	r24, 0x01	; 1
    5616:	90 e0       	ldi	r25, 0x00	; 0
    5618:	8c 0f       	add	r24, r28
    561a:	9d 1f       	adc	r25, r29
    561c:	e8 0f       	add	r30, r24
    561e:	f9 1f       	adc	r31, r25
    5620:	10 82       	st	Z, r1
					QUEUE_ADD_ARRAY_U8(&G_SEND_DATA_QUEUE,DATA_SEND_BUFFER,LENGTH+2);
    5622:	4f ad       	ldd	r20, Y+63	; 0x3f
    5624:	4e 5f       	subi	r20, 0xFE	; 254
    5626:	bc 01       	movw	r22, r24
    5628:	83 ef       	ldi	r24, 0xF3	; 243
    562a:	95 e0       	ldi	r25, 0x05	; 5
    562c:	0e 94 76 05 	call	0xaec	; 0xaec <QUEUE_ADD_ARRAY_U8>
		volatile unsigned char DATA_SEND_BUFFER[30],LENGTH;
		volatile unsigned char i=0,BUFFER_INDEX,RESULT_STATE=0;
		volatile unsigned long long NUMBER_BUFFER=0;
		volatile unsigned char NUMBER_STRING_BUFFER[20];
		
		for(i=0;i<SENSOR_SEND_BUFFER_LENGTH;i++)
    5630:	8e ad       	ldd	r24, Y+62	; 0x3e
    5632:	8f 5f       	subi	r24, 0xFF	; 255
    5634:	8e af       	std	Y+62, r24	; 0x3e
    5636:	9e ad       	ldd	r25, Y+62	; 0x3e
    5638:	80 91 2a 03 	lds	r24, 0x032A
    563c:	98 17       	cp	r25, r24
    563e:	08 f4       	brcc	.+2      	; 0x5642 <SENSORS_APPLY_SEND_BUFFER+0x878>
    5640:	08 cc       	rjmp	.-2032   	; 0x4e52 <SENSORS_APPLY_SEND_BUFFER+0x88>
				
			}
			
			
		}
		SENSOR_SEND_BUFFER_LENGTH=0;
    5642:	10 92 2a 03 	sts	0x032A, r1
	}
}
    5646:	ef 96       	adiw	r28, 0x3f	; 63
    5648:	0f b6       	in	r0, 0x3f	; 63
    564a:	f8 94       	cli
    564c:	de bf       	out	0x3e, r29	; 62
    564e:	0f be       	out	0x3f, r0	; 63
    5650:	cd bf       	out	0x3d, r28	; 61
    5652:	df 91       	pop	r29
    5654:	cf 91       	pop	r28
    5656:	1f 91       	pop	r17
    5658:	0f 91       	pop	r16
    565a:	ff 90       	pop	r15
    565c:	ef 90       	pop	r14
    565e:	df 90       	pop	r13
    5660:	cf 90       	pop	r12
    5662:	bf 90       	pop	r11
    5664:	af 90       	pop	r10
    5666:	9f 90       	pop	r9
    5668:	8f 90       	pop	r8
    566a:	7f 90       	pop	r7
    566c:	6f 90       	pop	r6
    566e:	08 95       	ret

00005670 <SENSORS_APPLY_READ_BUFFER>:

void SENSORS_APPLY_READ_BUFFER()
{
    5670:	2f 92       	push	r2
    5672:	3f 92       	push	r3
    5674:	4f 92       	push	r4
    5676:	5f 92       	push	r5
    5678:	6f 92       	push	r6
    567a:	7f 92       	push	r7
    567c:	8f 92       	push	r8
    567e:	9f 92       	push	r9
    5680:	af 92       	push	r10
    5682:	bf 92       	push	r11
    5684:	cf 92       	push	r12
    5686:	df 92       	push	r13
    5688:	ef 92       	push	r14
    568a:	ff 92       	push	r15
    568c:	0f 93       	push	r16
    568e:	1f 93       	push	r17
    5690:	cf 93       	push	r28
    5692:	df 93       	push	r29
    5694:	cd b7       	in	r28, 0x3d	; 61
    5696:	de b7       	in	r29, 0x3e	; 62
    5698:	e8 97       	sbiw	r28, 0x38	; 56
    569a:	0f b6       	in	r0, 0x3f	; 63
    569c:	f8 94       	cli
    569e:	de bf       	out	0x3e, r29	; 62
    56a0:	0f be       	out	0x3f, r0	; 63
    56a2:	cd bf       	out	0x3d, r28	; 61
	if (SENSOR_READ_BUFFER_LENGTH!=0)
    56a4:	80 91 29 03 	lds	r24, 0x0329
    56a8:	88 23       	and	r24, r24
    56aa:	09 f4       	brne	.+2      	; 0x56ae <SENSORS_APPLY_READ_BUFFER+0x3e>
    56ac:	1a c3       	rjmp	.+1588   	; 0x5ce2 <SENSORS_APPLY_READ_BUFFER+0x672>
		unsigned char DATA_SEND_BUFFER[30],LENGTH;
		unsigned char i=0,BUFFER_INDEX,RESULT_STATE=0;
		unsigned char NUMBER_STRING_BUFFER[20];
		unsigned long long NUMBER_BUFFER=0;
		
		for(i=0;i<SENSOR_READ_BUFFER_LENGTH;i++)
    56ae:	80 91 29 03 	lds	r24, 0x0329
    56b2:	88 23       	and	r24, r24
    56b4:	09 f4       	brne	.+2      	; 0x56b8 <SENSORS_APPLY_READ_BUFFER+0x48>
    56b6:	09 c3       	rjmp	.+1554   	; 0x5cca <SENSORS_APPLY_READ_BUFFER+0x65a>
    56b8:	81 2c       	mov	r8, r1
    56ba:	1d aa       	std	Y+53, r1	; 0x35
    56bc:	1e aa       	std	Y+54, r1	; 0x36
    56be:	1f aa       	std	Y+55, r1	; 0x37
    56c0:	18 ae       	std	Y+56, r1	; 0x38
    56c2:	1b aa       	std	Y+51, r1	; 0x33
    56c4:	21 2c       	mov	r2, r1
    56c6:	31 2c       	mov	r3, r1
    56c8:	41 2c       	mov	r4, r1
    56ca:	71 2c       	mov	r7, r1
		{
			BUFFER_INDEX=SENSOR_READ_BUFFER[i].SENSOR_INDEX;
			if (MY_SENSORS[BUFFER_INDEX].SENSOR_STATE)
    56cc:	0f 2e       	mov	r0, r31
    56ce:	f9 e1       	ldi	r31, 0x19	; 25
    56d0:	6f 2e       	mov	r6, r31
    56d2:	f0 2d       	mov	r31, r0
					{
						
						NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[MY_SENSORS[BUFFER_INDEX].USED_CHANNEL]);
						if (PROTOCOL_DATA_READ(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS,MY_SENSORS[BUFFER_INDEX].SENSOR_VERSION,MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH,MY_SENSORS[BUFFER_INDEX].SESSION_KEY,SENSOR_READ_BUFFER[i].ADDRESS_REGISTER,SENSOR_READ_BUFFER[i].READ_VALUE))
						{
							RESULT_STATE=1;
    56d4:	51 2c       	mov	r5, r1
		unsigned char NUMBER_STRING_BUFFER[20];
		unsigned long long NUMBER_BUFFER=0;
		
		for(i=0;i<SENSOR_READ_BUFFER_LENGTH;i++)
		{
			BUFFER_INDEX=SENSOR_READ_BUFFER[i].SENSOR_INDEX;
    56d6:	c7 2c       	mov	r12, r7
    56d8:	d1 2c       	mov	r13, r1
    56da:	f6 01       	movw	r30, r12
    56dc:	ee 0f       	add	r30, r30
    56de:	ff 1f       	adc	r31, r31
    56e0:	ee 0f       	add	r30, r30
    56e2:	ff 1f       	adc	r31, r31
    56e4:	ec 0d       	add	r30, r12
    56e6:	fd 1d       	adc	r31, r13
    56e8:	ef 5f       	subi	r30, 0xFF	; 255
    56ea:	fa 4f       	sbci	r31, 0xFA	; 250
    56ec:	90 80       	ld	r9, Z
			if (MY_SENSORS[BUFFER_INDEX].SENSOR_STATE)
    56ee:	a9 2c       	mov	r10, r9
    56f0:	b1 2c       	mov	r11, r1
    56f2:	6a 9c       	mul	r6, r10
    56f4:	f0 01       	movw	r30, r0
    56f6:	6b 9c       	mul	r6, r11
    56f8:	f0 0d       	add	r31, r0
    56fa:	11 24       	eor	r1, r1
    56fc:	ef 51       	subi	r30, 0x1F	; 31
    56fe:	fc 4f       	sbci	r31, 0xFC	; 252
    5700:	84 85       	ldd	r24, Z+12	; 0x0c
    5702:	88 23       	and	r24, r24
    5704:	09 f4       	brne	.+2      	; 0x5708 <SENSORS_APPLY_READ_BUFFER+0x98>
    5706:	8d c1       	rjmp	.+794    	; 0x5a22 <SENSORS_APPLY_READ_BUFFER+0x3b2>
			{
				if (MY_SENSORS[BUFFER_INDEX].F_CONNECTED)
    5708:	6a 9c       	mul	r6, r10
    570a:	f0 01       	movw	r30, r0
    570c:	6b 9c       	mul	r6, r11
    570e:	f0 0d       	add	r31, r0
    5710:	11 24       	eor	r1, r1
    5712:	ef 51       	subi	r30, 0x1F	; 31
    5714:	fc 4f       	sbci	r31, 0xFC	; 252
    5716:	86 85       	ldd	r24, Z+14	; 0x0e
    5718:	88 23       	and	r24, r24
    571a:	09 f4       	brne	.+2      	; 0x571e <SENSORS_APPLY_READ_BUFFER+0xae>
    571c:	82 c1       	rjmp	.+772    	; 0x5a22 <SENSORS_APPLY_READ_BUFFER+0x3b2>
				{
					if (MY_SENSORS[BUFFER_INDEX].F_HAVE_SESSION_KEY)
    571e:	6a 9c       	mul	r6, r10
    5720:	f0 01       	movw	r30, r0
    5722:	6b 9c       	mul	r6, r11
    5724:	f0 0d       	add	r31, r0
    5726:	11 24       	eor	r1, r1
    5728:	ef 51       	subi	r30, 0x1F	; 31
    572a:	fc 4f       	sbci	r31, 0xFC	; 252
    572c:	84 89       	ldd	r24, Z+20	; 0x14
    572e:	88 23       	and	r24, r24
    5730:	09 f4       	brne	.+2      	; 0x5734 <SENSORS_APPLY_READ_BUFFER+0xc4>
    5732:	77 c1       	rjmp	.+750    	; 0x5a22 <SENSORS_APPLY_READ_BUFFER+0x3b2>
					{
						
						NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[MY_SENSORS[BUFFER_INDEX].USED_CHANNEL]);
    5734:	6a 9c       	mul	r6, r10
    5736:	c0 01       	movw	r24, r0
    5738:	6b 9c       	mul	r6, r11
    573a:	90 0d       	add	r25, r0
    573c:	11 24       	eor	r1, r1
    573e:	9c ab       	std	Y+52, r25	; 0x34
    5740:	8b ab       	std	Y+51, r24	; 0x33
    5742:	8f 01       	movw	r16, r30
    5744:	e3 89       	ldd	r30, Z+19	; 0x13
    5746:	f0 e0       	ldi	r31, 0x00	; 0
    5748:	ee 5e       	subi	r30, 0xEE	; 238
    574a:	fe 4f       	sbci	r31, 0xFE	; 254
    574c:	80 81       	ld	r24, Z
    574e:	0e 94 2c 10 	call	0x2058	; 0x2058 <NRF_UPDATE_USED_CHANNEL>
						if (PROTOCOL_DATA_READ(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS,MY_SENSORS[BUFFER_INDEX].SENSOR_VERSION,MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH,MY_SENSORS[BUFFER_INDEX].SESSION_KEY,SENSOR_READ_BUFFER[i].ADDRESS_REGISTER,SENSOR_READ_BUFFER[i].READ_VALUE))
    5752:	f8 01       	movw	r30, r16
    5754:	40 81       	ld	r20, Z
    5756:	62 85       	ldd	r22, Z+10	; 0x0a
    5758:	86 01       	movw	r16, r12
    575a:	00 0f       	add	r16, r16
    575c:	11 1f       	adc	r17, r17
    575e:	00 0f       	add	r16, r16
    5760:	11 1f       	adc	r17, r17
    5762:	0c 0d       	add	r16, r12
    5764:	1d 1d       	adc	r17, r13
    5766:	c8 01       	movw	r24, r16
    5768:	8c 5f       	subi	r24, 0xFC	; 252
    576a:	9a 4f       	sbci	r25, 0xFA	; 250
    576c:	7c 01       	movw	r14, r24
    576e:	0e 5f       	subi	r16, 0xFE	; 254
    5770:	1a 4f       	sbci	r17, 0xFA	; 250
    5772:	2b a9       	ldd	r18, Y+51	; 0x33
    5774:	3c a9       	ldd	r19, Y+52	; 0x34
    5776:	2a 50       	subi	r18, 0x0A	; 10
    5778:	3c 4f       	sbci	r19, 0xFC	; 252
    577a:	8b a9       	ldd	r24, Y+51	; 0x33
    577c:	9c a9       	ldd	r25, Y+52	; 0x34
    577e:	8e 51       	subi	r24, 0x1E	; 30
    5780:	9c 4f       	sbci	r25, 0xFC	; 252
    5782:	0e 94 7e 19 	call	0x32fc	; 0x32fc <PROTOCOL_DATA_READ>
    5786:	88 23       	and	r24, r24
    5788:	09 f4       	brne	.+2      	; 0x578c <SENSORS_APPLY_READ_BUFFER+0x11c>
    578a:	4b c1       	rjmp	.+662    	; 0x5a22 <SENSORS_APPLY_READ_BUFFER+0x3b2>
						{
							RESULT_STATE=1;
							MY_SENSORS[BUFFER_INDEX].READ_FAIL_COUNTER=0;
    578c:	6a 9c       	mul	r6, r10
    578e:	80 01       	movw	r16, r0
    5790:	6b 9c       	mul	r6, r11
    5792:	10 0d       	add	r17, r0
    5794:	11 24       	eor	r1, r1
    5796:	0f 51       	subi	r16, 0x1F	; 31
    5798:	1c 4f       	sbci	r17, 0xFC	; 252
    579a:	d8 01       	movw	r26, r16
    579c:	58 96       	adiw	r26, 0x18	; 24
    579e:	1c 92       	st	X, r1
							/*TESTING*/
							TEST_UART_SEND_str("\n");
    57a0:	8e e7       	ldi	r24, 0x7E	; 126
    57a2:	91 e0       	ldi	r25, 0x01	; 1
    57a4:	33 d3       	rcall	.+1638   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57a6:	8e e7       	ldi	r24, 0x7E	; 126
    57a8:	91 e0       	ldi	r25, 0x01	; 1
    57aa:	30 d3       	rcall	.+1632   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57ac:	8e e7       	ldi	r24, 0x7E	; 126
    57ae:	91 e0       	ldi	r25, 0x01	; 1
    57b0:	2d d3       	rcall	.+1626   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57b2:	8e e7       	ldi	r24, 0x7E	; 126
    57b4:	91 e0       	ldi	r25, 0x01	; 1
    57b6:	2a d3       	rcall	.+1620   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57b8:	8e e7       	ldi	r24, 0x7E	; 126
    57ba:	91 e0       	ldi	r25, 0x01	; 1
    57bc:	27 d3       	rcall	.+1614   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57be:	8e e7       	ldi	r24, 0x7E	; 126
    57c0:	91 e0       	ldi	r25, 0x01	; 1
    57c2:	24 d3       	rcall	.+1608   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57c4:	8e e7       	ldi	r24, 0x7E	; 126
    57c6:	91 e0       	ldi	r25, 0x01	; 1
    57c8:	21 d3       	rcall	.+1602   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57ca:	8e e7       	ldi	r24, 0x7E	; 126
    57cc:	91 e0       	ldi	r25, 0x01	; 1
    57ce:	1e d3       	rcall	.+1596   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("DATA READ");
    57d0:	86 ef       	ldi	r24, 0xF6	; 246
    57d2:	92 e0       	ldi	r25, 0x02	; 2
    57d4:	1b d3       	rcall	.+1590   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_VALUE(BUFFER_INDEX);
    57d6:	29 2d       	mov	r18, r9
    57d8:	30 e0       	ldi	r19, 0x00	; 0
    57da:	40 e0       	ldi	r20, 0x00	; 0
    57dc:	50 e0       	ldi	r21, 0x00	; 0
    57de:	60 e0       	ldi	r22, 0x00	; 0
    57e0:	70 e0       	ldi	r23, 0x00	; 0
    57e2:	80 e0       	ldi	r24, 0x00	; 0
    57e4:	90 e0       	ldi	r25, 0x00	; 0
    57e6:	1d d3       	rcall	.+1594   	; 0x5e22 <TEST_UART_SEND_VALUE>
							TEST_UART_SEND_str("\n");
    57e8:	8e e7       	ldi	r24, 0x7E	; 126
    57ea:	91 e0       	ldi	r25, 0x01	; 1
    57ec:	0f d3       	rcall	.+1566   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57ee:	8e e7       	ldi	r24, 0x7E	; 126
    57f0:	91 e0       	ldi	r25, 0x01	; 1
    57f2:	0c d3       	rcall	.+1560   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57f4:	8e e7       	ldi	r24, 0x7E	; 126
    57f6:	91 e0       	ldi	r25, 0x01	; 1
    57f8:	09 d3       	rcall	.+1554   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    57fa:	8e e7       	ldi	r24, 0x7E	; 126
    57fc:	91 e0       	ldi	r25, 0x01	; 1
    57fe:	06 d3       	rcall	.+1548   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    5800:	8e e7       	ldi	r24, 0x7E	; 126
    5802:	91 e0       	ldi	r25, 0x01	; 1
    5804:	03 d3       	rcall	.+1542   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    5806:	8e e7       	ldi	r24, 0x7E	; 126
    5808:	91 e0       	ldi	r25, 0x01	; 1
    580a:	00 d3       	rcall	.+1536   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    580c:	8e e7       	ldi	r24, 0x7E	; 126
    580e:	91 e0       	ldi	r25, 0x01	; 1
    5810:	fd d2       	rcall	.+1530   	; 0x5e0c <TEST_UART_SEND_str>
							TEST_UART_SEND_str("\n");
    5812:	8e e7       	ldi	r24, 0x7E	; 126
    5814:	91 e0       	ldi	r25, 0x01	; 1
    5816:	fa d2       	rcall	.+1524   	; 0x5e0c <TEST_UART_SEND_str>
							/*TESTING*/
							
							MY_SENSORS[BUFFER_INDEX].C_FAILED_BEACON=0;
    5818:	f8 01       	movw	r30, r16
    581a:	11 8a       	std	Z+17, r1	; 0x11
							
							DATA_SEND_BUFFER[0]='A';/*MEANS THE MASTER SEND TO ANDROID*/
    581c:	f1 e4       	ldi	r31, 0x41	; 65
    581e:	f9 83       	std	Y+1, r31	; 0x01
							DATA_SEND_BUFFER[1]=':';/*COTATION*/
    5820:	2a e3       	ldi	r18, 0x3A	; 58
    5822:	2a 83       	std	Y+2, r18	; 0x02
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
							
							char count;
							for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    5824:	d8 01       	movw	r26, r16
    5826:	1c 91       	ld	r17, X
    5828:	11 23       	and	r17, r17
    582a:	11 f1       	breq	.+68     	; 0x5870 <SENSORS_APPLY_READ_BUFFER+0x200>
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
    582c:	6a 9c       	mul	r6, r10
    582e:	d0 01       	movw	r26, r0
    5830:	6b 9c       	mul	r6, r11
    5832:	b0 0d       	add	r27, r0
    5834:	11 24       	eor	r1, r1
    5836:	af 51       	subi	r26, 0x1F	; 31
    5838:	bc 4f       	sbci	r27, 0xFC	; 252
    583a:	28 2d       	mov	r18, r8
    583c:	3d a9       	ldd	r19, Y+53	; 0x35
    583e:	4e a9       	ldd	r20, Y+54	; 0x36
    5840:	5f a9       	ldd	r21, Y+55	; 0x37
    5842:	68 ad       	ldd	r22, Y+56	; 0x38
    5844:	75 2d       	mov	r23, r5
    5846:	82 2d       	mov	r24, r2
    5848:	93 2d       	mov	r25, r3
    584a:	08 e0       	ldi	r16, 0x08	; 8
    584c:	aa d7       	rcall	.+3924   	; 0x67a2 <__ashldi3>
    584e:	e1 2f       	mov	r30, r17
    5850:	f0 e0       	ldi	r31, 0x00	; 0
    5852:	31 97       	sbiw	r30, 0x01	; 1
    5854:	ea 0f       	add	r30, r26
    5856:	fb 1f       	adc	r31, r27
    5858:	e1 81       	ldd	r30, Z+1	; 0x01
    585a:	2e 2b       	or	r18, r30
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
							
							char count;
							for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    585c:	11 50       	subi	r17, 0x01	; 1
    585e:	a9 f7       	brne	.-22     	; 0x584a <SENSORS_APPLY_READ_BUFFER+0x1da>
    5860:	82 2e       	mov	r8, r18
    5862:	3d ab       	std	Y+53, r19	; 0x35
    5864:	4e ab       	std	Y+54, r20	; 0x36
    5866:	5f ab       	std	Y+55, r21	; 0x37
    5868:	68 af       	std	Y+56, r22	; 0x38
    586a:	57 2e       	mov	r5, r23
    586c:	28 2e       	mov	r2, r24
    586e:	39 2e       	mov	r3, r25
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
							}
							
							
							/*SENSOR ADDRESS*/
							unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    5870:	08 2d       	mov	r16, r8
    5872:	1d a9       	ldd	r17, Y+53	; 0x35
    5874:	2e a9       	ldd	r18, Y+54	; 0x36
    5876:	3f a9       	ldd	r19, Y+55	; 0x37
    5878:	48 ad       	ldd	r20, Y+56	; 0x38
    587a:	55 2d       	mov	r21, r5
    587c:	62 2d       	mov	r22, r2
    587e:	73 2d       	mov	r23, r3
    5880:	ce 01       	movw	r24, r28
    5882:	4f 96       	adiw	r24, 0x1f	; 31
    5884:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
    5888:	e8 2e       	mov	r14, r24
							
							for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    588a:	88 23       	and	r24, r24
    588c:	89 f0       	breq	.+34     	; 0x58b0 <SENSORS_APPLY_READ_BUFFER+0x240>
    588e:	fe 01       	movw	r30, r28
    5890:	7f 96       	adiw	r30, 0x1f	; 31
    5892:	de 01       	movw	r26, r28
    5894:	13 96       	adiw	r26, 0x03	; 3
    5896:	8f ef       	ldi	r24, 0xFF	; 255
    5898:	8e 0d       	add	r24, r14
    589a:	20 e2       	ldi	r18, 0x20	; 32
    589c:	30 e0       	ldi	r19, 0x00	; 0
    589e:	2c 0f       	add	r18, r28
    58a0:	3d 1f       	adc	r19, r29
    58a2:	28 0f       	add	r18, r24
    58a4:	31 1d       	adc	r19, r1
							{
								DATA_SEND_BUFFER[(unsigned char)(2+(char)count)]=NUMBER_STRING_BUFFER[(unsigned char)(count)];
    58a6:	81 91       	ld	r24, Z+
    58a8:	8d 93       	st	X+, r24
							
							
							/*SENSOR ADDRESS*/
							unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
							
							for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    58aa:	e2 17       	cp	r30, r18
    58ac:	f3 07       	cpc	r31, r19
    58ae:	d9 f7       	brne	.-10     	; 0x58a6 <SENSORS_APPLY_READ_BUFFER+0x236>
							{
								DATA_SEND_BUFFER[(unsigned char)(2+(char)count)]=NUMBER_STRING_BUFFER[(unsigned char)(count)];
							}
							
							LENGTH=2+count;
    58b0:	82 e0       	ldi	r24, 0x02	; 2
    58b2:	8e 0d       	add	r24, r14
							DATA_SEND_BUFFER[LENGTH]=':';
    58b4:	90 e0       	ldi	r25, 0x00	; 0
    58b6:	e1 e0       	ldi	r30, 0x01	; 1
    58b8:	f0 e0       	ldi	r31, 0x00	; 0
    58ba:	ec 0f       	add	r30, r28
    58bc:	fd 1f       	adc	r31, r29
    58be:	e8 0f       	add	r30, r24
    58c0:	f9 1f       	adc	r31, r25
    58c2:	ba e3       	ldi	r27, 0x3A	; 58
    58c4:	b0 83       	st	Z, r27
							DATA_SEND_BUFFER[LENGTH+1]='K';/*MASTER RETURN DATA TO ANDROID*/
    58c6:	e2 e0       	ldi	r30, 0x02	; 2
    58c8:	f0 e0       	ldi	r31, 0x00	; 0
    58ca:	ec 0f       	add	r30, r28
    58cc:	fd 1f       	adc	r31, r29
    58ce:	e8 0f       	add	r30, r24
    58d0:	f9 1f       	adc	r31, r25
    58d2:	2b e4       	ldi	r18, 0x4B	; 75
    58d4:	20 83       	st	Z, r18
							DATA_SEND_BUFFER[LENGTH+2]=':';
    58d6:	e3 e0       	ldi	r30, 0x03	; 3
    58d8:	f0 e0       	ldi	r31, 0x00	; 0
    58da:	ec 0f       	add	r30, r28
    58dc:	fd 1f       	adc	r31, r29
    58de:	e8 0f       	add	r30, r24
    58e0:	f9 1f       	adc	r31, r25
    58e2:	b0 83       	st	Z, r27
							LENGTH=LENGTH+3;
    58e4:	0f 2e       	mov	r0, r31
    58e6:	f5 e0       	ldi	r31, 0x05	; 5
    58e8:	ff 2e       	mov	r15, r31
    58ea:	f0 2d       	mov	r31, r0
    58ec:	fe 0c       	add	r15, r14
							NUMBER_BUFFER=0;
							/*ADDRESS REGISTER*/
							for (count=0;count<2;count++)
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
    58ee:	f6 01       	movw	r30, r12
    58f0:	ee 0f       	add	r30, r30
    58f2:	ff 1f       	adc	r31, r31
    58f4:	ee 0f       	add	r30, r30
    58f6:	ff 1f       	adc	r31, r31
    58f8:	ec 0d       	add	r30, r12
    58fa:	fd 1d       	adc	r31, r13
    58fc:	ef 5f       	subi	r30, 0xFF	; 255
    58fe:	fa 4f       	sbci	r31, 0xFA	; 250
    5900:	21 81       	ldd	r18, Z+1	; 0x01
    5902:	e2 81       	ldd	r30, Z+2	; 0x02
    5904:	30 e0       	ldi	r19, 0x00	; 0
    5906:	40 e0       	ldi	r20, 0x00	; 0
    5908:	50 e0       	ldi	r21, 0x00	; 0
    590a:	60 e0       	ldi	r22, 0x00	; 0
    590c:	70 e0       	ldi	r23, 0x00	; 0
    590e:	80 e0       	ldi	r24, 0x00	; 0
    5910:	90 e0       	ldi	r25, 0x00	; 0
    5912:	08 e0       	ldi	r16, 0x08	; 8
    5914:	46 d7       	rcall	.+3724   	; 0x67a2 <__ashldi3>
    5916:	02 2f       	mov	r16, r18
    5918:	0e 2b       	or	r16, r30
							}
							
							unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    591a:	13 2f       	mov	r17, r19
    591c:	24 2f       	mov	r18, r20
    591e:	35 2f       	mov	r19, r21
    5920:	46 2f       	mov	r20, r22
    5922:	57 2f       	mov	r21, r23
    5924:	68 2f       	mov	r22, r24
    5926:	79 2f       	mov	r23, r25
    5928:	ce 01       	movw	r24, r28
    592a:	4f 96       	adiw	r24, 0x1f	; 31
    592c:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
							for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    5930:	88 23       	and	r24, r24
    5932:	89 f0       	breq	.+34     	; 0x5956 <SENSORS_APPLY_READ_BUFFER+0x2e6>
    5934:	fe 01       	movw	r30, r28
    5936:	7f 96       	adiw	r30, 0x1f	; 31
    5938:	38 2f       	mov	r19, r24
    593a:	3e 0d       	add	r19, r14
    593c:	3b 5f       	subi	r19, 0xFB	; 251
    593e:	9f 2d       	mov	r25, r15
							{
								DATA_SEND_BUFFER[(unsigned char)(LENGTH+count)]=NUMBER_STRING_BUFFER[(unsigned char)count];
    5940:	21 91       	ld	r18, Z+
    5942:	a1 e0       	ldi	r26, 0x01	; 1
    5944:	b0 e0       	ldi	r27, 0x00	; 0
    5946:	ac 0f       	add	r26, r28
    5948:	bd 1f       	adc	r27, r29
    594a:	a9 0f       	add	r26, r25
    594c:	b1 1d       	adc	r27, r1
    594e:	2c 93       	st	X, r18
    5950:	9f 5f       	subi	r25, 0xFF	; 255
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
							}
							
							unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
							for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    5952:	93 13       	cpse	r25, r19
    5954:	f5 cf       	rjmp	.-22     	; 0x5940 <SENSORS_APPLY_READ_BUFFER+0x2d0>
							{
								DATA_SEND_BUFFER[(unsigned char)(LENGTH+count)]=NUMBER_STRING_BUFFER[(unsigned char)count];
							}
							LENGTH=LENGTH+count;
    5956:	f8 0e       	add	r15, r24
							DATA_SEND_BUFFER[LENGTH]=':';
    5958:	e1 e0       	ldi	r30, 0x01	; 1
    595a:	f0 e0       	ldi	r31, 0x00	; 0
    595c:	ec 0f       	add	r30, r28
    595e:	fd 1f       	adc	r31, r29
    5960:	ef 0d       	add	r30, r15
    5962:	f1 1d       	adc	r31, r1
    5964:	8a e3       	ldi	r24, 0x3A	; 58
    5966:	80 83       	st	Z, r24
							LENGTH++;
    5968:	ee 24       	eor	r14, r14
    596a:	e3 94       	inc	r14
    596c:	ef 0c       	add	r14, r15
							NUMBER_BUFFER=0;
							for (count=0;count<2;count++)
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].READ_VALUE[(unsigned char)count];
    596e:	f6 01       	movw	r30, r12
    5970:	ee 0f       	add	r30, r30
    5972:	ff 1f       	adc	r31, r31
    5974:	ee 0f       	add	r30, r30
    5976:	ff 1f       	adc	r31, r31
    5978:	ec 0d       	add	r30, r12
    597a:	fd 1d       	adc	r31, r13
    597c:	ef 5f       	subi	r30, 0xFF	; 255
    597e:	fa 4f       	sbci	r31, 0xFA	; 250
    5980:	23 81       	ldd	r18, Z+3	; 0x03
    5982:	e4 81       	ldd	r30, Z+4	; 0x04
    5984:	30 e0       	ldi	r19, 0x00	; 0
    5986:	40 e0       	ldi	r20, 0x00	; 0
    5988:	50 e0       	ldi	r21, 0x00	; 0
    598a:	60 e0       	ldi	r22, 0x00	; 0
    598c:	70 e0       	ldi	r23, 0x00	; 0
    598e:	80 e0       	ldi	r24, 0x00	; 0
    5990:	90 e0       	ldi	r25, 0x00	; 0
    5992:	08 e0       	ldi	r16, 0x08	; 8
    5994:	06 d7       	rcall	.+3596   	; 0x67a2 <__ashldi3>
    5996:	82 2e       	mov	r8, r18
    5998:	8e 2a       	or	r8, r30
    599a:	3d ab       	std	Y+53, r19	; 0x35
    599c:	4e ab       	std	Y+54, r20	; 0x36
    599e:	5f ab       	std	Y+55, r21	; 0x37
    59a0:	68 af       	std	Y+56, r22	; 0x38
    59a2:	57 2e       	mov	r5, r23
    59a4:	28 2e       	mov	r2, r24
    59a6:	39 2e       	mov	r3, r25
							}
							/*DATA*/
							unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    59a8:	08 2d       	mov	r16, r8
    59aa:	13 2f       	mov	r17, r19
    59ac:	24 2f       	mov	r18, r20
    59ae:	35 2f       	mov	r19, r21
    59b0:	46 2f       	mov	r20, r22
    59b2:	57 2f       	mov	r21, r23
    59b4:	68 2f       	mov	r22, r24
    59b6:	79 2f       	mov	r23, r25
    59b8:	ce 01       	movw	r24, r28
    59ba:	4f 96       	adiw	r24, 0x1f	; 31
    59bc:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
							for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    59c0:	88 23       	and	r24, r24
    59c2:	89 f0       	breq	.+34     	; 0x59e6 <SENSORS_APPLY_READ_BUFFER+0x376>
    59c4:	fe 01       	movw	r30, r28
    59c6:	7f 96       	adiw	r30, 0x1f	; 31
    59c8:	91 e0       	ldi	r25, 0x01	; 1
    59ca:	98 0f       	add	r25, r24
    59cc:	f9 0e       	add	r15, r25
    59ce:	9e 2d       	mov	r25, r14
							{
								DATA_SEND_BUFFER[(unsigned char)(LENGTH+count)]=NUMBER_STRING_BUFFER[(unsigned char)count];
    59d0:	21 91       	ld	r18, Z+
    59d2:	a1 e0       	ldi	r26, 0x01	; 1
    59d4:	b0 e0       	ldi	r27, 0x00	; 0
    59d6:	ac 0f       	add	r26, r28
    59d8:	bd 1f       	adc	r27, r29
    59da:	a9 0f       	add	r26, r25
    59dc:	b1 1d       	adc	r27, r1
    59de:	2c 93       	st	X, r18
    59e0:	9f 5f       	subi	r25, 0xFF	; 255
							{
								NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].READ_VALUE[(unsigned char)count];
							}
							/*DATA*/
							unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
							for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    59e2:	9f 11       	cpse	r25, r15
    59e4:	f5 cf       	rjmp	.-22     	; 0x59d0 <SENSORS_APPLY_READ_BUFFER+0x360>
							{
								DATA_SEND_BUFFER[(unsigned char)(LENGTH+count)]=NUMBER_STRING_BUFFER[(unsigned char)count];
							}
							LENGTH=LENGTH+count;
    59e6:	e8 0e       	add	r14, r24
							DATA_SEND_BUFFER[LENGTH]=':';
    59e8:	2e 2d       	mov	r18, r14
    59ea:	30 e0       	ldi	r19, 0x00	; 0
    59ec:	e1 e0       	ldi	r30, 0x01	; 1
    59ee:	f0 e0       	ldi	r31, 0x00	; 0
    59f0:	ec 0f       	add	r30, r28
    59f2:	fd 1f       	adc	r31, r29
    59f4:	e2 0f       	add	r30, r18
    59f6:	f3 1f       	adc	r31, r19
    59f8:	9a e3       	ldi	r25, 0x3A	; 58
    59fa:	90 83       	st	Z, r25
							DATA_SEND_BUFFER[LENGTH+1]=0;
    59fc:	e2 e0       	ldi	r30, 0x02	; 2
    59fe:	f0 e0       	ldi	r31, 0x00	; 0
    5a00:	ec 0f       	add	r30, r28
    5a02:	fd 1f       	adc	r31, r29
    5a04:	e2 0f       	add	r30, r18
    5a06:	f3 1f       	adc	r31, r19
    5a08:	10 82       	st	Z, r1
							QUEUE_ADD_ARRAY_U8(&G_SEND_DATA_QUEUE,DATA_SEND_BUFFER,LENGTH+2);
    5a0a:	42 e0       	ldi	r20, 0x02	; 2
    5a0c:	4e 0d       	add	r20, r14
    5a0e:	be 01       	movw	r22, r28
    5a10:	6f 5f       	subi	r22, 0xFF	; 255
    5a12:	7f 4f       	sbci	r23, 0xFF	; 255
    5a14:	83 ef       	ldi	r24, 0xF3	; 243
    5a16:	95 e0       	ldi	r25, 0x05	; 5
    5a18:	0e 94 76 05 	call	0xaec	; 0xaec <QUEUE_ADD_ARRAY_U8>
					{
						
						NRF_UPDATE_USED_CHANNEL(MY_CHANNELS[MY_SENSORS[BUFFER_INDEX].USED_CHANNEL]);
						if (PROTOCOL_DATA_READ(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS,MY_SENSORS[BUFFER_INDEX].SENSOR_VERSION,MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH,MY_SENSORS[BUFFER_INDEX].SESSION_KEY,SENSOR_READ_BUFFER[i].ADDRESS_REGISTER,SENSOR_READ_BUFFER[i].READ_VALUE))
						{
							RESULT_STATE=1;
    5a1c:	44 24       	eor	r4, r4
    5a1e:	43 94       	inc	r4
    5a20:	4e c1       	rjmp	.+668    	; 0x5cbe <SENSORS_APPLY_READ_BUFFER+0x64e>
						}
					}
				}
			}
			
			if(!RESULT_STATE)
    5a22:	41 10       	cpse	r4, r1
    5a24:	4c c1       	rjmp	.+664    	; 0x5cbe <SENSORS_APPLY_READ_BUFFER+0x64e>
			{
				MY_SENSORS[BUFFER_INDEX].READ_FAIL_COUNTER++;
    5a26:	6a 9c       	mul	r6, r10
    5a28:	f0 01       	movw	r30, r0
    5a2a:	6b 9c       	mul	r6, r11
    5a2c:	f0 0d       	add	r31, r0
    5a2e:	11 24       	eor	r1, r1
    5a30:	ef 51       	subi	r30, 0x1F	; 31
    5a32:	fc 4f       	sbci	r31, 0xFC	; 252
    5a34:	80 8d       	ldd	r24, Z+24	; 0x18
    5a36:	8f 5f       	subi	r24, 0xFF	; 255
    5a38:	80 8f       	std	Z+24, r24	; 0x18
				if(MY_SENSORS[BUFFER_INDEX].READ_FAIL_COUNTER==MAX_READ_FAIL_COUNTER)
    5a3a:	80 8d       	ldd	r24, Z+24	; 0x18
    5a3c:	83 30       	cpi	r24, 0x03	; 3
    5a3e:	09 f0       	breq	.+2      	; 0x5a42 <SENSORS_APPLY_READ_BUFFER+0x3d2>
    5a40:	3e c1       	rjmp	.+636    	; 0x5cbe <SENSORS_APPLY_READ_BUFFER+0x64e>
				{
					MY_SENSORS[BUFFER_INDEX].READ_FAIL_COUNTER=0;
    5a42:	8f 01       	movw	r16, r30
    5a44:	10 8e       	std	Z+24, r1	; 0x18
				/*TESTING*/
					TEST_UART_SEND_str("\n");
    5a46:	8e e7       	ldi	r24, 0x7E	; 126
    5a48:	91 e0       	ldi	r25, 0x01	; 1
    5a4a:	e0 d1       	rcall	.+960    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a4c:	8e e7       	ldi	r24, 0x7E	; 126
    5a4e:	91 e0       	ldi	r25, 0x01	; 1
    5a50:	dd d1       	rcall	.+954    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a52:	8e e7       	ldi	r24, 0x7E	; 126
    5a54:	91 e0       	ldi	r25, 0x01	; 1
    5a56:	da d1       	rcall	.+948    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a58:	8e e7       	ldi	r24, 0x7E	; 126
    5a5a:	91 e0       	ldi	r25, 0x01	; 1
    5a5c:	d7 d1       	rcall	.+942    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a5e:	8e e7       	ldi	r24, 0x7E	; 126
    5a60:	91 e0       	ldi	r25, 0x01	; 1
    5a62:	d4 d1       	rcall	.+936    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a64:	8e e7       	ldi	r24, 0x7E	; 126
    5a66:	91 e0       	ldi	r25, 0x01	; 1
    5a68:	d1 d1       	rcall	.+930    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a6a:	8e e7       	ldi	r24, 0x7E	; 126
    5a6c:	91 e0       	ldi	r25, 0x01	; 1
    5a6e:	ce d1       	rcall	.+924    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a70:	8e e7       	ldi	r24, 0x7E	; 126
    5a72:	91 e0       	ldi	r25, 0x01	; 1
    5a74:	cb d1       	rcall	.+918    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("DATA NOT READ ");
    5a76:	80 e0       	ldi	r24, 0x00	; 0
    5a78:	93 e0       	ldi	r25, 0x03	; 3
    5a7a:	c8 d1       	rcall	.+912    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_VALUE(BUFFER_INDEX);
    5a7c:	29 2d       	mov	r18, r9
    5a7e:	30 e0       	ldi	r19, 0x00	; 0
    5a80:	40 e0       	ldi	r20, 0x00	; 0
    5a82:	50 e0       	ldi	r21, 0x00	; 0
    5a84:	60 e0       	ldi	r22, 0x00	; 0
    5a86:	70 e0       	ldi	r23, 0x00	; 0
    5a88:	80 e0       	ldi	r24, 0x00	; 0
    5a8a:	90 e0       	ldi	r25, 0x00	; 0
    5a8c:	ca d1       	rcall	.+916    	; 0x5e22 <TEST_UART_SEND_VALUE>
					TEST_UART_SEND_str("\n");
    5a8e:	8e e7       	ldi	r24, 0x7E	; 126
    5a90:	91 e0       	ldi	r25, 0x01	; 1
    5a92:	bc d1       	rcall	.+888    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a94:	8e e7       	ldi	r24, 0x7E	; 126
    5a96:	91 e0       	ldi	r25, 0x01	; 1
    5a98:	b9 d1       	rcall	.+882    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5a9a:	8e e7       	ldi	r24, 0x7E	; 126
    5a9c:	91 e0       	ldi	r25, 0x01	; 1
    5a9e:	b6 d1       	rcall	.+876    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5aa0:	8e e7       	ldi	r24, 0x7E	; 126
    5aa2:	91 e0       	ldi	r25, 0x01	; 1
    5aa4:	b3 d1       	rcall	.+870    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5aa6:	8e e7       	ldi	r24, 0x7E	; 126
    5aa8:	91 e0       	ldi	r25, 0x01	; 1
    5aaa:	b0 d1       	rcall	.+864    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5aac:	8e e7       	ldi	r24, 0x7E	; 126
    5aae:	91 e0       	ldi	r25, 0x01	; 1
    5ab0:	ad d1       	rcall	.+858    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5ab2:	8e e7       	ldi	r24, 0x7E	; 126
    5ab4:	91 e0       	ldi	r25, 0x01	; 1
    5ab6:	aa d1       	rcall	.+852    	; 0x5e0c <TEST_UART_SEND_str>
					TEST_UART_SEND_str("\n");
    5ab8:	8e e7       	ldi	r24, 0x7E	; 126
    5aba:	91 e0       	ldi	r25, 0x01	; 1
    5abc:	a7 d1       	rcall	.+846    	; 0x5e0c <TEST_UART_SEND_str>
				/*TESTING*/
						DATA_SEND_BUFFER[0]='A';/*MEANS THE MASTER SEND TO ANDROID*/
    5abe:	b1 e4       	ldi	r27, 0x41	; 65
    5ac0:	b9 83       	std	Y+1, r27	; 0x01
						DATA_SEND_BUFFER[1]=':';/*COTATION*/
    5ac2:	ea e3       	ldi	r30, 0x3A	; 58
    5ac4:	ea 83       	std	Y+2, r30	; 0x02
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
						NUMBER_BUFFER=0;
						char count;
						for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    5ac6:	d8 01       	movw	r26, r16
    5ac8:	fc 90       	ld	r15, X
    5aca:	ff 20       	and	r15, r15
    5acc:	a9 f0       	breq	.+42     	; 0x5af8 <SENSORS_APPLY_READ_BUFFER+0x488>
								  ADDRESS[1]
								  ADDRESS[2]
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
						NUMBER_BUFFER=0;
    5ace:	20 e0       	ldi	r18, 0x00	; 0
    5ad0:	30 e0       	ldi	r19, 0x00	; 0
    5ad2:	40 e0       	ldi	r20, 0x00	; 0
    5ad4:	50 e0       	ldi	r21, 0x00	; 0
    5ad6:	60 e0       	ldi	r22, 0x00	; 0
    5ad8:	70 e0       	ldi	r23, 0x00	; 0
    5ada:	80 e0       	ldi	r24, 0x00	; 0
    5adc:	90 e0       	ldi	r25, 0x00	; 0
						char count;
						for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
						{
							NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
    5ade:	d8 01       	movw	r26, r16
    5ae0:	08 e0       	ldi	r16, 0x08	; 8
    5ae2:	5f d6       	rcall	.+3262   	; 0x67a2 <__ashldi3>
    5ae4:	ef 2d       	mov	r30, r15
    5ae6:	f0 e0       	ldi	r31, 0x00	; 0
    5ae8:	31 97       	sbiw	r30, 0x01	; 1
    5aea:	ea 0f       	add	r30, r26
    5aec:	fb 1f       	adc	r31, r27
    5aee:	e1 81       	ldd	r30, Z+1	; 0x01
    5af0:	2e 2b       	or	r18, r30
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
						NUMBER_BUFFER=0;
						char count;
						for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
    5af2:	fa 94       	dec	r15
    5af4:	a9 f7       	brne	.-22     	; 0x5ae0 <SENSORS_APPLY_READ_BUFFER+0x470>
    5af6:	08 c0       	rjmp	.+16     	; 0x5b08 <SENSORS_APPLY_READ_BUFFER+0x498>
								  ADDRESS[1]
								  ADDRESS[2]
								  ADDRESS[3]
							MOST  ADDRESS[4]
							*/
						NUMBER_BUFFER=0;
    5af8:	20 e0       	ldi	r18, 0x00	; 0
    5afa:	30 e0       	ldi	r19, 0x00	; 0
    5afc:	40 e0       	ldi	r20, 0x00	; 0
    5afe:	50 e0       	ldi	r21, 0x00	; 0
    5b00:	60 e0       	ldi	r22, 0x00	; 0
    5b02:	70 e0       	ldi	r23, 0x00	; 0
    5b04:	80 e0       	ldi	r24, 0x00	; 0
    5b06:	90 e0       	ldi	r25, 0x00	; 0
						for (count=(MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS_LENGTH);count>0;count--)
						{
							NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
						}
							
						unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    5b08:	02 2f       	mov	r16, r18
    5b0a:	13 2f       	mov	r17, r19
    5b0c:	24 2f       	mov	r18, r20
    5b0e:	35 2f       	mov	r19, r21
    5b10:	46 2f       	mov	r20, r22
    5b12:	57 2f       	mov	r21, r23
    5b14:	68 2f       	mov	r22, r24
    5b16:	79 2f       	mov	r23, r25
    5b18:	ce 01       	movw	r24, r28
    5b1a:	4f 96       	adiw	r24, 0x1f	; 31
    5b1c:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
						/*SENSOR ADDRESS*/
						for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    5b20:	88 23       	and	r24, r24
    5b22:	89 f0       	breq	.+34     	; 0x5b46 <SENSORS_APPLY_READ_BUFFER+0x4d6>
    5b24:	fe 01       	movw	r30, r28
    5b26:	7f 96       	adiw	r30, 0x1f	; 31
    5b28:	de 01       	movw	r26, r28
    5b2a:	13 96       	adiw	r26, 0x03	; 3
    5b2c:	9f ef       	ldi	r25, 0xFF	; 255
    5b2e:	98 0f       	add	r25, r24
    5b30:	20 e2       	ldi	r18, 0x20	; 32
    5b32:	30 e0       	ldi	r19, 0x00	; 0
    5b34:	2c 0f       	add	r18, r28
    5b36:	3d 1f       	adc	r19, r29
    5b38:	29 0f       	add	r18, r25
    5b3a:	31 1d       	adc	r19, r1
						{
							DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    5b3c:	91 91       	ld	r25, Z+
    5b3e:	9d 93       	st	X+, r25
							NUMBER_BUFFER=(NUMBER_BUFFER<<8)|MY_SENSORS[BUFFER_INDEX].SENSOR_ADDRESS[count-1];
						}
							
						unsigned char ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
						/*SENSOR ADDRESS*/
						for(count=0;count<ADDRESS_LENGTH_DECIMAL;count++)
    5b40:	e2 17       	cp	r30, r18
    5b42:	f3 07       	cpc	r31, r19
    5b44:	d9 f7       	brne	.-10     	; 0x5b3c <SENSORS_APPLY_READ_BUFFER+0x4cc>
						{
							DATA_SEND_BUFFER[2+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
						}
						LENGTH=2+count;
    5b46:	22 e0       	ldi	r18, 0x02	; 2
    5b48:	28 0f       	add	r18, r24
						DATA_SEND_BUFFER[LENGTH]=':';
    5b4a:	30 e0       	ldi	r19, 0x00	; 0
    5b4c:	e1 e0       	ldi	r30, 0x01	; 1
    5b4e:	f0 e0       	ldi	r31, 0x00	; 0
    5b50:	ec 0f       	add	r30, r28
    5b52:	fd 1f       	adc	r31, r29
    5b54:	e2 0f       	add	r30, r18
    5b56:	f3 1f       	adc	r31, r19
    5b58:	ba e3       	ldi	r27, 0x3A	; 58
    5b5a:	b0 83       	st	Z, r27
						DATA_SEND_BUFFER[LENGTH+1]='F';/*MASTER RETURN FAILED TO ANDROID*/
    5b5c:	e2 e0       	ldi	r30, 0x02	; 2
    5b5e:	f0 e0       	ldi	r31, 0x00	; 0
    5b60:	ec 0f       	add	r30, r28
    5b62:	fd 1f       	adc	r31, r29
    5b64:	e2 0f       	add	r30, r18
    5b66:	f3 1f       	adc	r31, r19
    5b68:	96 e4       	ldi	r25, 0x46	; 70
    5b6a:	90 83       	st	Z, r25
						DATA_SEND_BUFFER[LENGTH+2]=':';
    5b6c:	e3 e0       	ldi	r30, 0x03	; 3
    5b6e:	f0 e0       	ldi	r31, 0x00	; 0
    5b70:	ec 0f       	add	r30, r28
    5b72:	fd 1f       	adc	r31, r29
    5b74:	e2 0f       	add	r30, r18
    5b76:	f3 1f       	adc	r31, r19
    5b78:	b0 83       	st	Z, r27
						LENGTH=LENGTH+3;
    5b7a:	0f 2e       	mov	r0, r31
    5b7c:	f5 e0       	ldi	r31, 0x05	; 5
    5b7e:	ff 2e       	mov	r15, r31
    5b80:	f0 2d       	mov	r31, r0
    5b82:	f8 0e       	add	r15, r24
							
							NUMBER_BUFFER=0;
						for (count=0;count<2;count++)
						{
							NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
    5b84:	f6 01       	movw	r30, r12
    5b86:	ee 0f       	add	r30, r30
    5b88:	ff 1f       	adc	r31, r31
    5b8a:	ee 0f       	add	r30, r30
    5b8c:	ff 1f       	adc	r31, r31
    5b8e:	ec 0d       	add	r30, r12
    5b90:	fd 1d       	adc	r31, r13
    5b92:	ef 5f       	subi	r30, 0xFF	; 255
    5b94:	fa 4f       	sbci	r31, 0xFA	; 250
    5b96:	21 81       	ldd	r18, Z+1	; 0x01
    5b98:	e2 81       	ldd	r30, Z+2	; 0x02
    5b9a:	30 e0       	ldi	r19, 0x00	; 0
    5b9c:	40 e0       	ldi	r20, 0x00	; 0
    5b9e:	50 e0       	ldi	r21, 0x00	; 0
    5ba0:	60 e0       	ldi	r22, 0x00	; 0
    5ba2:	70 e0       	ldi	r23, 0x00	; 0
    5ba4:	80 e0       	ldi	r24, 0x00	; 0
    5ba6:	90 e0       	ldi	r25, 0x00	; 0
    5ba8:	08 e0       	ldi	r16, 0x08	; 8
    5baa:	fb d5       	rcall	.+3062   	; 0x67a2 <__ashldi3>
    5bac:	02 2f       	mov	r16, r18
    5bae:	0e 2b       	or	r16, r30
						}
							
						unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    5bb0:	13 2f       	mov	r17, r19
    5bb2:	24 2f       	mov	r18, r20
    5bb4:	35 2f       	mov	r19, r21
    5bb6:	46 2f       	mov	r20, r22
    5bb8:	57 2f       	mov	r21, r23
    5bba:	68 2f       	mov	r22, r24
    5bbc:	79 2f       	mov	r23, r25
    5bbe:	ce 01       	movw	r24, r28
    5bc0:	4f 96       	adiw	r24, 0x1f	; 31
    5bc2:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
						/*ADDRESS REGISTER*/
						for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    5bc6:	88 23       	and	r24, r24
    5bc8:	a9 f0       	breq	.+42     	; 0x5bf4 <SENSORS_APPLY_READ_BUFFER+0x584>
    5bca:	fe 01       	movw	r30, r28
    5bcc:	7f 96       	adiw	r30, 0x1f	; 31
    5bce:	a1 e0       	ldi	r26, 0x01	; 1
    5bd0:	b0 e0       	ldi	r27, 0x00	; 0
    5bd2:	ac 0f       	add	r26, r28
    5bd4:	bd 1f       	adc	r27, r29
    5bd6:	af 0d       	add	r26, r15
    5bd8:	b1 1d       	adc	r27, r1
    5bda:	9f ef       	ldi	r25, 0xFF	; 255
    5bdc:	98 0f       	add	r25, r24
    5bde:	20 e2       	ldi	r18, 0x20	; 32
    5be0:	30 e0       	ldi	r19, 0x00	; 0
    5be2:	2c 0f       	add	r18, r28
    5be4:	3d 1f       	adc	r19, r29
    5be6:	29 0f       	add	r18, r25
    5be8:	31 1d       	adc	r19, r1
						{
							DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    5bea:	91 91       	ld	r25, Z+
    5bec:	9d 93       	st	X+, r25
							NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].ADDRESS_REGISTER[(unsigned char)count];
						}
							
						unsigned char REG_ADDRESS_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
						/*ADDRESS REGISTER*/
						for(count=0;count<REG_ADDRESS_LENGTH_DECIMAL;count++)
    5bee:	e2 17       	cp	r30, r18
    5bf0:	f3 07       	cpc	r31, r19
    5bf2:	d9 f7       	brne	.-10     	; 0x5bea <SENSORS_APPLY_READ_BUFFER+0x57a>
						{
							DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
						}
						LENGTH=LENGTH+count;
    5bf4:	f8 0e       	add	r15, r24
						DATA_SEND_BUFFER[LENGTH]=':';
    5bf6:	e1 e0       	ldi	r30, 0x01	; 1
    5bf8:	f0 e0       	ldi	r31, 0x00	; 0
    5bfa:	ec 0f       	add	r30, r28
    5bfc:	fd 1f       	adc	r31, r29
    5bfe:	ef 0d       	add	r30, r15
    5c00:	f1 1d       	adc	r31, r1
    5c02:	aa e3       	ldi	r26, 0x3A	; 58
    5c04:	a0 83       	st	Z, r26
						LENGTH++;
    5c06:	f3 94       	inc	r15
						NUMBER_BUFFER=0;
						for (count=0;count<2;count++)
						{
							NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].READ_VALUE[(unsigned char)count];
    5c08:	f6 01       	movw	r30, r12
    5c0a:	ee 0f       	add	r30, r30
    5c0c:	ff 1f       	adc	r31, r31
    5c0e:	ee 0f       	add	r30, r30
    5c10:	ff 1f       	adc	r31, r31
    5c12:	ec 0d       	add	r30, r12
    5c14:	fd 1d       	adc	r31, r13
    5c16:	ef 5f       	subi	r30, 0xFF	; 255
    5c18:	fa 4f       	sbci	r31, 0xFA	; 250
    5c1a:	23 81       	ldd	r18, Z+3	; 0x03
    5c1c:	e4 81       	ldd	r30, Z+4	; 0x04
    5c1e:	30 e0       	ldi	r19, 0x00	; 0
    5c20:	40 e0       	ldi	r20, 0x00	; 0
    5c22:	50 e0       	ldi	r21, 0x00	; 0
    5c24:	60 e0       	ldi	r22, 0x00	; 0
    5c26:	70 e0       	ldi	r23, 0x00	; 0
    5c28:	80 e0       	ldi	r24, 0x00	; 0
    5c2a:	90 e0       	ldi	r25, 0x00	; 0
    5c2c:	08 e0       	ldi	r16, 0x08	; 8
    5c2e:	b9 d5       	rcall	.+2930   	; 0x67a2 <__ashldi3>
    5c30:	82 2e       	mov	r8, r18
    5c32:	8e 2a       	or	r8, r30
    5c34:	3d ab       	std	Y+53, r19	; 0x35
    5c36:	4e ab       	std	Y+54, r20	; 0x36
    5c38:	5f ab       	std	Y+55, r21	; 0x37
    5c3a:	68 af       	std	Y+56, r22	; 0x38
    5c3c:	57 2e       	mov	r5, r23
    5c3e:	28 2e       	mov	r2, r24
    5c40:	39 2e       	mov	r3, r25
						}
							
						unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
    5c42:	08 2d       	mov	r16, r8
    5c44:	13 2f       	mov	r17, r19
    5c46:	24 2f       	mov	r18, r20
    5c48:	35 2f       	mov	r19, r21
    5c4a:	46 2f       	mov	r20, r22
    5c4c:	57 2f       	mov	r21, r23
    5c4e:	68 2f       	mov	r22, r24
    5c50:	79 2f       	mov	r23, r25
    5c52:	ce 01       	movw	r24, r28
    5c54:	4f 96       	adiw	r24, 0x1f	; 31
    5c56:	0e 94 ce 0c 	call	0x199c	; 0x199c <inttostring>
						/*DATA*/
						for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    5c5a:	88 23       	and	r24, r24
    5c5c:	a9 f0       	breq	.+42     	; 0x5c88 <SENSORS_APPLY_READ_BUFFER+0x618>
    5c5e:	fe 01       	movw	r30, r28
    5c60:	7f 96       	adiw	r30, 0x1f	; 31
    5c62:	a1 e0       	ldi	r26, 0x01	; 1
    5c64:	b0 e0       	ldi	r27, 0x00	; 0
    5c66:	ac 0f       	add	r26, r28
    5c68:	bd 1f       	adc	r27, r29
    5c6a:	af 0d       	add	r26, r15
    5c6c:	b1 1d       	adc	r27, r1
    5c6e:	9f ef       	ldi	r25, 0xFF	; 255
    5c70:	98 0f       	add	r25, r24
    5c72:	20 e2       	ldi	r18, 0x20	; 32
    5c74:	30 e0       	ldi	r19, 0x00	; 0
    5c76:	2c 0f       	add	r18, r28
    5c78:	3d 1f       	adc	r19, r29
    5c7a:	29 0f       	add	r18, r25
    5c7c:	31 1d       	adc	r19, r1
						{
							DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
    5c7e:	91 91       	ld	r25, Z+
    5c80:	9d 93       	st	X+, r25
							NUMBER_BUFFER=(NUMBER_BUFFER<<8)|SENSOR_READ_BUFFER[i].READ_VALUE[(unsigned char)count];
						}
							
						unsigned char DATA_LENGTH_DECIMAL=inttostring(NUMBER_STRING_BUFFER,NUMBER_BUFFER);
						/*DATA*/
						for(count=0;count<DATA_LENGTH_DECIMAL;count++)
    5c82:	e2 17       	cp	r30, r18
    5c84:	f3 07       	cpc	r31, r19
    5c86:	d9 f7       	brne	.-10     	; 0x5c7e <SENSORS_APPLY_READ_BUFFER+0x60e>
						{
							DATA_SEND_BUFFER[LENGTH+(unsigned char)count]=NUMBER_STRING_BUFFER[(unsigned char)count];
						}
						LENGTH=LENGTH+count;
    5c88:	f8 0e       	add	r15, r24
						DATA_SEND_BUFFER[LENGTH]=':';
    5c8a:	2f 2d       	mov	r18, r15
    5c8c:	30 e0       	ldi	r19, 0x00	; 0
    5c8e:	e1 e0       	ldi	r30, 0x01	; 1
    5c90:	f0 e0       	ldi	r31, 0x00	; 0
    5c92:	ec 0f       	add	r30, r28
    5c94:	fd 1f       	adc	r31, r29
    5c96:	e2 0f       	add	r30, r18
    5c98:	f3 1f       	adc	r31, r19
    5c9a:	ba e3       	ldi	r27, 0x3A	; 58
    5c9c:	b0 83       	st	Z, r27
						DATA_SEND_BUFFER[LENGTH+1]=0;	
    5c9e:	e2 e0       	ldi	r30, 0x02	; 2
    5ca0:	f0 e0       	ldi	r31, 0x00	; 0
    5ca2:	ec 0f       	add	r30, r28
    5ca4:	fd 1f       	adc	r31, r29
    5ca6:	e2 0f       	add	r30, r18
    5ca8:	f3 1f       	adc	r31, r19
    5caa:	10 82       	st	Z, r1
						QUEUE_ADD_ARRAY_U8(&G_SEND_DATA_QUEUE,DATA_SEND_BUFFER,LENGTH+2);
    5cac:	42 e0       	ldi	r20, 0x02	; 2
    5cae:	4f 0d       	add	r20, r15
    5cb0:	be 01       	movw	r22, r28
    5cb2:	6f 5f       	subi	r22, 0xFF	; 255
    5cb4:	7f 4f       	sbci	r23, 0xFF	; 255
    5cb6:	83 ef       	ldi	r24, 0xF3	; 243
    5cb8:	95 e0       	ldi	r25, 0x05	; 5
    5cba:	0e 94 76 05 	call	0xaec	; 0xaec <QUEUE_ADD_ARRAY_U8>
		unsigned char DATA_SEND_BUFFER[30],LENGTH;
		unsigned char i=0,BUFFER_INDEX,RESULT_STATE=0;
		unsigned char NUMBER_STRING_BUFFER[20];
		unsigned long long NUMBER_BUFFER=0;
		
		for(i=0;i<SENSOR_READ_BUFFER_LENGTH;i++)
    5cbe:	73 94       	inc	r7
    5cc0:	80 91 29 03 	lds	r24, 0x0329
    5cc4:	78 16       	cp	r7, r24
    5cc6:	08 f4       	brcc	.+2      	; 0x5cca <SENSORS_APPLY_READ_BUFFER+0x65a>
    5cc8:	06 cd       	rjmp	.-1524   	; 0x56d6 <SENSORS_APPLY_READ_BUFFER+0x66>
						QUEUE_ADD_ARRAY_U8(&G_SEND_DATA_QUEUE,DATA_SEND_BUFFER,LENGTH+2);
						/*SEND FAILED*/
					}	
			}
		}
		SENSOR_READ_BUFFER_LENGTH=0;
    5cca:	10 92 29 03 	sts	0x0329, r1
		if((SENSOR_READ_BUFFER_LENGTH==0)&&(SENSOR_SEND_BUFFER_LENGTH==0))
    5cce:	80 91 29 03 	lds	r24, 0x0329
    5cd2:	81 11       	cpse	r24, r1
    5cd4:	06 c0       	rjmp	.+12     	; 0x5ce2 <SENSORS_APPLY_READ_BUFFER+0x672>
    5cd6:	80 91 2a 03 	lds	r24, 0x032A
    5cda:	81 11       	cpse	r24, r1
    5cdc:	02 c0       	rjmp	.+4      	; 0x5ce2 <SENSORS_APPLY_READ_BUFFER+0x672>
		{
			F_LAST_RECIVED_DATA_NOT_HANDLED=0;
    5cde:	10 92 8c 07 	sts	0x078C, r1
		}
	}
}
    5ce2:	e8 96       	adiw	r28, 0x38	; 56
    5ce4:	0f b6       	in	r0, 0x3f	; 63
    5ce6:	f8 94       	cli
    5ce8:	de bf       	out	0x3e, r29	; 62
    5cea:	0f be       	out	0x3f, r0	; 63
    5cec:	cd bf       	out	0x3d, r28	; 61
    5cee:	df 91       	pop	r29
    5cf0:	cf 91       	pop	r28
    5cf2:	1f 91       	pop	r17
    5cf4:	0f 91       	pop	r16
    5cf6:	ff 90       	pop	r15
    5cf8:	ef 90       	pop	r14
    5cfa:	df 90       	pop	r13
    5cfc:	cf 90       	pop	r12
    5cfe:	bf 90       	pop	r11
    5d00:	af 90       	pop	r10
    5d02:	9f 90       	pop	r9
    5d04:	8f 90       	pop	r8
    5d06:	7f 90       	pop	r7
    5d08:	6f 90       	pop	r6
    5d0a:	5f 90       	pop	r5
    5d0c:	4f 90       	pop	r4
    5d0e:	3f 90       	pop	r3
    5d10:	2f 90       	pop	r2
    5d12:	08 95       	ret

00005d14 <LOOP_SENSORS_MANAGE>:
	}
}

void LOOP_SENSORS_MANAGE()
{
	if (F_B_ADD_NEW_SENSOR)
    5d14:	80 91 e0 03 	lds	r24, 0x03E0
    5d18:	88 23       	and	r24, r24
    5d1a:	f1 f0       	breq	.+60     	; 0x5d58 <LOOP_SENSORS_MANAGE+0x44>
	{
		F_B_ADD_NEW_SENSOR=0;
    5d1c:	10 92 e0 03 	sts	0x03E0, r1
		ADD_NEW_SENSOR(B_NEW_SENSOR_BUFFER);
    5d20:	8d b7       	in	r24, 0x3d	; 61
    5d22:	9e b7       	in	r25, 0x3e	; 62
    5d24:	49 97       	sbiw	r24, 0x19	; 25
    5d26:	0f b6       	in	r0, 0x3f	; 63
    5d28:	f8 94       	cli
    5d2a:	9e bf       	out	0x3e, r25	; 62
    5d2c:	0f be       	out	0x3f, r0	; 63
    5d2e:	8d bf       	out	0x3d, r24	; 61
    5d30:	ad b7       	in	r26, 0x3d	; 61
    5d32:	be b7       	in	r27, 0x3e	; 62
    5d34:	11 96       	adiw	r26, 0x01	; 1
    5d36:	89 e1       	ldi	r24, 0x19	; 25
    5d38:	e2 ee       	ldi	r30, 0xE2	; 226
    5d3a:	f4 e0       	ldi	r31, 0x04	; 4
    5d3c:	01 90       	ld	r0, Z+
    5d3e:	0d 92       	st	X+, r0
    5d40:	8a 95       	dec	r24
    5d42:	e1 f7       	brne	.-8      	; 0x5d3c <LOOP_SENSORS_MANAGE+0x28>
    5d44:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <ADD_NEW_SENSOR>
    5d48:	8d b7       	in	r24, 0x3d	; 61
    5d4a:	9e b7       	in	r25, 0x3e	; 62
    5d4c:	49 96       	adiw	r24, 0x19	; 25
    5d4e:	0f b6       	in	r0, 0x3f	; 63
    5d50:	f8 94       	cli
    5d52:	9e bf       	out	0x3e, r25	; 62
    5d54:	0f be       	out	0x3f, r0	; 63
    5d56:	8d bf       	out	0x3d, r24	; 61
	}
	if (F_B_DELETE_SENSOR)
    5d58:	80 91 e1 04 	lds	r24, 0x04E1
    5d5c:	88 23       	and	r24, r24
    5d5e:	39 f0       	breq	.+14     	; 0x5d6e <LOOP_SENSORS_MANAGE+0x5a>
	{
		F_B_DELETE_SENSOR=0;
    5d60:	10 92 e1 04 	sts	0x04E1, r1
		DELETE_SENSOR(B_SENSOR_ADDRESS_DELETE,5/*B_SENSOR_ADDRESS_L_DELETE*/);
    5d64:	65 e0       	ldi	r22, 0x05	; 5
    5d66:	8c ed       	ldi	r24, 0xDC	; 220
    5d68:	94 e0       	ldi	r25, 0x04	; 4
    5d6a:	0e 94 18 1f 	call	0x3e30	; 0x3e30 <DELETE_SENSOR>
	}
	if (F_B_ENABLE_SENSOR)
    5d6e:	80 91 ff 04 	lds	r24, 0x04FF
    5d72:	88 23       	and	r24, r24
    5d74:	39 f0       	breq	.+14     	; 0x5d84 <LOOP_SENSORS_MANAGE+0x70>
	{
		F_B_ENABLE_SENSOR=0;
    5d76:	10 92 ff 04 	sts	0x04FF, r1
		SENSOR_STATE_ENABLE(B_SENSOR_ADDRESS_ENABLE,5/*B_SENSOR_ADDRESS_L_ENABLE*/);
    5d7a:	65 e0       	ldi	r22, 0x05	; 5
    5d7c:	83 e3       	ldi	r24, 0x33	; 51
    5d7e:	95 e0       	ldi	r25, 0x05	; 5
    5d80:	0e 94 6c 1f 	call	0x3ed8	; 0x3ed8 <SENSOR_STATE_ENABLE>
	}
	if (F_B_DISABLE_SENSOR)
    5d84:	80 91 3e 05 	lds	r24, 0x053E
    5d88:	88 23       	and	r24, r24
    5d8a:	39 f0       	breq	.+14     	; 0x5d9a <LOOP_SENSORS_MANAGE+0x86>
	{
		F_B_DISABLE_SENSOR=0;
    5d8c:	10 92 3e 05 	sts	0x053E, r1
		SENSOR_STATE_DISABLE(B_SENSOR_ADDRESS_DISABLE,5/*B_SENSOR_ADDRESS_L_DISABLE*/);
    5d90:	65 e0       	ldi	r22, 0x05	; 5
    5d92:	88 e3       	ldi	r24, 0x38	; 56
    5d94:	95 e0       	ldi	r25, 0x05	; 5
    5d96:	0e 94 88 1f 	call	0x3f10	; 0x3f10 <SENSOR_STATE_DISABLE>
	}
	if (DELETE_FLAG)
    5d9a:	80 91 2b 03 	lds	r24, 0x032B
    5d9e:	88 23       	and	r24, r24
    5da0:	39 f0       	breq	.+14     	; 0x5db0 <LOOP_SENSORS_MANAGE+0x9c>
	{
		DELETE_FLAG=0;
    5da2:	10 92 2b 03 	sts	0x032B, r1
		TEST_UART_SEND_str("delete all\n");
    5da6:	8f e0       	ldi	r24, 0x0F	; 15
    5da8:	93 e0       	ldi	r25, 0x03	; 3
    5daa:	30 d0       	rcall	.+96     	; 0x5e0c <TEST_UART_SEND_str>
		DELETE_ALL_SENSOR();/*TO BE CONTINUED*/
    5dac:	0e 94 39 1f 	call	0x3e72	; 0x3e72 <DELETE_ALL_SENSOR>
	}
	
	TEST2_SET();
    5db0:	a9 9a       	sbi	0x15, 1	; 21
	SENSORS_CONNECT();
    5db2:	0e 94 a3 1f 	call	0x3f46	; 0x3f46 <SENSORS_CONNECT>
	SENSORS_BEACON();
    5db6:	0e 94 1f 21 	call	0x423e	; 0x423e <SENSORS_BEACON>
	SENSORS_NEW_SESSIONS();
    5dba:	0e 94 25 22 	call	0x444a	; 0x444a <SENSORS_NEW_SESSIONS>
	SENSORS_CHANGE_CHANNEL();
    5dbe:	0e 94 36 23 	call	0x466c	; 0x466c <SENSORS_CHANGE_CHANNEL>
	SENSORS_FILL_SENSOR_BUFFERS();
    5dc2:	0e 94 4c 24 	call	0x4898	; 0x4898 <SENSORS_FILL_SENSOR_BUFFERS>
	SENSORS_APPLY_SEND_BUFFER();
    5dc6:	01 d8       	rcall	.-4094   	; 0x4dca <SENSORS_APPLY_SEND_BUFFER>
	SENSORS_APPLY_READ_BUFFER();
    5dc8:	53 dc       	rcall	.-1882   	; 0x5670 <SENSORS_APPLY_READ_BUFFER>
	TEST2_CLEAR();
    5dca:	a9 98       	cbi	0x15, 1	; 21
    5dcc:	08 95       	ret

00005dce <INT6_ISR>:
	}
}

void INT6_ISR()
{
	DELETE_INT_FLAG=1;
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	80 93 2d 03 	sts	0x032D, r24
	DELETE_COUNTER=0;
    5dd4:	10 92 2c 03 	sts	0x032C, r1
    5dd8:	08 95       	ret

00005dda <TEST_IO_SETUP>:
	
	F_B_NEW_USER_PASS=1;
}

void TEST_UART_SEND_ARRAY(char*str,unsigned char LENGTH)
{
    5dda:	20 e0       	ldi	r18, 0x00	; 0
    5ddc:	40 e0       	ldi	r20, 0x00	; 0
    5dde:	63 e3       	ldi	r22, 0x33	; 51
    5de0:	70 e0       	ldi	r23, 0x00	; 0
    5de2:	84 e3       	ldi	r24, 0x34	; 52
    5de4:	90 e0       	ldi	r25, 0x00	; 0
    5de6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
    5dea:	21 e0       	ldi	r18, 0x01	; 1
    5dec:	40 e0       	ldi	r20, 0x00	; 0
    5dee:	63 e3       	ldi	r22, 0x33	; 51
    5df0:	70 e0       	ldi	r23, 0x00	; 0
    5df2:	84 e3       	ldi	r24, 0x34	; 52
    5df4:	90 e0       	ldi	r25, 0x00	; 0
    5df6:	0e 94 e2 07 	call	0xfc4	; 0xfc4 <gpio_outputconfg>
    5dfa:	22 e0       	ldi	r18, 0x02	; 2
    5dfc:	40 e0       	ldi	r20, 0x00	; 0
    5dfe:	63 e3       	ldi	r22, 0x33	; 51
    5e00:	70 e0       	ldi	r23, 0x00	; 0
    5e02:	84 e3       	ldi	r24, 0x34	; 52
    5e04:	90 e0       	ldi	r25, 0x00	; 0
    5e06:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <gpio_outputconfg>
    5e0a:	08 95       	ret

00005e0c <TEST_UART_SEND_str>:
	/*USART0_SEND_ARRAY(str,LENGTH);*/
}

void TEST_UART_SEND_str(char*str)
{
    5e0c:	08 95       	ret

00005e0e <TEST_UART_SEND_byte>:
	/*USART0_SEND_str(str);*/
}

void TEST_UART_SEND_byte(volatile unsigned char byte)
{
    5e0e:	cf 93       	push	r28
    5e10:	df 93       	push	r29
    5e12:	1f 92       	push	r1
    5e14:	cd b7       	in	r28, 0x3d	; 61
    5e16:	de b7       	in	r29, 0x3e	; 62
    5e18:	89 83       	std	Y+1, r24	; 0x01
	/*USART0_SEND_byte(byte);*/
}
    5e1a:	0f 90       	pop	r0
    5e1c:	df 91       	pop	r29
    5e1e:	cf 91       	pop	r28
    5e20:	08 95       	ret

00005e22 <TEST_UART_SEND_VALUE>:
void TEST_UART_SEND_VALUE(long long X)
{
    5e22:	08 95       	ret

00005e24 <TIMERS_SETUP>:
#include "TIMER.h"



void TIMERS_SETUP()
{
    5e24:	8f 92       	push	r8
    5e26:	af 92       	push	r10
    5e28:	bf 92       	push	r11
    5e2a:	cf 92       	push	r12
    5e2c:	df 92       	push	r13
    5e2e:	ef 92       	push	r14
    5e30:	ff 92       	push	r15
    5e32:	0f 93       	push	r16
	TIMER0_ENABLE(TIMER_1024,NORMAL_MOD,OC0_DISCONNECTED,OVER_FLOW_INT_ENABLE);
    5e34:	21 e0       	ldi	r18, 0x01	; 1
    5e36:	40 e0       	ldi	r20, 0x00	; 0
    5e38:	60 e0       	ldi	r22, 0x00	; 0
    5e3a:	85 e0       	ldi	r24, 0x05	; 5
    5e3c:	0e 94 08 12 	call	0x2410	; 0x2410 <TIMER0_ENABLE>
	TIMER1_ENABLE(T1_OCA1_DISCONNECT,T1_OCB1_DISCONNECT,T1_OCC1_DISCONNECT,T1_NORMAL,T1_TIMER_64,0,0,0,ENABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT,DISABLE_TIMER1_INT);/*0.25 SEC*/
    5e40:	1f 92       	push	r1
    5e42:	1f 92       	push	r1
    5e44:	1f 92       	push	r1
    5e46:	1f 92       	push	r1
    5e48:	88 24       	eor	r8, r8
    5e4a:	83 94       	inc	r8
    5e4c:	a1 2c       	mov	r10, r1
    5e4e:	b1 2c       	mov	r11, r1
    5e50:	c1 2c       	mov	r12, r1
    5e52:	d1 2c       	mov	r13, r1
    5e54:	e1 2c       	mov	r14, r1
    5e56:	f1 2c       	mov	r15, r1
    5e58:	03 e0       	ldi	r16, 0x03	; 3
    5e5a:	20 e0       	ldi	r18, 0x00	; 0
    5e5c:	40 e0       	ldi	r20, 0x00	; 0
    5e5e:	60 e0       	ldi	r22, 0x00	; 0
    5e60:	80 e0       	ldi	r24, 0x00	; 0
    5e62:	0e 94 17 12 	call	0x242e	; 0x242e <TIMER1_ENABLE>
	global_interupt_enable();
    5e66:	8f b7       	in	r24, 0x3f	; 63
    5e68:	80 68       	ori	r24, 0x80	; 128
    5e6a:	8f bf       	out	0x3f, r24	; 63
    5e6c:	0f 90       	pop	r0
    5e6e:	0f 90       	pop	r0
    5e70:	0f 90       	pop	r0
    5e72:	0f 90       	pop	r0
}
    5e74:	0f 91       	pop	r16
    5e76:	ff 90       	pop	r15
    5e78:	ef 90       	pop	r14
    5e7a:	df 90       	pop	r13
    5e7c:	cf 90       	pop	r12
    5e7e:	bf 90       	pop	r11
    5e80:	af 90       	pop	r10
    5e82:	8f 90       	pop	r8
    5e84:	08 95       	ret

00005e86 <TIMER0_INT_EVENT>:

void TIMER0_INT_EVENT()
{
	LED_GRID_TIMER_INT();
    5e86:	0c 94 25 06 	jmp	0xc4a	; 0xc4a <LED_GRID_TIMER_INT>
    5e8a:	08 95       	ret

00005e8c <TIMER1_INT_EVENT>:
}

void TIMER1_INT_EVENT()
{
	WIFI_TIMER1();
    5e8c:	1e d2       	rcall	.+1084   	; 0x62ca <WIFI_TIMER1>
	SENSOR_TIMER1();
    5e8e:	0c 94 17 1c 	jmp	0x382e	; 0x382e <SENSOR_TIMER1>
    5e92:	08 95       	ret

00005e94 <WIFI_SETUP_IO>:
extern volatile unsigned char F_WIFI_CONNECT_STAGE_COUNTER;


void WIFI_SETUP_IO()
{
	gpio_outputconfg(WIFI_CONNECTED_DDR_ADDRESS,WIFI_CONNECTED_OUTMOD_ADDRESS,OUTPASS,WIFI_CONNECTED_PIN);
    5e94:	24 e0       	ldi	r18, 0x04	; 4
    5e96:	40 e0       	ldi	r20, 0x00	; 0
    5e98:	61 e2       	ldi	r22, 0x21	; 33
    5e9a:	70 e0       	ldi	r23, 0x00	; 0
    5e9c:	82 e2       	ldi	r24, 0x22	; 34
    5e9e:	90 e0       	ldi	r25, 0x00	; 0
    5ea0:	0c 94 e2 07 	jmp	0xfc4	; 0xfc4 <gpio_outputconfg>
    5ea4:	08 95       	ret

00005ea6 <WIFI_LOAD_PARAMETERS>:
	}
	WIFI_LOAD_PARAMETERS();
}

void WIFI_LOAD_PARAMETERS()
{
    5ea6:	1f 93       	push	r17
    5ea8:	cf 93       	push	r28
    5eaa:	df 93       	push	r29
	/*CHECK USER AND PASS*/
	if (readeeprom(MY_EEPROM_CHECK_AVAILABLE_USER_PASS)==CHECK_AVAILABLE_USER_PASS_VALUE)
    5eac:	80 e0       	ldi	r24, 0x00	; 0
    5eae:	90 e0       	ldi	r25, 0x00	; 0
    5eb0:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5eb4:	84 34       	cpi	r24, 0x44	; 68
    5eb6:	a9 f5       	brne	.+106    	; 0x5f22 <WIFI_LOAD_PARAMETERS+0x7c>
	{
		USER_LENGTH=readeeprom(MY_EEPROM_USER_LENGTH);
    5eb8:	81 e0       	ldi	r24, 0x01	; 1
    5eba:	90 e0       	ldi	r25, 0x00	; 0
    5ebc:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5ec0:	80 93 8d 07 	sts	0x078D, r24
		PASS_LENGTH=readeeprom(MY_EEPROM_PASS_LENGTH);
    5ec4:	81 e1       	ldi	r24, 0x11	; 17
    5ec6:	90 e0       	ldi	r25, 0x00	; 0
    5ec8:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5ecc:	80 93 8b 07 	sts	0x078B, r24
		unsigned char i=0;
		for (i=0;i<USER_LENGTH;++i)
    5ed0:	80 91 8d 07 	lds	r24, 0x078D
    5ed4:	88 23       	and	r24, r24
    5ed6:	79 f0       	breq	.+30     	; 0x5ef6 <WIFI_LOAD_PARAMETERS+0x50>
    5ed8:	10 e0       	ldi	r17, 0x00	; 0
		{
			USER_NAME[i]=readeeprom(MY_EEPROM_START_OF_USER+i);
    5eda:	c1 2f       	mov	r28, r17
    5edc:	d0 e0       	ldi	r29, 0x00	; 0
    5ede:	ce 01       	movw	r24, r28
    5ee0:	02 96       	adiw	r24, 0x02	; 2
    5ee2:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5ee6:	ca 5c       	subi	r28, 0xCA	; 202
    5ee8:	d8 4f       	sbci	r29, 0xF8	; 248
    5eea:	88 83       	st	Y, r24
	if (readeeprom(MY_EEPROM_CHECK_AVAILABLE_USER_PASS)==CHECK_AVAILABLE_USER_PASS_VALUE)
	{
		USER_LENGTH=readeeprom(MY_EEPROM_USER_LENGTH);
		PASS_LENGTH=readeeprom(MY_EEPROM_PASS_LENGTH);
		unsigned char i=0;
		for (i=0;i<USER_LENGTH;++i)
    5eec:	1f 5f       	subi	r17, 0xFF	; 255
    5eee:	80 91 8d 07 	lds	r24, 0x078D
    5ef2:	18 17       	cp	r17, r24
    5ef4:	90 f3       	brcs	.-28     	; 0x5eda <WIFI_LOAD_PARAMETERS+0x34>
		{
			USER_NAME[i]=readeeprom(MY_EEPROM_START_OF_USER+i);
		}
		for (i=0;i<PASS_LENGTH;++i)
    5ef6:	80 91 8b 07 	lds	r24, 0x078B
    5efa:	88 23       	and	r24, r24
    5efc:	79 f0       	breq	.+30     	; 0x5f1c <WIFI_LOAD_PARAMETERS+0x76>
    5efe:	10 e0       	ldi	r17, 0x00	; 0
		{
			PASSWORD[i]=readeeprom(MY_EEPROM_START_OF_PASS+i);
    5f00:	c1 2f       	mov	r28, r17
    5f02:	d0 e0       	ldi	r29, 0x00	; 0
    5f04:	ce 01       	movw	r24, r28
    5f06:	42 96       	adiw	r24, 0x12	; 18
    5f08:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5f0c:	c6 52       	subi	r28, 0x26	; 38
    5f0e:	da 4f       	sbci	r29, 0xFA	; 250
    5f10:	88 83       	st	Y, r24
		unsigned char i=0;
		for (i=0;i<USER_LENGTH;++i)
		{
			USER_NAME[i]=readeeprom(MY_EEPROM_START_OF_USER+i);
		}
		for (i=0;i<PASS_LENGTH;++i)
    5f12:	1f 5f       	subi	r17, 0xFF	; 255
    5f14:	80 91 8b 07 	lds	r24, 0x078B
    5f18:	18 17       	cp	r17, r24
    5f1a:	90 f3       	brcs	.-28     	; 0x5f00 <WIFI_LOAD_PARAMETERS+0x5a>
		{
			PASSWORD[i]=readeeprom(MY_EEPROM_START_OF_PASS+i);
		}
		F_VALID_USER_PASS=1;
    5f1c:	81 e0       	ldi	r24, 0x01	; 1
    5f1e:	80 93 7c 07 	sts	0x077C, r24
	}
	
	
	/*CHECK IOT PAR*/
		if (readeeprom(MY_EEPROM_CHECK_AVAILABLE_IOT_PAR)==CHECK_AVAILABLE_IOT_PAR_VALUE)
    5f22:	81 e2       	ldi	r24, 0x21	; 33
    5f24:	90 e0       	ldi	r25, 0x00	; 0
    5f26:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5f2a:	84 34       	cpi	r24, 0x44	; 68
    5f2c:	d9 f5       	brne	.+118    	; 0x5fa4 <WIFI_LOAD_PARAMETERS+0xfe>
		{
			G_CH_ID_LENGTH=readeeprom(MY_EEPROM_CH_ID_LENGTH);
    5f2e:	82 e2       	ldi	r24, 0x22	; 34
    5f30:	90 e0       	ldi	r25, 0x00	; 0
    5f32:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5f36:	80 93 a8 07 	sts	0x07A8, r24
			G_WRITE_KEY_LENGTH=readeeprom(MY_EEPROM_WRITE_KEY_LENGTH);
    5f3a:	8d e2       	ldi	r24, 0x2D	; 45
    5f3c:	90 e0       	ldi	r25, 0x00	; 0
    5f3e:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5f42:	80 93 a7 07 	sts	0x07A7, r24
			G_FIELD_NUM=readeeprom(MY_EEPROM_FIELD_NUM);
    5f46:	87 e4       	ldi	r24, 0x47	; 71
    5f48:	90 e0       	ldi	r25, 0x00	; 0
    5f4a:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5f4e:	80 93 aa 07 	sts	0x07AA, r24
			
			unsigned char i=0;
			for (i=0;i<G_CH_ID_LENGTH;++i)
    5f52:	80 91 a8 07 	lds	r24, 0x07A8
    5f56:	88 23       	and	r24, r24
    5f58:	79 f0       	breq	.+30     	; 0x5f78 <WIFI_LOAD_PARAMETERS+0xd2>
    5f5a:	10 e0       	ldi	r17, 0x00	; 0
			{
				G_CH_ID[i]=readeeprom(MY_EEPROM_START_OF_CH_ID+i);
    5f5c:	c1 2f       	mov	r28, r17
    5f5e:	d0 e0       	ldi	r29, 0x00	; 0
    5f60:	ce 01       	movw	r24, r28
    5f62:	83 96       	adiw	r24, 0x23	; 35
    5f64:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5f68:	c3 58       	subi	r28, 0x83	; 131
    5f6a:	d8 4f       	sbci	r29, 0xF8	; 248
    5f6c:	88 83       	st	Y, r24
			G_CH_ID_LENGTH=readeeprom(MY_EEPROM_CH_ID_LENGTH);
			G_WRITE_KEY_LENGTH=readeeprom(MY_EEPROM_WRITE_KEY_LENGTH);
			G_FIELD_NUM=readeeprom(MY_EEPROM_FIELD_NUM);
			
			unsigned char i=0;
			for (i=0;i<G_CH_ID_LENGTH;++i)
    5f6e:	1f 5f       	subi	r17, 0xFF	; 255
    5f70:	80 91 a8 07 	lds	r24, 0x07A8
    5f74:	18 17       	cp	r17, r24
    5f76:	90 f3       	brcs	.-28     	; 0x5f5c <WIFI_LOAD_PARAMETERS+0xb6>
			{
				G_CH_ID[i]=readeeprom(MY_EEPROM_START_OF_CH_ID+i);
			}
			for (i=0;i<G_WRITE_KEY_LENGTH;++i)
    5f78:	80 91 a7 07 	lds	r24, 0x07A7
    5f7c:	88 23       	and	r24, r24
    5f7e:	79 f0       	breq	.+30     	; 0x5f9e <WIFI_LOAD_PARAMETERS+0xf8>
    5f80:	10 e0       	ldi	r17, 0x00	; 0
			{
				G_WRITE_KEY[i]=readeeprom(MY_EEPROM_START_OF_WRITE_KEY+i);
    5f82:	c1 2f       	mov	r28, r17
    5f84:	d0 e0       	ldi	r29, 0x00	; 0
    5f86:	ce 01       	movw	r24, r28
    5f88:	8e 96       	adiw	r24, 0x2e	; 46
    5f8a:	0e 94 2f 11 	call	0x225e	; 0x225e <readeeprom>
    5f8e:	c2 57       	subi	r28, 0x72	; 114
    5f90:	d8 4f       	sbci	r29, 0xF8	; 248
    5f92:	88 83       	st	Y, r24
			unsigned char i=0;
			for (i=0;i<G_CH_ID_LENGTH;++i)
			{
				G_CH_ID[i]=readeeprom(MY_EEPROM_START_OF_CH_ID+i);
			}
			for (i=0;i<G_WRITE_KEY_LENGTH;++i)
    5f94:	1f 5f       	subi	r17, 0xFF	; 255
    5f96:	80 91 a7 07 	lds	r24, 0x07A7
    5f9a:	18 17       	cp	r17, r24
    5f9c:	90 f3       	brcs	.-28     	; 0x5f82 <WIFI_LOAD_PARAMETERS+0xdc>
			{
				G_WRITE_KEY[i]=readeeprom(MY_EEPROM_START_OF_WRITE_KEY+i);
			}	
			F_VALID_IOT_PAR=1;
    5f9e:	81 e0       	ldi	r24, 0x01	; 1
    5fa0:	80 93 a9 07 	sts	0x07A9, r24
			/*ADD LED TO INDICATE CONNECTION TO SERVER*/
		}
		
}
    5fa4:	df 91       	pop	r29
    5fa6:	cf 91       	pop	r28
    5fa8:	1f 91       	pop	r17
    5faa:	08 95       	ret

00005fac <WIFI_SETUP>:


void WIFI_SETUP()
{
	
	if (ESP_SETUP()==0)
    5fac:	0e 94 fc 0b 	call	0x17f8	; 0x17f8 <ESP_SETUP>
	}
	else
	{
		/*TEST_UART_SEND_str("ESP NOT READY\n");*/
	}
	WIFI_LOAD_PARAMETERS();
    5fb0:	7a cf       	rjmp	.-268    	; 0x5ea6 <WIFI_LOAD_PARAMETERS>
    5fb2:	08 95       	ret

00005fb4 <WIFI_UPDATE_USER_PASS>:
		}
		
}

void WIFI_UPDATE_USER_PASS(volatile unsigned char*LOCAL_USER,volatile unsigned char*LOCAL_PASS)  
{
    5fb4:	bf 92       	push	r11
    5fb6:	cf 92       	push	r12
    5fb8:	df 92       	push	r13
    5fba:	ef 92       	push	r14
    5fbc:	ff 92       	push	r15
    5fbe:	0f 93       	push	r16
    5fc0:	1f 93       	push	r17
    5fc2:	cf 93       	push	r28
    5fc4:	df 93       	push	r29
    5fc6:	6c 01       	movw	r12, r24
    5fc8:	7b 01       	movw	r14, r22
	unsigned char i=0;
	/*save user name*/
	while(LOCAL_USER[i]!=0)
    5fca:	fc 01       	movw	r30, r24
    5fcc:	80 81       	ld	r24, Z
    5fce:	88 23       	and	r24, r24
    5fd0:	b1 f0       	breq	.+44     	; 0x5ffe <WIFI_UPDATE_USER_PASS+0x4a>
    5fd2:	e6 01       	movw	r28, r12
		
}

void WIFI_UPDATE_USER_PASS(volatile unsigned char*LOCAL_USER,volatile unsigned char*LOCAL_PASS)  
{
	unsigned char i=0;
    5fd4:	b1 2c       	mov	r11, r1
	/*save user name*/
	while(LOCAL_USER[i]!=0)
	{
		writeeeprom(MY_EEPROM_START_OF_USER+i,LOCAL_USER[i]);
    5fd6:	68 81       	ld	r22, Y
    5fd8:	0b 2d       	mov	r16, r11
    5fda:	10 e0       	ldi	r17, 0x00	; 0
    5fdc:	c8 01       	movw	r24, r16
    5fde:	02 96       	adiw	r24, 0x02	; 2
    5fe0:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
		USER_NAME[i]=LOCAL_USER[i];
    5fe4:	88 81       	ld	r24, Y
    5fe6:	f8 01       	movw	r30, r16
    5fe8:	ea 5c       	subi	r30, 0xCA	; 202
    5fea:	f8 4f       	sbci	r31, 0xF8	; 248
    5fec:	80 83       	st	Z, r24
		i++;
    5fee:	b3 94       	inc	r11

void WIFI_UPDATE_USER_PASS(volatile unsigned char*LOCAL_USER,volatile unsigned char*LOCAL_PASS)  
{
	unsigned char i=0;
	/*save user name*/
	while(LOCAL_USER[i]!=0)
    5ff0:	e6 01       	movw	r28, r12
    5ff2:	cb 0d       	add	r28, r11
    5ff4:	d1 1d       	adc	r29, r1
    5ff6:	88 81       	ld	r24, Y
    5ff8:	81 11       	cpse	r24, r1
    5ffa:	ed cf       	rjmp	.-38     	; 0x5fd6 <WIFI_UPDATE_USER_PASS+0x22>
    5ffc:	01 c0       	rjmp	.+2      	; 0x6000 <WIFI_UPDATE_USER_PASS+0x4c>
		
}

void WIFI_UPDATE_USER_PASS(volatile unsigned char*LOCAL_USER,volatile unsigned char*LOCAL_PASS)  
{
	unsigned char i=0;
    5ffe:	b1 2c       	mov	r11, r1
	{
		writeeeprom(MY_EEPROM_START_OF_USER+i,LOCAL_USER[i]);
		USER_NAME[i]=LOCAL_USER[i];
		i++;
	}
	writeeeprom(MY_EEPROM_USER_LENGTH,i);
    6000:	6b 2d       	mov	r22, r11
    6002:	81 e0       	ldi	r24, 0x01	; 1
    6004:	90 e0       	ldi	r25, 0x00	; 0
    6006:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	USER_LENGTH=i;
    600a:	b0 92 8d 07 	sts	0x078D, r11
	/*save user name*/
	i=0;
	while(LOCAL_PASS[i]!=0)
    600e:	f7 01       	movw	r30, r14
    6010:	80 81       	ld	r24, Z
    6012:	88 23       	and	r24, r24
    6014:	b1 f0       	breq	.+44     	; 0x6042 <WIFI_UPDATE_USER_PASS+0x8e>
    6016:	e7 01       	movw	r28, r14
		i++;
	}
	writeeeprom(MY_EEPROM_USER_LENGTH,i);
	USER_LENGTH=i;
	/*save user name*/
	i=0;
    6018:	d1 2c       	mov	r13, r1
	while(LOCAL_PASS[i]!=0)
	{
		writeeeprom(MY_EEPROM_START_OF_PASS+i,LOCAL_PASS[i]);
    601a:	68 81       	ld	r22, Y
    601c:	0d 2d       	mov	r16, r13
    601e:	10 e0       	ldi	r17, 0x00	; 0
    6020:	c8 01       	movw	r24, r16
    6022:	42 96       	adiw	r24, 0x12	; 18
    6024:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
		PASSWORD[i]=LOCAL_PASS[i];
    6028:	88 81       	ld	r24, Y
    602a:	f8 01       	movw	r30, r16
    602c:	e6 52       	subi	r30, 0x26	; 38
    602e:	fa 4f       	sbci	r31, 0xFA	; 250
    6030:	80 83       	st	Z, r24
		i++;
    6032:	d3 94       	inc	r13
	}
	writeeeprom(MY_EEPROM_USER_LENGTH,i);
	USER_LENGTH=i;
	/*save user name*/
	i=0;
	while(LOCAL_PASS[i]!=0)
    6034:	e7 01       	movw	r28, r14
    6036:	cd 0d       	add	r28, r13
    6038:	d1 1d       	adc	r29, r1
    603a:	88 81       	ld	r24, Y
    603c:	81 11       	cpse	r24, r1
    603e:	ed cf       	rjmp	.-38     	; 0x601a <WIFI_UPDATE_USER_PASS+0x66>
    6040:	01 c0       	rjmp	.+2      	; 0x6044 <WIFI_UPDATE_USER_PASS+0x90>
		i++;
	}
	writeeeprom(MY_EEPROM_USER_LENGTH,i);
	USER_LENGTH=i;
	/*save user name*/
	i=0;
    6042:	d1 2c       	mov	r13, r1
	{
		writeeeprom(MY_EEPROM_START_OF_PASS+i,LOCAL_PASS[i]);
		PASSWORD[i]=LOCAL_PASS[i];
		i++;
	}
	writeeeprom(MY_EEPROM_PASS_LENGTH,i);
    6044:	6d 2d       	mov	r22, r13
    6046:	81 e1       	ldi	r24, 0x11	; 17
    6048:	90 e0       	ldi	r25, 0x00	; 0
    604a:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	PASS_LENGTH=i;
    604e:	d0 92 8b 07 	sts	0x078B, r13
	writeeeprom(MY_EEPROM_CHECK_AVAILABLE_USER_PASS,CHECK_AVAILABLE_USER_PASS_VALUE);	
    6052:	64 e4       	ldi	r22, 0x44	; 68
    6054:	80 e0       	ldi	r24, 0x00	; 0
    6056:	90 e0       	ldi	r25, 0x00	; 0
    6058:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	F_VALID_USER_PASS=1;
    605c:	81 e0       	ldi	r24, 0x01	; 1
    605e:	80 93 7c 07 	sts	0x077C, r24
}
    6062:	df 91       	pop	r29
    6064:	cf 91       	pop	r28
    6066:	1f 91       	pop	r17
    6068:	0f 91       	pop	r16
    606a:	ff 90       	pop	r15
    606c:	ef 90       	pop	r14
    606e:	df 90       	pop	r13
    6070:	cf 90       	pop	r12
    6072:	bf 90       	pop	r11
    6074:	08 95       	ret

00006076 <WIFI_UPDATE_IOT_PAR>:

void WIFI_UPDATE_IOT_PAR(volatile unsigned char *CHANNEL_ID,volatile unsigned char CHANNEL_ID_LENGTH,volatile unsigned char *API_WRITE_KEY,volatile unsigned char API_WRITE_KEY_LENGTH,volatile unsigned char FIELD_NUM)
{
    6076:	9f 92       	push	r9
    6078:	af 92       	push	r10
    607a:	bf 92       	push	r11
    607c:	cf 92       	push	r12
    607e:	df 92       	push	r13
    6080:	ef 92       	push	r14
    6082:	ff 92       	push	r15
    6084:	0f 93       	push	r16
    6086:	1f 93       	push	r17
    6088:	cf 93       	push	r28
    608a:	df 93       	push	r29
    608c:	00 d0       	rcall	.+0      	; 0x608e <WIFI_UPDATE_IOT_PAR+0x18>
    608e:	1f 92       	push	r1
    6090:	cd b7       	in	r28, 0x3d	; 61
    6092:	de b7       	in	r29, 0x3e	; 62
    6094:	5c 01       	movw	r10, r24
    6096:	69 83       	std	Y+1, r22	; 0x01
    6098:	6a 01       	movw	r12, r20
    609a:	2a 83       	std	Y+2, r18	; 0x02
    609c:	0b 83       	std	Y+3, r16	; 0x03
	unsigned char i=0;
	/*save channel id*/
	for(i=0;i<CHANNEL_ID_LENGTH;i++)
    609e:	89 81       	ldd	r24, Y+1	; 0x01
    60a0:	88 23       	and	r24, r24
    60a2:	b9 f0       	breq	.+46     	; 0x60d2 <WIFI_UPDATE_IOT_PAR+0x5c>
    60a4:	91 2c       	mov	r9, r1
	{
		writeeeprom(MY_EEPROM_START_OF_CH_ID+i,CHANNEL_ID[i]);
    60a6:	09 2d       	mov	r16, r9
    60a8:	10 e0       	ldi	r17, 0x00	; 0
    60aa:	75 01       	movw	r14, r10
    60ac:	e0 0e       	add	r14, r16
    60ae:	f1 1e       	adc	r15, r17
    60b0:	f7 01       	movw	r30, r14
    60b2:	60 81       	ld	r22, Z
    60b4:	c8 01       	movw	r24, r16
    60b6:	83 96       	adiw	r24, 0x23	; 35
    60b8:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
		G_CH_ID[i]=CHANNEL_ID[i];
    60bc:	f7 01       	movw	r30, r14
    60be:	80 81       	ld	r24, Z
    60c0:	f8 01       	movw	r30, r16
    60c2:	e3 58       	subi	r30, 0x83	; 131
    60c4:	f8 4f       	sbci	r31, 0xF8	; 248
    60c6:	80 83       	st	Z, r24

void WIFI_UPDATE_IOT_PAR(volatile unsigned char *CHANNEL_ID,volatile unsigned char CHANNEL_ID_LENGTH,volatile unsigned char *API_WRITE_KEY,volatile unsigned char API_WRITE_KEY_LENGTH,volatile unsigned char FIELD_NUM)
{
	unsigned char i=0;
	/*save channel id*/
	for(i=0;i<CHANNEL_ID_LENGTH;i++)
    60c8:	93 94       	inc	r9
    60ca:	89 81       	ldd	r24, Y+1	; 0x01
    60cc:	98 16       	cp	r9, r24
    60ce:	58 f3       	brcs	.-42     	; 0x60a6 <WIFI_UPDATE_IOT_PAR+0x30>
    60d0:	01 c0       	rjmp	.+2      	; 0x60d4 <WIFI_UPDATE_IOT_PAR+0x5e>
    60d2:	91 2c       	mov	r9, r1
	{
		writeeeprom(MY_EEPROM_START_OF_CH_ID+i,CHANNEL_ID[i]);
		G_CH_ID[i]=CHANNEL_ID[i];
	}
	writeeeprom(MY_EEPROM_CH_ID_LENGTH,i);
    60d4:	69 2d       	mov	r22, r9
    60d6:	82 e2       	ldi	r24, 0x22	; 34
    60d8:	90 e0       	ldi	r25, 0x00	; 0
    60da:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	G_CH_ID_LENGTH=i;
    60de:	90 92 a8 07 	sts	0x07A8, r9
	/*save write api key*/
	
	for(i=0;i<API_WRITE_KEY_LENGTH;i++)
    60e2:	8a 81       	ldd	r24, Y+2	; 0x02
    60e4:	88 23       	and	r24, r24
    60e6:	b9 f0       	breq	.+46     	; 0x6116 <WIFI_UPDATE_IOT_PAR+0xa0>
    60e8:	b1 2c       	mov	r11, r1
	{
		writeeeprom(MY_EEPROM_START_OF_WRITE_KEY+i,API_WRITE_KEY[i]);
    60ea:	0b 2d       	mov	r16, r11
    60ec:	10 e0       	ldi	r17, 0x00	; 0
    60ee:	76 01       	movw	r14, r12
    60f0:	e0 0e       	add	r14, r16
    60f2:	f1 1e       	adc	r15, r17
    60f4:	f7 01       	movw	r30, r14
    60f6:	60 81       	ld	r22, Z
    60f8:	c8 01       	movw	r24, r16
    60fa:	8e 96       	adiw	r24, 0x2e	; 46
    60fc:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
		G_WRITE_KEY[i]=API_WRITE_KEY[i];
    6100:	f7 01       	movw	r30, r14
    6102:	80 81       	ld	r24, Z
    6104:	f8 01       	movw	r30, r16
    6106:	e2 57       	subi	r30, 0x72	; 114
    6108:	f8 4f       	sbci	r31, 0xF8	; 248
    610a:	80 83       	st	Z, r24
	}
	writeeeprom(MY_EEPROM_CH_ID_LENGTH,i);
	G_CH_ID_LENGTH=i;
	/*save write api key*/
	
	for(i=0;i<API_WRITE_KEY_LENGTH;i++)
    610c:	b3 94       	inc	r11
    610e:	8a 81       	ldd	r24, Y+2	; 0x02
    6110:	b8 16       	cp	r11, r24
    6112:	58 f3       	brcs	.-42     	; 0x60ea <WIFI_UPDATE_IOT_PAR+0x74>
    6114:	01 c0       	rjmp	.+2      	; 0x6118 <WIFI_UPDATE_IOT_PAR+0xa2>
    6116:	b1 2c       	mov	r11, r1
	{
		writeeeprom(MY_EEPROM_START_OF_WRITE_KEY+i,API_WRITE_KEY[i]);
		G_WRITE_KEY[i]=API_WRITE_KEY[i];
	}
	writeeeprom(MY_EEPROM_WRITE_KEY_LENGTH,i);
    6118:	6b 2d       	mov	r22, r11
    611a:	8d e2       	ldi	r24, 0x2D	; 45
    611c:	90 e0       	ldi	r25, 0x00	; 0
    611e:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	G_WRITE_KEY_LENGTH=i;
    6122:	b0 92 a7 07 	sts	0x07A7, r11
	/*save field*/
	writeeeprom(MY_EEPROM_FIELD_NUM,FIELD_NUM);
    6126:	6b 81       	ldd	r22, Y+3	; 0x03
    6128:	87 e4       	ldi	r24, 0x47	; 71
    612a:	90 e0       	ldi	r25, 0x00	; 0
    612c:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	G_FIELD_NUM=FIELD_NUM;
    6130:	8b 81       	ldd	r24, Y+3	; 0x03
    6132:	80 93 aa 07 	sts	0x07AA, r24
	writeeeprom(MY_EEPROM_CHECK_AVAILABLE_IOT_PAR,CHECK_AVAILABLE_IOT_PAR_VALUE);
    6136:	64 e4       	ldi	r22, 0x44	; 68
    6138:	81 e2       	ldi	r24, 0x21	; 33
    613a:	90 e0       	ldi	r25, 0x00	; 0
    613c:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	F_VALID_IOT_PAR=1;
    6140:	81 e0       	ldi	r24, 0x01	; 1
    6142:	80 93 a9 07 	sts	0x07A9, r24
	/*ADD LED TO INDICATE CONNECTION TO SERVER*/
}
    6146:	0f 90       	pop	r0
    6148:	0f 90       	pop	r0
    614a:	0f 90       	pop	r0
    614c:	df 91       	pop	r29
    614e:	cf 91       	pop	r28
    6150:	1f 91       	pop	r17
    6152:	0f 91       	pop	r16
    6154:	ff 90       	pop	r15
    6156:	ef 90       	pop	r14
    6158:	df 90       	pop	r13
    615a:	cf 90       	pop	r12
    615c:	bf 90       	pop	r11
    615e:	af 90       	pop	r10
    6160:	9f 90       	pop	r9
    6162:	08 95       	ret

00006164 <WIFI_LOOP>:



void WIFI_LOOP()
{
    6164:	0f 93       	push	r16
    6166:	1f 93       	push	r17
    6168:	cf 93       	push	r28
    616a:	df 93       	push	r29
    616c:	1f 92       	push	r1
    616e:	cd b7       	in	r28, 0x3d	; 61
    6170:	de b7       	in	r29, 0x3e	; 62
	/*to connect*/
	if (!F_WIFI_CONNECTED)
    6172:	80 91 32 03 	lds	r24, 0x0332
    6176:	81 11       	cpse	r24, r1
    6178:	26 c0       	rjmp	.+76     	; 0x61c6 <WIFI_LOOP+0x62>
	{
		clearbit(*WIFI_CONNECTED_OUT_ADDRESS,WIFI_CONNECTED_PIN);
    617a:	1c 98       	cbi	0x03, 4	; 3
		if (F_T_TRY_TO_CONNECT==MAX_F_T_TRY_TO_CONNECT)
    617c:	80 91 88 07 	lds	r24, 0x0788
    6180:	84 31       	cpi	r24, 0x14	; 20
    6182:	09 f0       	breq	.+2      	; 0x6186 <WIFI_LOOP+0x22>
    6184:	80 c0       	rjmp	.+256    	; 0x6286 <WIFI_LOOP+0x122>
		{
			F_T_TRY_TO_CONNECT=0;
    6186:	10 92 88 07 	sts	0x0788, r1
			if (F_VALID_USER_PASS)
    618a:	80 91 7c 07 	lds	r24, 0x077C
    618e:	88 23       	and	r24, r24
    6190:	09 f4       	brne	.+2      	; 0x6194 <WIFI_LOOP+0x30>
    6192:	79 c0       	rjmp	.+242    	; 0x6286 <WIFI_LOOP+0x122>
			{
				unsigned char LOCAL_CONNECTION_STATE=0;/*
    6194:	19 82       	std	Y+1, r1	; 0x01
				TEST_UART_SEND_str("ap try to connect\n");*/
				if (ESP_CONNECT_AP(USER_NAME,USER_LENGTH,PASSWORD,PASS_LENGTH,&LOCAL_CONNECTION_STATE)==0)
    6196:	20 91 8b 07 	lds	r18, 0x078B
    619a:	60 91 8d 07 	lds	r22, 0x078D
    619e:	8e 01       	movw	r16, r28
    61a0:	0f 5f       	subi	r16, 0xFF	; 255
    61a2:	1f 4f       	sbci	r17, 0xFF	; 255
    61a4:	4a ed       	ldi	r20, 0xDA	; 218
    61a6:	55 e0       	ldi	r21, 0x05	; 5
    61a8:	86 e3       	ldi	r24, 0x36	; 54
    61aa:	97 e0       	ldi	r25, 0x07	; 7
    61ac:	0e 94 07 0c 	call	0x180e	; 0x180e <ESP_CONNECT_AP>
    61b0:	81 11       	cpse	r24, r1
    61b2:	69 c0       	rjmp	.+210    	; 0x6286 <WIFI_LOOP+0x122>
				{
					if (LOCAL_CONNECTION_STATE==1)
    61b4:	89 81       	ldd	r24, Y+1	; 0x01
    61b6:	81 30       	cpi	r24, 0x01	; 1
    61b8:	21 f4       	brne	.+8      	; 0x61c2 <WIFI_LOOP+0x5e>
					{
						/*TEST_UART_SEND_str("ap connected\n");*/
						setbit(*WIFI_CONNECTED_OUT_ADDRESS,WIFI_CONNECTED_PIN);
    61ba:	1c 9a       	sbi	0x03, 4	; 3
						F_WIFI_CONNECTED=1;
    61bc:	80 93 32 03 	sts	0x0332, r24
    61c0:	62 c0       	rjmp	.+196    	; 0x6286 <WIFI_LOOP+0x122>
						/*ADD LED TO INDICATE CONNECTION TO AP*/
					}
					else
					{
						/*TEST_UART_SEND_str("ap not connected\n");*/
						clearbit(*WIFI_CONNECTED_OUT_ADDRESS,WIFI_CONNECTED_PIN);
    61c2:	1c 98       	cbi	0x03, 4	; 3
    61c4:	60 c0       	rjmp	.+192    	; 0x6286 <WIFI_LOOP+0x122>
			}
		}
	}
	else
	{
		setbit(*WIFI_CONNECTED_OUT_ADDRESS,WIFI_CONNECTED_PIN);
    61c6:	1c 9a       	sbi	0x03, 4	; 3
		/*to read*/
		if(F_T_READY_TO_READ==MAX_T_READY_TO_READ)
    61c8:	80 91 89 07 	lds	r24, 0x0789
    61cc:	82 30       	cpi	r24, 0x02	; 2
    61ce:	49 f5       	brne	.+82     	; 0x6222 <WIFI_LOOP+0xbe>
		{
			if(F_VALID_IOT_PAR)
    61d0:	80 91 a9 07 	lds	r24, 0x07A9
    61d4:	88 23       	and	r24, r24
    61d6:	29 f1       	breq	.+74     	; 0x6222 <WIFI_LOOP+0xbe>
			{
				if(!F_LAST_RECIVED_DATA_NOT_HANDLED)
    61d8:	80 91 8c 07 	lds	r24, 0x078C
    61dc:	81 11       	cpse	r24, r1
    61de:	21 c0       	rjmp	.+66     	; 0x6222 <WIFI_LOOP+0xbe>
				{
					
					
					F_T_READY_TO_READ=0;
    61e0:	10 92 89 07 	sts	0x0789, r1
					if(ESP_READ_HTTP(G_CH_ID , G_CH_ID_LENGTH,G_FIELD_NUM,G_RECIVED_DATA)==0)
    61e4:	40 91 aa 07 	lds	r20, 0x07AA
    61e8:	60 91 a8 07 	lds	r22, 0x07A8
    61ec:	2f e3       	ldi	r18, 0x3F	; 63
    61ee:	35 e0       	ldi	r19, 0x05	; 5
    61f0:	8d e7       	ldi	r24, 0x7D	; 125
    61f2:	97 e0       	ldi	r25, 0x07	; 7
    61f4:	0e 94 9c 0c 	call	0x1938	; 0x1938 <ESP_READ_HTTP>
    61f8:	81 11       	cpse	r24, r1
    61fa:	06 c0       	rjmp	.+12     	; 0x6208 <WIFI_LOOP+0xa4>
						TEST_UART_SEND_ARRAY(G_RECIVED_DATA[4].DATA_ELEMENT,G_RECIVED_DATA[4].length);
						TEST_UART_SEND_str("\n");*/
						/*TEST_UART_SEND_str("DATA READ FROM SERVER\n");*/
						
						/*****************************/
						FAILED_READ_HTTP_COUNTER=0;
    61fc:	10 92 2f 03 	sts	0x032F, r1
						F_LAST_RECIVED_DATA_NOT_HANDLED=1;/*MAKE SENSOR WORK ON IT*/
    6200:	81 e0       	ldi	r24, 0x01	; 1
    6202:	80 93 8c 07 	sts	0x078C, r24
    6206:	0d c0       	rjmp	.+26     	; 0x6222 <WIFI_LOOP+0xbe>
					}	
					else
					{
						FAILED_READ_HTTP_COUNTER++;
    6208:	80 91 2f 03 	lds	r24, 0x032F
    620c:	8f 5f       	subi	r24, 0xFF	; 255
    620e:	80 93 2f 03 	sts	0x032F, r24
						/*ADD LED ERROR SERVER*/
						if(FAILED_READ_HTTP_COUNTER==FAILED_READ_HTTP_COUNTER_MAX)
    6212:	80 91 2f 03 	lds	r24, 0x032F
    6216:	85 30       	cpi	r24, 0x05	; 5
    6218:	21 f4       	brne	.+8      	; 0x6222 <WIFI_LOOP+0xbe>
						{
							FAILED_READ_HTTP_COUNTER=0;
    621a:	10 92 2f 03 	sts	0x032F, r1
							F_WIFI_CONNECTED=0;
    621e:	10 92 32 03 	sts	0x0332, r1
				}
			}
			
		}
		/*to send*/
		if(F_T_READY_TO_SEND==MAX_T_READY_TO_SEND)
    6222:	80 91 ac 07 	lds	r24, 0x07AC
    6226:	84 30       	cpi	r24, 0x04	; 4
    6228:	71 f5       	brne	.+92     	; 0x6286 <WIFI_LOOP+0x122>
		{
			if(F_VALID_IOT_PAR)
    622a:	80 91 a9 07 	lds	r24, 0x07A9
    622e:	88 23       	and	r24, r24
    6230:	51 f1       	breq	.+84     	; 0x6286 <WIFI_LOOP+0x122>
			{
				if(G_SEND_DATA_QUEUE.COUNT!=0)
    6232:	80 91 f5 05 	lds	r24, 0x05F5
    6236:	88 23       	and	r24, r24
    6238:	31 f1       	breq	.+76     	; 0x6286 <WIFI_LOOP+0x122>
				{
					unsigned char *LOCAL_DATA_SEND;
					unsigned char LOCAL_DATA_SEND_LENGTH=0;
					LOCAL_DATA_SEND=QUEUE_GET_FRONT_ARRAY_U8(&G_SEND_DATA_QUEUE);
    623a:	83 ef       	ldi	r24, 0xF3	; 243
    623c:	95 e0       	ldi	r25, 0x05	; 5
    623e:	0e 94 a2 05 	call	0xb44	; 0xb44 <QUEUE_GET_FRONT_ARRAY_U8>
				
					while (LOCAL_DATA_SEND[LOCAL_DATA_SEND_LENGTH]!=0)
    6242:	fc 01       	movw	r30, r24
    6244:	20 81       	ld	r18, Z
    6246:	22 23       	and	r18, r18
    6248:	49 f0       	breq	.+18     	; 0x625c <WIFI_LOOP+0xf8>
			if(F_VALID_IOT_PAR)
			{
				if(G_SEND_DATA_QUEUE.COUNT!=0)
				{
					unsigned char *LOCAL_DATA_SEND;
					unsigned char LOCAL_DATA_SEND_LENGTH=0;
    624a:	00 e0       	ldi	r16, 0x00	; 0
					LOCAL_DATA_SEND=QUEUE_GET_FRONT_ARRAY_U8(&G_SEND_DATA_QUEUE);
				
					while (LOCAL_DATA_SEND[LOCAL_DATA_SEND_LENGTH]!=0)
					{
						LOCAL_DATA_SEND_LENGTH++;
    624c:	0f 5f       	subi	r16, 0xFF	; 255
				{
					unsigned char *LOCAL_DATA_SEND;
					unsigned char LOCAL_DATA_SEND_LENGTH=0;
					LOCAL_DATA_SEND=QUEUE_GET_FRONT_ARRAY_U8(&G_SEND_DATA_QUEUE);
				
					while (LOCAL_DATA_SEND[LOCAL_DATA_SEND_LENGTH]!=0)
    624e:	fc 01       	movw	r30, r24
    6250:	e0 0f       	add	r30, r16
    6252:	f1 1d       	adc	r31, r1
    6254:	20 81       	ld	r18, Z
    6256:	21 11       	cpse	r18, r1
    6258:	f9 cf       	rjmp	.-14     	; 0x624c <WIFI_LOOP+0xe8>
    625a:	01 c0       	rjmp	.+2      	; 0x625e <WIFI_LOOP+0xfa>
			if(F_VALID_IOT_PAR)
			{
				if(G_SEND_DATA_QUEUE.COUNT!=0)
				{
					unsigned char *LOCAL_DATA_SEND;
					unsigned char LOCAL_DATA_SEND_LENGTH=0;
    625c:	00 e0       	ldi	r16, 0x00	; 0
				
					while (LOCAL_DATA_SEND[LOCAL_DATA_SEND_LENGTH]!=0)
					{
						LOCAL_DATA_SEND_LENGTH++;
					}
					F_T_READY_TO_SEND=0;
    625e:	10 92 ac 07 	sts	0x07AC, r1
				
					if(ESP_WRITE_HTTP(G_WRITE_KEY,G_WRITE_KEY_LENGTH,G_FIELD_NUM,LOCAL_DATA_SEND,LOCAL_DATA_SEND_LENGTH)==0)
    6262:	40 91 aa 07 	lds	r20, 0x07AA
    6266:	60 91 a7 07 	lds	r22, 0x07A7
    626a:	9c 01       	movw	r18, r24
    626c:	8e e8       	ldi	r24, 0x8E	; 142
    626e:	97 e0       	ldi	r25, 0x07	; 7
    6270:	0e 94 68 0c 	call	0x18d0	; 0x18d0 <ESP_WRITE_HTTP>
    6274:	81 11       	cpse	r24, r1
    6276:	05 c0       	rjmp	.+10     	; 0x6282 <WIFI_LOOP+0x11e>
					{
						QUEUE_DELETE_FRONT_ARRAY_U8(&G_SEND_DATA_QUEUE);
    6278:	83 ef       	ldi	r24, 0xF3	; 243
    627a:	95 e0       	ldi	r25, 0x05	; 5
    627c:	0e 94 b1 05 	call	0xb62	; 0xb62 <QUEUE_DELETE_FRONT_ARRAY_U8>
    6280:	02 c0       	rjmp	.+4      	; 0x6286 <WIFI_LOOP+0x122>
					}
					else
					{
						F_WIFI_CONNECTED=0;
    6282:	10 92 32 03 	sts	0x0332, r1
			}
		}

	}
	
	if(F_B_NEW_USER_PASS)
    6286:	80 91 31 03 	lds	r24, 0x0331
    628a:	88 23       	and	r24, r24
    628c:	39 f0       	breq	.+14     	; 0x629c <WIFI_LOOP+0x138>
	{
		F_B_NEW_USER_PASS=0;
    628e:	10 92 31 03 	sts	0x0331, r1
		WIFI_UPDATE_USER_PASS(F_B_USER_NAME,F_B_PASSWORD);
    6292:	6d e6       	ldi	r22, 0x6D	; 109
    6294:	77 e0       	ldi	r23, 0x07	; 7
    6296:	85 e4       	ldi	r24, 0x45	; 69
    6298:	97 e0       	ldi	r25, 0x07	; 7
    629a:	8c de       	rcall	.-744    	; 0x5fb4 <WIFI_UPDATE_USER_PASS>
	}
	
	if(F_B_NEW_IOT_PAR)
    629c:	80 91 30 03 	lds	r24, 0x0330
    62a0:	88 23       	and	r24, r24
    62a2:	69 f0       	breq	.+26     	; 0x62be <WIFI_LOOP+0x15a>
	{
		F_B_NEW_IOT_PAR=0;
    62a4:	10 92 30 03 	sts	0x0330, r1
		WIFI_UPDATE_IOT_PAR(F_B_CH_ID,F_B_CH_ID_LENGTH,F_B_WRITE_KEY,F_B_WRITE_KEY_LENGTH,F_B_FIELD_NUM);
    62a8:	00 91 87 07 	lds	r16, 0x0787
    62ac:	20 91 8a 07 	lds	r18, 0x078A
    62b0:	60 91 ab 07 	lds	r22, 0x07AB
    62b4:	44 e5       	ldi	r20, 0x54	; 84
    62b6:	57 e0       	ldi	r21, 0x07	; 7
    62b8:	89 ee       	ldi	r24, 0xE9	; 233
    62ba:	95 e0       	ldi	r25, 0x05	; 5
    62bc:	dc de       	rcall	.-584    	; 0x6076 <WIFI_UPDATE_IOT_PAR>
	
	
	
	
	
}
    62be:	0f 90       	pop	r0
    62c0:	df 91       	pop	r29
    62c2:	cf 91       	pop	r28
    62c4:	1f 91       	pop	r17
    62c6:	0f 91       	pop	r16
    62c8:	08 95       	ret

000062ca <WIFI_TIMER1>:


void WIFI_TIMER1()
{
	
	if (F_T_TRY_TO_CONNECT!=MAX_F_T_TRY_TO_CONNECT)
    62ca:	80 91 88 07 	lds	r24, 0x0788
    62ce:	84 31       	cpi	r24, 0x14	; 20
    62d0:	29 f0       	breq	.+10     	; 0x62dc <WIFI_TIMER1+0x12>
	{
		F_T_TRY_TO_CONNECT++;
    62d2:	80 91 88 07 	lds	r24, 0x0788
    62d6:	8f 5f       	subi	r24, 0xFF	; 255
    62d8:	80 93 88 07 	sts	0x0788, r24
	}
	if (F_T_READY_TO_READ!=MAX_T_READY_TO_READ)
    62dc:	80 91 89 07 	lds	r24, 0x0789
    62e0:	82 30       	cpi	r24, 0x02	; 2
    62e2:	29 f0       	breq	.+10     	; 0x62ee <WIFI_TIMER1+0x24>
	{
		F_T_READY_TO_READ++;
    62e4:	80 91 89 07 	lds	r24, 0x0789
    62e8:	8f 5f       	subi	r24, 0xFF	; 255
    62ea:	80 93 89 07 	sts	0x0789, r24
	}
	if (F_T_READY_TO_SEND!=MAX_T_READY_TO_SEND)
    62ee:	80 91 ac 07 	lds	r24, 0x07AC
    62f2:	84 30       	cpi	r24, 0x04	; 4
    62f4:	29 f0       	breq	.+10     	; 0x6300 <WIFI_TIMER1+0x36>
	{
		F_T_READY_TO_SEND++;
    62f6:	80 91 ac 07 	lds	r24, 0x07AC
    62fa:	8f 5f       	subi	r24, 0xFF	; 255
    62fc:	80 93 ac 07 	sts	0x07AC, r24
	}
	if(F_WIFI_CONNECT_STAGE_COUNTER!=MAX_WIFI_STAGE_COUNTER)
    6300:	80 91 28 03 	lds	r24, 0x0328
    6304:	80 32       	cpi	r24, 0x20	; 32
    6306:	29 f0       	breq	.+10     	; 0x6312 <WIFI_TIMER1+0x48>
	{
		F_WIFI_CONNECT_STAGE_COUNTER++;
    6308:	80 91 28 03 	lds	r24, 0x0328
    630c:	8f 5f       	subi	r24, 0xFF	; 255
    630e:	80 93 28 03 	sts	0x0328, r24
    6312:	08 95       	ret

00006314 <WIFI_RESET>:
	}
}

void WIFI_RESET()
{
	writeeeprom(MY_EEPROM_CHECK_AVAILABLE_USER_PASS,0XFF);
    6314:	6f ef       	ldi	r22, 0xFF	; 255
    6316:	80 e0       	ldi	r24, 0x00	; 0
    6318:	90 e0       	ldi	r25, 0x00	; 0
    631a:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	writeeeprom(MY_EEPROM_CHECK_AVAILABLE_IOT_PAR,0XFF);
    631e:	6f ef       	ldi	r22, 0xFF	; 255
    6320:	81 e2       	ldi	r24, 0x21	; 33
    6322:	90 e0       	ldi	r25, 0x00	; 0
    6324:	0e 94 37 11 	call	0x226e	; 0x226e <writeeeprom>
	F_WIFI_CONNECTED=0;
    6328:	10 92 32 03 	sts	0x0332, r1
	F_VALID_USER_PASS=0;
    632c:	10 92 7c 07 	sts	0x077C, r1
	F_VALID_IOT_PAR=0;
    6330:	10 92 a9 07 	sts	0x07A9, r1
    6334:	08 95       	ret

00006336 <__subsf3>:
    6336:	50 58       	subi	r21, 0x80	; 128

00006338 <__addsf3>:
    6338:	bb 27       	eor	r27, r27
    633a:	aa 27       	eor	r26, r26
    633c:	0e d0       	rcall	.+28     	; 0x635a <__addsf3x>
    633e:	48 c1       	rjmp	.+656    	; 0x65d0 <__fp_round>
    6340:	39 d1       	rcall	.+626    	; 0x65b4 <__fp_pscA>
    6342:	30 f0       	brcs	.+12     	; 0x6350 <__addsf3+0x18>
    6344:	3e d1       	rcall	.+636    	; 0x65c2 <__fp_pscB>
    6346:	20 f0       	brcs	.+8      	; 0x6350 <__addsf3+0x18>
    6348:	31 f4       	brne	.+12     	; 0x6356 <__addsf3+0x1e>
    634a:	9f 3f       	cpi	r25, 0xFF	; 255
    634c:	11 f4       	brne	.+4      	; 0x6352 <__addsf3+0x1a>
    634e:	1e f4       	brtc	.+6      	; 0x6356 <__addsf3+0x1e>
    6350:	2e c1       	rjmp	.+604    	; 0x65ae <__fp_nan>
    6352:	0e f4       	brtc	.+2      	; 0x6356 <__addsf3+0x1e>
    6354:	e0 95       	com	r30
    6356:	e7 fb       	bst	r30, 7
    6358:	24 c1       	rjmp	.+584    	; 0x65a2 <__fp_inf>

0000635a <__addsf3x>:
    635a:	e9 2f       	mov	r30, r25
    635c:	4a d1       	rcall	.+660    	; 0x65f2 <__fp_split3>
    635e:	80 f3       	brcs	.-32     	; 0x6340 <__addsf3+0x8>
    6360:	ba 17       	cp	r27, r26
    6362:	62 07       	cpc	r22, r18
    6364:	73 07       	cpc	r23, r19
    6366:	84 07       	cpc	r24, r20
    6368:	95 07       	cpc	r25, r21
    636a:	18 f0       	brcs	.+6      	; 0x6372 <__addsf3x+0x18>
    636c:	71 f4       	brne	.+28     	; 0x638a <__addsf3x+0x30>
    636e:	9e f5       	brtc	.+102    	; 0x63d6 <__addsf3x+0x7c>
    6370:	62 c1       	rjmp	.+708    	; 0x6636 <__fp_zero>
    6372:	0e f4       	brtc	.+2      	; 0x6376 <__addsf3x+0x1c>
    6374:	e0 95       	com	r30
    6376:	0b 2e       	mov	r0, r27
    6378:	ba 2f       	mov	r27, r26
    637a:	a0 2d       	mov	r26, r0
    637c:	0b 01       	movw	r0, r22
    637e:	b9 01       	movw	r22, r18
    6380:	90 01       	movw	r18, r0
    6382:	0c 01       	movw	r0, r24
    6384:	ca 01       	movw	r24, r20
    6386:	a0 01       	movw	r20, r0
    6388:	11 24       	eor	r1, r1
    638a:	ff 27       	eor	r31, r31
    638c:	59 1b       	sub	r21, r25
    638e:	99 f0       	breq	.+38     	; 0x63b6 <__addsf3x+0x5c>
    6390:	59 3f       	cpi	r21, 0xF9	; 249
    6392:	50 f4       	brcc	.+20     	; 0x63a8 <__addsf3x+0x4e>
    6394:	50 3e       	cpi	r21, 0xE0	; 224
    6396:	68 f1       	brcs	.+90     	; 0x63f2 <__addsf3x+0x98>
    6398:	1a 16       	cp	r1, r26
    639a:	f0 40       	sbci	r31, 0x00	; 0
    639c:	a2 2f       	mov	r26, r18
    639e:	23 2f       	mov	r18, r19
    63a0:	34 2f       	mov	r19, r20
    63a2:	44 27       	eor	r20, r20
    63a4:	58 5f       	subi	r21, 0xF8	; 248
    63a6:	f3 cf       	rjmp	.-26     	; 0x638e <__addsf3x+0x34>
    63a8:	46 95       	lsr	r20
    63aa:	37 95       	ror	r19
    63ac:	27 95       	ror	r18
    63ae:	a7 95       	ror	r26
    63b0:	f0 40       	sbci	r31, 0x00	; 0
    63b2:	53 95       	inc	r21
    63b4:	c9 f7       	brne	.-14     	; 0x63a8 <__addsf3x+0x4e>
    63b6:	7e f4       	brtc	.+30     	; 0x63d6 <__addsf3x+0x7c>
    63b8:	1f 16       	cp	r1, r31
    63ba:	ba 0b       	sbc	r27, r26
    63bc:	62 0b       	sbc	r22, r18
    63be:	73 0b       	sbc	r23, r19
    63c0:	84 0b       	sbc	r24, r20
    63c2:	ba f0       	brmi	.+46     	; 0x63f2 <__addsf3x+0x98>
    63c4:	91 50       	subi	r25, 0x01	; 1
    63c6:	a1 f0       	breq	.+40     	; 0x63f0 <__addsf3x+0x96>
    63c8:	ff 0f       	add	r31, r31
    63ca:	bb 1f       	adc	r27, r27
    63cc:	66 1f       	adc	r22, r22
    63ce:	77 1f       	adc	r23, r23
    63d0:	88 1f       	adc	r24, r24
    63d2:	c2 f7       	brpl	.-16     	; 0x63c4 <__addsf3x+0x6a>
    63d4:	0e c0       	rjmp	.+28     	; 0x63f2 <__addsf3x+0x98>
    63d6:	ba 0f       	add	r27, r26
    63d8:	62 1f       	adc	r22, r18
    63da:	73 1f       	adc	r23, r19
    63dc:	84 1f       	adc	r24, r20
    63de:	48 f4       	brcc	.+18     	; 0x63f2 <__addsf3x+0x98>
    63e0:	87 95       	ror	r24
    63e2:	77 95       	ror	r23
    63e4:	67 95       	ror	r22
    63e6:	b7 95       	ror	r27
    63e8:	f7 95       	ror	r31
    63ea:	9e 3f       	cpi	r25, 0xFE	; 254
    63ec:	08 f0       	brcs	.+2      	; 0x63f0 <__addsf3x+0x96>
    63ee:	b3 cf       	rjmp	.-154    	; 0x6356 <__addsf3+0x1e>
    63f0:	93 95       	inc	r25
    63f2:	88 0f       	add	r24, r24
    63f4:	08 f0       	brcs	.+2      	; 0x63f8 <__addsf3x+0x9e>
    63f6:	99 27       	eor	r25, r25
    63f8:	ee 0f       	add	r30, r30
    63fa:	97 95       	ror	r25
    63fc:	87 95       	ror	r24
    63fe:	08 95       	ret

00006400 <__divsf3>:
    6400:	0c d0       	rcall	.+24     	; 0x641a <__divsf3x>
    6402:	e6 c0       	rjmp	.+460    	; 0x65d0 <__fp_round>
    6404:	de d0       	rcall	.+444    	; 0x65c2 <__fp_pscB>
    6406:	40 f0       	brcs	.+16     	; 0x6418 <__divsf3+0x18>
    6408:	d5 d0       	rcall	.+426    	; 0x65b4 <__fp_pscA>
    640a:	30 f0       	brcs	.+12     	; 0x6418 <__divsf3+0x18>
    640c:	21 f4       	brne	.+8      	; 0x6416 <__divsf3+0x16>
    640e:	5f 3f       	cpi	r21, 0xFF	; 255
    6410:	19 f0       	breq	.+6      	; 0x6418 <__divsf3+0x18>
    6412:	c7 c0       	rjmp	.+398    	; 0x65a2 <__fp_inf>
    6414:	51 11       	cpse	r21, r1
    6416:	10 c1       	rjmp	.+544    	; 0x6638 <__fp_szero>
    6418:	ca c0       	rjmp	.+404    	; 0x65ae <__fp_nan>

0000641a <__divsf3x>:
    641a:	eb d0       	rcall	.+470    	; 0x65f2 <__fp_split3>
    641c:	98 f3       	brcs	.-26     	; 0x6404 <__divsf3+0x4>

0000641e <__divsf3_pse>:
    641e:	99 23       	and	r25, r25
    6420:	c9 f3       	breq	.-14     	; 0x6414 <__divsf3+0x14>
    6422:	55 23       	and	r21, r21
    6424:	b1 f3       	breq	.-20     	; 0x6412 <__divsf3+0x12>
    6426:	95 1b       	sub	r25, r21
    6428:	55 0b       	sbc	r21, r21
    642a:	bb 27       	eor	r27, r27
    642c:	aa 27       	eor	r26, r26
    642e:	62 17       	cp	r22, r18
    6430:	73 07       	cpc	r23, r19
    6432:	84 07       	cpc	r24, r20
    6434:	38 f0       	brcs	.+14     	; 0x6444 <__divsf3_pse+0x26>
    6436:	9f 5f       	subi	r25, 0xFF	; 255
    6438:	5f 4f       	sbci	r21, 0xFF	; 255
    643a:	22 0f       	add	r18, r18
    643c:	33 1f       	adc	r19, r19
    643e:	44 1f       	adc	r20, r20
    6440:	aa 1f       	adc	r26, r26
    6442:	a9 f3       	breq	.-22     	; 0x642e <__divsf3_pse+0x10>
    6444:	33 d0       	rcall	.+102    	; 0x64ac <__divsf3_pse+0x8e>
    6446:	0e 2e       	mov	r0, r30
    6448:	3a f0       	brmi	.+14     	; 0x6458 <__divsf3_pse+0x3a>
    644a:	e0 e8       	ldi	r30, 0x80	; 128
    644c:	30 d0       	rcall	.+96     	; 0x64ae <__divsf3_pse+0x90>
    644e:	91 50       	subi	r25, 0x01	; 1
    6450:	50 40       	sbci	r21, 0x00	; 0
    6452:	e6 95       	lsr	r30
    6454:	00 1c       	adc	r0, r0
    6456:	ca f7       	brpl	.-14     	; 0x644a <__divsf3_pse+0x2c>
    6458:	29 d0       	rcall	.+82     	; 0x64ac <__divsf3_pse+0x8e>
    645a:	fe 2f       	mov	r31, r30
    645c:	27 d0       	rcall	.+78     	; 0x64ac <__divsf3_pse+0x8e>
    645e:	66 0f       	add	r22, r22
    6460:	77 1f       	adc	r23, r23
    6462:	88 1f       	adc	r24, r24
    6464:	bb 1f       	adc	r27, r27
    6466:	26 17       	cp	r18, r22
    6468:	37 07       	cpc	r19, r23
    646a:	48 07       	cpc	r20, r24
    646c:	ab 07       	cpc	r26, r27
    646e:	b0 e8       	ldi	r27, 0x80	; 128
    6470:	09 f0       	breq	.+2      	; 0x6474 <__divsf3_pse+0x56>
    6472:	bb 0b       	sbc	r27, r27
    6474:	80 2d       	mov	r24, r0
    6476:	bf 01       	movw	r22, r30
    6478:	ff 27       	eor	r31, r31
    647a:	93 58       	subi	r25, 0x83	; 131
    647c:	5f 4f       	sbci	r21, 0xFF	; 255
    647e:	2a f0       	brmi	.+10     	; 0x648a <__divsf3_pse+0x6c>
    6480:	9e 3f       	cpi	r25, 0xFE	; 254
    6482:	51 05       	cpc	r21, r1
    6484:	68 f0       	brcs	.+26     	; 0x64a0 <__divsf3_pse+0x82>
    6486:	8d c0       	rjmp	.+282    	; 0x65a2 <__fp_inf>
    6488:	d7 c0       	rjmp	.+430    	; 0x6638 <__fp_szero>
    648a:	5f 3f       	cpi	r21, 0xFF	; 255
    648c:	ec f3       	brlt	.-6      	; 0x6488 <__divsf3_pse+0x6a>
    648e:	98 3e       	cpi	r25, 0xE8	; 232
    6490:	dc f3       	brlt	.-10     	; 0x6488 <__divsf3_pse+0x6a>
    6492:	86 95       	lsr	r24
    6494:	77 95       	ror	r23
    6496:	67 95       	ror	r22
    6498:	b7 95       	ror	r27
    649a:	f7 95       	ror	r31
    649c:	9f 5f       	subi	r25, 0xFF	; 255
    649e:	c9 f7       	brne	.-14     	; 0x6492 <__divsf3_pse+0x74>
    64a0:	88 0f       	add	r24, r24
    64a2:	91 1d       	adc	r25, r1
    64a4:	96 95       	lsr	r25
    64a6:	87 95       	ror	r24
    64a8:	97 f9       	bld	r25, 7
    64aa:	08 95       	ret
    64ac:	e1 e0       	ldi	r30, 0x01	; 1
    64ae:	66 0f       	add	r22, r22
    64b0:	77 1f       	adc	r23, r23
    64b2:	88 1f       	adc	r24, r24
    64b4:	bb 1f       	adc	r27, r27
    64b6:	62 17       	cp	r22, r18
    64b8:	73 07       	cpc	r23, r19
    64ba:	84 07       	cpc	r24, r20
    64bc:	ba 07       	cpc	r27, r26
    64be:	20 f0       	brcs	.+8      	; 0x64c8 <__divsf3_pse+0xaa>
    64c0:	62 1b       	sub	r22, r18
    64c2:	73 0b       	sbc	r23, r19
    64c4:	84 0b       	sbc	r24, r20
    64c6:	ba 0b       	sbc	r27, r26
    64c8:	ee 1f       	adc	r30, r30
    64ca:	88 f7       	brcc	.-30     	; 0x64ae <__divsf3_pse+0x90>
    64cc:	e0 95       	com	r30
    64ce:	08 95       	ret

000064d0 <__fixunssfsi>:
    64d0:	98 d0       	rcall	.+304    	; 0x6602 <__fp_splitA>
    64d2:	88 f0       	brcs	.+34     	; 0x64f6 <__fixunssfsi+0x26>
    64d4:	9f 57       	subi	r25, 0x7F	; 127
    64d6:	90 f0       	brcs	.+36     	; 0x64fc <__fixunssfsi+0x2c>
    64d8:	b9 2f       	mov	r27, r25
    64da:	99 27       	eor	r25, r25
    64dc:	b7 51       	subi	r27, 0x17	; 23
    64de:	a0 f0       	brcs	.+40     	; 0x6508 <__fixunssfsi+0x38>
    64e0:	d1 f0       	breq	.+52     	; 0x6516 <__fixunssfsi+0x46>
    64e2:	66 0f       	add	r22, r22
    64e4:	77 1f       	adc	r23, r23
    64e6:	88 1f       	adc	r24, r24
    64e8:	99 1f       	adc	r25, r25
    64ea:	1a f0       	brmi	.+6      	; 0x64f2 <__fixunssfsi+0x22>
    64ec:	ba 95       	dec	r27
    64ee:	c9 f7       	brne	.-14     	; 0x64e2 <__fixunssfsi+0x12>
    64f0:	12 c0       	rjmp	.+36     	; 0x6516 <__fixunssfsi+0x46>
    64f2:	b1 30       	cpi	r27, 0x01	; 1
    64f4:	81 f0       	breq	.+32     	; 0x6516 <__fixunssfsi+0x46>
    64f6:	9f d0       	rcall	.+318    	; 0x6636 <__fp_zero>
    64f8:	b1 e0       	ldi	r27, 0x01	; 1
    64fa:	08 95       	ret
    64fc:	9c c0       	rjmp	.+312    	; 0x6636 <__fp_zero>
    64fe:	67 2f       	mov	r22, r23
    6500:	78 2f       	mov	r23, r24
    6502:	88 27       	eor	r24, r24
    6504:	b8 5f       	subi	r27, 0xF8	; 248
    6506:	39 f0       	breq	.+14     	; 0x6516 <__fixunssfsi+0x46>
    6508:	b9 3f       	cpi	r27, 0xF9	; 249
    650a:	cc f3       	brlt	.-14     	; 0x64fe <__fixunssfsi+0x2e>
    650c:	86 95       	lsr	r24
    650e:	77 95       	ror	r23
    6510:	67 95       	ror	r22
    6512:	b3 95       	inc	r27
    6514:	d9 f7       	brne	.-10     	; 0x650c <__fixunssfsi+0x3c>
    6516:	3e f4       	brtc	.+14     	; 0x6526 <__fixunssfsi+0x56>
    6518:	90 95       	com	r25
    651a:	80 95       	com	r24
    651c:	70 95       	com	r23
    651e:	61 95       	neg	r22
    6520:	7f 4f       	sbci	r23, 0xFF	; 255
    6522:	8f 4f       	sbci	r24, 0xFF	; 255
    6524:	9f 4f       	sbci	r25, 0xFF	; 255
    6526:	08 95       	ret

00006528 <__floatunsisf>:
    6528:	e8 94       	clt
    652a:	09 c0       	rjmp	.+18     	; 0x653e <__floatsisf+0x12>

0000652c <__floatsisf>:
    652c:	97 fb       	bst	r25, 7
    652e:	3e f4       	brtc	.+14     	; 0x653e <__floatsisf+0x12>
    6530:	90 95       	com	r25
    6532:	80 95       	com	r24
    6534:	70 95       	com	r23
    6536:	61 95       	neg	r22
    6538:	7f 4f       	sbci	r23, 0xFF	; 255
    653a:	8f 4f       	sbci	r24, 0xFF	; 255
    653c:	9f 4f       	sbci	r25, 0xFF	; 255
    653e:	99 23       	and	r25, r25
    6540:	a9 f0       	breq	.+42     	; 0x656c <__floatsisf+0x40>
    6542:	f9 2f       	mov	r31, r25
    6544:	96 e9       	ldi	r25, 0x96	; 150
    6546:	bb 27       	eor	r27, r27
    6548:	93 95       	inc	r25
    654a:	f6 95       	lsr	r31
    654c:	87 95       	ror	r24
    654e:	77 95       	ror	r23
    6550:	67 95       	ror	r22
    6552:	b7 95       	ror	r27
    6554:	f1 11       	cpse	r31, r1
    6556:	f8 cf       	rjmp	.-16     	; 0x6548 <__floatsisf+0x1c>
    6558:	fa f4       	brpl	.+62     	; 0x6598 <__floatsisf+0x6c>
    655a:	bb 0f       	add	r27, r27
    655c:	11 f4       	brne	.+4      	; 0x6562 <__floatsisf+0x36>
    655e:	60 ff       	sbrs	r22, 0
    6560:	1b c0       	rjmp	.+54     	; 0x6598 <__floatsisf+0x6c>
    6562:	6f 5f       	subi	r22, 0xFF	; 255
    6564:	7f 4f       	sbci	r23, 0xFF	; 255
    6566:	8f 4f       	sbci	r24, 0xFF	; 255
    6568:	9f 4f       	sbci	r25, 0xFF	; 255
    656a:	16 c0       	rjmp	.+44     	; 0x6598 <__floatsisf+0x6c>
    656c:	88 23       	and	r24, r24
    656e:	11 f0       	breq	.+4      	; 0x6574 <__floatsisf+0x48>
    6570:	96 e9       	ldi	r25, 0x96	; 150
    6572:	11 c0       	rjmp	.+34     	; 0x6596 <__floatsisf+0x6a>
    6574:	77 23       	and	r23, r23
    6576:	21 f0       	breq	.+8      	; 0x6580 <__floatsisf+0x54>
    6578:	9e e8       	ldi	r25, 0x8E	; 142
    657a:	87 2f       	mov	r24, r23
    657c:	76 2f       	mov	r23, r22
    657e:	05 c0       	rjmp	.+10     	; 0x658a <__floatsisf+0x5e>
    6580:	66 23       	and	r22, r22
    6582:	71 f0       	breq	.+28     	; 0x65a0 <__floatsisf+0x74>
    6584:	96 e8       	ldi	r25, 0x86	; 134
    6586:	86 2f       	mov	r24, r22
    6588:	70 e0       	ldi	r23, 0x00	; 0
    658a:	60 e0       	ldi	r22, 0x00	; 0
    658c:	2a f0       	brmi	.+10     	; 0x6598 <__floatsisf+0x6c>
    658e:	9a 95       	dec	r25
    6590:	66 0f       	add	r22, r22
    6592:	77 1f       	adc	r23, r23
    6594:	88 1f       	adc	r24, r24
    6596:	da f7       	brpl	.-10     	; 0x658e <__floatsisf+0x62>
    6598:	88 0f       	add	r24, r24
    659a:	96 95       	lsr	r25
    659c:	87 95       	ror	r24
    659e:	97 f9       	bld	r25, 7
    65a0:	08 95       	ret

000065a2 <__fp_inf>:
    65a2:	97 f9       	bld	r25, 7
    65a4:	9f 67       	ori	r25, 0x7F	; 127
    65a6:	80 e8       	ldi	r24, 0x80	; 128
    65a8:	70 e0       	ldi	r23, 0x00	; 0
    65aa:	60 e0       	ldi	r22, 0x00	; 0
    65ac:	08 95       	ret

000065ae <__fp_nan>:
    65ae:	9f ef       	ldi	r25, 0xFF	; 255
    65b0:	80 ec       	ldi	r24, 0xC0	; 192
    65b2:	08 95       	ret

000065b4 <__fp_pscA>:
    65b4:	00 24       	eor	r0, r0
    65b6:	0a 94       	dec	r0
    65b8:	16 16       	cp	r1, r22
    65ba:	17 06       	cpc	r1, r23
    65bc:	18 06       	cpc	r1, r24
    65be:	09 06       	cpc	r0, r25
    65c0:	08 95       	ret

000065c2 <__fp_pscB>:
    65c2:	00 24       	eor	r0, r0
    65c4:	0a 94       	dec	r0
    65c6:	12 16       	cp	r1, r18
    65c8:	13 06       	cpc	r1, r19
    65ca:	14 06       	cpc	r1, r20
    65cc:	05 06       	cpc	r0, r21
    65ce:	08 95       	ret

000065d0 <__fp_round>:
    65d0:	09 2e       	mov	r0, r25
    65d2:	03 94       	inc	r0
    65d4:	00 0c       	add	r0, r0
    65d6:	11 f4       	brne	.+4      	; 0x65dc <__fp_round+0xc>
    65d8:	88 23       	and	r24, r24
    65da:	52 f0       	brmi	.+20     	; 0x65f0 <__fp_round+0x20>
    65dc:	bb 0f       	add	r27, r27
    65de:	40 f4       	brcc	.+16     	; 0x65f0 <__fp_round+0x20>
    65e0:	bf 2b       	or	r27, r31
    65e2:	11 f4       	brne	.+4      	; 0x65e8 <__fp_round+0x18>
    65e4:	60 ff       	sbrs	r22, 0
    65e6:	04 c0       	rjmp	.+8      	; 0x65f0 <__fp_round+0x20>
    65e8:	6f 5f       	subi	r22, 0xFF	; 255
    65ea:	7f 4f       	sbci	r23, 0xFF	; 255
    65ec:	8f 4f       	sbci	r24, 0xFF	; 255
    65ee:	9f 4f       	sbci	r25, 0xFF	; 255
    65f0:	08 95       	ret

000065f2 <__fp_split3>:
    65f2:	57 fd       	sbrc	r21, 7
    65f4:	90 58       	subi	r25, 0x80	; 128
    65f6:	44 0f       	add	r20, r20
    65f8:	55 1f       	adc	r21, r21
    65fa:	59 f0       	breq	.+22     	; 0x6612 <__fp_splitA+0x10>
    65fc:	5f 3f       	cpi	r21, 0xFF	; 255
    65fe:	71 f0       	breq	.+28     	; 0x661c <__fp_splitA+0x1a>
    6600:	47 95       	ror	r20

00006602 <__fp_splitA>:
    6602:	88 0f       	add	r24, r24
    6604:	97 fb       	bst	r25, 7
    6606:	99 1f       	adc	r25, r25
    6608:	61 f0       	breq	.+24     	; 0x6622 <__fp_splitA+0x20>
    660a:	9f 3f       	cpi	r25, 0xFF	; 255
    660c:	79 f0       	breq	.+30     	; 0x662c <__fp_splitA+0x2a>
    660e:	87 95       	ror	r24
    6610:	08 95       	ret
    6612:	12 16       	cp	r1, r18
    6614:	13 06       	cpc	r1, r19
    6616:	14 06       	cpc	r1, r20
    6618:	55 1f       	adc	r21, r21
    661a:	f2 cf       	rjmp	.-28     	; 0x6600 <__fp_split3+0xe>
    661c:	46 95       	lsr	r20
    661e:	f1 df       	rcall	.-30     	; 0x6602 <__fp_splitA>
    6620:	08 c0       	rjmp	.+16     	; 0x6632 <__fp_splitA+0x30>
    6622:	16 16       	cp	r1, r22
    6624:	17 06       	cpc	r1, r23
    6626:	18 06       	cpc	r1, r24
    6628:	99 1f       	adc	r25, r25
    662a:	f1 cf       	rjmp	.-30     	; 0x660e <__fp_splitA+0xc>
    662c:	86 95       	lsr	r24
    662e:	71 05       	cpc	r23, r1
    6630:	61 05       	cpc	r22, r1
    6632:	08 94       	sec
    6634:	08 95       	ret

00006636 <__fp_zero>:
    6636:	e8 94       	clt

00006638 <__fp_szero>:
    6638:	bb 27       	eor	r27, r27
    663a:	66 27       	eor	r22, r22
    663c:	77 27       	eor	r23, r23
    663e:	cb 01       	movw	r24, r22
    6640:	97 f9       	bld	r25, 7
    6642:	08 95       	ret

00006644 <__udivmodsi4>:
    6644:	a1 e2       	ldi	r26, 0x21	; 33
    6646:	1a 2e       	mov	r1, r26
    6648:	aa 1b       	sub	r26, r26
    664a:	bb 1b       	sub	r27, r27
    664c:	fd 01       	movw	r30, r26
    664e:	0d c0       	rjmp	.+26     	; 0x666a <__udivmodsi4_ep>

00006650 <__udivmodsi4_loop>:
    6650:	aa 1f       	adc	r26, r26
    6652:	bb 1f       	adc	r27, r27
    6654:	ee 1f       	adc	r30, r30
    6656:	ff 1f       	adc	r31, r31
    6658:	a2 17       	cp	r26, r18
    665a:	b3 07       	cpc	r27, r19
    665c:	e4 07       	cpc	r30, r20
    665e:	f5 07       	cpc	r31, r21
    6660:	20 f0       	brcs	.+8      	; 0x666a <__udivmodsi4_ep>
    6662:	a2 1b       	sub	r26, r18
    6664:	b3 0b       	sbc	r27, r19
    6666:	e4 0b       	sbc	r30, r20
    6668:	f5 0b       	sbc	r31, r21

0000666a <__udivmodsi4_ep>:
    666a:	66 1f       	adc	r22, r22
    666c:	77 1f       	adc	r23, r23
    666e:	88 1f       	adc	r24, r24
    6670:	99 1f       	adc	r25, r25
    6672:	1a 94       	dec	r1
    6674:	69 f7       	brne	.-38     	; 0x6650 <__udivmodsi4_loop>
    6676:	60 95       	com	r22
    6678:	70 95       	com	r23
    667a:	80 95       	com	r24
    667c:	90 95       	com	r25
    667e:	9b 01       	movw	r18, r22
    6680:	ac 01       	movw	r20, r24
    6682:	bd 01       	movw	r22, r26
    6684:	cf 01       	movw	r24, r30
    6686:	08 95       	ret

00006688 <__tablejump2__>:
    6688:	ee 0f       	add	r30, r30
    668a:	ff 1f       	adc	r31, r31

0000668c <__tablejump__>:
    668c:	05 90       	lpm	r0, Z+
    668e:	f4 91       	lpm	r31, Z
    6690:	e0 2d       	mov	r30, r0
    6692:	09 94       	ijmp

00006694 <__umulhisi3>:
    6694:	a2 9f       	mul	r26, r18
    6696:	b0 01       	movw	r22, r0
    6698:	b3 9f       	mul	r27, r19
    669a:	c0 01       	movw	r24, r0
    669c:	a3 9f       	mul	r26, r19
    669e:	70 0d       	add	r23, r0
    66a0:	81 1d       	adc	r24, r1
    66a2:	11 24       	eor	r1, r1
    66a4:	91 1d       	adc	r25, r1
    66a6:	b2 9f       	mul	r27, r18
    66a8:	70 0d       	add	r23, r0
    66aa:	81 1d       	adc	r24, r1
    66ac:	11 24       	eor	r1, r1
    66ae:	91 1d       	adc	r25, r1
    66b0:	08 95       	ret

000066b2 <__muluhisi3>:
    66b2:	f0 df       	rcall	.-32     	; 0x6694 <__umulhisi3>
    66b4:	a5 9f       	mul	r26, r21
    66b6:	90 0d       	add	r25, r0
    66b8:	b4 9f       	mul	r27, r20
    66ba:	90 0d       	add	r25, r0
    66bc:	a4 9f       	mul	r26, r20
    66be:	80 0d       	add	r24, r0
    66c0:	91 1d       	adc	r25, r1
    66c2:	11 24       	eor	r1, r1
    66c4:	08 95       	ret

000066c6 <__umoddi3>:
    66c6:	68 94       	set
    66c8:	01 c0       	rjmp	.+2      	; 0x66cc <__udivdi3_umoddi3>

000066ca <__udivdi3>:
    66ca:	e8 94       	clt

000066cc <__udivdi3_umoddi3>:
    66cc:	8f 92       	push	r8
    66ce:	9f 92       	push	r9
    66d0:	cf 93       	push	r28
    66d2:	df 93       	push	r29
    66d4:	05 d0       	rcall	.+10     	; 0x66e0 <__udivmod64>
    66d6:	df 91       	pop	r29
    66d8:	cf 91       	pop	r28
    66da:	9f 90       	pop	r9
    66dc:	8f 90       	pop	r8
    66de:	08 95       	ret

000066e0 <__udivmod64>:
    66e0:	88 24       	eor	r8, r8
    66e2:	99 24       	eor	r9, r9
    66e4:	f4 01       	movw	r30, r8
    66e6:	e4 01       	movw	r28, r8
    66e8:	b0 e4       	ldi	r27, 0x40	; 64
    66ea:	9f 93       	push	r25
    66ec:	aa 27       	eor	r26, r26
    66ee:	9a 15       	cp	r25, r10
    66f0:	8b 04       	cpc	r8, r11
    66f2:	9c 04       	cpc	r9, r12
    66f4:	ed 05       	cpc	r30, r13
    66f6:	fe 05       	cpc	r31, r14
    66f8:	cf 05       	cpc	r28, r15
    66fa:	d0 07       	cpc	r29, r16
    66fc:	a1 07       	cpc	r26, r17
    66fe:	98 f4       	brcc	.+38     	; 0x6726 <__udivmod64+0x46>
    6700:	ad 2f       	mov	r26, r29
    6702:	dc 2f       	mov	r29, r28
    6704:	cf 2f       	mov	r28, r31
    6706:	fe 2f       	mov	r31, r30
    6708:	e9 2d       	mov	r30, r9
    670a:	98 2c       	mov	r9, r8
    670c:	89 2e       	mov	r8, r25
    670e:	98 2f       	mov	r25, r24
    6710:	87 2f       	mov	r24, r23
    6712:	76 2f       	mov	r23, r22
    6714:	65 2f       	mov	r22, r21
    6716:	54 2f       	mov	r21, r20
    6718:	43 2f       	mov	r20, r19
    671a:	32 2f       	mov	r19, r18
    671c:	22 27       	eor	r18, r18
    671e:	b8 50       	subi	r27, 0x08	; 8
    6720:	31 f7       	brne	.-52     	; 0x66ee <__udivmod64+0xe>
    6722:	bf 91       	pop	r27
    6724:	27 c0       	rjmp	.+78     	; 0x6774 <__udivmod64+0x94>
    6726:	1b 2e       	mov	r1, r27
    6728:	bf 91       	pop	r27
    672a:	bb 27       	eor	r27, r27
    672c:	22 0f       	add	r18, r18
    672e:	33 1f       	adc	r19, r19
    6730:	44 1f       	adc	r20, r20
    6732:	55 1f       	adc	r21, r21
    6734:	66 1f       	adc	r22, r22
    6736:	77 1f       	adc	r23, r23
    6738:	88 1f       	adc	r24, r24
    673a:	99 1f       	adc	r25, r25
    673c:	88 1c       	adc	r8, r8
    673e:	99 1c       	adc	r9, r9
    6740:	ee 1f       	adc	r30, r30
    6742:	ff 1f       	adc	r31, r31
    6744:	cc 1f       	adc	r28, r28
    6746:	dd 1f       	adc	r29, r29
    6748:	aa 1f       	adc	r26, r26
    674a:	bb 1f       	adc	r27, r27
    674c:	8a 14       	cp	r8, r10
    674e:	9b 04       	cpc	r9, r11
    6750:	ec 05       	cpc	r30, r12
    6752:	fd 05       	cpc	r31, r13
    6754:	ce 05       	cpc	r28, r14
    6756:	df 05       	cpc	r29, r15
    6758:	a0 07       	cpc	r26, r16
    675a:	b1 07       	cpc	r27, r17
    675c:	48 f0       	brcs	.+18     	; 0x6770 <__udivmod64+0x90>
    675e:	8a 18       	sub	r8, r10
    6760:	9b 08       	sbc	r9, r11
    6762:	ec 09       	sbc	r30, r12
    6764:	fd 09       	sbc	r31, r13
    6766:	ce 09       	sbc	r28, r14
    6768:	df 09       	sbc	r29, r15
    676a:	a0 0b       	sbc	r26, r16
    676c:	b1 0b       	sbc	r27, r17
    676e:	21 60       	ori	r18, 0x01	; 1
    6770:	1a 94       	dec	r1
    6772:	e1 f6       	brne	.-72     	; 0x672c <__udivmod64+0x4c>
    6774:	2e f4       	brtc	.+10     	; 0x6780 <__udivmod64+0xa0>
    6776:	94 01       	movw	r18, r8
    6778:	af 01       	movw	r20, r30
    677a:	be 01       	movw	r22, r28
    677c:	cd 01       	movw	r24, r26
    677e:	00 0c       	add	r0, r0
    6780:	08 95       	ret

00006782 <__negdi2>:
    6782:	60 95       	com	r22
    6784:	70 95       	com	r23
    6786:	80 95       	com	r24
    6788:	90 95       	com	r25
    678a:	30 95       	com	r19
    678c:	40 95       	com	r20
    678e:	50 95       	com	r21
    6790:	21 95       	neg	r18
    6792:	3f 4f       	sbci	r19, 0xFF	; 255
    6794:	4f 4f       	sbci	r20, 0xFF	; 255
    6796:	5f 4f       	sbci	r21, 0xFF	; 255
    6798:	6f 4f       	sbci	r22, 0xFF	; 255
    679a:	7f 4f       	sbci	r23, 0xFF	; 255
    679c:	8f 4f       	sbci	r24, 0xFF	; 255
    679e:	9f 4f       	sbci	r25, 0xFF	; 255
    67a0:	08 95       	ret

000067a2 <__ashldi3>:
    67a2:	0f 93       	push	r16
    67a4:	08 30       	cpi	r16, 0x08	; 8
    67a6:	90 f0       	brcs	.+36     	; 0x67cc <__ashldi3+0x2a>
    67a8:	98 2f       	mov	r25, r24
    67aa:	87 2f       	mov	r24, r23
    67ac:	76 2f       	mov	r23, r22
    67ae:	65 2f       	mov	r22, r21
    67b0:	54 2f       	mov	r21, r20
    67b2:	43 2f       	mov	r20, r19
    67b4:	32 2f       	mov	r19, r18
    67b6:	22 27       	eor	r18, r18
    67b8:	08 50       	subi	r16, 0x08	; 8
    67ba:	f4 cf       	rjmp	.-24     	; 0x67a4 <__ashldi3+0x2>
    67bc:	22 0f       	add	r18, r18
    67be:	33 1f       	adc	r19, r19
    67c0:	44 1f       	adc	r20, r20
    67c2:	55 1f       	adc	r21, r21
    67c4:	66 1f       	adc	r22, r22
    67c6:	77 1f       	adc	r23, r23
    67c8:	88 1f       	adc	r24, r24
    67ca:	99 1f       	adc	r25, r25
    67cc:	0a 95       	dec	r16
    67ce:	b2 f7       	brpl	.-20     	; 0x67bc <__ashldi3+0x1a>
    67d0:	0f 91       	pop	r16
    67d2:	08 95       	ret

000067d4 <__ashrdi3>:
    67d4:	97 fb       	bst	r25, 7
    67d6:	10 f8       	bld	r1, 0

000067d8 <__lshrdi3>:
    67d8:	16 94       	lsr	r1
    67da:	00 08       	sbc	r0, r0
    67dc:	0f 93       	push	r16
    67de:	08 30       	cpi	r16, 0x08	; 8
    67e0:	98 f0       	brcs	.+38     	; 0x6808 <__lshrdi3+0x30>
    67e2:	08 50       	subi	r16, 0x08	; 8
    67e4:	23 2f       	mov	r18, r19
    67e6:	34 2f       	mov	r19, r20
    67e8:	45 2f       	mov	r20, r21
    67ea:	56 2f       	mov	r21, r22
    67ec:	67 2f       	mov	r22, r23
    67ee:	78 2f       	mov	r23, r24
    67f0:	89 2f       	mov	r24, r25
    67f2:	90 2d       	mov	r25, r0
    67f4:	f4 cf       	rjmp	.-24     	; 0x67de <__lshrdi3+0x6>
    67f6:	05 94       	asr	r0
    67f8:	97 95       	ror	r25
    67fa:	87 95       	ror	r24
    67fc:	77 95       	ror	r23
    67fe:	67 95       	ror	r22
    6800:	57 95       	ror	r21
    6802:	47 95       	ror	r20
    6804:	37 95       	ror	r19
    6806:	27 95       	ror	r18
    6808:	0a 95       	dec	r16
    680a:	aa f7       	brpl	.-22     	; 0x67f6 <__lshrdi3+0x1e>
    680c:	0f 91       	pop	r16
    680e:	08 95       	ret

00006810 <__adddi3>:
    6810:	2a 0d       	add	r18, r10
    6812:	3b 1d       	adc	r19, r11
    6814:	4c 1d       	adc	r20, r12
    6816:	5d 1d       	adc	r21, r13
    6818:	6e 1d       	adc	r22, r14
    681a:	7f 1d       	adc	r23, r15
    681c:	80 1f       	adc	r24, r16
    681e:	91 1f       	adc	r25, r17
    6820:	08 95       	ret

00006822 <__adddi3_s8>:
    6822:	00 24       	eor	r0, r0
    6824:	a7 fd       	sbrc	r26, 7
    6826:	00 94       	com	r0
    6828:	2a 0f       	add	r18, r26
    682a:	30 1d       	adc	r19, r0
    682c:	40 1d       	adc	r20, r0
    682e:	50 1d       	adc	r21, r0
    6830:	60 1d       	adc	r22, r0
    6832:	70 1d       	adc	r23, r0
    6834:	80 1d       	adc	r24, r0
    6836:	90 1d       	adc	r25, r0
    6838:	08 95       	ret

0000683a <__cmpdi2_s8>:
    683a:	00 24       	eor	r0, r0
    683c:	a7 fd       	sbrc	r26, 7
    683e:	00 94       	com	r0
    6840:	2a 17       	cp	r18, r26
    6842:	30 05       	cpc	r19, r0
    6844:	40 05       	cpc	r20, r0
    6846:	50 05       	cpc	r21, r0
    6848:	60 05       	cpc	r22, r0
    684a:	70 05       	cpc	r23, r0
    684c:	80 05       	cpc	r24, r0
    684e:	90 05       	cpc	r25, r0
    6850:	08 95       	ret

00006852 <_exit>:
    6852:	f8 94       	cli

00006854 <__stop_program>:
    6854:	ff cf       	rjmp	.-2      	; 0x6854 <__stop_program>
